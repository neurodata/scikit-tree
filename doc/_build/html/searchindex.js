Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_iris_dtc", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/plot_oblique_random_forest", "auto_examples/plot_overlapping_gaussians", "auto_examples/plot_projection_matrices", "auto_examples/sg_execution_times", "generated/sktree.ExtraTreesClassifier", "generated/sktree.ExtraTreesRegressor", "generated/sktree.HonestForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.RandomForestClassifier", "generated/sktree.RandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.experimental.monte_carlo.conditional_resample", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.2"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_iris_dtc.rst", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/plot_oblique_random_forest.rst", "auto_examples/plot_overlapping_gaussians.rst", "auto_examples/plot_projection_matrices.rst", "auto_examples/sg_execution_times.rst", "generated/sktree.ExtraTreesClassifier.rst", "generated/sktree.ExtraTreesRegressor.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.RandomForestClassifier.rst", "generated/sktree.RandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.experimental.monte_carlo.conditional_resample.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.2.rst"], "titles": ["API Documentation", "Examples", "Plot the decision surface of decision trees trained on the iris dataset", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Plot honest forest calibrations on overlapping gaussian simulations", "Plot the projection matrices of an oblique tree", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.experimental.monte_carlo.conditional_resample", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "What\u2019s new?", "What\u2019s new?"], "terms": {"sktree": [0, 2, 3, 4, 5, 6, 37, 39], "manifold": [0, 6, 14, 15, 31, 32, 38, 45], "obliqu": [0, 1, 2, 7, 12, 13, 14, 15, 18, 29, 30, 31, 32, 34, 36, 37, 41, 42, 45], "random": [0, 1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 39, 41, 42, 45], "forest": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 41, 42, 45], "we": [0, 2, 5, 6, 10, 20, 21, 25, 36, 37, 38, 39, 40, 45, 46], "provid": [0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "drop": [0, 3, 4, 39], "replac": [0, 20, 38], "featur": [0, 2, 3, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 39, 40, 42, 43, 44, 45, 46], "have": [0, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "develop": [0, 37, 46], "These": [0, 6, 38], "ar": [0, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 43], "still": [0, 6, 10], "compat": [0, 6, 18, 19, 33, 34], "all": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 40, 41, 43, 45], "capabl": 0, "bin": [0, 5, 8, 9, 16, 17], "which": [0, 3, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40], "theoret": [0, 5], "improv": [0, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34, 38, 39, 45, 46], "runtim": [0, 39], "signficantli": 0, "high": [0, 3, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "dimension": [0, 24, 26, 40, 45], "sampl": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 45], "size": [0, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 39], "data": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40, 45], "see": [0, 2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40], "_lib": [0, 2, 6], "sklearn": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 28, 29, 30, 31, 32, 33, 34, 37, 39, 40], "ensembl": [0, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 38], "randomforestclassifi": [0, 3, 4, 5, 8, 9, 12, 14], "randomforestregressor": [0, 8, 9, 13, 15], "extratreesclassifi": [0, 9, 16], "extratreesregressor": [0, 8, 17], "decis": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 38, 41, 42, 46], "model": [0, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40, 45], "tradition": 0, "implement": [0, 6, 8, 9, 10, 20, 29, 30, 38, 39, 45], "axi": [0, 1, 2, 5, 6, 7, 12, 13, 14, 15, 29, 30, 31, 32, 38, 39, 41, 45], "align": [0, 1, 2, 7, 12, 13, 14, 15, 29, 30, 31, 32, 38, 39, 41], "split": [0, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40], "store": [0, 8, 9, 16, 17, 18, 19, 38, 39], "mean": [0, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 38, 42, 45], "outcom": 0, "i": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45], "e": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39], "label": [0, 2, 3, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 39, 40], "vote": [0, 8, 10, 12, 14, 16, 18, 19, 28], "leaf": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35, 39], "node": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40], "howev": [0, 39], "more": [0, 2, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 38, 39], "exot": 0, "possibl": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 40], "call": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 24, 25, 27, 30, 31, 32], "some": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39, 41], "multipl": [0, 6, 11, 20, 39], "column": [0, 3, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 39, 45], "creat": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 37, 38], "new": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 43], "valu": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39], "thi": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 43], "can": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 45], "take": [0, 2, 18, 19, 20, 24, 33, 34], "form": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 39], "spars": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 38, 39, 41], "linear": [0, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "combin": [0, 2, 12, 13, 18, 29, 30, 34, 38, 39, 40], "even": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "advantag": 0, "structur": [0, 2, 6, 10, 20, 28, 31, 32, 40, 45], "g": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 39], "an": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45], "imag": [0, 6, 31, 32], "indic": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 28, 29, 30, 31, 32, 33, 34, 39], "awar": [0, 31, 32], "fashion": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 39], "class": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 38, 40], "gener": [0, 1, 2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 38, 39, 40, 41, 45], "while": [0, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "everyth": [0, 41], "els": [0, 4], "consist": [0, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 32, 33, 34, 39], "how": [0, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 41], "build": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 36, 37, 46], "us": [0, 1, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 24, 28, 30, 32, 33, 34, 35, 36, 37, 38, 40, 42], "classif": [0, 3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 42], "regress": [0, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 42], "thei": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 39], "also": [0, 2, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 39], "power": [0, 38], "non": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "parametr": [0, 39], "embed": 0, "cluster": [0, 5, 18, 19, 33, 34, 40], "The": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40], "randomtreesembed": 0, "exampl": [0, 2, 3, 4, 5, 6, 8, 9, 10, 13, 14, 15, 16, 17, 18, 19, 24, 28, 30, 32, 33, 34, 36, 40], "other": [0, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "state": 0, "art": 0, "explicitli": 0, "base": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39, 40, 46], "criterion": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 42, 45], "varianc": [0, 9, 10, 13, 15, 17, 18, 19, 24, 28, 30, 32, 33, 34, 38, 40], "bic": [0, 18, 19, 33, 34, 42], "compris": [0, 31, 32], "those": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 26, 28, 29, 30, 38, 39], "avail": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 37], "standalon": 0, "inher": [0, 18, 19], "produc": 0, "like": [0, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 37, 39, 40], "extract": [0, 4], "pairwis": 0, "from": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 26, 27, 28, 29, 30, 32, 36, 38, 39, 40], "includ": [0, 5, 8, 10, 11, 12, 14, 16, 24, 28, 29, 31, 45, 46], "correct": 0, "turn": 0, "proper": 0, "In": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29, 30, 31, 32, 33, 34, 38, 39, 40, 46], "addit": [0, 8, 9, 11, 16, 17, 18, 19, 33, 34, 39], "leav": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35], "natur": [0, 25, 40], "wai": [0, 20, 40], "comput": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 45], "neighbor": [0, 5, 11, 20, 24], "nearest": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 28, 29, 30, 31, 32, 33, 34], "interfac": 0, "similar": [0, 12, 13, 14, 15, 18, 19, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 45], "nearestneighbor": [0, 11, 20, 24], "work": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "progress": 0, "help": [0, 28, 29, 30, 31, 32], "simul": [0, 1, 7, 12, 38, 41], "evalu": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 42], "mutual": [0, 21, 23, 24, 25, 27, 45, 46], "inform": [0, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40, 45, 46], "mi": [0, 24, 26], "condit": [0, 14, 15, 20, 21, 24, 31, 32, 45], "cmi": [0, 21, 24, 26], "specif": [0, 6, 8, 10, 12, 14, 16, 39], "multivari": [0, 3, 6, 21, 22, 23, 26, 31, 32], "gaussian": [0, 1, 7, 21, 22, 23, 26, 40, 41], "analyt": [0, 21, 22, 23, 24, 26], "solut": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24], "entropi": [0, 8, 10, 12, 14, 16, 21, 22, 23, 26, 28, 29, 31], "distribut": [0, 3, 20, 21, 22, 23, 25, 26, 27, 39, 40], "demonstr": [1, 6, 41], "scikit": [1, 2, 6, 18, 19, 33, 34, 37, 38, 39, 43, 45, 46], "tree": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 37, 38, 42, 43, 45, 46], "algorithm": [1, 11, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 39, 41], "plot": [1, 7, 12, 29, 31, 38, 41], "honest": [1, 7, 10, 28, 41, 42], "calibr": [1, 7, 39, 41], "overlap": [1, 7, 41], "predict": [1, 2, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 39, 41], "cc18": [1, 7, 38, 41], "dataset": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41], "pariti": [1, 7, 12, 38, 41], "surfac": [1, 6, 7, 29, 41], "train": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 41], "iri": [1, 7, 28, 29, 39, 41], "project": [1, 4, 7, 12, 13, 29, 30, 31, 37, 38, 39, 41, 45, 46], "matric": [1, 7, 18, 19, 20, 31, 39, 41, 45], "download": [1, 2, 3, 4, 5, 6, 41], "python": [1, 2, 3, 4, 5, 6, 37, 41], "sourc": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41], "code": [1, 2, 3, 4, 5, 6, 33, 34, 37, 41], "auto_examples_python": [1, 41], "zip": [1, 2, 5, 41], "jupyt": [1, 2, 3, 4, 5, 6, 41], "notebook": [1, 2, 3, 4, 5, 6, 41], "auto_examples_jupyt": [1, 41], "galleri": [1, 2, 3, 4, 5, 6, 41], "sphinx": [1, 2, 3, 4, 5, 6, 41], "go": [2, 3, 4, 5, 6], "end": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35], "full": [2, 3, 4, 5, 6], "pair": [2, 35, 39], "estim": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 45, 46], "For": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40], "each": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40], "learn": [2, 8, 9, 10, 12, 13, 16, 17, 18, 19, 28, 29, 30, 33, 34, 36, 37, 38, 39, 40, 41], "boundari": [2, 6, 11, 14, 15, 31, 32, 45], "made": 2, "simpl": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "threshold": [2, 39], "rule": 2, "infer": [2, 28, 29, 30, 31, 32], "same": [2, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 31, 32, 35, 38, 39], "regular": [2, 5], "show": [2, 3, 5, 6], "built": [2, 38, 39], "first": [2, 3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39], "load": [2, 4], "copi": [2, 20], "ship": 2, "import": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 39, 42], "load_iri": [2, 28, 29, 39], "matplotlib": [2, 3, 4, 5, 6, 37], "pyplot": [2, 3, 4, 5, 6], "plt": [2, 3, 4, 5, 6], "displai": 2, "function": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 38, 39], "numpi": [2, 3, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 33, 34, 37], "np": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "inspect": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "decisionboundarydisplai": 2, "decisiontreeclassifi": [2, 8, 10, 16, 28, 29, 30], "plot_tre": 2, "obliquedecisiontreeclassifi": [2, 12, 14, 30, 39], "paramet": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40], "n_class": [2, 8, 10, 12, 13, 14, 16, 28, 29, 31], "3": [2, 3, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 46], "plot_color": 2, "ryb": 2, "plot_step": 2, "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 43], "02": 2, "clf_label": 2, "random_st": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34], "123456": [2, 3, 4], "clf": [2, 3, 4, 5, 8, 10, 12, 16, 28, 29, 39], "fig": [2, 3, 4, 5, 6], "ax": [2, 3, 4, 5, 6, 39], "subplot": [2, 3, 4, 5, 6], "2": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 37, 39, 40], "flatten": [2, 6], "pairidx": 2, "enumer": [2, 3, 4, 6, 10, 12, 13, 14, 15, 16, 17], "1": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 43], "onli": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "two": [2, 4, 5, 18, 19, 38, 39, 42, 45], "correspond": [2, 8, 10, 12, 14, 15, 16, 28, 29, 30, 31, 32, 33, 34], "x": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 40], "y": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 39], "target": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 39], "fit": [2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39], "tight_layout": [2, 5], "h_pad": 2, "5": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39], "w_pad": 2, "pad": 2, "from_estim": 2, "cmap": [2, 6], "cm": [2, 5], "rdylbu": 2, "response_method": 2, "xlabel": 2, "feature_nam": 2, "ylabel": 2, "point": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 28, 29, 30, 31, 32, 33, 34, 40], "color": [2, 3, 4, 5, 6], "rang": [2, 3, 6, 11, 31, 32], "idx": [2, 6], "where": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 24, 25, 28, 29, 30, 31, 32, 33, 34, 39, 40, 45], "scatter": [2, 5, 6], "c": [2, 5, 23, 28, 29, 30, 31, 32, 37], "target_nam": 2, "edgecolor": [2, 5], "black": [2, 6], "": [2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 43], "15": 2, "suptitl": [2, 6], "f": [2, 3, 4, 6], "legend": [2, 3, 5], "loc": [2, 3, 5], "lower": [2, 10, 24, 25, 27, 28, 39], "right": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "borderpad": 2, "handletextpad": 2, "_": 2, "tight": 2, "user": [2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 45], "adam2392": [2, 5, 6], "document": [2, 6, 36, 38], "plot_iris_dtc": [2, 7], "py": [2, 3, 4, 5, 6, 7], "78": 2, "userwarn": 2, "No": 2, "colormap": 2, "via": [2, 29, 30, 37, 38, 45], "ignor": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "64": [2, 45], "figur": [2, 5, 6], "layout": 2, "ha": [2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39, 45, 46], "chang": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 43, 44, 45, 46], "singl": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "togeth": [2, 39, 40], "fill": 2, "true": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 40], "titl": [2, 6], "total": [2, 3, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 40], "run": [2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34, 37, 39], "time": [2, 3, 4, 5, 6, 17, 18, 19, 25, 29, 30, 31, 32, 35, 39], "script": [2, 3, 4, 5], "minut": [2, 3, 4, 5], "572": [2, 7], "second": [2, 3, 4, 5, 39], "ipynb": [2, 3, 4, 5, 6], "A": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 28, 29, 30, 31, 32, 33, 34, 39, 45], "perform": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 40], "comparison": [3, 4, 16, 17], "between": [3, 4, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 39], "standard": [3, 4, 11, 24, 26, 31, 32, 39], "variat": 3, "noisi": 3, "problem": [3, 8, 10, 12, 14, 16, 28, 29, 31, 36, 42], "itself": [3, 18, 19, 24], "xor": 3, "binari": 3, "task": [3, 36], "dimens": [3, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 31, 32, 33, 34, 39], "uniformli": [3, 6], "n_sampl": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "number": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40], "p": [3, 5, 8, 9, 10, 12, 14, 16, 17, 25, 38], "limit": [3, 11, 42], "carri": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "about": [3, 39], "defin": [3, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 28, 29, 30, 31, 32, 33, 34, 40], "odd": 3, "sum": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "across": [3, 8, 10, 12, 14, 16, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34], "greater": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "than": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 28, 29, 30, 31, 32, 33, 34, 40], "otherwis": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "further": 3, "detail": [3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34], "public": [3, 6, 38], "http": [3, 4, 19, 28, 29, 30, 37, 39], "epub": 3, "siam": 3, "org": [3, 4, 19, 28, 29, 30, 37, 39], "doi": [3, 19, 39], "epdf": 3, "10": [3, 5, 8, 9, 16, 17, 19, 28, 29, 30, 32, 39], "1137": 3, "9781611974973": 3, "56": 3, "It": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 33, 34, 36, 39, 40], "took": [3, 4], "8": [3, 4, 6, 17, 25, 28], "datetim": [3, 4], "panda": [3, 4, 18, 19, 33, 34, 45], "pd": [3, 4, 26], "seaborn": [3, 4], "sn": [3, 4], "model_select": [3, 4, 5, 9, 28, 29, 30, 32], "repeatedkfold": [3, 4], "cross_valid": [3, 4], "obliquerandomforestclassifi": [3, 4, 38], "t0": [3, 4], "now": [3, 4, 6, 37, 45], "def": [3, 4, 5], "sparse_par": 3, "20": [3, 19], "p_star": 3, "random_se": [3, 24, 25, 27], "none": [3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "kwarg": [3, 4], "seed": [3, 18, 19, 24, 25, 26, 27], "uniform": [3, 10, 24, 25, 27, 28], "zero": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "return": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "get_scor": [3, 4], "n_cv": [3, 4], "n_repeat": [3, 4], "tmp": [3, 4], "cv": [3, 4, 5, 28, 29, 30, 32], "n_split": [3, 4], "test_scor": [3, 4], "score": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 29, 30, 31, 32], "accuraci": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 29, 31], "append": [3, 4], "rf": [3, 4, 5, 39], "OF": [3, 4], "df": [3, 4], "datafram": [3, 4, 18, 19, 20, 33, 34], "explod": [3, 4], "astyp": [3, 4, 6], "float": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34], "reset_index": [3, 4], "inplac": [3, 4], "grid": [3, 6], "search": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "hyper": 3, "param": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "max_featur": [3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "n_estim": [3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "100": [3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "max_depth": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "40": 3, "1000": [3, 10, 12, 16, 25, 26, 27], "t_d": 3, "print": [3, 4, 6, 10, 11, 12, 13, 15, 16, 17, 24], "draw": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "figsiz": [3, 5, 6], "6": [3, 4, 6], "stripplot": [3, 4], "dodg": [3, 4], "boxplot": [3, 4], "white": [3, 4], "set_titl": [3, 4], "queri": [3, 4, 11], "iloc": [3, 4], "rff": 3, "test": [3, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 26, 28, 29, 30, 31, 32, 37], "round": [3, 10, 12, 13, 14, 15, 16, 17], "off": [3, 25], "4": [3, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31], "savefig": [3, 5], "plot_sim_": 3, "jpg": 3, "9": [3, 4, 5, 6, 37, 45], "007": [3, 7], "plot_oblique_axis_aligned_forests_sparse_par": [3, 7], "three": 4, "openml": 4, "benchmark": [4, 36], "suit": 4, "name": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "wdbc": 4, "www": [4, 28, 29, 30], "type": [4, 10, 28, 39, 45], "sort": [4, 5, 10, 11, 40], "id": 4, "1510": 4, "phish": 4, "websit": 4, "4534": 4, "31": 4, "former": [4, 17], "entir": [4, 14, 15, 31, 32], "numer": 4, "latter": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "normin": 4, "third": 4, "dub": 4, "cnae": 4, "statu": 4, "activ": [4, 37], "1468": 4, "notabl": 4, "larg": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30], "space": [4, 11, 18, 19, 22, 24, 33, 34, 39], "857": 4, "As": [4, 35, 39], "you": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 37, 41], "notic": 4, "outperform": [4, 39], "util": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "mechan": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "subsampl": [4, 10, 28, 39], "due": [4, 22], "constraint": [4, 8, 9, 16, 17], "phishingwebsit": 4, "11": [4, 45], "fetch_openml": 4, "data_id": 4, "load_cc18": 4, "as_fram": 4, "parser": 4, "d_name": 4, "n": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 37, 39, 40, 45], "int": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "frame": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38], "dtype": [4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "object": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 40], "50": [4, 5], "concat": 4, "uniqu": [4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "set_size_inch": 4, "set_ylabel": [4, 5], "set_xlabel": [4, 5], "12": [4, 6, 7], "839": 4, "plot_oblique_random_forest": [4, 7], "compar": [5, 16, 17, 29, 30, 31, 32, 42], "result": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 39, 40], "variou": [5, 8, 9, 12, 13, 14, 15, 16, 17], "method": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40], "achiev": [5, 9, 17, 36, 38], "guid": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 40, 45], "isoton": 5, "irf": 5, "sigmoid": 5, "sigrf": 5, "without": [5, 40], "curv": [5, 39], "differ": [5, 11, 28, 29, 30, 31, 32, 33, 34, 42, 46], "red": 5, "line": [5, 6], "closest": 5, "ideal": [5, 37], "reproduc": [5, 20], "ronan": [5, 14, 15, 31, 32, 45], "perri": [5, 14, 15, 31, 32, 45], "ronak": [5, 14, 15, 31, 32], "mehta": [5, 14, 15, 31, 32], "richard": 5, "guo": 5, "eva": 5, "yezeret": 5, "jes\u00fa": 5, "arroyo": [5, 14, 15, 31, 32], "mike": 5, "powel": 5, "hayden": 5, "helm": 5, "cencheng": 5, "shen": 5, "joshua": [5, 14, 15, 19, 31, 32], "t": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 28, 29, 30, 31, 32, 33, 34, 39], "vogelstein": [5, 14, 15, 19, 31, 32], "adapt": [5, 18, 19, 22, 40], "quantiti": 5, "arxiv": [5, 14, 15, 31, 32, 38], "2021": 5, "1907": 5, "00325": 5, "necessari": [5, 37], "modul": [5, 6, 36], "librari": [5, 43, 45], "calibratedclassifiercv": 5, "train_test_split": [5, 9], "honestforestclassifi": [5, 45], "classifi": [5, 8, 9, 10, 12, 14, 16, 17, 28, 29, 30, 31], "color_dict": 5, "honestrf": 5, "f41711": 5, "1b9e77": 5, "377eb8": 5, "fdae61": 5, "n_job": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "clf_cv": 5, "rep": 5, "honest_fract": [5, 10, 28], "base_estim": 5, "likelihood": [5, 40], "lik1": 5, "prod": 5, "exp": 5, "asarrai": 5, "lik0": 5, "60000": 5, "n_bin": 5, "calibration_curv": 5, "here": [5, 6, 10, 39, 41, 45, 46], "blob": 5, "contain": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "half": 5, "posit": [5, 8, 16, 38, 40], "neg": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "probabl": [5, 8, 10, 12, 14, 16, 18, 19, 28, 29, 31, 39], "therefor": [5, 10, 12, 13, 14, 15, 16, 17, 31, 32, 38, 39], "center": [5, 18, 19, 33, 34], "make_blob": 5, "shuffl": [5, 10, 12, 13, 15, 16, 17, 20], "fals": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34], "42": [5, 8, 9, 17, 38], "sample_weight": [5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "randomst": [5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 28, 29, 30, 31, 32, 33, 34], "rand": 5, "x_train": [5, 9], "x_test": [5, 9], "y_train": [5, 9], "y_test": [5, 9], "sw_train": 5, "sw_test": 5, "test_siz": 5, "class_one_prob": 5, "predict_proba": [5, 8, 10, 12, 14, 16, 28, 29, 31], "miniforge3": 5, "env": 5, "lib": 5, "python3": 5, "site": 5, "packag": [5, 36, 37], "300": 5, "futurewarn": 5, "wa": [5, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 39], "renam": [5, 8, 9, 16, 17], "version": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36, 37, 39, 43], "remov": 5, "warn": [5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "y_uniqu": 5, "rainbow": 5, "linspac": 5, "this_i": 5, "this_x": 5, "this_sw": 5, "newaxi": 5, "alpha": [5, 6, 25, 27, 28, 29, 30, 31, 32, 33, 34], "k": [5, 8, 9, 11, 24], "best": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "set_xtick": 5, "set_ytick": 5, "clf_name": 5, "prob": 5, "item": 5, "order": [5, 8, 10, 12, 13, 14, 16, 28, 29, 30, 31, 32], "lexsort": 5, "51": 5, "reshap": [5, 6], "25": [5, 6], "x_test_prob": 5, "linewidth": 5, "l": [5, 8, 9, 17, 28, 29, 30, 38, 39, 40], "r": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 24, 25, 28, 29, 30, 31, 32, 37, 39], "truth": [5, 39], "set_ylim": 5, "05": 5, "instanc": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34], "upper": 5, "left": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 39], "overlapping_gaussian": 5, "png": 5, "discuss": 5, "well": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "closer": 5, "shown": [5, 21], "below": 5, "920": 5, "plot_overlapping_gaussian": [5, 7], "patchobliquedecisiontreeclassifi": [6, 14], "one": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40], "specifi": [6, 8, 10, 12, 14, 16, 24, 28, 29, 31, 39], "done": [6, 20, 31, 32, 38], "data_dim": [6, 14, 15, 31, 32], "should": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 37], "set": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40], "n_row": 6, "n_col": 6, "row": [6, 31, 32], "arrai": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 28, 29, 30, 31, 32, 33, 34, 38], "length": [6, 11, 20], "If": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 39], "n_depth": 6, "allow": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 38, 39], "ani": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 45], "robust": [6, 36], "api": [6, 11, 18, 19, 31, 32, 33, 34, 36, 37, 43, 44, 45, 46], "calcul": [6, 35, 40], "dure": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "hyperrectangl": 6, "start": [6, 37], "squar": [6, 9, 13, 15, 17, 30, 32], "min_patch_dim": [6, 14, 15, 31, 32], "max_patch_dim": [6, 14, 15, 31, 32], "constrain": [6, 39], "within": [6, 10, 11, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 37], "bound": [6, 25, 27], "arbitrarili": [6, 9, 13, 15, 17, 30, 32], "hyperparamet": [6, 39], "relat": 6, "note": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 37, 39, 43], "privat": 6, "cython": [6, 33, 34, 37, 46], "what": [6, 28, 29, 30, 31, 32, 33, 34, 36, 43], "look": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 41], "part": 6, "just": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 25, 37], "wrapper": 6, "underli": [6, 28, 29, 30, 31, 32], "actual": 6, "To": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34, 37, 41], "relev": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36], "_criterion": 6, "gini": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "_morf_splitt": 6, "bestpatchsplittertest": 6, "dummi": 6, "sake": 6, "min_samples_leaf": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "min_weight_leaf": 6, "feature_weight": [6, 14, 15, 31, 32], "repeat": [6, 25], "arang": 6, "float32": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "float64": [6, 30, 32], "ones": 6, "our": [6, 36, 39], "th": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "visual": 6, "appear": 6, "make": [6, 38, 45], "contigu": [6, 14, 15, 31, 32], "dim_contigu": [6, 14, 15, 31, 32], "init_test": 6, "matrix": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 39], "proj_mat": 6, "sample_projection_matrix": 6, "nrow": 6, "ncol": 6, "sharex": 6, "sharei": 6, "squeez": 6, "imshow": 6, "viridi": 6, "xlim": 6, "ylim": 6, "traceback": 6, "most": [6, 38, 39], "recent": [6, 17], "last": [6, 31, 32], "file": [6, 7, 37], "plot_projection_matric": [6, 7], "83": [6, 45], "_splitter": 6, "pyx": 6, "151": 6, "__cinit__": 6, "valueerror": 6, "buffer": 6, "mismatch": 6, "expect": [6, 9, 12, 13, 15, 17, 24, 29, 30, 31, 32, 38], "const": 6, "int8_t": 6, "got": 6, "long": 6, "add_subplot": 6, "z": [6, 21, 24, 25, 27], "nonzero": 6, "marker": 6, "o": [6, 39, 45], "custom": [6, 8, 9, 16, 17, 18, 19], "set_zlim": 6, "01": 6, "analyz": 6, "necessarili": [6, 11, 38], "certain": 6, "seri": [6, 31, 32], "n_channel": 6, "n_time": 6, "channel": 6, "dim": 6, "00": 7, "586": 7, "execut": 7, "auto_exampl": 7, "09": 7, "mb": 7, "03": 7, "008": 7, "000": 7, "min_samples_split": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "min_weight_fraction_leaf": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "sqrt": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "max_leaf_nod": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "min_impurity_decreas": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "bootstrap": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 38], "oob_scor": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "verbos": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 37], "warm_start": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "class_weight": [8, 10, 12, 14, 16, 28, 29, 31], "ccp_alpha": [8, 9, 10, 16, 17, 28, 29, 30, 31, 32, 33, 34], "max_sampl": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "max_bin": [8, 9, 16, 17], "store_leaf_valu": [8, 9, 16, 17], "monotonic_cst": [8, 9, 16, 17], "extra": [8, 9], "meta": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "sub": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "averag": [8, 9, 12, 13, 14, 15, 16, 17, 18, 24, 29, 30, 34, 38], "control": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34, 38, 39], "over": [8, 9, 10, 12, 13, 14, 15, 16, 17, 31, 32, 38], "read": [8, 9, 12, 13, 16, 17, 29, 30], "default": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39], "22": [8, 9, 11, 16, 17], "log_loss": [8, 16], "measur": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 40], "qualiti": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39, 40], "support": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 37, 39, 45], "criteria": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 40], "impur": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 39], "both": [8, 10, 12, 13, 14, 15, 16, 17, 39], "shannon": [8, 16], "gain": [8, 10, 12, 14, 16, 28, 29, 31], "mathemat": [8, 16, 18, 19, 42], "formul": [8, 16, 18, 19, 42], "maximum": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 40], "depth": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "expand": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "until": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "pure": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "less": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34], "minimum": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "requir": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "intern": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "consid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "fraction": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "ceil": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "18": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "ad": [8, 9, 16, 17, 25, 39, 45], "least": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "branch": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "mai": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 40], "effect": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 41], "smooth": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "especi": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "weight": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39, 45], "input": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39], "equal": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "when": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 39, 43], "log2": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "max": [8, 9, 16, 17, 18, 19, 24, 33, 34, 39], "n_features_in_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "n_featur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39], "auto": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "doe": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 38, 39], "stop": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32], "valid": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "partit": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 28, 29, 30, 31, 32, 39], "found": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "grow": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "rel": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 40], "reduct": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "unlimit": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "induc": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "decreas": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "equat": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "follow": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34, 39, 40], "n_t": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "n_t_r": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "right_impur": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "n_t_l": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "left_impur": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "current": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 37, 39], "child": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "refer": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 22, 28, 29, 30, 31, 32, 33, 34], "pass": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 26, 28, 29, 30, 31, 32, 33, 34, 39, 45], "19": [8, 9, 16, 17], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34], "whether": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34], "whole": [8, 9, 10, 12, 13, 14, 15, 16, 17], "callabl": [8, 9, 16, 17, 18, 19, 25, 27, 33, 34], "out": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 38], "bag": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "By": [8, 9, 10, 16, 17, 18, 19, 25, 26, 28, 33, 34, 38], "accuracy_scor": [8, 16], "signatur": [8, 9, 16, 17, 18, 19], "metric": [8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 29, 31, 36, 40], "y_true": [8, 9, 13, 15, 16, 17, 30, 32], "y_pred": [8, 9, 13, 15, 16, 17, 30, 32], "job": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24], "parallel": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "decision_path": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "appli": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 35], "unless": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "joblib": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 37], "parallel_backend": [8, 9, 10, 12, 13, 14, 15, 16, 17], "context": [8, 9, 10, 12, 13, 14, 15, 16, 17], "processor": [8, 9, 10, 12, 13, 14, 15, 16, 17], "glossari": [8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 28, 29, 30, 31, 32], "reus": [8, 9, 10, 12, 13, 14, 15, 16, 17], "previou": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "add": [8, 9, 10, 12, 13, 14, 15, 16, 17, 25, 27, 45, 46], "weak": [8, 9, 16, 17], "learner": [8, 9, 16, 17], "balanc": [8, 10, 12, 14, 16, 28, 29, 31], "balanced_subsampl": [8, 10, 12, 14, 16], "dict": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "list": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 28, 29, 30, 31, 32, 33, 34, 45, 46], "associ": [8, 10, 12, 14, 16, 19, 28, 29, 31, 39], "class_label": [8, 10, 12, 14, 16, 28, 29, 31], "given": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 28, 29, 30, 31, 32, 33, 34, 39, 40], "suppos": [8, 10, 12, 14, 16, 28, 29, 31], "multi": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 31, 42, 45], "output": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 42, 45], "multioutput": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32], "multilabel": [8, 10, 12, 14, 16, 28, 29, 31], "everi": [8, 10, 12, 14, 15, 16, 28, 29, 31, 32, 39], "its": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 31, 39], "own": [8, 10, 11, 12, 14, 16, 28, 29, 31], "four": [8, 10, 12, 14, 16, 28, 29, 31], "instead": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "mode": [8, 10, 12, 14, 16, 28, 29, 31, 37], "automat": [8, 10, 12, 14, 16, 20, 28, 29, 31], "adjust": [8, 10, 12, 14, 16, 28, 29, 31], "invers": [8, 10, 12, 14, 16, 28, 29, 31], "proport": [8, 10, 12, 14, 16, 28, 29, 31], "frequenc": [8, 10, 12, 14, 16, 28, 29, 31], "bincount": [8, 10, 12, 14, 16, 28, 29, 31], "except": [8, 9, 10, 12, 13, 14, 15, 16, 17, 30, 32, 38], "grown": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30], "multipli": [8, 10, 12, 14, 16, 28, 29, 31], "through": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36], "complex": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34, 42], "minim": [8, 9, 10, 13, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34, 39, 40], "cost": [8, 9, 10, 16, 17, 28, 29, 30, 31, 32, 33, 34, 38, 39], "prune": [8, 9, 10, 16, 17, 28, 29, 30, 31, 32, 33, 34, 39], "subtre": [8, 9, 10, 16, 17, 28, 29, 30, 31, 32, 33, 34], "largest": [8, 9, 10, 16, 17, 25, 28], "smaller": [8, 9, 10, 16, 17, 24, 28], "chosen": [8, 9, 10, 16, 17, 28], "thu": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 29, 30, 38, 39, 40], "interv": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 39], "255": [8, 9, 16, 17], "miss": [8, 9, 16, 17, 39], "get_leaf_node_sampl": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "array_lik": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "monoton": [8, 9, 16, 17], "enforc": [8, 9, 10, 16, 17], "increas": [8, 9, 11, 16, 17, 29, 30, 38], "multiclass": [8, 16], "n_outputs_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32], "hold": [8, 16], "regressor": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 30, 32], "optim": [8, 9, 31, 32, 39], "etc": [8, 9, 10, 12, 13, 14, 15, 16, 17, 24, 28, 29, 30], "lead": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 38], "fulli": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30], "unprun": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30], "potenti": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 32], "veri": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30], "reduc": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 38], "memori": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30], "consumpt": [8, 9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30], "geurt": [8, 9, 17, 38], "d": [8, 9, 17, 21, 22, 23, 24, 26, 38], "ernst": [8, 9, 17, 38], "wehenkel": [8, 9, 17, 38], "extrem": [8, 9, 16, 17, 38], "machin": [8, 9, 10, 12, 13, 16, 17, 38, 39], "63": [8, 9, 17, 38, 45], "2006": [8, 9, 17, 38], "make_classif": [8, 10, 12, 16], "attribut": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "estimator_": [8, 9, 16, 17, 18, 19, 28], "extratreeclassifi": 8, "templat": [8, 9, 10, 16, 17, 18, 19, 28], "collect": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28], "base_estimator_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "estimators_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "classes_": [8, 10, 12, 14, 16, 28, 29, 31], "ndarrai": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "n_classes_": [8, 10, 12, 14, 16, 28, 29, 31], "feature_importances_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "seen": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32], "24": [8, 9, 16, 17], "feature_names_in_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32], "string": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "oob_score_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "obtain": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "exist": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "oob_decision_function_": [8, 10, 12, 13, 14, 16, 18, 19], "n_output": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34], "small": [8, 10, 12, 13, 14, 16, 18, 19], "might": [8, 10, 12, 13, 14, 16, 18, 19, 39], "never": [8, 10, 12, 13, 14, 16, 18, 19], "case": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "nan": [8, 10, 12, 13, 14, 16, 18, 19, 28], "convert": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 33, 34], "csr_matrix": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "x_leav": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "datapoint": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "index": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 36, 39], "up": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 35, 39], "path": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "n_node": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "element": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "goe": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "csr": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "format": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 33, 34], "n_nodes_ptr": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "give": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 29, 30], "csc_matrix": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "real": [8, 9, 10, 12, 13, 14, 15, 16, 17, 30, 32], "would": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 37, 39], "net": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "either": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "self": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "get": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 35], "leaf_node_sampl": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "repres": [8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "reach": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "n_leaf_node_sampl": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "vari": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "sinc": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 45, 46], "fall": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "variabl": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 28, 29, 30, 31, 32, 33, 34, 38, 39], "get_metadata_rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "metadata": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "pleas": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "check": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "metadatarequest": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "encapsul": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "get_param": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "deep": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "subobject": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "map": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "That": [8, 10, 12, 14, 16, 18, 19, 28, 29, 30, 31, 32, 33, 34], "highest": [8, 10, 12, 14, 16, 18, 19, 28, 29], "predict_log_proba": [8, 10, 12, 14, 16, 29, 31], "log": [8, 10, 12, 14, 16, 23, 24, 29, 31, 39, 40], "predict_quantil": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "quantil": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "option": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37], "median": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "str": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34], "interpol": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "keyword": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "argument": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "accept": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "n_quantil": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "present": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 33, 34, 39], "subset": [8, 10, 12, 14, 16, 29, 31, 39], "harsh": [8, 10, 12, 14, 16, 29, 31], "correctli": [8, 10, 12, 14, 16, 29, 31], "w": [8, 9, 10, 12, 13, 14, 15, 16, 17, 29, 30, 31, 32], "set_fit_request": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "unchang": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "request": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 36], "enable_metadata_rout": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "set_config": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "rais": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "error": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "alia": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "origin": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 38, 39], "metadata_rout": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "retain": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "insid": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 45], "pipelin": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "updat": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "set_param": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "nest": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "compon": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "__": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "so": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "set_score_request": [8, 9, 10, 12, 13, 14, 15, 16, 17, 29, 30, 31, 32], "properti": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 39], "higher": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 24, 38, 39], "normal": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 33, 34, 38, 39, 45], "brought": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "known": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 26, 28, 29, 30, 31, 32, 33, 34, 38], "mislead": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "cardin": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "mani": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 39], "permutation_import": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "altern": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34, 38], "root": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 30, 31, 32, 33, 34], "squared_error": [9, 13, 15, 17, 30, 32], "absolute_error": [9, 13, 15, 17, 30, 32], "friedman_ms": [9, 13, 15, 17, 30, 32], "poisson": [9, 13, 15, 17, 30, 32], "select": [9, 13, 15, 17, 28, 29, 30, 31, 32, 33, 34, 38], "l2": [9, 13, 15, 17, 30, 32], "loss": [9, 13, 15, 17, 30, 32, 39], "termin": [9, 13, 15, 17, 30, 32], "friedman": [9, 13, 15, 17, 28, 29, 30, 32, 39], "absolut": [9, 13, 15, 17, 30, 32], "l1": [9, 13, 15, 17, 30, 32], "devianc": [9, 13, 15, 17, 30, 32], "find": [9, 11, 13, 15, 17, 28, 29, 30, 31, 32, 33, 34, 40], "significantli": [9, 13, 15, 17], "slower": [9, 13, 15, 17], "mae": [9, 17], "equival": [9, 12, 13, 17, 29, 30, 39], "r2_score": [9, 13, 15, 17, 30, 32], "load_diabet": [9, 30, 32], "return_x_i": [9, 30, 32], "reg": 9, "2727": 9, "extratreeregressor": 9, "decisiontreeregressor": [9, 17, 30], "oob_prediction_": [9, 15, 17], "coeffici": [9, 13, 15, 17, 30, 32], "determin": [9, 13, 15, 17, 20, 30, 32, 39], "frac": [9, 13, 15, 17, 23, 30, 32, 40], "u": [9, 13, 15, 17, 30, 32, 37, 38], "v": [9, 10, 13, 15, 17, 30, 32, 38, 39], "residu": [9, 13, 15, 17, 30, 32], "becaus": [9, 10, 11, 13, 15, 17, 30, 32, 39], "wors": [9, 13, 15, 17, 30, 32], "constant": [9, 13, 15, 17, 24, 30, 32], "alwai": [9, 10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34, 37, 39], "disregard": [9, 13, 15, 17, 30, 32], "precomput": [9, 11, 13, 15, 17, 30, 32], "kernel": [9, 13, 15, 17, 30, 32, 45], "n_samples_fit": [9, 13, 15, 17, 30, 32], "uniform_averag": [9, 13, 15, 17, 30, 32], "23": [9, 13, 15, 17, 30, 32, 37], "keep": [9, 13, 15, 17, 30, 32], "influenc": [9, 13, 15, 17, 30, 32], "multioutputregressor": [9, 13, 15, 17, 30, 32], "splitter": [10, 28, 29, 30, 31, 32, 33, 34], "honest_prior": [10, 28], "empir": [10, 17, 28, 39], "tree_estim": [10, 28], "strategi": [10, 20, 28, 29, 30, 31, 32, 33, 34], "choos": [10, 28, 29, 30, 31, 32, 33, 34], "deal": [10, 28], "empti": [10, 28], "prior": [10, 28, 39, 40], "posterior": [10, 28], "remain": [10, 28], "larger": [10, 20, 24, 28, 38], "shallow": [10, 28], "randomli": [10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34], "permut": [10, 12, 13, 14, 15, 16, 17, 20, 28, 29, 30, 31, 32, 33, 34, 38], "ident": [10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34], "sever": [10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34, 38], "determinist": [10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34], "behaviour": [10, 12, 13, 14, 15, 16, 17, 28, 29, 30, 31, 32, 33, 34], "fix": [10, 12, 13, 14, 15, 16, 17, 24, 28, 29, 30, 31, 32, 33, 34, 43, 44, 45, 46], "honesti": [10, 39], "enabl": 10, "unbias": 10, "confid": [10, 39], "doubl": 10, "amount": 10, "access": 10, "ineffici": 10, "greedi": 10, "recommend": [10, 18, 19, 29, 30, 31, 32, 36, 39], "propens": [10, 39], "causal": 10, "process": [10, 25, 28, 29, 30, 31, 32, 33, 34, 46], "separ": 10, "breiman": [10, 12, 13, 16, 17, 28, 29, 30, 38, 39], "45": [10, 12, 13, 16, 17, 22, 38, 39, 45], "32": [10, 12, 13, 16, 17, 38, 39], "2001": [10, 12, 13, 16, 17, 38, 39], "athei": [10, 28], "j": [10, 28, 29, 30, 37, 39], "tibshirani": [10, 28, 29, 30, 39], "wager": [10, 28], "annal": [10, 28], "statist": [10, 28, 29, 30, 38, 39], "2019": [10, 14, 15, 28, 31, 32, 38], "honest_forest": [10, 28], "n_inform": [10, 12, 13, 15, 16, 17], "n_redund": [10, 12, 16], "honesttreeclassifi": [10, 45], "n_features_": [10, 12, 13, 14, 15], "honest_decision_function_": 10, "structure_indices_": [10, 28], "n_structur": [10, 28], "honest_indices_": [10, 28], "n_honest": [10, 28], "n_neighbor": 11, "radiu": [11, 24, 25, 27], "force_fit": 11, "distanc": [11, 18, 19, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40], "basedecisiontre": [11, 28, 35], "baseforest": [11, 35], "kneighbor": 11, "radius_neighbor": 11, "alreadi": 11, "return_dist": 11, "n_queri": 11, "n_index": 11, "Not": [11, 18, 19, 33, 34], "convent": [11, 18, 19, 33, 34], "constructor": 11, "neigh_dist": 11, "neigh_ind": 11, "popul": 11, "sort_result": 11, "ly": 11, "ball": [11, 24], "around": 11, "befor": [11, 25, 28, 29, 30, 31, 32, 33, 34], "being": [11, 39], "accord": 11, "approxim": 11, "lie": 11, "cannot": 11, "effici": [11, 18, 19, 30, 32, 43, 44, 45, 46], "1d": [11, 14, 15, 31, 32], "feature_combin": [12, 13, 18, 29, 30, 34, 38, 39], "tradit": [12, 13, 29, 30], "must": [12, 13, 25, 29, 30, 33, 34], "compute_similarity_matrix": [12, 13, 14, 15, 18, 19, 29, 30, 31, 32, 33, 34], "sim_matrix": [12, 13, 14, 15, 18, 19, 29, 30, 31, 32, 33, 34], "among": [12, 13, 14, 15, 18, 19, 25, 28, 29, 30, 31, 32, 33, 34], "obliquedecisiontreeregressor": [13, 15, 45], "tomita": [13, 14, 15, 31, 32, 38], "journal": 13, "research": [13, 36], "21": [13, 45], "104": 13, "39": 13, "2020": [13, 19], "make_regress": [13, 15, 17], "regr": [13, 17], "86327109": 13, "patch": [14, 15, 31, 32, 45], "along": [14, 15, 26, 31, 32, 39], "presum": [14, 15, 31, 32], "un": [14, 15, 31, 32], "vector": [14, 15, 26, 31, 32, 39, 40], "wrap": [14, 15, 31, 32], "scipi": [14, 15, 20, 31, 32, 37], "adam": [14, 15, 31, 32, 38, 45, 46], "li": [14, 15, 19, 31, 32, 38, 45, 46], "chester": [14, 15, 31, 32], "huynh": [14, 15, 31, 32], "tyler": [14, 15, 31, 32, 38], "m": [14, 15, 31, 32, 38, 39], "jesu": [14, 15, 31, 32], "jess": [14, 15, 31, 32], "patsol": [14, 15, 31, 32], "benjamin": [14, 15, 31, 32], "falk": [14, 15, 31, 32], "toward": [14, 15, 31, 32, 38], "close": [14, 15, 31, 32, 38], "gap": [14, 15, 28, 29, 30, 31, 32, 33, 34, 38], "convolut": [14, 15, 31, 32, 38], "network": [14, 15, 31, 32, 38], "preprint": [14, 15, 31, 32, 38], "1909": [14, 15, 31, 32, 38], "11799": [14, 15, 31, 32, 38], "82818509": 15, "patchobliquedecisiontreeregressor": [15, 45], "histogram": [16, 17], "gradient": [16, 17], "boost": [16, 17], "histgradientboostingclassifi": 16, "fast": [16, 17, 42], "big": [16, 17], "10_000": [16, 17], "speed": [17, 40], "histgradientboostingregressor": 17, "rather": [17, 40], "suggest": 17, "wherea": [17, 25, 39], "justifi": 17, "32987858": 17, "twomean": [18, 19, 33, 34], "clustering_func": [18, 19, 33, 34], "clustering_func_arg": [18, 19, 33, 34], "unsupervis": [18, 19, 33, 34, 36, 42, 45], "simultan": [18, 19], "affin": [18, 19, 33, 34], "do": [18, 19, 28, 29, 30, 31, 32, 33, 34, 38, 39], "fastbic": [18, 19, 33, 34, 45], "maxim": [18, 19], "bayesian": [18, 19, 40], "calinski_harabasz_scor": [18, 19], "predicted_label": [18, 19], "silhouette_scor": [18, 19], "davies_bouldin_scor": [18, 19], "cpu": [18, 19], "construct": [18, 19, 38, 39], "continu": [18, 19], "instant": [18, 19], "agglomerativeclust": [18, 19, 33, 34], "unsuperviseddecisiontre": [18, 19], "labels_": [18, 19], "similarity_matrix_": [18, 19], "oob": [18, 19], "dissimilarity_matrix_": [18, 19], "dissimilar": [18, 19, 45], "fit_predict": [18, 19, 33, 34], "int64": [18, 19, 33, 34], "fit_transform": [18, 19, 33, 34], "fit_param": [18, 19, 33, 34], "transform": [18, 19, 24, 33, 34], "x_new": [18, 19, 33, 34], "n_features_new": [18, 19, 33, 34], "set_output": [18, 19, 33, 34], "introduc": [18, 19, 33, 34], "configur": [18, 19, 33, 34], "typic": [18, 19, 33, 34, 39], "dens": [18, 19, 33, 34, 39], "meghana": 19, "madhyastha": 19, "perci": 19, "jame": 19, "brown": 19, "veronika": 19, "strnadova": 19, "neelei": 19, "carei": 19, "prieb": 19, "randal": 19, "burn": 19, "geodes": 19, "proceed": 19, "26th": 19, "acm": 19, "sigkdd": 19, "confer": 19, "knowledg": [19, 39], "discoveri": 19, "mine": 19, "kdd": 19, "513": 19, "523": 19, "york": 19, "ny": 19, "usa": 19, "machineri": 19, "url": 19, "1145": 19, "3394486": 19, "3403094": 19, "conditional_arrai": 20, "nn_estim": [20, 24], "replace_nbr": 20, "stratifi": 20, "condition": [20, 25], "resampl": 20, "step": 20, "procedur": [20, 39], "modif": 20, "techniqu": [20, 40], "preserv": 20, "sequenc": 20, "slice": 20, "place": 20, "level": 20, "resampled_arrai": 20, "impact": 20, "cov": [21, 22, 23, 26], "x_index": [21, 23], "y_index": [21, 23], "z_index": 21, "covari": [21, 22, 23, 24, 26], "true_mi": [21, 23], "h": [21, 23, 39], "plug": 21, "entropy_gaussian": 21, "true_entropi": 22, "georg": 22, "darbellai": 22, "igor": 22, "vajda": 22, "observ": 22, "ieee": 22, "tran": 22, "inf": 22, "theori": [22, 38], "1315": 22, "1321": 22, "1999": 22, "pi": [23, 24, 25, 40], "det": 23, "norm": 24, "rank": [24, 38], "ksg": 24, "arraylik": 24, "n_features_x": 24, "n_features_i": 24, "n_features_z": 24, "euclidean": 24, "affect": 24, "term": [24, 25, 39, 40], "gamma": 24, "preprocess": 24, "val": 24, "proce": 24, "kth": 24, "nbr": 24, "xyz": 24, "subspac": 24, "nn": 24, "xz": 24, "yz": 24, "psi": 24, "n_x": 24, "n_y": 24, "n_": [24, 39], "digamma": 24, "n_i": 24, "denot": [24, 25, 39], "could": 24, "hyperparamt": 24, "bia": [24, 38], "scale": 24, "radius_a": 25, "radius_b": 25, "obs_noise_func": 25, "nature_noise_func": 25, "005": [25, 27], "return_mi_lb": [25, 27], "helix": 25, "smallest": 25, "nois": [25, 27], "defauult": 25, "func": 25, "independ": [25, 39], "lb": [25, 27], "approx": 25, "unif": 25, "afterward": 25, "epsilon_1": 25, "co": 25, "n_1": 25, "epsilon_2": 25, "sin": 25, "n_2": 25, "epsilon_3": 25, "n_3": 25, "And": 25, "graphic": 25, "rightarrow": 25, "confound": 25, "impli": 25, "depend": [25, 36], "1234": 26, "drawn": [26, 38], "2d": [26, 31, 32], "feed": 26, "default_rng": 26, "noise_func": 27, "sphere": 27, "latitud": 27, "longitud": 27, "y1": 27, "coordin": 27, "y2": 27, "y3": 27, "them": [28, 29, 30, 31, 32, 33, 34, 38], "But": [28, 29, 30, 31, 32, 33, 34], "integ": [28, 29, 30, 31, 32, 33, 34], "instati": 28, "oper": [28, 29, 31, 32], "argmax": [28, 29], "ti": [28, 29], "lowest": [28, 29], "en": [28, 29, 30, 39], "wikipedia": [28, 29, 30, 39], "wiki": [28, 29, 30, 39], "decision_tree_learn": [28, 29, 30, 39], "olshen": [28, 29, 30], "stone": [28, 29, 30], "wadsworth": [28, 29, 30], "belmont": [28, 29, 30], "ca": [28, 29, 30], "1984": [28, 29, 30], "hasti": [28, 29, 30, 39], "springer": [28, 29, 30, 39], "2009": [28, 29, 30, 39], "cutler": [28, 29, 30], "stat": [28, 29, 30], "berkelei": [28, 29, 30], "edu": [28, 29, 30], "randomforest": [28, 29, 30], "cc_home": [28, 29, 30], "htm": [28, 29, 30], "cross_val_scor": [28, 29, 30, 32], "93333333": 28, "max_features_": [28, 29, 30, 31, 32], "tree_": [28, 29, 30, 31, 32, 33, 34], "_tree": [28, 29, 30, 31, 32], "understand": [28, 38], "basic": 28, "usag": 28, "empirical_prior_": 28, "check_input": [28, 29, 30, 31, 32, 33, 34], "17": [28, 29, 30, 31, 32, 33, 34], "bypass": [28, 29, 30, 31, 32, 33, 34], "don": [28, 29, 30, 31, 32, 33, 34], "know": [28, 29, 30, 31, 32, 33, 34], "re": [28, 29, 30, 31, 32, 33, 34], "node_count": [28, 29, 30, 31, 32, 33, 34], "possibli": [28, 29, 30, 31, 32, 33, 34, 39], "cost_complexity_pruning_path": [28, 29, 30, 31, 32, 33, 34], "ccp_path": [28, 29, 30, 31, 32, 33, 34], "bunch": [28, 29, 30, 31, 32, 33, 34], "dictionari": [28, 29, 30, 31, 32, 33, 34], "get_depth": [28, 29, 30, 31, 32, 33, 34], "leaf_nodes_sampl": [28, 29, 30, 31, 32, 33, 34], "get_n_leav": [28, 29, 30, 31, 32, 33, 34], "n_leav": [28, 29, 30, 31, 32, 33, 34], "proba": [28, 29, 31], "len": [28, 29, 30, 31, 32, 33, 34], "set_predict_proba_request": [28, 29, 31], "set_predict_request": [28, 29, 30, 31, 32, 33, 34], "fact": [29, 30], "better": [29, 30, 38, 39], "caveat": [29, 30], "willing": [29, 30, 39], "spend": [29, 30, 39], "resourc": [29, 30, 39], "93": 29, "86": [29, 45], "feature_combinations_": [29, 30], "taken": [29, 30, 38], "68908909": 30, "35854406": 30, "35223873": 30, "03616902": 30, "56008907": 30, "32235221": 30, "06945264": 30, "1465216": 30, "34597007": 30, "15308512": 30, "morf": [31, 32, 45], "discontigu": [31, 32], "sensor": [31, 32], "mask": [31, 32], "onto": [31, 32], "data_width": [31, 32], "data_height": [31, 32], "tt": [31, 32], "height": [31, 32], "width": [31, 32], "exactli": [31, 32, 38], "albeit": [31, 32], "efficienc": [31, 32], "your": [31, 32, 36], "min_patch_dims_": [31, 32], "max_patch_dims_": [31, 32], "data_dims_": [31, 32], "rg": 32, "10163671": 32, "78786738": 32, "01490768": 32, "32737289": 32, "24816698": 32, "41881754": 32, "0588273": 32, "48722913": 32, "07927208": 32, "15600762": 32, "unsupervisedcriterion": [33, 34], "abid": [33, 34], "unsupervisedsplitt": [33, 34], "assign": [33, 34, 40], "intermedi": 35, "Then": [35, 37], "count": 35, "aff_matrix": 35, "modern": 36, "supervis": [36, 40, 42], "extend": [36, 39], "strong": 36, "encourag": 36, "top": [36, 38], "pull": 36, "walk": 36, "contribut": [36, 38, 45, 46], "licens": 36, "under": 36, "bsd": 36, "experiment": 36, "releas": 36, "histori": 36, "instal": 36, "pip": 36, "meson": 36, "conda": 36, "pypi": 37, "clone": 37, "repositori": 37, "neurodata": 37, "git": 37, "github": 37, "com": 37, "cd": 37, "virtual": 37, "environ": 37, "dev": 37, "build_requir": 37, "txt": 37, "spin": 37, "cli": 37, "local": 37, "abl": [37, 41], "edit": 37, "pend": 37, "isol": 37, "repo": 37, "zipbal": 37, "master": 37, "forg": 37, "threadpoolctl": 37, "pytest": 37, "compil": 37, "llvm": 37, "openmp": 37, "poetri": 37, "next": 37, "directori": 37, "dodiscov": 37, "purpos": 37, "main": 37, "obliquepr": 37, "need": [37, 39, 41], "pr": 37, "22754": 37, "checkout": 37, "page": [37, 43], "instruct": 37, "obliquerandomforestregressor": [38, 45], "divers": 38, "sometim": 38, "slight": 38, "aim": 38, "motiv": 38, "therebi": [38, 39], "practic": [38, 42], "often": [38, 40], "signific": 38, "henc": 38, "yield": 38, "overal": 38, "contrast": [38, 39], "b2001": 38, "candid": [38, 39], "intuit": [38, 39], "assess": 38, "respect": [38, 40], "final": [38, 39], "essenti": 38, "abil": 38, "mdi": 38, "l2014": 38, "approach": 38, "li2019": 38, "tomita2015": 38, "suffer": 38, "flaw": 38, "conclus": 38, "deriv": 38, "good": 38, "held": 38, "secondli": 38, "favor": 38, "explor": 38, "whose": 38, "match": 38, "loupp": 38, "phd": 38, "thesi": 38, "lieg": 38, "2014": 38, "et": 38, "al": 38, "1506": 38, "03410": 38, "2015": 38, "ground": 39, "describ": 39, "beyond": 39, "dt": 39, "ot": 39, "ref": 39, "rc": 39, "landmark": 39, "paper": 39, "varieti": [39, 40, 46], "lambda": 39, "tradeoff": 39, "similarli": 39, "anoth": 39, "major": [39, 43, 44, 45, 46], "definit": 39, "x_i": [39, 40], "recurs": 39, "group": [39, 40], "manner": 39, "orthogon": 39, "a_i": 39, "inner": 39, "product": 39, "langl": 39, "rangl": 39, "entri": 39, "rest": 39, "let": 39, "q_m": 39, "n_m": 39, "theta": 39, "t_m": 39, "x_j": 39, "leq": 39, "setminu": 39, "e_i": 39, "basi": 39, "elsewher": 39, "exact": 39, "handl": 39, "_featur": 39, "come": 39, "sparsiti": 39, "consider": 39, "pickl": 39, "disc": 39, "special": 39, "earlier": 39, "sai": 39, "desir": 39, "analysi": 39, "much": 39, "storag": 39, "ask": 39, "question": 39, "try": 39, "cross": 39, "gridsearchcv": 39, "There": 39, "moreov": 39, "imput": 39, "1023": 39, "1010933404324": 39, "predictive_analyt": 39, "quinlan": 39, "c4": 39, "program": 39, "morgan": 39, "kaufmann": 39, "1993": 39, "prevent": 39, "overfit": 39, "particular": 39, "common": [39, 40], "triplet": 39, "treatment": 39, "sacrific": 39, "mse": 39, "goal": 40, "identifi": 40, "pattern": 40, "overview": 40, "cutpoint": 40, "cutoff": 40, "min_": 40, "sum_": 40, "hat": 40, "mu": 40, "_1": 40, "_2": 40, "sample_indic": 40, "popular": 40, "seleciton": 40, "kmean": 40, "flexibl": 40, "mclust": 40, "tri": 40, "mle": 40, "hard": 40, "soft": 40, "gmm": 40, "simpler": 40, "mathcal": 40, "x_n": 40, "sigma": 40, "quad": 40, "le": 40, "mu_j": 40, "notion": 40, "efficaci": 40, "scheme": 40, "adjusted_rand_scor": 40, "tip": [42, 43], "enhanc": [43, 44, 45, 46], "link": 43, "subscrib": 43, "io": 43, "notifi": 43, "jong": 45, "shin": 45, "bug": 45, "outsid": 45, "61": 45, "arbitrari": 45, "discontinu": 45, "sambit": 45, "per": 45, "67": 45, "70": 45, "patchobliquerandomforestregressor": 45, "suki": 45, "72": 45, "haoyin": 45, "xu": 45, "57": 45, "nearestneighborsmetaestim": 45, "thank": [45, 46], "everyon": [45, 46], "who": [45, 46], "mainten": [45, 46], "incept": [45, 46], "94": 46, "upgrad": 46, "reli": 46}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[8, 1, 1, "", "ExtraTreesClassifier"], [9, 1, 1, "", "ExtraTreesRegressor"], [10, 1, 1, "", "HonestForestClassifier"], [11, 1, 1, "", "NearestNeighborsMetaEstimator"], [12, 1, 1, "", "ObliqueRandomForestClassifier"], [13, 1, 1, "", "ObliqueRandomForestRegressor"], [14, 1, 1, "", "PatchObliqueRandomForestClassifier"], [15, 1, 1, "", "PatchObliqueRandomForestRegressor"], [16, 1, 1, "", "RandomForestClassifier"], [17, 1, 1, "", "RandomForestRegressor"], [18, 1, 1, "", "UnsupervisedObliqueRandomForest"], [19, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ExtraTreesClassifier": [[8, 2, 1, "", "apply"], [8, 3, 1, "", "base_estimator_"], [8, 2, 1, "", "decision_path"], [8, 3, 1, "", "feature_importances_"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "get_leaf_node_samples"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_log_proba"], [8, 2, 1, "", "predict_proba"], [8, 2, 1, "", "predict_quantiles"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_score_request"]], "sktree.ExtraTreesRegressor": [[9, 2, 1, "", "apply"], [9, 3, 1, "", "base_estimator_"], [9, 2, 1, "", "decision_path"], [9, 3, 1, "", "feature_importances_"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "get_leaf_node_samples"], [9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "predict_quantiles"], [9, 2, 1, "", "score"], [9, 2, 1, "", "set_fit_request"], [9, 2, 1, "", "set_params"], [9, 2, 1, "", "set_score_request"]], "sktree.HonestForestClassifier": [[10, 2, 1, "", "apply"], [10, 3, 1, "", "base_estimator_"], [10, 2, 1, "", "decision_path"], [10, 3, 1, "", "feature_importances_"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_leaf_node_samples"], [10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 3, 1, "", "honest_indices_"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "predict_log_proba"], [10, 2, 1, "", "predict_proba"], [10, 2, 1, "", "predict_quantiles"], [10, 2, 1, "", "score"], [10, 2, 1, "", "set_fit_request"], [10, 2, 1, "", "set_params"], [10, 2, 1, "", "set_score_request"], [10, 3, 1, "", "structure_indices_"]], "sktree.NearestNeighborsMetaEstimator": [[11, 2, 1, "", "fit"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "kneighbors"], [11, 2, 1, "", "radius_neighbors"], [11, 2, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[12, 2, 1, "", "apply"], [12, 3, 1, "", "base_estimator_"], [12, 2, 1, "", "compute_similarity_matrix"], [12, 2, 1, "", "decision_path"], [12, 3, 1, "", "feature_importances_"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_leaf_node_samples"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_log_proba"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "predict_quantiles"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[13, 2, 1, "", "apply"], [13, 3, 1, "", "base_estimator_"], [13, 2, 1, "", "compute_similarity_matrix"], [13, 2, 1, "", "decision_path"], [13, 3, 1, "", "feature_importances_"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "get_leaf_node_samples"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "predict_quantiles"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[14, 2, 1, "", "apply"], [14, 3, 1, "", "base_estimator_"], [14, 2, 1, "", "compute_similarity_matrix"], [14, 2, 1, "", "decision_path"], [14, 3, 1, "", "feature_importances_"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "get_leaf_node_samples"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "predict_log_proba"], [14, 2, 1, "", "predict_proba"], [14, 2, 1, "", "predict_quantiles"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[15, 2, 1, "", "apply"], [15, 3, 1, "", "base_estimator_"], [15, 2, 1, "", "compute_similarity_matrix"], [15, 2, 1, "", "decision_path"], [15, 3, 1, "", "feature_importances_"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_leaf_node_samples"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_quantiles"], [15, 2, 1, "", "score"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_score_request"]], "sktree.RandomForestClassifier": [[16, 2, 1, "", "apply"], [16, 3, 1, "", "base_estimator_"], [16, 2, 1, "", "decision_path"], [16, 3, 1, "", "feature_importances_"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "get_leaf_node_samples"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_log_proba"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "predict_quantiles"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_score_request"]], "sktree.RandomForestRegressor": [[17, 2, 1, "", "apply"], [17, 3, 1, "", "base_estimator_"], [17, 2, 1, "", "decision_path"], [17, 3, 1, "", "feature_importances_"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "get_leaf_node_samples"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_quantiles"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[18, 2, 1, "", "apply"], [18, 3, 1, "", "base_estimator_"], [18, 2, 1, "", "compute_similarity_matrix"], [18, 2, 1, "", "decision_path"], [18, 3, 1, "", "feature_importances_"], [18, 2, 1, "", "fit"], [18, 2, 1, "", "fit_predict"], [18, 2, 1, "", "fit_transform"], [18, 2, 1, "", "get_leaf_node_samples"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_quantiles"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_output"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[19, 2, 1, "", "apply"], [19, 3, 1, "", "base_estimator_"], [19, 2, 1, "", "compute_similarity_matrix"], [19, 2, 1, "", "decision_path"], [19, 3, 1, "", "feature_importances_"], [19, 2, 1, "", "fit"], [19, 2, 1, "", "fit_predict"], [19, 2, 1, "", "fit_transform"], [19, 2, 1, "", "get_leaf_node_samples"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "predict_quantiles"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_output"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "transform"]], "sktree._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "sktree.experimental.monte_carlo": [[20, 4, 1, "", "conditional_resample"]], "sktree.experimental.mutual_info": [[21, 4, 1, "", "cmi_gaussian"], [22, 4, 1, "", "entropy_gaussian"], [23, 4, 1, "", "mi_gaussian"]], "sktree.experimental": [[24, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.simulate": [[25, 4, 1, "", "simulate_helix"], [26, 4, 1, "", "simulate_multivariate_gaussian"], [27, 4, 1, "", "simulate_sphere"]], "sktree.tree": [[28, 1, 1, "", "HonestTreeClassifier"], [29, 1, 1, "", "ObliqueDecisionTreeClassifier"], [30, 1, 1, "", "ObliqueDecisionTreeRegressor"], [31, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [32, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [33, 1, 1, "", "UnsupervisedDecisionTree"], [34, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [35, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.HonestTreeClassifier": [[28, 2, 1, "", "apply"], [28, 2, 1, "", "cost_complexity_pruning_path"], [28, 2, 1, "", "decision_path"], [28, 3, 1, "", "feature_importances_"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "get_depth"], [28, 2, 1, "", "get_leaf_node_samples"], [28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_n_leaves"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "predict_proba"], [28, 2, 1, "", "predict_quantiles"], [28, 2, 1, "", "set_fit_request"], [28, 2, 1, "", "set_params"], [28, 2, 1, "", "set_predict_proba_request"], [28, 2, 1, "", "set_predict_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[29, 2, 1, "", "apply"], [29, 2, 1, "", "compute_similarity_matrix"], [29, 2, 1, "", "cost_complexity_pruning_path"], [29, 2, 1, "", "decision_path"], [29, 3, 1, "", "feature_importances_"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "get_depth"], [29, 2, 1, "", "get_leaf_node_samples"], [29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_n_leaves"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "predict_log_proba"], [29, 2, 1, "", "predict_proba"], [29, 2, 1, "", "predict_quantiles"], [29, 2, 1, "", "score"], [29, 2, 1, "", "set_fit_request"], [29, 2, 1, "", "set_params"], [29, 2, 1, "", "set_predict_proba_request"], [29, 2, 1, "", "set_predict_request"], [29, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[30, 2, 1, "", "apply"], [30, 2, 1, "", "compute_similarity_matrix"], [30, 2, 1, "", "cost_complexity_pruning_path"], [30, 2, 1, "", "decision_path"], [30, 3, 1, "", "feature_importances_"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "get_depth"], [30, 2, 1, "", "get_leaf_node_samples"], [30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_n_leaves"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "predict_quantiles"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_fit_request"], [30, 2, 1, "", "set_params"], [30, 2, 1, "", "set_predict_request"], [30, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[31, 2, 1, "", "apply"], [31, 2, 1, "", "compute_similarity_matrix"], [31, 2, 1, "", "cost_complexity_pruning_path"], [31, 2, 1, "", "decision_path"], [31, 3, 1, "", "feature_importances_"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "get_depth"], [31, 2, 1, "", "get_leaf_node_samples"], [31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_n_leaves"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "predict_log_proba"], [31, 2, 1, "", "predict_proba"], [31, 2, 1, "", "predict_quantiles"], [31, 2, 1, "", "score"], [31, 2, 1, "", "set_fit_request"], [31, 2, 1, "", "set_params"], [31, 2, 1, "", "set_predict_proba_request"], [31, 2, 1, "", "set_predict_request"], [31, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[32, 2, 1, "", "apply"], [32, 2, 1, "", "compute_similarity_matrix"], [32, 2, 1, "", "cost_complexity_pruning_path"], [32, 2, 1, "", "decision_path"], [32, 3, 1, "", "feature_importances_"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "get_depth"], [32, 2, 1, "", "get_leaf_node_samples"], [32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_n_leaves"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "predict_quantiles"], [32, 2, 1, "", "score"], [32, 2, 1, "", "set_fit_request"], [32, 2, 1, "", "set_params"], [32, 2, 1, "", "set_predict_request"], [32, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[33, 2, 1, "", "apply"], [33, 2, 1, "", "compute_similarity_matrix"], [33, 2, 1, "", "cost_complexity_pruning_path"], [33, 2, 1, "", "decision_path"], [33, 3, 1, "", "feature_importances_"], [33, 2, 1, "", "fit_predict"], [33, 2, 1, "", "fit_transform"], [33, 2, 1, "", "get_depth"], [33, 2, 1, "", "get_leaf_node_samples"], [33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_n_leaves"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "predict"], [33, 2, 1, "", "predict_quantiles"], [33, 2, 1, "", "set_fit_request"], [33, 2, 1, "", "set_output"], [33, 2, 1, "", "set_params"], [33, 2, 1, "", "set_predict_request"], [33, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[34, 2, 1, "", "apply"], [34, 2, 1, "", "compute_similarity_matrix"], [34, 2, 1, "", "cost_complexity_pruning_path"], [34, 2, 1, "", "decision_path"], [34, 3, 1, "", "feature_importances_"], [34, 2, 1, "", "fit_predict"], [34, 2, 1, "", "fit_transform"], [34, 2, 1, "", "get_depth"], [34, 2, 1, "", "get_leaf_node_samples"], [34, 2, 1, "", "get_metadata_routing"], [34, 2, 1, "", "get_n_leaves"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "predict"], [34, 2, 1, "", "predict_quantiles"], [34, 2, 1, "", "set_fit_request"], [34, 2, 1, "", "set_output"], [34, 2, 1, "", "set_params"], [34, 2, 1, "", "set_predict_request"], [34, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 45, 46], "scikit": [0, 36, 41], "learn": 0, "tree": [0, 2, 6, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41], "estim": 0, "supervis": [0, 39], "unsupervis": [0, 40], "distanc": 0, "metric": 0, "experiment": [0, 20, 21, 22, 23, 24, 25, 26, 27], "function": 0, "exampl": [1, 12, 29, 31, 38, 41], "plot": [2, 3, 4, 5, 6], "decis": [2, 39, 40], "surfac": 2, "train": 2, "iri": 2, "dataset": [2, 4], "obliqu": [3, 4, 6, 38, 39], "forest": [3, 4, 5, 38], "axi": [3, 4], "align": [3, 4], "random": [3, 4, 38], "predict": [3, 4], "spars": 3, "pariti": 3, "simul": [3, 5, 25, 26, 27], "cc18": 4, "honest": [5, 39], "calibr": 5, "overlap": 5, "gaussian": 5, "refer": [5, 38, 39], "project": 6, "matric": 6, "an": 6, "initi": 6, "patch": 6, "splitter": 6, "gener": 6, "1d": 6, "2d": 6, "3d": 6, "discontigu": 6, "comput": 7, "time": 7, "sktree": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35], "extratreesclassifi": 8, "extratreesregressor": 9, "honestforestclassifi": 10, "nearestneighborsmetaestim": 11, "obliquerandomforestclassifi": 12, "us": [12, 29, 31, 39, 41], "obliquerandomforestregressor": 13, "patchobliquerandomforestclassifi": 14, "patchobliquerandomforestregressor": 15, "randomforestclassifi": 16, "randomforestregressor": 17, "unsupervisedobliquerandomforest": 18, "unsupervisedrandomforest": 19, "monte_carlo": 20, "conditional_resampl": 20, "mutual_info": [21, 22, 23], "cmi_gaussian": 21, "entropy_gaussian": 22, "mi_gaussian": 23, "mutual_info_ksg": 24, "simulate_helix": 25, "simulate_multivariate_gaussian": 26, "simulate_spher": 27, "honesttreeclassifi": 28, "obliquedecisiontreeclassifi": 29, "obliquedecisiontreeregressor": 30, "patchobliquedecisiontreeclassifi": 31, "patchobliquedecisiontreeregressor": 32, "unsuperviseddecisiontre": 33, "unsupervisedobliquedecisiontre": 34, "compute_forest_similarity_matrix": 35, "content": 36, "get": 36, "start": 36, "indic": 36, "tabl": 36, "instal": 37, "depend": 37, "pip": 37, "from": 37, "sourc": 37, "meson": 37, "conda": 37, "recommend": 37, "featur": 38, "import": 38, "evalu": [38, 40], "differ": 39, "compar": 39, "mathemat": 39, "formul": 39, "classif": 39, "regress": 39, "multi": 39, "output": 39, "problem": 39, "complex": 39, "tip": 39, "practic": 39, "limit": 39, "criterion": 40, "two": 40, "mean": 40, "fast": 40, "bic": 40, "user": 42, "guid": 42, "releas": 43, "histori": 43, "what": [45, 46], "": [45, 46], "new": [45, 46], "version": [45, 46], "0": [45, 46], "1": 45, "changelog": [45, 46], "code": [45, 46], "contributor": [45, 46], "2": 46}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Distance Metrics": [[0, "distance-metrics"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Examples": [[1, "examples"], [41, "examples"]], "Plot the decision surface of decision trees trained on the iris dataset": [[2, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[3, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[4, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[5, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[5, "references"], [38, null], [38, null]], "Plot the projection matrices of an oblique tree": [[6, "plot-the-projection-matrices-of-an-oblique-tree"]], "Initialize patch splitter": [[6, "initialize-patch-splitter"]], "Generate 1D patches": [[6, "generate-1d-patches"]], "Generate 2D patches": [[6, "generate-2d-patches"]], "Generate 3D patches": [[6, "generate-3d-patches"]], "Discontiguous Patches": [[6, "discontiguous-patches"]], "Computation times": [[7, "computation-times"]], "sktree.ExtraTreesClassifier": [[8, "sktree-extratreesclassifier"]], "sktree.ExtraTreesRegressor": [[9, "sktree-extratreesregressor"]], "sktree.HonestForestClassifier": [[10, "sktree-honestforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[11, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[12, "sktree-obliquerandomforestclassifier"]], "Examples using sktree.ObliqueRandomForestClassifier": [[12, "examples-using-sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[13, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[14, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[15, "sktree-patchobliquerandomforestregressor"]], "sktree.RandomForestClassifier": [[16, "sktree-randomforestclassifier"]], "sktree.RandomForestRegressor": [[17, "sktree-randomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[18, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[19, "sktree-unsupervisedrandomforest"]], "sktree.experimental.monte_carlo.conditional_resample": [[20, "sktree-experimental-monte-carlo-conditional-resample"]], "sktree.experimental.mutual_info.cmi_gaussian": [[21, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[22, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[23, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[24, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[25, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[26, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[27, "sktree-experimental-simulate-simulate-sphere"]], "sktree.tree.HonestTreeClassifier": [[28, "sktree-tree-honesttreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[29, "sktree-tree-obliquedecisiontreeclassifier"]], "Examples using sktree.tree.ObliqueDecisionTreeClassifier": [[29, "examples-using-sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[30, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[31, "sktree-tree-patchobliquedecisiontreeclassifier"]], "Examples using sktree.tree.PatchObliqueDecisionTreeClassifier": [[31, "examples-using-sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[32, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[33, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[34, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[35, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[36, "scikit-tree"]], "Contents": [[36, "contents"]], "Getting started:": [[36, null]], "Indices and tables": [[36, "indices-and-tables"]], "Installation": [[37, "installation"]], "Dependencies": [[37, "dependencies"]], "Installing with pip": [[37, "installing-with-pip"]], "Installing from source with Meson": [[37, "installing-from-source-with-meson"]], "Conda (Recommended)": [[37, "conda-recommended"]], "Oblique Random Forests": [[38, "oblique-random-forests"]], "Examples:": [[38, null]], "Feature importance evaluation": [[38, "feature-importance-evaluation"]], "Supervised Decision Trees": [[39, "supervised-decision-trees"]], "Oblique Trees": [[39, "oblique-trees"]], "Differences compared to decision trees": [[39, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[39, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[39, "classification-regression-and-multi-output-problems"]], "Complexity": [[39, "complexity"]], "Tips on practical use": [[39, "tips-on-practical-use"]], "Limitations compared to decision trees": [[39, "limitations-compared-to-decision-trees"]], "References:": [[39, null]], "Honest Trees": [[39, "honest-trees"]], "Unsupervised Decision Trees": [[40, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[40, "unsupervised-criterion"]], "Two-Means": [[40, "two-means"]], "Fast-BIC": [[40, "fast-bic"]], "Evaluating Unsupervised Trees": [[40, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[41, "examples-using-scikit-tree"]], "User Guide": [[42, "user-guide"]], "Release History": [[43, "release-history"]], "What\u2019s new?": [[45, "what-s-new"], [46, "what-s-new"]], "Version 0.1": [[45, "version-0-1"]], "Changelog": [[45, "changelog"], [46, "changelog"]], "Code and Documentation Contributors": [[45, "code-and-documentation-contributors"], [46, "code-and-documentation-contributors"]], "Version 0.2": [[46, "version-0-2"]]}, "indexentries": {"module": [[0, "module-sktree"], [0, "module-sktree._lib.sklearn.ensemble"]], "sktree": [[0, "module-sktree"]], "sktree._lib.sklearn.ensemble": [[0, "module-sktree._lib.sklearn.ensemble"]], "extratreesclassifier (class in sktree)": [[8, "sktree.ExtraTreesClassifier"]], "apply() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.apply"]], "base_estimator_ (sktree.extratreesclassifier property)": [[8, "sktree.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sktree.extratreesclassifier property)": [[8, "sktree.ExtraTreesClassifier.feature_importances_"]], "fit() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.get_params"]], "predict() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.predict"]], "predict_log_proba() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.predict_quantiles"]], "score() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.score"]], "set_fit_request() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.set_fit_request"]], "set_params() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.set_params"]], "set_score_request() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sktree)": [[9, "sktree.ExtraTreesRegressor"]], "apply() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.apply"]], "base_estimator_ (sktree.extratreesregressor property)": [[9, "sktree.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sktree.extratreesregressor property)": [[9, "sktree.ExtraTreesRegressor.feature_importances_"]], "fit() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.get_params"]], "predict() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.predict"]], "predict_quantiles() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.predict_quantiles"]], "score() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.score"]], "set_fit_request() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.set_fit_request"]], "set_params() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.set_params"]], "set_score_request() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in sktree)": [[10, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.apply"]], "base_estimator_ (sktree.honestforestclassifier property)": [[10, "sktree.HonestForestClassifier.base_estimator_"]], "decision_path() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.decision_path"]], "feature_importances_ (sktree.honestforestclassifier property)": [[10, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.get_params"]], "honest_indices_ (sktree.honestforestclassifier property)": [[10, "sktree.HonestForestClassifier.honest_indices_"]], "predict() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.predict_proba"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.set_params"]], "set_score_request() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.honestforestclassifier property)": [[10, "sktree.HonestForestClassifier.structure_indices_"]], "nearestneighborsmetaestimator (class in sktree)": [[11, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[12, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.obliquerandomforestclassifier property)": [[12, "sktree.ObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[12, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.get_params"]], "predict() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[13, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.obliquerandomforestregressor property)": [[13, "sktree.ObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[13, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.get_params"]], "predict() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[14, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.patchobliquerandomforestclassifier property)": [[14, "sktree.PatchObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[14, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[15, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.patchobliquerandomforestregressor property)": [[15, "sktree.PatchObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[15, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in sktree)": [[16, "sktree.RandomForestClassifier"]], "apply() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.apply"]], "base_estimator_ (sktree.randomforestclassifier property)": [[16, "sktree.RandomForestClassifier.base_estimator_"]], "decision_path() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.decision_path"]], "feature_importances_ (sktree.randomforestclassifier property)": [[16, "sktree.RandomForestClassifier.feature_importances_"]], "fit() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.get_params"]], "predict() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.predict"]], "predict_log_proba() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.predict_quantiles"]], "score() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.score"]], "set_fit_request() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.set_fit_request"]], "set_params() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.set_params"]], "set_score_request() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sktree)": [[17, "sktree.RandomForestRegressor"]], "apply() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.apply"]], "base_estimator_ (sktree.randomforestregressor property)": [[17, "sktree.RandomForestRegressor.base_estimator_"]], "decision_path() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.decision_path"]], "feature_importances_ (sktree.randomforestregressor property)": [[17, "sktree.RandomForestRegressor.feature_importances_"]], "fit() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.get_params"]], "predict() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.predict"]], "predict_quantiles() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.predict_quantiles"]], "score() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.score"]], "set_fit_request() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.set_fit_request"]], "set_params() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.set_params"]], "set_score_request() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[18, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedobliquerandomforest property)": [[18, "sktree.UnsupervisedObliqueRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[18, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[19, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedrandomforest property)": [[19, "sktree.UnsupervisedRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[19, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.transform"]], "conditional_resample() (in module sktree.experimental.monte_carlo)": [[20, "sktree.experimental.monte_carlo.conditional_resample"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[21, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[22, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[23, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[24, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[25, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[26, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[27, "sktree.experimental.simulate.simulate_sphere"]], "honesttreeclassifier (class in sktree.tree)": [[28, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[28, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.get_params"]], "predict() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[28, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[29, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[30, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[31, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[32, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[33, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[33, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[33, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[34, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[35, "sktree.tree.compute_forest_similarity_matrix"]]}})