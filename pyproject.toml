[build-system]
build-backend = "mesonpy"
requires = [
  "meson-python>=0.13.0",
  'ninja',
  # `wheel` is needed for non-isolated builds, given that `meson-python`
  # doesn't list it as a runtime requirement (at least in 0.10.0)
  # See https://github.com/FFY00/meson-python/blob/main/pyproject.toml#L4
  "wheel",
  "setuptools<=65.5",
  "packaging",
  "Cython>=0.29.24",
  "scikit-learn>=1.3",
  "scipy>=1.5.0",
  "numpy>=1.25; python_version>='3.9'"
]

[project]
name = "scikit-tree"
#
# 0.0.0 is standard placeholder for poetry-dynamic-versioning
# any changes to this should not be checked in
#
version = "0.5.0dev0"
description = "Modern decision trees in Python"
maintainers = [
  {name = "Neurodata", email = "adam.li@columbia.edu"}
]
documentation = "https://scikit-tree.neurodata.io"
repository = "https://github.com/neurodata/scikit-tree"
readme = "README.md"
requires-python = ">=3.9"
classifiers = [
  'Development Status :: 4 - Beta',
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: C",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  "Topic :: Scientific/Engineering",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX :: Linux",
  "Operating System :: POSIX",
  "Operating System :: Unix",
  "Operating System :: MacOS"
]
keywords = ['tree', 'oblique trees', 'manifold-learning', 'scikit-learn']
include = [
  {path = "meson.build", format = "sdist"}
]
dependencies = [
  'numpy',
  'scipy>=1.5.0',
  'scikit-learn>=1.3.1'
]

[project.optional-dependencies]
all = [
  'scikit-tree[build]',
  'scikit-tree[doc]',
  'scikit-tree[style]',
  'scikit-tree[test]'
]
build = [
  'build',
  'twine',
  'meson',
  'meson-python',
  'spin',
  'doit',
  'scikit-learn>=1.3.1',
  'Cython>=0.29.36',
  'ninja',
  'numpy',
  'rich-click',
  'pydevtool',
]

doc = [
  'memory-profiler',
  'numpydoc',
  'pooch',
  'pydata-sphinx-theme==0.14.1',
  'sphinx',
  'sphinx-copybutton',
  'sphinx-design',
  'sphinx-gallery',
  'sphinx-issues',
  'sphinx_autodoc_typehints',
  'sphinxcontrib-bibtex',
  'portray',
  'matplotlib',
  'ipython',
  'nbsphinx',
  'memory_profiler',
  'pandas',
  'seaborn',
  'joblib'
]
style = [
  "pre-commit",
  'black',
  'codespell',
  'isort',
  'pydocstyle',
  'pydocstyle[toml]',
  'rstcheck',
  'ruff',
  'toml-sort',
  'yamllint',
  'mypy',
  'flake8',
  'bandit',
  'toml',
  'cython-lint'
]
test = [
  'joblib',
  'pandas',
  'pytest',
  'pytest-cov',
  'memory_profiler',
  'flaky',
  'tqdm'
]

[tool.bandit]
exclude_dirs = ["sktree/tests", "sktree/**/tests/*", 'sktree/_build_utils/*', 'sktree/_lib/*']
skips = ['B404', 'B603']

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
(
      __pycache__
    | \.github
    | sktree/_lib
    | .asv
    | env
    | build-install
)
'''

[tool.codespell]
builtin = "clear,rare,informal,names,usage"
ignore-words = ".codespellignore"
skip = "doc/references.bib"

[tool.coverage.report]
exclude_lines = ['pragma: no cover', 'if __name__ == .__main__.:']
precision = 2

[tool.coverage.run]
branch = true
cover_pylib = false
source = ['sktree']
omit = ['**/__init__.py', '**/tests/**', 'sktree/_build_utils/*', 'sktree/_lib/*']

[tool.cython-lint]
# Ignore the same error codes as flake8
# + E501 (line too long) because keeping it < 88 in cython
# often makes code less readable.
ignore = [
  # check ignored by default in flake8. Meaning unclear.
  'E24',
  # space before : (needed for how black formats slicing)
  'E203',
  # line too long
  'E501',
  # do not assign a lambda expression, use a def
  'E731',
  # do not use variables named 'l', 'O', or 'I'
  'E741',
  # line break before binary operator
  'W503',
  # line break after binary operator
  'W504'
]

[tool.isort]
profile = 'black'
multi_line_output = 3
line_length = 100
py_version = 38
extend_skip_glob = ['sktree/__init__.py', 'sktree/_lib/*', '.asv/*', 'env/*', 'build-install/*']

[tool.mypy]
ignore_missing_imports = true
no_site_packages = true
exclude = [
  'sktree/_lib/'
]

[tool.poe.tasks]
_flake8 = 'flake8'
_bandit = 'bandit -r sktree -c pyproject.toml'
_black = 'black .'
_isort = 'isort .'
_cythonlint = 'cython-lint sktree/ --exclude "sktree/_lib/*"'
_black_check = 'black --check sktree examples'
_isort_check = 'isort --check .'
_pydocstyle = 'pydocstyle ./sktree'
_codespell = 'codespell sktree/ doc/ examples/ --ignore-words=.codespellignore --skip "**/_build/*,**/_lib/*,doc/_build/*,doc/auto_examples/*,doc/tutorials/*,doc/generated/*"'
_changelog = 'semversioner changelog > CHANGELOG.md'
_apply_version = 'semversioner release'
type_check = 'mypy -p sktree --config-file pyproject.toml'
unit_test = 'pytest ./sktree --cov=sktree --cov-report=xml --cov-config=pyproject.toml'
build_docs = 'make -C doc/ clean html'
build_docs_noplot = 'make -C doc/ clean html-noplot'
clean = {shell = 'rm -rf builddir; rm -rf clean; rm -rf build; rm -rf _build; rm -rf dist;'}

[[tool.poe.tasks.format]]
sequence = ['_black', '_isort']
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.format_check]]
sequence = ['_black_check', '_isort_check']
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.lint]]
sequence = ['_flake8', '_bandit', '_codespell', '_pydocstyle', '_cythonlint']
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.release]]
sequence = ['_changelog', '_apply_version']

#
# a standard verification sequence for use in pull requests
#
[[tool.poe.tasks.verify]]
sequence = ['format', 'lint', 'type_check', 'unit_test']
ignore_fail = "return_non_zero"

[tool.poetry]
name = "sktree"
#
# 0.0.0 is standard placeholder for poetry-dynamic-versioning
# any changes to this should not be checked in
#
version = "0.0.0"
description = "Modern decision trees in Python"
authors = ["Neurodata <adam.li@columbia.edu>"]
license = "BSD-3"
documentation = "https://scikit-tree.neurodata.io"
repository = "https://github.com/neurodata/scikit-tree"
readme = "README.md"
classifiers = [
  'Development Status :: 4 - Beta',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11'
]
keywords = ['tree', 'oblique trees', 'manifold-learning', 'scikit-learn']
include = [
  {path = "meson.build", format = "sdist"}
]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
numpy = "^1.23.0"
scipy = "^1.9.0"
scikit-learn = "^1.2.2"
importlib-resources = {version = "*", python = "<3.10"}

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
poethepoet = "^0.16.0"
portray = "^1.7.0"
matplotlib = {version = "^3.5"}
numpydoc = {version = "^1.4"}
pydata-sphinx-theme = {version = "^0.9.0"}
sphinx = {version = "^5.1.1"}
sphinxcontrib-bibtex = {version = "^2.4.2"}
sphinx-issues = {version = "^3.0.1"}
sphinx-copybutton = {version = "^0.5.0"}
sphinx-gallery = {version = "^0.11.0"}
ipython = {version = "^7.4.0"}
nbsphinx = {version = "^0.8"}
pandas = {version = "^1.1"}
memory_profiler = {version = "^0.60.0"}

[tool.poetry.group.style]
optional = true

[tool.poetry.group.style.dependencies]
poethepoet = "^0.16.0"
mypy = "^0.971"
black = {extras = ["jupyter"], version = "^23.10.1"}
isort = "^5.10.1"
flake8 = "^5.0.4"
bandit = "^1.7.4"
pydocstyle = "^6.1.1"
codespell = "^2.1.0"
toml = "^0.10.2"
cython-lint = "^0.15.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
poethepoet = "^0.16.0"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
memory_profiler = {version = "^0.60.0"}

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"

[tool.poetry-dynamic-versioning.substitution]
files = ["sktree/__init__.py"]

[tool.pydocstyle]
convention = 'numpy'
ignore-decorators = '(copy_doc|property|.*setter|.*getter)'
match = '^(?!setup|__init__|test_|_lib).*\.py'
match-dir = '^sktree*'
add_ignore = 'D100,D104,D105,D107'

[tool.pytest.ini_options]
minversion = '6.0'
addopts = '--durations 20 --junit-xml=junit-results.xml --verbose --ignore=sktree/_lib/ -k "not slowtest"'
filterwarnings = []

[tool.spin]
package = 'sktree'

[tool.spin.commands]
Build = [
  ".spin/cmds.py:build",
  ".spin/cmds.py:setup_submodule",
  "spin.cmds.meson.test",
  "spin.cmds.pip.install"
]
Environments = [
  'spin.cmds.meson.shell',
  'spin.cmds.meson.ipython',
  'spin.cmds.meson.python'
]
Documentation = [
  'spin.cmds.meson.docs'
]
Metrics = [
  '.spin/cmds.py:coverage',
  '.spin/cmds.py:asv'
]


[tool.rstcheck]
ignore_directives = [
  "autoclass",
  "autofunction",
  "automodule",
  "autosummary",
  "bibliography",
  "cssclass",
  "currentmodule",
  "dropdown",
  "footbibliography",
  "glossary",
  "graphviz",
  "grid",
  "highlight",
  "minigallery",
  "rst-class",
  "tab-set",
  "tabularcolumns",
  "toctree",
]
ignore_messages = "^.*(Unknown target name|Undefined substitution referenced)[^`]*$"
ignore_roles = [
  "attr",
  "class",
  "doc",
  "eq",
  "exc",
  "file",
  "footcite",
  "footcite:t",
  "func",
  "gh",
  "kbd",
  "meth",
  "mod",
  "newcontrib",
  "pr",
  "py:mod",
  "ref",
  "samp",
  "term",
  "doi",
  "arxiv",
]
report_level = "WARNING"

[tool.ruff]
extend-exclude = [
  'benchmarks',
  'doc',
]
line-length = 88
ignore = ['E731']

[tool.ruff.per-file-ignores]
'__init__.py' = ['F401']