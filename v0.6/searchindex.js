Search.setIndex({"docnames": ["api", "auto_examples/calibration/index", "auto_examples/calibration/plot_overlapping_gaussians", "auto_examples/calibration/sg_execution_times", "auto_examples/hypothesis_testing/index", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing", "auto_examples/hypothesis_testing/plot_co_MIGHT_alternative", "auto_examples/hypothesis_testing/plot_co_MIGHT_null", "auto_examples/hypothesis_testing/plot_might_auc", "auto_examples/hypothesis_testing/plot_might_mv_auc", "auto_examples/hypothesis_testing/sg_execution_times", "auto_examples/index", "auto_examples/multiview/index", "auto_examples/multiview/plot_multiview_dtc", "auto_examples/multiview/sg_execution_times", "auto_examples/outlier_detection/index", "auto_examples/outlier_detection/plot_extended_isolation_forest", "auto_examples/outlier_detection/sg_execution_times", "auto_examples/quantile_predictions/index", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest", "auto_examples/quantile_predictions/sg_execution_times", "auto_examples/sklearn_vs_sktree/index", "auto_examples/sklearn_vs_sktree/plot_iris_dtc", "auto_examples/sklearn_vs_sktree/sg_execution_times", "auto_examples/sparse_oblique_trees/index", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest", "auto_examples/sparse_oblique_trees/sg_execution_times", "auto_examples/splitters/index", "auto_examples/splitters/plot_multiview_axis_aligned_splitter", "auto_examples/splitters/plot_projection_matrices", "auto_examples/splitters/plot_sparse_projection_matrix", "auto_examples/splitters/sg_execution_times", "generated/sktree.ExtendedIsolationForest", "generated/sktree.ExtraTreesClassifier", "generated/sktree.ExtraTreesRegressor", "generated/sktree.HonestForestClassifier", "generated/sktree.MultiViewRandomForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.RandomForestClassifier", "generated/sktree.RandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.datasets.approximate_clf_mutual_information", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "generated/sktree.datasets.make_gaussian_mixture", "generated/sktree.datasets.make_joint_factor_model", "generated/sktree.datasets.make_quadratic_classification", "generated/sktree.datasets.make_trunk_classification", "generated/sktree.experimental.conditional_resample", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.stats.FeatureImportanceForestClassifier", "generated/sktree.stats.FeatureImportanceForestRegressor", "generated/sktree.stats.PermutationForestClassifier", "generated/sktree.stats.PermutationForestRegressor", "generated/sktree.tree.DecisionTreeClassifier", "generated/sktree.tree.DecisionTreeRegressor", "generated/sktree.tree.ExtraTreeClassifier", "generated/sktree.tree.ExtraTreeRegressor", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.MultiViewDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4", "whats_new/v0.5", "whats_new/v0.6", "whats_new/v0.7"], "filenames": ["api.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_overlapping_gaussians.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/hypothesis_testing/index.rst", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest.rst", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing.rst", "auto_examples/hypothesis_testing/plot_co_MIGHT_alternative.rst", "auto_examples/hypothesis_testing/plot_co_MIGHT_null.rst", "auto_examples/hypothesis_testing/plot_might_auc.rst", "auto_examples/hypothesis_testing/plot_might_mv_auc.rst", "auto_examples/hypothesis_testing/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/multiview/index.rst", "auto_examples/multiview/plot_multiview_dtc.rst", "auto_examples/multiview/sg_execution_times.rst", "auto_examples/outlier_detection/index.rst", "auto_examples/outlier_detection/plot_extended_isolation_forest.rst", "auto_examples/outlier_detection/sg_execution_times.rst", "auto_examples/quantile_predictions/index.rst", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest.rst", "auto_examples/quantile_predictions/sg_execution_times.rst", "auto_examples/sklearn_vs_sktree/index.rst", "auto_examples/sklearn_vs_sktree/plot_iris_dtc.rst", "auto_examples/sklearn_vs_sktree/sg_execution_times.rst", "auto_examples/sparse_oblique_trees/index.rst", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size.rst", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris.rst", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/sg_execution_times.rst", "auto_examples/splitters/index.rst", "auto_examples/splitters/plot_multiview_axis_aligned_splitter.rst", "auto_examples/splitters/plot_projection_matrices.rst", "auto_examples/splitters/plot_sparse_projection_matrix.rst", "auto_examples/splitters/sg_execution_times.rst", "generated/sktree.ExtendedIsolationForest.rst", "generated/sktree.ExtraTreesClassifier.rst", "generated/sktree.ExtraTreesRegressor.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.MultiViewRandomForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.RandomForestClassifier.rst", "generated/sktree.RandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.datasets.approximate_clf_mutual_information.rst", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo.rst", "generated/sktree.datasets.make_gaussian_mixture.rst", "generated/sktree.datasets.make_joint_factor_model.rst", "generated/sktree.datasets.make_quadratic_classification.rst", "generated/sktree.datasets.make_trunk_classification.rst", "generated/sktree.experimental.conditional_resample.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.stats.FeatureImportanceForestClassifier.rst", "generated/sktree.stats.FeatureImportanceForestRegressor.rst", "generated/sktree.stats.PermutationForestClassifier.rst", "generated/sktree.stats.PermutationForestRegressor.rst", "generated/sktree.tree.DecisionTreeClassifier.rst", "generated/sktree.tree.DecisionTreeRegressor.rst", "generated/sktree.tree.ExtraTreeClassifier.rst", "generated/sktree.tree.ExtraTreeRegressor.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.MultiViewDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst", "whats_new/v0.5.rst", "whats_new/v0.6.rst", "whats_new/v0.7.rst"], "titles": ["API Documentation", "Calibrated decision trees via honesty", "Plot honest forest calibrations on overlapping gaussian simulations", "Computation times", "Hypothesis testing with decision trees", "Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data", "Demonstrate Conditional Mutual Information for Genuine Hypothesis Testing (Co-MIGHT)", "Co-MIGHT when Data Exhibits Conditional Independence", "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Compute partial AUC using multi-view MIGHT (MV-MIGHT)", "Computation times", "Examples", "Multi-view learning with Decision-trees", "Analyze a multi-view dataset with a multi-view random forest", "Computation times", "Outlier-detection", "ExtendedIsolationForest example", "Computation times", "Quantile Predictions with Random Forest", "Predicting with different quantile interpolation methods", "Quantile prediction intervals with Random Forest Regressor", "Quantile prediction with Random Forest Regressor class", "Quantile regression vs. standard and oblique regression forest", "Computation times", "Comparing sklearn and sktree decision trees", "Plot the decision surface of decision trees trained on the iris dataset", "Computation times", "Sparse oblique projections with oblique decision-trees", "Compare extra oblique forest and oblique random forest predictions on cc18 datasets", "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Compare the decision surfaces of oblique extra-trees with standard oblique trees", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Computation times", "Decision-tree splitters", "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree", "Plot the projection matrices of an oblique tree for sampling images, or time-series", "Plot the sparse projection matrices of an oblique tree", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtendedIsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.MultiViewRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.datasets.approximate_clf_mutual_information", "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "sktree.datasets.make_gaussian_mixture", "sktree.datasets.make_joint_factor_model", "sktree.datasets.make_quadratic_classification", "sktree.datasets.make_trunk_classification", "sktree.experimental.conditional_resample", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.MultiViewDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "Version 0.1", "Version 0.2", "Version 0.3", "Version 0.4", "Version 0.5", "Version 0.6", "Version 0.7"], "terms": {"sktree": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 85, 86, 88, 97, 98, 99], "manifold": [0, 37, 48, 49, 80, 81, 85, 87, 94], "obliqu": [0, 19, 24, 26, 34, 35, 39, 44, 46, 47, 48, 49, 52, 77, 78, 79, 80, 81, 83, 85, 86, 91, 94, 95], "random": [0, 2, 5, 6, 7, 8, 9, 10, 13, 15, 17, 23, 24, 28, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 91, 94, 96], "forest": [0, 1, 3, 5, 6, 7, 8, 13, 15, 24, 28, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 94, 95, 96, 97], "we": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 23, 26, 32, 36, 37, 38, 40, 43, 60, 61, 65, 85, 86, 87, 88, 89, 95, 96], "provid": [0, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "drop": [0, 20, 21, 22, 23, 29, 30, 31, 33, 88], "replac": [0, 40, 60, 87], "featur": [0, 5, 6, 7, 8, 10, 14, 20, 23, 26, 29, 30, 31, 32, 33, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "have": [0, 2, 7, 8, 14, 32, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 95, 96], "develop": [0, 86, 100], "These": [0, 32, 37, 87], "ar": [0, 2, 5, 6, 7, 14, 17, 20, 21, 22, 23, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 92, 97], "still": [0, 6, 7, 8, 37, 43], "compat": [0, 37, 52, 53, 82, 83], "all": [0, 6, 7, 12, 14, 26, 30, 33, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 59, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 92, 94, 95], "capabl": [0, 95], "bin": [0, 2, 23, 41, 42, 50, 51], "which": [0, 2, 5, 6, 7, 8, 9, 10, 17, 21, 29, 31, 36, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 60, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 96, 97, 98, 99], "theoret": [0, 2, 85], "improv": [0, 2, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 94, 95, 96, 97, 98, 99, 100], "runtim": [0, 40, 88], "significantli": [0, 6, 42, 47, 49, 51], "high": [0, 6, 7, 8, 14, 17, 29, 31, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 95], "dimension": [0, 6, 7, 8, 14, 29, 40, 59, 66, 89, 94, 95], "sampl": [0, 2, 5, 6, 7, 9, 10, 12, 14, 17, 20, 21, 23, 26, 29, 30, 31, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 94, 96, 97, 99], "size": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 21, 22, 28, 29, 34, 37, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 78, 79, 80, 81, 88, 90, 97], "data": [0, 2, 4, 11, 12, 21, 22, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 94, 96], "us": [0, 2, 4, 7, 8, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 95, 96], "your": [0, 80, 81, 85], "own": [0, 41, 43, 44, 45, 46, 48, 50, 72, 74, 76, 77, 78, 80], "risk": 0, "extens": 0, "compar": [0, 2, 5, 6, 7, 8, 17, 21, 22, 28, 33, 34, 38, 50, 51, 68, 69, 70, 71, 77, 78, 79, 80, 81, 85, 91], "decis": [0, 6, 7, 8, 16, 27, 29, 34, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 91, 95, 96], "model": [0, 6, 7, 8, 14, 20, 26, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 94, 99], "tradition": 0, "implement": [0, 7, 36, 37, 38, 40, 41, 42, 43, 56, 59, 60, 68, 69, 70, 71, 78, 79, 85, 87, 88, 94, 95], "axi": [0, 2, 5, 6, 9, 10, 12, 14, 17, 20, 21, 26, 28, 30, 32, 34, 35, 37, 38, 39, 44, 46, 47, 48, 49, 77, 78, 79, 80, 81, 87, 88, 90, 94, 96], "align": [0, 12, 14, 26, 28, 34, 35, 38, 39, 44, 46, 47, 48, 49, 77, 78, 79, 80, 81, 87, 88, 90, 96], "split": [0, 2, 6, 12, 17, 21, 29, 32, 35, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 97, 98, 99], "store": [0, 32, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 87, 88], "mean": [0, 2, 5, 7, 9, 10, 17, 21, 23, 29, 30, 31, 32, 33, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 66, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 91, 94, 95, 97], "outcom": 0, "i": [0, 2, 5, 6, 7, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95, 96, 97, 98, 99], "e": [0, 5, 6, 7, 17, 21, 23, 36, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89], "label": [0, 2, 6, 7, 8, 9, 10, 17, 21, 22, 23, 26, 31, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 59, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89], "vote": [0, 41, 43, 44, 46, 48, 50, 52, 53, 76], "leaf": [0, 17, 20, 21, 22, 23, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "node": [0, 12, 17, 20, 21, 22, 23, 29, 35, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90], "howev": [0, 7, 29, 32, 36, 68, 69, 88], "more": [0, 2, 5, 6, 17, 20, 26, 29, 30, 36, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 88, 97], "exot": 0, "possibl": [0, 29, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89], "call": [0, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 60, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 97], "some": [0, 14, 17, 29, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 97], "multipl": [0, 14, 36, 37, 40, 45, 59, 60, 77, 88, 96], "column": [0, 5, 6, 7, 29, 30, 31, 32, 33, 36, 37, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 72, 74, 76, 77, 78, 79, 80, 81, 88, 94], "creat": [0, 6, 14, 17, 20, 21, 22, 23, 32, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87], "new": [0, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 92, 95, 99], "valu": [0, 17, 20, 21, 23, 29, 30, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 64, 65, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 98], "thi": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 23, 29, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 92, 95, 96, 97, 98, 99], "can": [0, 7, 9, 10, 14, 17, 20, 32, 36, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 59, 60, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 94], "take": [0, 21, 26, 32, 52, 53, 60, 64, 68, 69, 82, 83, 95], "form": [0, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "spars": [0, 29, 33, 34, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88], "linear": [0, 7, 20, 26, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "combin": [0, 5, 6, 7, 8, 9, 10, 26, 38, 40, 44, 46, 47, 52, 77, 78, 79, 83, 87, 88, 89], "even": [0, 8, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "advantag": [0, 95], "structur": [0, 6, 14, 26, 36, 37, 43, 60, 72, 73, 74, 75, 76, 80, 81, 89, 94], "g": [0, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88], "an": [0, 5, 6, 7, 9, 10, 12, 14, 17, 20, 21, 22, 23, 29, 32, 33, 35, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 59, 60, 62, 64, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 94, 95, 96, 97, 98, 99], "imag": [0, 12, 35, 39, 80, 81, 90], "indic": [0, 5, 20, 21, 22, 23, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 96, 99], "awar": [0, 6, 36, 80, 81], "fashion": [0, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 60, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "class": [0, 2, 5, 9, 10, 12, 17, 19, 21, 24, 31, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 89, 90, 97], "gener": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 19, 21, 22, 26, 29, 30, 31, 32, 33, 36, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 79, 80, 81, 87, 88, 89, 90, 94, 97, 99], "while": [0, 2, 6, 14, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "everyth": [0, 90], "els": [0, 17, 32, 33], "consist": [0, 17, 29, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 73, 75, 79, 81, 82, 83, 88, 96], "how": [0, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 19, 21, 22, 29, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 90], "build": [0, 32, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 95, 96], "classif": [0, 14, 31, 32, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 91, 97], "regress": [0, 2, 12, 19, 24, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 91, 97], "thei": [0, 17, 29, 37, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88], "also": [0, 2, 26, 36, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 96, 97], "power": [0, 6, 7, 87], "non": [0, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "parametr": [0, 88], "embed": 0, "cluster": [0, 2, 17, 32, 52, 53, 82, 83, 89], "The": [0, 2, 5, 6, 7, 9, 10, 14, 17, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 96], "randomtreesembed": [0, 74], "exampl": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 96], "other": [0, 2, 6, 7, 14, 17, 21, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "state": 0, "art": 0, "explicitli": 0, "base": [0, 8, 17, 21, 29, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 97, 99], "criterion": [0, 36, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 91, 94], "varianc": [0, 21, 29, 42, 43, 47, 49, 51, 52, 53, 56, 73, 75, 76, 79, 81, 82, 83, 87, 89], "bic": [0, 52, 53, 82, 83, 91], "compris": [0, 80, 81], "those": [0, 21, 22, 29, 41, 42, 43, 46, 47, 48, 49, 50, 51, 66, 72, 73, 74, 75, 76, 78, 79, 87, 88], "avail": [0, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 86, 95], "standalon": 0, "isol": [0, 17, 40, 85, 86, 95], "ensembl": [0, 2, 17, 20, 21, 22, 23, 31, 32, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 74, 75, 87], "extrem": [0, 29, 30, 41, 42, 50, 51, 74, 75], "extend": [0, 14, 17, 40, 85, 88, 95], "allow": [0, 7, 21, 29, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 95, 96, 97, 99], "flexibl": [0, 89], "inher": [0, 52, 53], "produc": [0, 17], "like": [0, 17, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89], "extract": [0, 9, 10, 29, 30, 33], "pairwis": 0, "from": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 87, 88, 89, 96], "includ": [0, 2, 41, 43, 44, 45, 46, 48, 50, 64, 72, 74, 76, 77, 78, 80, 85, 94, 95, 96, 97, 98, 99, 100], "correct": 0, "turn": 0, "proper": 0, "In": [0, 7, 8, 14, 17, 23, 29, 30, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 100], "addit": [0, 8, 41, 42, 50, 51, 52, 53, 56, 68, 69, 82, 83, 88], "leav": [0, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "natur": [0, 54, 55, 65, 89], "wai": [0, 7, 17, 29, 40, 60, 74, 75, 89], "comput": [0, 4, 5, 6, 7, 12, 29, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 62, 63, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 94], "neighbor": [0, 2, 40, 45, 60, 64, 85, 97], "nearest": [0, 2, 20, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 97, 98, 99], "interfac": [0, 36, 37, 38], "similar": [0, 29, 32, 44, 46, 47, 48, 49, 52, 53, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 94], "nearestneighbor": [0, 45, 60, 64], "perform": [0, 8, 9, 10, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89], "conveni": 0, "simul": [0, 1, 3, 12, 28, 34, 36, 55, 58, 87, 90], "beyond": [0, 88], "offer": 0, "work": [0, 14, 23, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "progress": 0, "help": [0, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "evalu": [0, 5, 6, 7, 9, 17, 29, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 91], "mutual": [0, 4, 8, 11, 12, 54, 55, 56, 61, 62, 63, 64, 65, 67, 82, 90, 94, 99], "inform": [0, 2, 4, 8, 10, 11, 12, 14, 26, 30, 31, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 94, 99], "mi": [0, 5, 6, 7, 8, 54, 55, 64, 66, 68, 69, 97], "condit": [0, 4, 11, 12, 21, 22, 48, 49, 54, 55, 56, 60, 61, 64, 80, 81, 90, 94, 97], "cmi": [0, 7, 8, 61, 64, 66], "specif": [0, 7, 8, 9, 10, 36, 37, 38, 41, 43, 44, 46, 48, 50, 88, 96], "multivari": [0, 5, 9, 10, 31, 37, 54, 55, 61, 62, 63, 66, 80, 81, 95], "gaussian": [0, 1, 3, 12, 17, 40, 54, 55, 56, 59, 61, 62, 63, 66, 89, 90], "analyt": [0, 61, 62, 63, 64, 66], "solut": [0, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 61, 62, 63, 64], "entropi": [0, 41, 43, 44, 46, 48, 50, 54, 55, 61, 62, 63, 66, 72, 74, 76, 77, 78, 80], "distribut": [0, 5, 6, 7, 17, 21, 23, 31, 40, 57, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 88, 89, 98, 99], "demonstr": [1, 4, 6, 8, 11, 12, 13, 14, 19, 20, 22, 25, 28, 29, 32, 35, 37, 38, 39, 56, 90], "usag": [1, 12, 29, 30, 72, 73, 74, 75, 76, 90, 96], "honest": [1, 3, 6, 12, 43, 68, 69, 76, 85, 90, 91], "obtain": [1, 12, 14, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 87, 90], "predict": [1, 2, 5, 9, 24, 26, 28, 32, 34, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88], "plot": [1, 3, 6, 7, 8, 12, 14, 25, 27, 28, 29, 30, 32, 34, 35, 39, 87, 90], "overlap": [1, 3, 12, 90], "go": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38], "end": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "download": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 90], "full": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 59], "code": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 82, 83, 86, 90], "result": [2, 9, 10, 17, 30, 32, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 60, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89, 97], "variou": [2, 41, 42, 44, 46, 47, 48, 49, 50, 51], "method": [2, 12, 19, 23, 24, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 96], "tree": [2, 5, 6, 7, 8, 9, 10, 14, 16, 20, 21, 22, 23, 27, 29, 30, 33, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 86, 87, 91, 92, 94, 95, 96, 97, 98, 99], "achiev": [2, 32, 42, 51, 85, 87], "see": [2, 6, 7, 8, 14, 20, 21, 26, 29, 30, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89], "user": [2, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 94, 96], "guid": [2, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 89, 94], "isoton": 2, "irf": 2, "sigmoid": 2, "sigrf": 2, "regular": [2, 6, 7, 14, 23, 26, 29, 59, 70, 71], "without": [2, 40, 72, 73, 74, 75, 89], "rf": [2, 6, 7, 8, 14, 21, 22, 31, 33, 88], "show": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 36, 37, 38], "curv": [2, 88], "differ": [2, 5, 6, 7, 8, 9, 12, 14, 19, 24, 25, 28, 29, 32, 34, 35, 36, 40, 45, 57, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 91, 98, 99], "dataset": [2, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 21, 23, 25, 27, 28, 31, 32, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 64, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 90, 97, 99], "two": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 26, 29, 30, 32, 33, 36, 52, 53, 56, 59, 68, 69, 74, 75, 87, 88, 91, 94, 97], "red": 2, "line": [2, 21, 22], "closest": 2, "ideal": [2, 72, 73, 74, 75, 86], "figur": [2, 17, 26, 29, 37], "reproduc": [2, 40, 56, 57, 60, 99], "1": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92, 95], "ronan": [2, 48, 49, 80, 81, 85, 87, 94], "perri": [2, 48, 49, 80, 81, 85, 87, 94], "ronak": [2, 48, 49, 80, 81, 87], "mehta": [2, 48, 49, 80, 81, 87], "richard": 2, "guo": 2, "eva": 2, "yezeret": 2, "jes\u00fa": 2, "arroyo": [2, 48, 49, 80, 81, 87], "mike": 2, "powel": 2, "hayden": 2, "helm": 2, "cencheng": [2, 58, 87], "shen": [2, 58, 87], "joshua": [2, 48, 49, 53, 58, 80, 81, 87, 89], "t": [2, 6, 14, 17, 22, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 57, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89], "vogelstein": [2, 48, 49, 53, 58, 80, 81, 87, 89], "adapt": [2, 52, 53, 62, 85, 89], "estim": [2, 5, 6, 7, 8, 9, 10, 21, 26, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 60, 62, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 94], "quantiti": [2, 85], "arxiv": [2, 58, 85], "2021": [2, 85], "1907": [2, 85], "00325": [2, 85], "import": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 91, 95], "necessari": [2, 86], "modul": [2, 36, 37, 38, 85], "librari": [2, 92, 94], "matplotlib": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 86], "pyplot": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38], "plt": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38], "numpi": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 30, 31, 32, 36, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86], "np": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "cm": [2, 26, 32, 36, 38], "sklearn": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 96], "calibratedclassifiercv": 2, "randomforestclassifi": [2, 14, 31, 33, 41, 42, 44, 46, 48, 70, 74], "model_select": [2, 14, 17, 21, 22, 23, 29, 30, 31, 33, 42, 72, 73, 74, 75, 76, 78, 79, 81], "train_test_split": [2, 17, 22, 23, 42, 68, 69, 74, 75], "honestforestclassifi": [2, 5, 6, 7, 8, 9, 10, 94, 96, 99], "defin": [2, 31, 36, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 64, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 97], "classifi": [2, 8, 32, 40, 41, 42, 43, 44, 46, 48, 50, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80], "color_dict": 2, "honestrf": 2, "f41711": 2, "1b9e77": 2, "377eb8": 2, "fdae61": 2, "n_estim": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 23, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69], "100": [2, 5, 6, 7, 8, 14, 17, 21, 29, 31, 33, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57], "n_job": [2, 5, 6, 7, 8, 9, 10, 14, 29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 64], "2": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 31, 32, 33, 36, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 92], "clf_cv": 2, "5": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 92, 95], "max_featur": [2, 5, 6, 7, 8, 9, 10, 14, 21, 29, 30, 31, 33, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 97, 98, 99], "0": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 92], "rep": 2, "clf": [2, 17, 26, 29, 30, 31, 33, 40, 41, 43, 46, 50, 72, 76, 78, 88], "honest_fract": [2, 5, 6, 7, 8, 9, 10, 43, 76], "cv": [2, 14, 29, 30, 31, 33, 72, 73, 76, 78, 79, 81], "def": [2, 6, 14, 21, 22, 29, 30, 31, 33], "likelihood": [2, 89], "x": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89], "lik1": 2, "prod": 2, "exp": [2, 22, 54, 55], "asarrai": 2, "lik0": 2, "return": [2, 5, 6, 9, 10, 14, 17, 21, 22, 29, 30, 31, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "n_sampl": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 31, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "60000": 2, "n_bin": 2, "3": [2, 6, 7, 8, 14, 17, 21, 22, 26, 29, 30, 31, 32, 36, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 92, 95], "calibration_curv": 2, "here": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 36, 37, 38, 43, 88, 90], "blob": 2, "where": [2, 5, 6, 7, 14, 26, 33, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 61, 64, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89, 94, 96, 97, 98, 99], "second": [2, 5, 6, 7, 8, 10, 14, 17, 21, 22, 26, 29, 30, 31, 32, 33, 36, 37, 44, 56, 59, 77, 88], "contain": [2, 14, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "half": [2, 43], "posit": [2, 9, 10, 40, 41, 50, 72, 74, 76, 87, 89], "neg": [2, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "probabl": [2, 41, 43, 44, 46, 48, 50, 52, 53, 54, 55, 56, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80, 88], "therefor": [2, 43, 46, 47, 48, 49, 50, 51, 80, 81, 87, 88], "center": [2, 6, 7, 14, 17, 21, 23, 52, 53, 56, 82, 83], "y": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "make_blob": [2, 6, 14], "shuffl": [2, 5, 6, 7, 8, 32, 43, 46, 47, 49, 50, 51, 56, 60, 68, 69, 70, 71, 96], "fals": [2, 7, 8, 17, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 98, 99], "random_st": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 96], "42": [2, 17, 29, 30, 41, 42, 51, 56, 74, 75], "sample_weight": [2, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "randomst": [2, 17, 22, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 57, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "rand": [2, 17], "shape": [2, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 29, 30, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87], "train": [2, 5, 6, 7, 12, 20, 21, 23, 25, 27, 29, 30, 32, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 90, 96], "test": [2, 8, 11, 21, 22, 29, 30, 31, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 56, 59, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 85, 86, 95, 96, 97], "x_train": [2, 17, 21, 22, 23, 42, 74, 75], "x_test": [2, 17, 20, 21, 22, 23, 42, 74, 75], "y_train": [2, 17, 20, 21, 22, 23, 42, 72, 73, 74, 75], "y_test": [2, 17, 21, 22, 23, 42, 74, 75], "sw_train": 2, "sw_test": 2, "test_siz": [2, 5, 6, 7, 8, 9, 10, 23, 68, 69, 70, 71], "9": [2, 6, 8, 17, 29, 32, 33, 36, 37, 86, 94], "class_one_prob": 2, "name": [2, 17, 23, 29, 30, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "fit": [2, 17, 20, 21, 23, 26, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 99], "predict_proba": [2, 41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "fig": [2, 6, 7, 8, 14, 17, 21, 26, 29, 30, 31, 33, 36, 37, 38], "ax": [2, 6, 7, 8, 14, 17, 26, 29, 30, 31, 33, 36, 37, 38, 88], "subplot": [2, 6, 7, 8, 14, 17, 21, 26, 29, 30, 31, 32, 33, 36, 37, 38], "figsiz": [2, 6, 7, 8, 17, 21, 31, 36, 37, 38], "10": [2, 5, 6, 7, 9, 10, 11, 14, 17, 20, 21, 22, 23, 29, 30, 31, 32, 36, 38, 41, 42, 44, 48, 49, 50, 51, 53, 56, 57, 59, 72, 73, 76, 77, 78, 79, 80, 81, 87, 88, 89], "y_uniqu": 2, "uniqu": [2, 29, 30, 33, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "color": [2, 6, 7, 8, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38], "rainbow": 2, "linspac": [2, 14, 17, 22, 30], "this_i": 2, "zip": [2, 12, 14, 17, 20, 21, 26, 32, 90], "this_x": 2, "this_sw": 2, "scatter": [2, 17, 20, 26, 32, 37], "": [2, 6, 7, 8, 17, 26, 29, 31, 32, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89], "50": [2, 8, 23, 29, 30, 32, 33, 73], "c": [2, 17, 21, 22, 26, 32, 62, 63, 72, 73, 75, 76, 78, 79, 80, 81, 86], "newaxi": 2, "alpha": [2, 6, 7, 8, 17, 21, 32, 37, 65, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "edgecolor": [2, 17, 26, 32], "k": [2, 6, 7, 8, 17, 20, 32, 41, 42, 45, 64, 82], "legend": [2, 6, 7, 8, 17, 20, 22, 23, 26, 31, 36], "loc": [2, 5, 9, 10, 20, 22, 23, 26, 31], "best": [2, 29, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "set_xtick": [2, 36, 38], "set_ytick": [2, 36, 38], "clf_name": 2, "prob": 2, "item": [2, 20, 21, 22, 23, 30], "order": [2, 21, 29, 30, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "lexsort": 2, "51": 2, "reshap": [2, 17, 23, 32, 36, 37, 38], "25": [2, 5, 20, 22, 32, 36, 37], "x_test_prob": 2, "linewidth": [2, 36], "l": [2, 21, 29, 30, 41, 42, 51, 72, 73, 74, 75, 76, 78, 79, 87, 88, 89], "r": [2, 17, 32, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 64, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 86, 88], "truth": [2, 17, 22, 88], "set_ylim": [2, 21], "05": [2, 5, 6, 7, 8], "set_xlabel": [2, 14, 21, 29, 33], "instanc": [2, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 95], "sort": [2, 17, 21, 29, 30, 33, 43, 45, 82, 89], "true": [2, 5, 6, 7, 9, 10, 17, 26, 29, 30, 31, 33, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 97], "p": [2, 5, 9, 10, 21, 29, 30, 31, 41, 42, 43, 44, 46, 48, 50, 51, 65, 68, 69, 74, 75], "set_ylabel": [2, 14, 21, 29, 33], "upper": [2, 21, 22], "left": [2, 21, 22, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 60, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "tight_layout": [2, 6, 7, 8, 17, 21, 26, 32], "savefig": [2, 31], "overlapping_gaussian": 2, "png": 2, "discuss": [2, 32], "well": [2, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "closer": [2, 59], "shown": [2, 61], "below": 2, "total": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 37, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89], "run": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 26, 29, 30, 31, 32, 33, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 68, 69, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 96, 97], "time": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 21, 22, 26, 29, 30, 31, 32, 33, 35, 36, 51, 52, 53, 65, 68, 69, 70, 71, 78, 79, 80, 81, 82, 84, 88, 90], "script": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 26, 29, 30, 31, 32, 33, 37], "minut": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 26, 29, 30, 31, 32, 33, 37], "871": [2, 3], "python": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 86, 90], "sourc": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 90], "plot_overlapping_gaussian": [2, 3], "py": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39], "jupyt": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 90], "notebook": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 90], "ipynb": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38], "galleri": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 90], "sphinx": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 90], "00": [3, 11, 15, 18, 24, 27, 34, 39, 73], "03": [3, 39], "execut": [3, 11, 15, 18, 24, 27, 34, 39], "auto_examples_calibr": 3, "file": [3, 11, 15, 18, 24, 27, 34, 39, 86], "calibr": [3, 85, 88], "mb": [3, 11, 15, 18, 24, 27, 34, 39], "statist": [4, 5, 6, 7, 12, 23, 43, 57, 59, 68, 69, 70, 71, 72, 73, 76, 78, 79, 85, 87, 88, 90, 97], "co": [4, 11, 12, 56, 65, 90], "might": [4, 11, 12, 41, 43, 44, 46, 47, 48, 50, 52, 53, 56, 88, 90], "when": [4, 6, 7, 11, 12, 14, 17, 20, 29, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90, 92, 95, 96, 97, 98, 99], "exhibit": [4, 11, 12, 90], "independ": [4, 7, 11, 12, 65, 68, 69, 88, 90], "partial": [4, 6, 11, 12, 90], "auc": [4, 6, 11, 12, 90, 97], "genuin": [4, 8, 11, 12, 56, 90], "multi": [4, 6, 7, 8, 11, 15, 35, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 74, 76, 77, 78, 80, 85, 91, 94, 96, 97], "view": [4, 6, 7, 8, 11, 15, 35, 39, 44, 56, 57, 77, 85, 96, 97, 98, 99], "mv": [4, 6, 7, 8, 11, 12, 90], "imbalanc": [4, 11, 12, 90], "featureimportanceforestclassifi": [5, 6, 7, 8, 9, 10, 70, 71, 96, 98, 99], "nonparametr": [5, 9, 10], "present": [5, 9, 10, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 82, 83, 88], "set": [5, 6, 7, 8, 10, 14, 17, 29, 30, 32, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 96, 97], "target": [5, 6, 7, 8, 9, 10, 14, 21, 23, 26, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88], "framework": [5, 6, 7], "1000": [5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 30, 31, 43, 46, 50, 65, 66, 67, 68, 69, 70, 71], "500": [5, 9, 10, 14], "binari": [5, 9, 10, 17, 31, 54, 55], "variabl": [5, 6, 7, 8, 9, 10, 14, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 61, 65, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88], "within": [5, 37, 43, 45, 52, 53, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86], "each": [5, 6, 7, 9, 14, 20, 21, 22, 23, 26, 29, 30, 32, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 97, 98, 99], "associ": [5, 9, 41, 43, 44, 46, 48, 50, 53, 72, 74, 76, 77, 78, 80, 88, 89], "one": [5, 6, 7, 9, 14, 17, 20, 21, 22, 23, 36, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 60, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 97, 98, 99], "anoth": [5, 9, 88, 98, 99], "One": [5, 6, 7, 9, 17, 68, 69, 72, 73, 74, 75], "could": [5, 9, 64, 72, 73, 74, 75], "think": [5, 9], "collect": [5, 9, 14, 17, 20, 21, 22, 23, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 60, 76], "same": [5, 6, 7, 8, 9, 20, 21, 22, 23, 26, 36, 37, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 74, 76, 77, 78, 80, 81, 84, 87, 88, 97], "patient": [5, 9], "biomed": [5, 9], "first": [5, 6, 7, 8, 9, 10, 14, 26, 31, 32, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 59, 60, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 97], "strongli": [5, 9, 10], "correl": [5, 9, 10, 14], "w": [5, 9, 10, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "weakli": [5, 9, 10], "null": [5, 6, 7, 68, 69, 70, 71, 98, 99], "h0": 5, "ha": [5, 7, 8, 9, 10, 14, 32, 33, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 94, 95, 96, 97, 98, 99, 100], "respect": [5, 32, 36, 68, 69, 77, 87, 89], "For": [5, 6, 14, 17, 20, 26, 29, 30, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 64, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 89, 95], "follow": [5, 6, 7, 8, 20, 21, 29, 30, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89], "our": [5, 6, 8, 29, 36, 37, 38, 85, 88], "uninform": 5, "complet": [5, 6], "disconnect": 5, "d": [5, 17, 20, 21, 22, 23, 29, 30, 36, 38, 41, 42, 51, 56, 59, 61, 62, 63, 66, 74, 75], "separ": [5, 29, 43, 74, 75], "given": [5, 17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89], "scipi": [5, 9, 10, 23, 48, 49, 60, 80, 81, 86], "special": [5, 9, 10, 88], "expit": [5, 9, 10], "stat": [5, 6, 7, 8, 9, 10, 23, 72, 73, 76, 78, 79, 98, 99], "decisiontreeclassifi": [5, 6, 7, 8, 9, 10, 26, 32, 36, 38, 41, 43, 50, 73, 74, 76, 77, 78, 79, 80], "seed": [5, 6, 7, 8, 9, 10, 14, 22, 31, 32, 52, 53, 54, 55, 58, 59, 64, 65, 66, 67, 70, 71], "12345": [5, 6, 7, 8, 9, 10, 14], "rng": [5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23], "default_rng": [5, 6, 7, 8, 9, 10, 14, 66], "them": [5, 6, 7, 8, 9, 10, 17, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 87], "singl": [5, 6, 7, 8, 9, 10, 26, 32, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "2000": [5, 29], "n_features_set": [5, 9, 10], "20": [5, 7, 8, 11, 17, 31, 32, 40, 44, 53, 77, 89], "sigma": [5, 9, 10, 22, 89], "beta": [5, 9, 10], "unimportant_mean": [5, 9, 10], "unimportant_sigma": [5, 9, 10], "4": [5, 6, 7, 9, 10, 17, 21, 31, 36, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 92], "uniform": [5, 9, 10, 17, 22, 31, 43, 56, 59, 64, 65, 67, 76], "x_import": [5, 9, 10], "normal": [5, 6, 9, 10, 17, 23, 29, 30, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 94], "scale": [5, 9, 10, 21, 23, 57, 97], "hstack": [5, 6, 7, 8, 9, 10, 14], "x_unimport": [5, 9, 10], "binomi": [5, 9, 10], "n": [5, 6, 7, 8, 9, 10, 17, 29, 30, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89, 94], "sum": [5, 9, 10, 14, 31, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "metric": [5, 6, 7, 8, 9, 10, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 64, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80, 85, 89, 97, 98, 99], "between": [5, 6, 7, 8, 12, 14, 20, 21, 25, 29, 30, 31, 33, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 90], "origin": [5, 6, 7, 29, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88], "permut": [5, 6, 7, 21, 43, 46, 47, 48, 49, 50, 51, 60, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 87, 95, 97], "row": [5, 6, 7, 32, 37, 68, 80, 81, 97], "covariate_index": [5, 6, 7, 8, 68, 69, 70, 71, 97], "randomli": [5, 6, 7, 17, 29, 36, 38, 40, 43, 46, 47, 48, 49, 50, 51, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "effici": [5, 6, 7, 40, 45, 52, 53, 68, 69, 70, 71, 73, 75, 79, 81, 82, 92, 93, 94, 95, 96, 97, 98, 99, 100], "manner": [5, 6, 7, 88], "posterior": [5, 6, 7, 43, 68, 69, 70, 71, 76], "n_repeat": [5, 6, 7, 8, 29, 30, 31, 33, 68, 69, 70, 71], "pvalu": [5, 6, 7, 8, 70, 71], "proport": [5, 6, 7, 40, 41, 43, 44, 46, 48, 50, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80], "less": [5, 6, 7, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "than": [5, 6, 7, 23, 29, 30, 31, 32, 36, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 97, 99], "observ": [5, 6, 7, 9, 10, 17, 21, 22, 40, 62, 70, 71], "sqrt": [5, 6, 9, 10, 14, 29, 30, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 95, 97], "est": [5, 6, 7, 8, 9, 10, 20], "tree_estim": [5, 6, 7, 8, 9, 10, 43, 76], "thu": [5, 6, 9, 10, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 78, 79, 87, 88, 89], "should": [5, 6, 7, 9, 10, 29, 30, 36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86], "arang": [5, 6, 7, 8, 20, 21, 32, 36, 37, 38], "dtype": [5, 6, 7, 8, 17, 33, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "int": [5, 6, 7, 8, 14, 17, 21, 29, 30, 33, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "print": [5, 6, 7, 8, 9, 10, 29, 31, 32, 33, 36, 37, 38, 43, 46, 47, 49, 50, 51, 56], "f": [5, 6, 7, 8, 9, 10, 17, 22, 26, 29, 31, 33, 37], "unimport": [5, 6], "014825362949721865": 5, "001998001998001998": [5, 6], "0031446699510388754": 5, "7892107892107892": 5, "tim": [5, 6, 7, 68, 69], "coleman": [5, 6, 7, 59, 68, 69], "wei": [5, 6, 7, 68, 69], "peng": [5, 6, 7, 68, 69], "luca": [5, 6, 7, 68, 69], "mentch": [5, 6, 7, 68, 69], "scalabl": [5, 6, 7, 68, 69], "journal": [5, 6, 7, 47, 48, 49, 68, 69, 80, 81, 85, 87], "machin": [5, 6, 7, 29, 30, 41, 42, 43, 46, 47, 50, 51, 68, 69, 74, 75, 85, 87, 88], "learn": [5, 6, 7, 26, 28, 29, 30, 32, 41, 42, 43, 46, 47, 50, 51, 52, 53, 58, 68, 69, 72, 73, 74, 75, 76, 78, 79, 82, 83, 85, 86, 87, 88, 89], "research": [5, 6, 7, 47, 68, 69, 85, 87], "23": [5, 6, 7, 42, 47, 49, 51, 68, 69, 73, 75, 79, 81, 86], "7679": [5, 6, 7, 68, 69], "7713": [5, 6, 7, 68, 69], "2022": [5, 6, 7, 68, 69, 82, 85], "142": [5, 11], "plot_mi_genuine_hypothesis_testing_forest": [5, 11], "do": [6, 7, 12, 16, 32, 36, 37, 38, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 90], "highli": [6, 17, 95], "term": [6, 64, 65, 88, 89], "smaller": [6, 9, 10, 41, 42, 43, 50, 51, 72, 73, 74, 75, 76], "instead": [6, 14, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "leverag": 6, "knowledg": [6, 17, 40, 53, 88, 89], "analyz": [6, 12, 13, 15, 36, 37, 90], "multiviewdecisiontreeclassifi": [6, 7, 8, 10, 36, 97, 98, 99], "graphic": [6, 7, 8, 65], "x_1": [6, 7, 8, 56], "rightarrow": [6, 7, 8, 65], "x_2": [6, 7, 8], "signal": [6, 8, 14, 57], "nois": [6, 7, 14, 17, 22, 56, 57, 58, 59, 65, 67], "low": [6, 7, 8, 14, 17, 21, 29, 30, 57], "make_multiview_classif": [6, 14], "n_features_1": [6, 8, 14], "n_features_2": [6, 7, 8, 14], "cluster_std": [6, 14], "none": [6, 10, 14, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "multiview": [6, 14, 56], "subspac": [6, 14, 64], "x0_first": [6, 14], "y0": [6, 14], "n_featur": [6, 7, 8, 14, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88], "integ": [6, 14, 40, 41, 43, 44, 46, 48, 50, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 98, 99], "10000": [6, 14, 21, 30], "center_box": 6, "x1_first": [6, 14], "y1": [6, 14, 67], "add": [6, 14, 32, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 56, 58, 65, 67, 94, 96, 97], "x0": [6, 14], "concaten": [6, 14, 17, 20, 21, 77], "standard_norm": [6, 7, 8, 14], "x1": [6, 14], "vstack": [6, 14], "10_000": [6, 50, 51], "n_features_view": [6, 14], "200": [6, 7, 8, 17, 99], "10010": 6, "feature_set_end": [6, 7, 8, 10, 14, 36, 44, 77], "apply_max_features_per_feature_set": [6, 7, 8, 36, 44, 77, 98, 99], "mv_result": [6, 7, 8], "dict": [6, 7, 8, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "overal": [6, 87], "v": [6, 12, 14, 19, 24, 28, 29, 34, 42, 43, 47, 49, 51, 58, 59, 73, 75, 79, 81, 87, 88, 90], "feature_stat": 6, "feature_pvalu": 6, "important_feature_stat": 6, "important_feature_pvalu": 6, "unimportant_feature_stat": 6, "unimportant_feature_pvalu": 6, "007719008004978045": 6, "007736145669554495": 6, "000999000999000999": 6, "00010913275452328897": 6, "5974025974025974": 6, "let": [6, 7, 8, 88], "investig": [6, 7, 8], "what": [6, 7, 8, 32, 36, 37, 38, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "happen": [6, 7, 8], "paramet": [6, 7, 8, 14, 21, 26, 29, 30, 31, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 95], "kept": [6, 7, 14], "ensur": 6, "max": [6, 17, 21, 32, 40, 41, 42, 50, 51, 52, 53, 72, 73, 74, 75, 82, 83, 88], "across": [6, 31, 36, 38, 40, 41, 43, 44, 46, 48, 50, 52, 53, 56, 57, 60, 69, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83], "rf_result": [6, 7, 8], "nanalyz": 6, "bar": [6, 7, 8, 36, 38], "axhlin": [6, 7, 8], "linestyl": [6, 7, 8], "ylabel": [6, 7, 8, 20, 22, 23, 26, 36, 38], "log10": [6, 7, 8], "xlim": [6, 7, 8, 17, 20, 37], "yscale": [6, 7, 8], "log": [6, 7, 8, 41, 43, 44, 46, 48, 50, 62, 63, 72, 74, 77, 78, 80, 88, 89], "0002094186458099223": 6, "113929375748064e": 6, "06": [6, 73], "999000999000999": 6, "00025259168549263133": 6, "abl": [6, 7, 86, 90, 97], "detect": [6, 17, 40, 85], "becaus": [6, 14, 36, 42, 43, 45, 47, 49, 51, 73, 75, 79, 81, 88], "challeng": 6, "rare": 6, "unabl": [6, 17, 97], "its": [6, 9, 10, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 72, 74, 76, 77, 78, 80, 88], "note": [6, 29, 32, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 92], "both": [6, 7, 8, 14, 40, 41, 43, 44, 46, 47, 48, 49, 50, 51, 56, 68, 69, 70, 71, 72, 74, 88], "approach": [6, 29, 87], "fail": [6, 8], "reject": [6, 7, 8], "higher": [6, 7, 8, 9, 10, 20, 30, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 87, 88, 99], "12": [6, 11, 32, 34, 37], "894": [6, 11], "plot_mi_imbalanced_hyppo_test": [6, 11], "To": [7, 8, 20, 29, 36, 37, 38, 41, 42, 43, 46, 47, 48, 49, 50, 51, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 90], "h_0": [7, 8], "h_1": [7, 8], "process": [7, 29, 40, 43, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 95], "had": 7, "perfect": 7, "properli": 7, "standard": [7, 8, 12, 17, 19, 24, 28, 29, 30, 31, 33, 34, 38, 45, 56, 64, 66, 80, 81, 88, 90], "explor": [7, 87], "case": [7, 14, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 88, 96, 98, 99], "altern": [7, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "determin": [7, 29, 40, 42, 47, 49, 51, 60, 73, 75, 79, 81, 88], "correctli": [7, 41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80, 98, 99], "doe": [7, 8, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87, 88], "exactli": [7, 80, 81, 87], "yet": 7, "sinc": [7, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 94, 95, 96, 97, 98, 99, 100], "make_spd_matrix": 7, "make_gaussian_mixtur": 7, "noise_dim": [7, 8, 56], "80": [7, 8], "class_prob": [7, 54, 55, 56], "6": [7, 17, 29, 30, 31, 33, 36, 37, 38, 40, 57, 85, 92], "fixed_cent": 7, "covari": [7, 17, 40, 54, 55, 56, 59, 61, 62, 63, 64, 66, 68, 69, 70, 71, 96, 99], "n_dim": [7, 54, 55, 59], "123": [7, 29, 30, 32], "transform": [7, 52, 53, 56, 57, 64, 82, 83], "second_x": 7, "first_x": 7, "n_features_end": [7, 8], "1100": [7, 8], "sample_dataset_per_tre": [7, 8, 9, 10, 68, 69], "lower": [7, 8, 20, 21, 26, 40, 43, 65, 67, 72, 73, 74, 75, 76, 88], "low_dim_feature_stat": [7, 8], "low_dim_feature_pvalu": [7, 8], "analysi": [7, 88], "high_dim_feature_stat": [7, 8], "high_dim_feature_pvalu": [7, 8], "006854040083133173": 7, "003996003996003996": 7, "0014633282455075447": 7, "7152847152847153": 7, "nanalys": 7, "now": [7, 8, 14, 29, 30, 31, 32, 33, 37, 86, 94, 97, 98, 99], "dim": [7, 8, 29, 30, 37], "analys": 7, "0030836678666186224": 7, "12787212787212787": 7, "0030053251005268677": 7, "8761238761238761": 7, "answer": 7, "neither": 7, "nor": 7, "u": [7, 21, 42, 47, 49, 51, 57, 73, 75, 79, 81, 86, 87], "level": [7, 32, 60], "087": [7, 11], "plot_co_might_altern": [7, 11], "perp": 8, "verifi": 8, "make_classif": [8, 41, 43, 46, 50], "signal_x": 8, "n_inform": [8, 43, 46, 47, 49, 50, 51, 59], "n_redund": [8, 43, 46, 50], "n_class": [8, 26, 32, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "class_sep": 8, "flip_i": 8, "01": [8, 11, 24, 32, 34, 37], "either": [8, 32, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 99], "procedur": [8, 60, 88], "abov": [8, 77], "make": [8, 14, 21, 29, 37, 87, 94, 96], "_x": 8, "copi": [8, 17, 26, 60], "rf_est": 8, "nimport": 8, "depend": [8, 29, 30, 65, 85], "000531159335617648": 8, "25074925074925075": 8, "621981566387827e": 8, "9200799200799201": 8, "ncompar": 8, "black": [8, 22, 26, 32, 36, 37], "grai": 8, "green": [8, 36, 38], "blue": [8, 21, 22], "titl": [8, 17, 26, 32, 36, 37, 38], "0003964891454939501": 8, "46353646353646355": 8, "0003607327046134534": 8, "5074925074925075": 8, "nset": 8, "00010650682437673975": 8, "981018981018981": 8, "142352901059247e": 8, "8931068931068931": 8, "again": 8, "0005592664624080035": 8, "16283716283716285": 8, "0001352178572823215": 8, "922077922077922": 8, "contrast": [8, 29, 32, 36, 38, 87, 88], "831": [8, 11], "plot_co_might_nul": [8, 11], "calcul": [9, 10, 21, 37, 84, 89], "you": [9, 10, 33, 36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 90], "specifi": [9, 10, 36, 37, 41, 43, 44, 46, 48, 50, 56, 57, 72, 74, 76, 77, 78, 80, 88], "maximum": [9, 10, 21, 32, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89], "modifi": [9, 10], "max_fpr": [9, 10], "125": [9, 10, 37, 95], "7": [9, 17, 33, 85, 92], "permute_forest_fract": [9, 10, 68, 69], "posterior_arr": [9, 10], "return_posterior": [9, 10, 68, 69, 70, 71], "ash": [9, 10], "90": [9, 10, 40], "5482363413819962": 9, "expect": [9, 10, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 64, 68, 69, 70, 71, 73, 75, 78, 79, 80, 81, 87], "due": [9, 10, 29, 33, 62], "weak": [9, 41, 42, 50, 51], "5134123775494644": 9, "anytim": [9, 10], "pickl": [9, 10, 88], "observe_stat_": [9, 10, 68, 69], "observe_samples_": [9, 10], "observe_posteriors_": [9, 10, 68, 69], "n_tree": [9, 10], "n_samples_test": [9, 10, 68, 69], "y_true_final_": [9, 10, 68, 69], "271": [9, 11], "plot_might_auc": [9, 11], "hypothesi": [10, 11, 56, 59, 68, 69, 70, 71, 85, 95, 96, 97], "mutli": 10, "auroc": 10, "510": 10, "est_mv": 10, "22": [10, 41, 42, 45, 50, 51, 72, 73, 74, 75], "570947570947571": 10, "lack": 10, "5904913799650642": 10, "226": [10, 11], "plot_might_mv_auc": [10, 11], "02": [11, 26, 27, 73], "450": 11, "auto_examples_hypothesis_test": 11, "04": [11, 18, 24, 34, 39], "scikit": [12, 26, 36, 52, 53, 82, 83, 86, 87, 88, 92], "algorithm": [12, 17, 29, 40, 45, 52, 53, 64, 68, 69, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 90], "variant": [12, 13, 14, 19, 90], "concern": [12, 16, 90], "extendedisolationforest": [12, 16, 18, 90], "interpol": [12, 19, 24, 36, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90], "interv": [12, 19, 20, 22, 24, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 88, 90], "regressor": [12, 19, 23, 24, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 71, 72, 73, 74, 75, 79, 81, 90], "surfac": [12, 25, 27, 28, 34, 37, 38, 90], "iri": [12, 25, 27, 32, 72, 76, 78, 88, 90], "extra": [12, 28, 33, 34, 38, 41, 42, 74, 75, 90, 95], "cc18": [12, 28, 34, 38, 87, 90], "pariti": [12, 28, 34, 87, 90], "speed": [12, 28, 29, 34, 51, 89, 90, 95], "strategi": [12, 35, 43, 50, 51, 60, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90], "visual": [12, 35, 37, 38, 39, 90], "matrix": [12, 14, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 61, 62, 63, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 90], "matric": [12, 35, 36, 39, 40, 52, 53, 57, 59, 60, 88, 90, 94], "seri": [12, 35, 39, 80, 81, 90], "auto_examples_python": [12, 90], "auto_examples_jupyt": [12, 90], "multiviewrandomforestclassifi": 14, "uniformli": [14, 31, 36, 37], "vastli": 14, "number": [14, 17, 31, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 96, 97, 98, 99], "If": [14, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 60, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "known": [14, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "pass": [14, 30, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 94, 98, 99], "via": [14, 26, 58, 78, 79, 82, 85, 86, 87, 94, 96, 97, 99], "splitter": [14, 43, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 96], "project": [14, 17, 33, 35, 39, 44, 46, 47, 78, 79, 85, 87, 88, 94, 95, 96, 97, 98, 99, 100], "defaultdict": [14, 20, 21, 22, 23], "panda": [14, 29, 30, 31, 32, 33, 52, 53, 58, 82, 83, 94, 95, 96], "pd": [14, 29, 30, 31, 32, 33, 66], "seaborn": [14, 29, 30, 31, 33], "sn": [14, 29, 30, 31, 33], "cross_val_scor": [14, 72, 73, 76, 78, 79, 81], "cluster_std_first": 14, "cluster_std_second": 14, "five": 14, "dimens": [14, 29, 30, 31, 36, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 59, 60, 65, 80, 81, 82, 83, 88], "vari": [14, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "thousand": 14, "fix": [14, 43, 46, 47, 48, 49, 50, 51, 64, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83, 92, 93, 94, 95, 96, 97, 98, 99, 100], "so": [14, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "20000": 14, "astyp": [14, 29, 30, 31, 33, 36, 37, 38], "portion": 14, "increasingli": 14, "idx": [14, 20, 21, 22, 23, 26, 32, 37], "enumer": [14, 20, 21, 22, 23, 26, 29, 30, 31, 33, 37, 43, 46, 47, 48, 49, 50, 51], "append": [14, 17, 20, 21, 22, 23, 29, 30, 31, 33], "over": [14, 17, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 56, 72, 74, 76, 77, 80, 81, 87, 97], "list": [14, 20, 21, 22, 23, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "arrai": [14, 17, 20, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 98, 99], "mvrf": 14, "cross": [14, 88], "valid": [14, 21, 23, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "rf_score": 14, "mvrf_score": 14, "len": [14, 17, 20, 21, 22, 23, 32, 36, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "70": [14, 94], "122": 14, "141": 14, "experi": 14, "df": [14, 29, 30, 31, 33], "datafram": [14, 29, 30, 31, 32, 33, 52, 53, 60, 82, 83], "melt": 14, "easier": [14, 96], "id_var": 14, "var_nam": 14, "value_nam": 14, "lineplot": [14, 30], "marker": [14, 21, 37], "o": [14, 17, 20, 29, 37, 59, 82, 88, 94, 95], "hue": [14, 30], "set_titl": [14, 17, 29, 30, 31, 33], "As": [14, 33, 36, 38, 59, 70, 71, 84, 88], "outperform": [14, 33, 88], "increas": [14, 21, 29, 30, 41, 42, 45, 50, 51, 57, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 87], "kei": [14, 36, 72, 73, 74, 75], "18": [14, 15, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "102": [14, 15], "plot_multiview_dtc": [14, 15], "auto_examples_multiview": 15, "anomali": [17, 40], "isolationforest": [17, 40], "demo": 17, "toi": 17, "randn": [17, 23], "spheric": 17, "slightli": 17, "deform": 17, "notat": 17, "inlier": [17, 40], "assign": [17, 82, 83, 89], "ground": [17, 22, 88], "wherea": [17, 51, 65, 88], "outlier": [17, 40, 85], "inspect": [17, 26, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "decisionboundarydisplai": [17, 26], "n_outlier": 17, "120": 17, "40": [17, 31], "cluster_1": 17, "cluster_2": 17, "ones": [17, 36, 37, 38], "stratifi": [17, 43, 60, 68, 76, 96], "handl": [17, 88, 98, 99], "legend_el": 17, "squar": [17, 37, 42, 47, 49, 51, 73, 75, 79, 81, 97], "nuniformli": 17, "extended_clf": 17, "max_sampl": [17, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 99], "feature_combin": [17, 36, 37, 38, 40, 44, 46, 47, 52, 77, 78, 79, 83, 87, 88], "environ": [17, 86], "pleas": [17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "rerun": 17, "cell": 17, "html": [17, 87], "represent": 17, "trust": 17, "On": [17, 68, 69], "github": [17, 86], "render": 17, "try": [17, 88], "load": [17, 21, 26, 32, 33, 57], "page": [17, 86, 92, 96], "nbviewer": 17, "org": [17, 29, 30, 31, 33, 53, 57, 59, 72, 73, 76, 78, 79, 87, 88, 89], "isolationforestisolationforest": 17, "background": 17, "repres": [17, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "whether": [17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "area": [17, 22], "displai": [17, 26], "isoforest": 17, "extendedisoforest": 17, "disp": 17, "from_estim": [17, 26], "response_method": [17, 26], "ax_": 17, "nof": 17, "By": [17, 41, 42, 43, 50, 51, 52, 53, 59, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 83, 87], "decision_funct": [17, 40], "measur": [17, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89], "Such": 17, "score": [17, 29, 30, 31, 32, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "averag": [17, 29, 38, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 64, 77, 78, 79, 83, 87], "itself": [17, 31, 41, 43, 44, 46, 48, 50, 52, 53, 64], "depth": [17, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "equival": [17, 40, 42, 44, 46, 47, 50, 51, 78, 79, 88], "requir": [17, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "short": 17, "particular": [17, 40, 88], "close": [17, 40, 48, 49, 80, 81, 85, 87], "similarli": [17, 88], "larg": [17, 29, 30, 33, 41, 42, 43, 46, 47, 48, 49, 50, 51, 59, 72, 73, 74, 75, 76, 78, 79], "correspond": [17, 20, 21, 22, 23, 26, 32, 41, 43, 44, 46, 48, 49, 50, 57, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "colorbar": [17, 36, 38], "sinusoid": 17, "ad": [17, 40, 41, 42, 50, 51, 52, 53, 56, 65, 72, 73, 74, 75, 82, 83, 88, 94, 95, 96], "top": [17, 21, 32, 85, 87], "8": [17, 21, 29, 33, 37, 51, 65, 76], "pi": [17, 63, 65, 89], "sin": [17, 22, 56, 65], "add_subplot": [17, 37], "111": 17, "30": [17, 29, 30, 44, 73, 77], "ylim": [17, 37], "15": [17, 20, 21, 26, 32], "circl": 17, "locat": 17, "bottom": 17, "right": [17, 21, 23, 26, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "corner": 17, "inlier_sampl": 17, "outlier_sampl": 17, "theta": [17, 88], "estimators_": [17, 32, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "max_tree_depth": 17, "get_depth": [17, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "rang": [17, 20, 21, 22, 23, 26, 29, 31, 32, 37, 40, 45, 80, 81], "polar": [17, 52, 53, 82, 83], "radii_in": 17, "radii_out": 17, "get": [17, 20, 21, 22, 23, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "radii": 17, "lw": [17, 21, 22], "b": [17, 32, 57], "max_depth_tre": 17, "leaf_index": 17, "appli": [17, 20, 21, 22, 23, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 59, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97, 98, 99], "_decision_path_length": 17, "squeez": [17, 37], "j": [17, 20, 43, 59, 72, 73, 76, 78, 79, 86, 88], "nnomin": 17, "round": [17, 21, 31, 43, 44, 46, 47, 48, 49, 50, 51, 98, 99], "var": 17, "xlabel": [17, 20, 22, 23, 26, 36, 38], "set_xticklabel": [17, 36, 38], "get_xaxi": 17, "set_vis": 17, "get_yaxi": 17, "sahand": 17, "hariri": 17, "matia": 17, "carrasco": 17, "kind": 17, "robert": [17, 57], "brunner": 17, "ieee": [17, 40, 59, 62], "transact": [17, 40], "engin": 17, "33": [17, 34, 75], "1479": 17, "1489": 17, "2019": [17, 43, 76], "506": [17, 18], "plot_extended_isolation_forest": [17, 18], "auto_examples_outlier_detect": 18, "comparison": [20, 29, 30, 31, 33, 50, 51], "dure": [20, 29, 37, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "desir": [20, 23, 69, 88], "li": [20, 21, 22, 23, 48, 49, 53, 80, 81, 85, 87, 89, 94, 95, 96, 97, 98, 99, 100], "point": [20, 21, 26, 31, 32, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89], "randomforestregressor": [20, 21, 22, 41, 42, 47, 49, 68, 69, 71, 74], "four": [20, 29, 41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "simpl": [20, 26, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "illustr": 20, "midpoint": 20, "detail": [20, 29, 30, 31, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "006aff": [20, 21, 22], "ffd237": 20, "0d4599": 20, "f2a619": [20, 21, 22], "a6e5ff": [20, 23], "025": [20, 21, 22], "975": [20, 21, 22], "y_median": 20, "y_err": 20, "fell": [20, 21, 22, 23], "leaf_id": [20, 21, 22, 23], "dictionari": [20, 21, 22, 23, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "map": [20, 21, 22, 23, 32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "node_to_indic": [20, 21, 22, 23], "id": [20, 21, 22, 23, 29, 30, 33], "fall": [20, 21, 22, 23, 41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "leaf_ids_test": [20, 21, 22, 23], "y_pred_quantil": [20, 21, 23], "merg": [20, 21, 22, 23], "sublist": [20, 21, 22, 23], "quatil": [20, 21, 22, 23], "predit": [20, 21, 22, 23], "y_pred": [20, 21, 22, 41, 42, 47, 49, 50, 51, 73, 75, 79, 81], "sc": 20, "35": 20, "zorder": 20, "eb": 20, "median": [20, 21, 22, 23, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "errorbar": 20, "yerr": 20, "ecolor": 20, "fmt": 20, "75": [20, 36, 95], "xtick": 20, "tolist": 20, "actual": [20, 23, 36, 37, 38, 40], "plot_quantile_interpolation_with_rf": [20, 24], "california": 21, "hous": 21, "being": [21, 45, 56, 88], "95": [21, 22], "bound": [21, 37, 65, 67], "ticker": 21, "funcformatt": 21, "kfold": 21, "util": [21, 23, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "check_random_st": [21, 23], "argument": [21, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 96, 97, 98, 99], "ani": [21, 37, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 94], "variat": [21, 31], "get_quantile_predict": 21, "dollar_formatt": 21, "lambda": [21, 88], "format": [21, 32, 36, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 82, 83], "price": 21, "fetch_california_h": 21, "min": [21, 32, 40], "perm": 21, "kf": 21, "n_split": [21, 29, 30, 31, 33], "get_n_split": 21, "y_true": [21, 41, 42, 47, 49, 50, 51, 73, 75, 79, 81], "y_pred_low": [21, 22], "y_pred_upp": [21, 22], "train_index": 21, "test_index": 21, "set_param": [21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "y_pred_i": 21, "dollar": 21, "1e5": 21, "confid": [21, 22, 43, 88], "against": 21, "segment": [21, 82], "halfwai": 21, "ax1": 21, "ax2": 21, "nrow": [21, 37], "ncol": [21, 37], "y_pred_interv": 21, "sort_idx": 21, "argsort": 21, "y_min": [21, 32], "minimum": [21, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "y_max": [21, 32], "float": [21, 29, 30, 31, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "mid": 21, "upp": 21, "e0f2ff": [21, 22], "m": [21, 22, 48, 49, 57, 80, 81, 85, 87, 88], "_": [21, 26], "grei": 21, "grid": [21, 31, 32, 37], "xaxi": 21, "set_major_formatt": 21, "yaxi": 21, "set_xlim": 21, "fill_between": [21, 22], "subplots_adjust": 21, "pad": [21, 26, 32], "868": [21, 24], "plot_quantile_regression_intervals_with_rf": [21, 24], "function": [22, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 60, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 98, 99], "noisi": [22, 31, 56, 57], "make_toy_dataset": 22, "lognorm": 22, "atleast_2d": 22, "xx": [22, 32], "max_depth": [22, 29, 30, 31, 32, 33, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "y_pred_quatil": 22, "y_pred_m": 22, "shade": 22, "dot": [22, 56], "ravel": [22, 32], "991": [22, 24], "plot_quantile_toy_example_with_rf": [22, 24], "synthet": 23, "skew": 23, "sp": 23, "obliquerandomforestregressor": [23, 87, 94], "5000": 23, "skewnorm_rv": 23, "skewnorm": 23, "rv": 23, "regr_orf": 23, "y_pred_orf": 23, "idea": 23, "better": [23, 78, 79, 87, 88], "off": [23, 31, 65], "c0c0c0": 23, "e7a4f5": 23, "qrf": 23, "orf": [23, 29, 30], "hist": 23, "count": [23, 84], "plot_quantile_vs_standard_oblique_forest": [23, 24], "627": 24, "auto_examples_quantile_predict": 24, "quantil": [24, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85], "467": 24, "302": 24, "pair": [26, 32, 84, 88], "boundari": [26, 32, 37, 45, 48, 49, 80, 81, 94], "made": 26, "threshold": [26, 29, 40, 88], "rule": 26, "infer": [26, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "built": [26, 29, 32, 74, 75, 87, 88], "load_iri": [26, 32, 72, 74, 76, 78, 88], "_lib": [26, 36, 37, 38], "plot_tre": 26, "obliquedecisiontreeclassifi": [26, 38, 43, 44, 46, 48, 79, 88], "ship": 26, "plot_color": 26, "ryb": 26, "plot_step": [26, 32], "clf_label": 26, "123456": [26, 31, 33], "flatten": [26, 37], "pairidx": 26, "onli": [26, 32, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "h_pad": [26, 32], "w_pad": [26, 32], "cmap": [26, 32, 36, 37, 38], "rdylbu": 26, "feature_nam": [26, 32], "target_nam": 26, "suptitl": [26, 32, 37], "borderpad": 26, "handletextpad": 26, "tight": [26, 32], "adam2392": 26, "document": [26, 85, 87], "sklearn_vs_sktre": 26, "plot_iris_dtc": [26, 27], "72": [26, 94], "userwarn": 26, "No": 26, "colormap": 26, "ignor": [26, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "togeth": [26, 32, 88, 89], "fill": [26, 32], "154": [26, 27], "auto_examples_sklearn_vs_sktre": 27, "A": [29, 30, 31, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 94], "openml": [29, 30, 33], "benchmark": [29, 30, 33, 85], "suit": [29, 30, 33], "classic": [29, 74, 75], "look": [29, 36, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90], "group": [29, 36, 74, 75, 88, 89], "drawn": [29, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 66, 68, 69, 70, 71, 74, 75, 87], "select": [29, 36, 40, 42, 47, 49, 51, 57, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "among": [29, 44, 46, 47, 48, 49, 52, 53, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "chosen": [29, 41, 42, 43, 50, 51, 72, 73, 74, 75, 76], "greedi": [29, 43], "phish": [29, 30, 33], "websit": [29, 30, 33], "http": [29, 30, 31, 33, 53, 57, 59, 72, 73, 76, 78, 79, 86, 87, 88, 89], "www": [29, 30, 33, 57, 72, 73, 76, 78, 79], "search": [29, 30, 31, 33, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "type": [29, 30, 32, 33, 43, 59, 68, 69, 70, 71, 76, 88, 94], "4534": [29, 30, 33], "wdbc": [29, 33], "1510": [29, 33], "lsvt": 29, "1484": 29, "har": [29, 30], "1478": [29, 30], "cnae": [29, 33], "1468": [29, 33], "subsampl": [29, 30, 33, 40, 43, 76, 88], "constraint": [29, 33, 41, 42, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "veri": [29, 32, 41, 42, 43, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 78, 79], "856": 29, "mostli": [29, 38], "zero": [29, 31, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "datatyp": [29, 30], "nomin": [29, 30], "455": 29, "numer": [29, 30, 33, 99], "310": 29, "561": 29, "864": 29, "deliber": [29, 30], "ci": [29, 30], "appropri": [29, 30], "bia": [29, 87], "tradeoff": [29, 88], "substanti": 29, "faster": [29, 30, 82], "omit": [29, 41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "computation": [29, 70, 71], "expens": [29, 70, 71], "main": [29, 40, 86], "stem": 29, "omiss": 29, "ascend": 29, "henc": [29, 87], "complex": [29, 41, 42, 43, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 91], "nlog": 29, "draw": [29, 30, 31, 33, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "suitabl": 29, "affect": 29, "geurt": [29, 30, 41, 42, 51, 74, 75], "ernst": [29, 30, 41, 42, 51, 74, 75], "wehenkel": [29, 30, 41, 42, 51, 74, 75], "63": [29, 30, 41, 42, 51, 74, 75, 94], "2006": [29, 30, 41, 42, 51, 74, 75, 82], "n_cv": [29, 30, 31, 33], "time_taken": [29, 30], "phishingwebsit": [29, 33], "eorf": [29, 30], "815588": 29, "687826": 29, "731299": 29, "732381": 29, "711114": 29, "170016": 29, "532915": 29, "514509": 29, "518026": 29, "545665": 29, "datetim": [29, 30, 31, 33], "fetch_openml": [29, 30, 33], "repeatedkfold": [29, 30, 31, 33], "cross_valid": [29, 30, 31, 33], "extraobliquerandomforestclassifi": [29, 30, 32], "obliquerandomforestclassifi": [29, 30, 31, 32, 33, 87], "max_sample_s": [29, 30], "phishing_websit": [29, 30], "cnae_9": 29, "data_id": [29, 30, 33], "load_cc18": [29, 30, 33], "as_fram": [29, 30, 33], "parser": [29, 30, 33], "d_name": [29, 30, 33], "frame": [29, 30, 33], "iloc": [29, 30, 31, 33], "get_scor": [29, 30, 31, 33], "kwarg": [29, 30, 31, 33, 40, 52, 53, 82, 83, 98, 99], "tmp": [29, 30, 31, 33], "t0": [29, 30, 31, 33], "test_scor": [29, 30, 31, 33], "accuraci": [29, 30, 31, 33, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 72, 74, 76, 77, 78, 80], "convert": [29, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "taken": [29, 30, 56, 77, 78, 79, 87], "total_second": [29, 30], "explod": [29, 30, 31, 33], "reset_index": [29, 30, 31, 33], "inplac": [29, 30, 31, 33], "param": [29, 30, 31, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "concat": [29, 30, 33], "from_dict": 29, "orient": 29, "index": [29, 36, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88], "groupbi": [29, 30], "set_size_inch": [29, 30, 33], "stripplot": [29, 31, 33], "queri": [29, 31, 33, 45], "dodg": [29, 31, 33], "boxplot": [29, 31, 33], "white": [29, 31, 33, 36, 38], "041": [29, 34], "plot_extra_oblique_random_forest": [29, 34], "purpos": [30, 32, 86], "chang": [30, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 92, 93, 94, 95, 96, 97, 98, 99, 100], "11055": 30, "10299": 30, "562": 30, "section": [30, 32, 57], "focu": 30, "notabl": [30, 33, 98], "grow": [30, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "linearli": [30, 38, 57], "signific": [30, 87], "sample_s": 30, "n_row": [30, 32, 37], "df_tmp": 30, "090": [30, 34], "plot_extra_orf_sample_s": [30, 34], "problem": [31, 41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80, 85, 91], "xor": 31, "task": [31, 32, 85], "limit": [31, 45, 91, 96], "carri": [31, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "about": [31, 88], "odd": 31, "greater": [31, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "otherwis": [31, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "further": 31, "public": [31, 36, 37, 38, 87], "epub": 31, "siam": [31, 48, 49, 80, 81, 82, 85, 87], "doi": [31, 48, 49, 53, 59, 80, 81, 87, 88, 89], "epdf": 31, "1137": [31, 48, 49, 80, 81, 87], "9781611974973": 31, "56": 31, "It": [31, 33, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 88, 89], "took": [31, 33], "sparse_par": 31, "p_star": 31, "random_se": [31, 32, 64, 65, 67], "OF": [31, 33], "hyper": 31, "t_d": 31, "rff": 31, "plot_sim_": 31, "jpg": 31, "604": [31, 34], "plot_oblique_axis_aligned_forests_sparse_par": [31, 34], "sepal": 32, "width": [32, 80, 81], "length": [32, 37, 40, 45, 57, 60, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "petal": 32, "third": [32, 33, 36], "extraobliquerandomforest": 32, "92": 32, "obliquerandomforest": 32, "9866666666666667": 32, "98": 32, "9933333333333333": 32, "listedcolormap": [32, 36, 38], "1234": [32, 66], "spectral": 32, "fine": 32, "step": [32, 40, 60], "contour": 32, "plot_step_coars": 32, "coars": 32, "guess": 32, "plot_idx": 32, "n_model": 32, "sec": 32, "std": 32, "consol": 32, "str": [32, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 64, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "slice": [32, 60, 68, 69], "awai": 32, "useless": 32, "part": [32, 36, 37, 38], "string": [32, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "model_titl": 32, "model_detail": 32, "hasattr": 32, "fontsiz": 32, "mesh": 32, "input": [32, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88], "x_min": 32, "x_max": 32, "yy": 32, "meshgrid": 32, "blend": 32, "isinst": 32, "z": [32, 37, 61, 64, 65, 67], "c_": 32, "contourf": 32, "choos": [32, 43, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "adaboost": 32, "fewer": 32, "good": [32, 87], "enough": 32, "earli": 32, "estimator_alpha": 32, "coarser": 32, "regularli": 32, "space": [32, 33, 44, 45, 52, 53, 62, 64, 77, 82, 83, 88], "outlin": 32, "xx_coarser": 32, "yy_coars": 32, "z_points_coars": 32, "cs_point": 32, "move": 32, "next": [32, 44, 77, 86], "sequenc": [32, 60, 82], "subset": [32, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 74, 76, 77, 78, 80, 88], "obliquedecisiontre": 32, "extraobliquedecisiontre": 32, "basic": [32, 72, 73, 74, 75, 76], "decisiontre": 32, "three": [32, 33, 36], "distinct": [32, 56], "434": [32, 34], "plot_oblique_forests_iri": [32, 34], "31": 33, "former": [33, 51], "entir": [33, 44, 48, 49, 77, 80, 81], "latter": [33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "normin": 33, "dub": 33, "statu": 33, "activ": [33, 86], "857": 33, "notic": [33, 72, 73, 74, 75], "mechan": [33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "practic": [33, 36, 37, 38, 87, 91], "object": [33, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89], "551": [33, 34], "plot_oblique_random_forest": [33, 34], "721": 34, "auto_examples_sparse_oblique_tre": 34, "09": 34, "07": 34, "oper": [36, 72, 76, 78, 80, 81], "under": [36, 85], "assumpt": 36, "hyperparamet": [36, 37, 38, 88, 97], "relat": [36, 37, 38, 40, 96], "privat": [36, 37, 38], "cython": [36, 37, 38, 82, 83, 86, 95], "patch": [36, 48, 49, 80, 81, 94, 97], "api": [36, 37, 38, 40, 43, 45, 52, 53, 76, 80, 81, 82, 83, 85, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100], "just": [36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 65, 68, 69, 86], "wrapper": [36, 37, 38], "underli": [36, 37, 38, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "relev": [36, 37, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85], "scalarmapp": [36, 38], "_criterion": [36, 37, 38], "gini": [36, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "_oblique_splitt": [36, 38], "multiviewsplittertest": 36, "min_samples_leaf": [36, 37, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "min_weight_leaf": [36, 37, 38], "intp": [36, 59], "n_feature_set": [36, 44, 77], "max_features_per_set_": [36, 77], "monotonic_cst": [36, 37, 38, 41, 42, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 95], "missing_value_feature_mask": [36, 37, 38], "dummi": [36, 37, 38], "repeat": [36, 37, 59, 65], "float32": [36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "float64": [36, 37, 38, 59, 73, 75, 79, 81], "intern": [36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89], "expos": [36, 38], "tester": 36, "directli": [36, 37, 38], "init_test": [36, 37, 38], "though": 36, "contigu": [36, 37, 48, 49, 80, 81], "projection_matrix": [36, 38], "sample_projection_matrix_pi": [36, 37, 38], "heatmap": [36, 38], "imshow": [36, 37, 38], "aspect": [36, 38], "axvlin": 36, "iend": 36, "vector": [36, 38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 59, 66, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88, 89], "set_yticklabel": [36, 38], "mappabl": [36, 38], "sm": [36, 38], "set_arrai": [36, 38], "empti": [36, 38, 43, 76], "tick": [36, 38], "set_label": [36, 38], "weight": [36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 94], "previou": [36, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69], "setup": 36, "max_features_per_set": 36, "factor": [36, 40, 57, 59], "want": 36, "onc": [36, 68, 69], "control": [36, 38, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 97, 99], "plot_multiview_axis_aligned_splitt": [36, 39], "patchobliquedecisiontreeclassifi": [37, 48], "done": [37, 60, 80, 81, 87, 97], "data_dim": [37, 48, 49, 80, 81], "n_col": 37, "n_depth": 37, "robust": [37, 85], "hyperrectangl": 37, "start": [37, 59, 68, 69, 86], "min_patch_dim": [37, 48, 49, 80, 81], "max_patch_dim": [37, 48, 49, 80, 81], "constrain": [37, 88], "arbitrarili": [37, 42, 47, 49, 51, 73, 75, 79, 81], "_morf_splitt": 37, "bestpatchsplittertest": 37, "sake": [37, 38], "feature_weight": [37, 48, 49, 80, 81], "th": [37, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "appear": [37, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "dim_contigu": [37, 48, 49, 80, 81], "proj_mat": 37, "sharex": 37, "sharei": 37, "viridi": 37, "nonzero": 37, "custom": [37, 41, 42, 50, 51, 52, 53], "set_zlim": 37, "necessarili": [37, 45, 87], "certain": 37, "n_channel": 37, "n_time": 37, "channel": 37, "726": [37, 39], "plot_projection_matric": [37, 39], "small": [38, 41, 43, 44, 46, 47, 48, 50, 52, 53], "element": [38, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "candid": [38, 87, 88, 97], "bestobliquesplittertest": 38, "orang": 38, "plot_sparse_projection_matrix": [38, 39], "834": 39, "auto_examples_splitt": 39, "844": 39, "264": 39, "auto": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "contamin": 40, "bootstrap": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 60, 68, 69, 70, 71, 87, 99], "verbos": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 86], "warm_start": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "read": [40, 41, 42, 46, 47, 50, 51, 72, 73, 74, 75, 76, 78, 79], "default": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 96], "256": 40, "larger": [40, 43, 60, 76, 87], "amount": [40, 43, 74, 75], "paper": [40, 87, 88], "n_features_in_": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "enabl": [40, 43, 82, 95], "lead": [40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 78, 79, 87], "longer": 40, "bool": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "individu": 40, "consid": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 96], "extraobliquedecisiontreeregressor": [40, 95], "job": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64], "parallel": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 64], "unless": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "joblib": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 86], "parallel_backend": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51], "context": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51], "processor": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51], "glossari": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "pseudo": 40, "branch": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "reus": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51], "whole": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51], "version": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 92], "21": [40, 47, 85, 87, 94], "ellipticenvelop": 40, "svm": 40, "oneclasssvm": 40, "unsupervis": [40, 52, 53, 82, 83, 85, 91, 94, 95], "support": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 94, 98, 99], "libsvm": 40, "localoutlierfactor": 40, "local": [40, 86], "lof": 40, "extratreeregressor": [40, 42, 74], "ceil": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "log_2": 40, "liu": 40, "et": [40, 85], "al": [40, 85], "2008": [40, 59], "refer": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 62, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "fei": 40, "toni": 40, "ting": 40, "kai": 40, "ming": 40, "zhou": 40, "zhi": 40, "hua": 40, "mine": [40, 53, 82, 89], "icdm": 40, "08": 40, "eighth": 40, "confer": [40, 53, 82, 89], "acm": [40, 53, 89], "discoveri": [40, 53, 89], "tkdd": 40, "2012": 40, "attribut": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 57, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "estimator_": [40, 41, 42, 50, 51, 52, 53, 68, 69, 76], "child": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "templat": [40, 41, 42, 43, 50, 51, 52, 53, 76], "sub": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "estimators_features_": 40, "ndarrai": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 59, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "estimators_samples_": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "max_samples_": 40, "offset_": 40, "offset": 40, "raw": 40, "score_sampl": 40, "equal": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 97], "seen": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "24": [40, 41, 42, 50, 51, 72, 73, 74, 75], "feature_names_in_": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "sever": [40, 43, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "n_left": 40, "path": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "array_lik": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 60, 61, 62, 63, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "csr_matrix": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "abnorm": 40, "csc_matrix": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "Not": [40, 45, 52, 53, 77, 78, 79, 80, 81, 82, 83], "convent": [40, 45, 52, 53, 82, 83], "self": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "fit_predict": [40, 52, 53, 82, 83], "get_metadata_rout": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "metadata": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "rout": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "check": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "metadatarequest": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "encapsul": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "get_param": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "deep": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87], "subobject": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "is_inli": 40, "tell": 40, "accord": [40, 45], "opposit": 40, "set_fit_request": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "unchang": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "request": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85], "enable_metadata_rout": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "set_config": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "option": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 96], "meta": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "rais": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "error": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "alia": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "metadata_rout": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "retain": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "exist": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "insid": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 94], "pipelin": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "effect": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90], "updat": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "nest": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "compon": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "__": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "properti": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 96, 99], "dynam": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71], "identifi": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 89], "member": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71], "bag": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 99], "re": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "reduc": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 87], "memori": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79], "footprint": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71], "fetch": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71], "mai": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89], "slower": [40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71], "min_samples_split": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 95], "min_weight_fraction_leaf": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "max_leaf_nod": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "min_impurity_decreas": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "oob_scor": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "class_weight": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "ccp_alpha": [41, 42, 43, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "max_bin": [41, 42, 50, 51], "store_leaf_valu": [41, 42, 50, 51, 72, 73, 74, 75, 77, 78, 79, 80, 81], "log_loss": [41, 50, 72, 74], "qualiti": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89], "criteria": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89], "impur": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88], "shannon": [41, 50, 72, 74], "gain": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "mathemat": [41, 48, 49, 50, 52, 53, 72, 74, 80, 81, 85, 87, 91], "formul": [41, 50, 52, 53, 72, 74, 91], "expand": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "until": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "pure": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "fraction": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "least": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "smooth": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "especi": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "log2": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 95], "stop": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "partit": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 62, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 88], "found": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "rel": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 89], "reduct": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "unlimit": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "induc": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "decreas": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "equat": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "n_t": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "n_t_r": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "right_impur": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "n_t_l": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "left_impur": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "current": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88], "19": [41, 42, 50, 51, 72, 73, 74, 75], "callabl": [41, 42, 50, 51, 52, 53, 56, 65, 67, 82, 83], "out": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 70, 71, 87, 99], "accuracy_scor": [41, 50], "signatur": [41, 42, 50, 51, 52, 53], "decision_path": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "learner": [41, 42, 50, 51], "balanc": [41, 43, 44, 46, 48, 50, 54, 55, 72, 74, 76, 77, 78, 80], "balanced_subsampl": [41, 43, 44, 46, 48, 50], "class_label": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "suppos": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "output": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 91, 94], "multioutput": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "multilabel": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "everi": [41, 43, 44, 46, 48, 49, 50, 72, 74, 76, 77, 78, 80, 81, 88], "mode": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80, 86], "automat": [41, 43, 44, 46, 48, 50, 60, 72, 74, 76, 77, 78, 80], "adjust": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "invers": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "frequenc": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "bincount": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "except": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 73, 75, 79, 81, 87], "grown": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 78, 79], "multipli": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "through": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85], "minim": [41, 42, 43, 47, 49, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88, 89], "cost": [41, 42, 43, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88], "prune": [41, 42, 43, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "subtre": [41, 42, 43, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "largest": [41, 42, 43, 50, 51, 65, 72, 73, 74, 75, 76], "255": [41, 42, 50, 51], "miss": [41, 42, 50, 51, 72, 73, 74, 75, 76, 88], "experiment": [41, 42, 50, 51, 72, 73, 74, 75, 77, 85, 95, 96, 97], "get_leaf_node_sampl": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "monoton": [41, 42, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "enforc": [41, 42, 43, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "multiclass": [41, 50, 72, 74, 76], "n_outputs_": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "hold": [41, 50, 72, 74, 76], "extratreesregressor": [41, 51, 74, 75], "optim": [41, 42, 80, 81, 88], "etc": [41, 42, 43, 46, 47, 48, 49, 50, 51, 64, 72, 73, 74, 75, 76, 78, 79], "fulli": [41, 42, 43, 46, 47, 48, 49, 50, 51, 68, 69, 72, 73, 74, 75, 76, 78, 79], "unprun": [41, 42, 43, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 78, 79], "potenti": [41, 42, 43, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 78, 79, 81], "consumpt": [41, 42, 43, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 78, 79], "extratreeclassifi": [41, 75], "base_estimator_": [41, 42, 50, 51], "wa": [41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 69, 70, 71, 82, 83, 88, 97], "renam": [41, 42, 50, 51], "classes_": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "n_classes_": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "feature_importances_": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 96], "oob_score_": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "oob_decision_function_": [41, 43, 44, 46, 47, 48, 50, 52, 53], "n_output": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 60, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "never": [41, 43, 44, 46, 47, 48, 50, 52, 53], "nan": [41, 43, 44, 46, 47, 48, 50, 52, 53, 69, 76], "x_leav": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "datapoint": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "up": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 98, 99], "n_node": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "goe": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "csr": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "n_nodes_ptr": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "give": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 78, 79], "real": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 73, 75, 79, 81], "would": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88, 97], "net": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "possibli": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 56, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 88], "leaf_node_sampl": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "reach": [41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "n_leaf_node_sampl": [41, 42, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "partial_fit": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80, 95], "must": [41, 43, 44, 46, 47, 48, 50, 56, 65, 72, 74, 76, 77, 78, 79, 80, 82, 83], "subsequ": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "That": [41, 43, 44, 46, 48, 50, 52, 53, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83], "highest": [41, 43, 44, 46, 48, 50, 52, 53, 72, 76, 78], "predict_log_proba": [41, 43, 44, 46, 48, 50, 72, 74, 77, 78, 80], "predict_quantil": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "keyword": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 95, 96, 99], "accept": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "n_quantil": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53], "harsh": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "set_partial_fit_request": [41, 43, 44, 46, 48, 50, 72, 74, 76, 77, 78, 80], "set_score_request": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "brought": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "warn": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "mislead": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "cardin": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87], "mani": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 87, 88, 95], "permutation_import": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "root": [41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 97], "squared_error": [42, 47, 49, 51, 73, 75, 79, 81], "absolute_error": [42, 47, 49, 51, 73, 75, 79, 81], "friedman_ms": [42, 47, 49, 51, 73, 75, 79, 81], "poisson": [42, 47, 49, 51, 73, 75, 79, 81], "l2": [42, 47, 49, 51, 73, 75, 79, 81], "loss": [42, 47, 49, 51, 73, 75, 79, 81, 88], "termin": [42, 47, 49, 51, 73, 75, 79, 81], "friedman": [42, 47, 49, 51, 72, 73, 75, 76, 78, 79, 81, 88], "absolut": [42, 47, 49, 51, 73, 75, 79, 81], "l1": [42, 47, 49, 51, 73, 75, 79, 81], "devianc": [42, 47, 49, 51, 73, 75, 79, 81], "find": [42, 45, 47, 49, 51, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 96], "mae": [42, 51, 73, 75], "r2_score": [42, 47, 49, 51, 73, 75, 79, 81], "extratreesclassifi": [42, 50, 74, 75], "load_diabet": [42, 73, 75, 79, 81], "return_x_i": [42, 73, 74, 75, 79, 81], "reg": [42, 75], "2727": 42, "decisiontreeregressor": [42, 50, 51, 72, 75, 79, 81], "oob_prediction_": [42, 49, 51], "coeffici": [42, 47, 49, 51, 73, 75, 79, 81], "frac": [42, 47, 49, 51, 62, 63, 73, 75, 79, 81, 89], "residu": [42, 47, 49, 51, 73, 75, 79, 81], "wors": [42, 47, 49, 51, 73, 75, 79, 81], "constant": [42, 47, 49, 51, 73, 75, 79, 81], "alwai": [42, 43, 44, 46, 47, 48, 49, 50, 51, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 88], "disregard": [42, 47, 49, 51, 73, 75, 79, 81], "precomput": [42, 45, 47, 49, 51, 73, 75, 79, 81], "kernel": [42, 47, 49, 51, 58, 73, 75, 79, 81, 94], "n_samples_fit": [42, 47, 49, 51, 73, 75, 79, 81], "uniform_averag": [42, 47, 49, 51, 73, 75, 79, 81], "keep": [42, 47, 49, 51, 73, 75, 79, 81], "influenc": [42, 47, 49, 51, 73, 75, 79, 81], "multioutputregressor": [42, 47, 49, 51, 73, 75, 79, 81], "honest_prior": [43, 76], "empir": [43, 51, 76, 88], "remain": [43, 76], "deal": [43, 76], "prior": [43, 56, 76, 88, 89], "shallow": [43, 76], "namespac": [43, 76], "rather": [43, 51, 76, 89], "ident": [43, 46, 47, 48, 49, 50, 51, 59, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83], "determinist": [43, 46, 47, 48, 49, 50, 51, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83], "behaviour": [43, 46, 47, 48, 49, 50, 51, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83], "honesti": [43, 85, 88], "unbias": 43, "doubl": 43, "access": 43, "ineffici": 43, "recommend": [43, 52, 53, 78, 79, 80, 81, 85, 88], "propens": [43, 88], "causal": 43, "breiman": [43, 46, 47, 50, 51, 72, 73, 76, 78, 79, 87, 88], "45": [43, 46, 47, 50, 51, 57, 62, 87, 88, 94], "32": [43, 46, 47, 50, 51, 87, 88], "2001": [43, 46, 47, 50, 51, 87, 88], "athei": [43, 76], "tibshirani": [43, 57, 72, 73, 76, 78, 79, 88], "wager": [43, 76], "annal": [43, 57, 59, 76], "honest_forest": [43, 76], "honesttreeclassifi": [43, 94], "n_features_": [43, 44, 46, 47, 48, 49], "honest_decision_function_": 43, "structure_indices_": [43, 76], "n_structur": [43, 76], "honest_indices_": [43, 76], "n_honest": [43, 76], "oob_samples_": [43, 99], "n_samples_bootstrap": 43, "tradit": [44, 46, 47, 78, 79], "assum": [44, 77], "per": [44, 56, 68, 69, 77, 94, 97, 98, 99], "compute_similarity_matrix": [44, 46, 47, 48, 49, 52, 53, 77, 78, 79, 80, 81, 82, 83], "sim_matrix": [44, 46, 47, 48, 49, 52, 53, 77, 78, 79, 80, 81, 82, 83], "n_neighbor": 45, "radiu": [45, 64, 65, 67], "distanc": [45, 52, 53, 64, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89], "basedecisiontre": [45, 76, 84], "baseforest": [45, 68, 69, 84], "kneighbor": 45, "radius_neighbor": 45, "return_dist": 45, "n_queri": 45, "n_index": 45, "constructor": 45, "neigh_dist": 45, "neigh_ind": 45, "popul": 45, "sort_result": 45, "ly": 45, "ball": 45, "around": [45, 95], "befor": [45, 56, 65, 68, 69, 72, 73, 76, 77, 78, 79, 80, 81, 82, 83], "approxim": [45, 54, 55, 99], "lie": 45, "cannot": 45, "1d": [45, 48, 49, 56, 80, 81], "obliquedecisiontreeregressor": [47, 49, 94], "tomita": [47, 48, 49, 80, 81, 85, 87], "104": [47, 85, 87], "39": [47, 73, 85, 87], "2020": [47, 53, 85, 87, 89], "make_regress": [47, 49, 51], "regr": [47, 51], "86327109": 47, "along": [48, 49, 66, 68, 80, 81, 88], "presum": [48, 49, 80, 81], "un": [48, 49, 80, 81], "wrap": [48, 49, 80, 81], "adam": [48, 49, 80, 81, 85, 87, 94, 95, 96, 97, 98, 99, 100], "chester": [48, 49, 80, 81, 87], "huynh": [48, 49, 80, 81, 87], "tyler": [48, 49, 80, 81, 85, 87], "jesu": [48, 49, 80, 81, 87], "jess": [48, 49, 80, 81, 87], "patsol": [48, 49, 80, 81, 87], "ben": [48, 49, 80, 81, 87], "falk": [48, 49, 80, 81, 87], "sridevi": [48, 49, 80, 81, 87], "sarma": [48, 49, 80, 81, 87], "toward": [48, 49, 80, 81, 85, 87], "gap": [48, 49, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 87], "convolut": [48, 49, 80, 81, 85, 87], "network": [48, 49, 80, 81, 85, 87], "scienc": [48, 49, 80, 81, 85, 87], "77": [48, 49, 80, 81, 85, 87], "96": [48, 49, 80, 81, 85, 87], "2023": [48, 49, 57, 80, 81, 85, 87], "21m1449117": [48, 49, 80, 81, 87], "82818509": 49, "patchobliquedecisiontreeregressor": [49, 94], "histogram": [50, 51], "gradient": [50, 51], "boost": [50, 51], "histgradientboostingclassifi": 50, "fast": [50, 51, 82, 91], "big": [50, 51], "histgradientboostingregressor": 51, "suggest": 51, "recent": 51, "justifi": 51, "32987858": 51, "twomean": [52, 53, 82, 83], "clustering_func": [52, 53, 82, 83], "clustering_func_arg": [52, 53, 82, 83], "simultan": [52, 53], "affin": [52, 53, 82, 83], "fastbic": [52, 53, 82, 83, 94], "maxim": [52, 53], "bayesian": [52, 53, 89], "calinski_harabasz_scor": [52, 53], "predicted_label": [52, 53], "silhouette_scor": [52, 53], "davies_bouldin_scor": [52, 53], "cpu": [52, 53], "construct": [52, 53, 87, 88], "continu": [52, 53, 69], "instant": [52, 53], "agglomerativeclust": [52, 53, 82, 83], "unsuperviseddecisiontre": [52, 53], "labels_": [52, 53], "similarity_matrix_": [52, 53], "oob": [52, 53], "dissimilarity_matrix_": [52, 53], "dissimilar": [52, 53, 94], "int64": [52, 53, 82, 83], "fit_transform": [52, 53, 82, 83], "fit_param": [52, 53, 82, 83], "x_new": [52, 53, 82, 83], "n_features_new": [52, 53, 82, 83], "set_output": [52, 53, 82, 83], "introduc": [52, 53, 82, 83], "configur": [52, 53, 82, 83], "typic": [52, 53, 82, 83, 88], "dens": [52, 53, 59, 82, 83, 88], "meghana": [53, 85, 89], "madhyastha": [53, 85, 89], "perci": [53, 89], "jame": [53, 87, 89], "brown": [53, 87, 89], "veronika": [53, 89], "strnadova": [53, 89], "neelei": [53, 89], "carei": [53, 87, 89], "prieb": [53, 87, 89], "randal": [53, 87, 89], "burn": [53, 87, 89], "geodes": [53, 64, 82, 85, 89], "proceed": [53, 82, 89], "26th": [53, 89], "sigkdd": [53, 89], "kdd": [53, 85, 89], "513": [53, 85, 89], "523": [53, 85, 89], "york": [53, 89], "ny": [53, 89], "usa": [53, 89], "machineri": [53, 89], "url": [53, 57, 59, 87, 89], "1145": [53, 89], "3394486": [53, 89], "3403094": [53, 89], "cov": [54, 55, 59, 61, 62, 63, 66], "718281828459045": [54, 55], "arraylik": [54, 55, 59, 64, 68, 69, 70, 71], "bit": [54, 55], "logarithm": [54, 55], "i_xi": [54, 55], "h_x": 54, "mixtur": [54, 56], "h_xy": 54, "int_err": 54, "integr": 54, "100000": 55, "h_y": 55, "h_y_on_x": 55, "return_lat": 56, "add_latent_nois": 56, "nonlinear": 56, "latent": 56, "2d": [56, 66, 72, 73, 74, 75, 80, 81], "match": [56, 87], "divid": 56, "poli": 56, "membership": 56, "p_i": 56, "mu_i": 56, "sigma_i": 56, "y_1": 56, "x_": 56, "np_i": 56, "y_": 56, "overset": 56, "sim": 56, "mathcal": [56, 89], "ey": 56, "shuffle_random_st": 56, "n_view": 57, "joint_rank": 57, "noise_std": 57, "return_decomp": 57, "joint": [57, 68, 69], "rank": [57, 64, 87], "share": 57, "common": [57, 88, 89], "strength": 57, "orthonorm": 57, "view_load": 57, "n_features_i": [57, 64], "rotat": 57, "sval": 57, "singular": 57, "w_b": 57, "n_features_b": 57, "preserv": [57, 60, 68, 69], "inner": [57, 88], "product": [57, 88], "unitari": 57, "x_b": 57, "diag": 57, "e_b": 57, "yunjin": 57, "choi": 57, "jonathan": 57, "taylor": 57, "princip": 57, "2590": 57, "2617": 57, "2017": 57, "jstor": 57, "stabl": 57, "26362952": 57, "visit": 57, "26": 57, "quadrat": 58, "sambit": [58, 94, 95, 96], "interpret": 58, "characterist": 58, "preprint": [58, 85], "1812": 58, "00029": 58, "2018": 58, "m_factor": 59, "rho": 59, "band_typ": 59, "ma": 59, "return_param": 59, "mix": 59, "trunk": [59, 99], "becom": 59, "band": [59, 99], "gerard": 59, "tran": [59, 62], "pattern": [59, 89], "anal": 59, "mach": 59, "intel": 59, "343": 59, "345": 59, "1982": 59, "1109": 59, "tpami": 59, "4767256": 59, "peter": 59, "bickel": 59, "elizaveta": 59, "levina": 59, "februari": 59, "dx": 59, "1214": 59, "009053607000000758": 59, "conditional_arrai": 60, "nn_estim": 60, "replace_nbr": 60, "condition": [60, 65, 68, 69], "resampl": [60, 68, 69, 97], "modif": 60, "techniqu": [60, 89], "place": 60, "resampled_arrai": 60, "impact": 60, "x_index": 61, "y_index": 61, "z_index": 61, "true_mi": [61, 62, 63], "h": [61, 62, 63, 88], "plug": 61, "entropy_gaussian": 61, "det": [62, 63], "georg": 62, "darbellai": 62, "igor": 62, "vajda": 62, "inf": 62, "theori": [62, 87], "1315": 62, "1321": 62, "1999": 62, "kd_tree": 64, "ksg": 64, "n_features_x": 64, "n_features_z": 64, "unsupervisedobliquerandomforest": 64, "knn": 64, "ball_tre": 64, "brute": 64, "preprocess": 64, "val": 64, "proce": 64, "kth": 64, "nbr": 64, "xyz": 64, "nn": [64, 82], "xz": 64, "yz": 64, "psi": 64, "n_x": 64, "n_y": 64, "n_": [64, 88], "digamma": 64, "n_i": 64, "denot": [64, 65, 88], "radius_a": 65, "radius_b": 65, "obs_noise_func": 65, "nature_noise_func": 65, "005": [65, 67], "return_mi_lb": [65, 67], "helix": 65, "smallest": 65, "defauult": 65, "func": 65, "lb": [65, 67], "approx": 65, "unif": 65, "afterward": 65, "epsilon_1": 65, "n_1": 65, "epsilon_2": 65, "n_2": 65, "epsilon_3": 65, "n_3": 65, "And": 65, "confound": 65, "impli": 65, "feed": 66, "noise_func": 67, "sphere": 67, "latitud": 67, "longitud": 67, "coordin": 67, "y2": 67, "y3": 67, "conditional_perm": [68, 69], "categor": 68, "describ": [68, 69, 82, 88], "initi": [68, 69], "Then": [68, 69, 84, 86], "metric_forest": [68, 69], "metric_perm_forest": [68, 69], "recomput": [68, 69], "rest": [68, 69, 88], "cach": [68, 69], "reset": [68, 69, 70, 71], "upon": [68, 69, 72, 73, 74, 75], "n_samples_test_": [68, 69], "final": [68, 69, 70, 71, 87, 88, 95], "indices_train_": [68, 69], "n_samples_train": [68, 69], "indices_test_": [68, 69], "samples_": [68, 69, 70, 71], "n_samples_fin": [68, 69, 70, 71], "null_dist_": [68, 69, 70, 71], "check_input": [68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "metric_kwarg": [68, 69, 70, 71], "n_covari": [68, 69, 70, 71], "mse": [68, 69, 70, 71, 88], "posterior_fin": [68, 69, 70, 71], "encount": [68, 69, 70, 71], "permute_stat_": [68, 69], "subtract": [68, 69], "pval": [68, 69], "train_test_samples_": [68, 69, 70, 71], "featureimportanceforestregressor": [70, 71, 96], "much": [70, 71, 88], "y_true_": [70, 71], "posterior_": [70, 71], "posterior_null_": [70, 71], "observe_stat": [70, 71], "But": [72, 73, 76, 77, 78, 79, 80, 81, 82, 83], "tree_": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "node_id": [72, 73, 74, 75], "xxx": [72, 73, 74, 75], "moreov": [72, 73, 74, 75, 88, 95, 96], "twice": [72, 73, 74, 75], "ram": [72, 73, 74, 75], "diskspac": [72, 73, 74, 75], "argmax": [72, 76, 78], "ti": [72, 76, 78], "lowest": [72, 76, 78], "en": [72, 73, 76, 78, 79, 88], "wikipedia": [72, 73, 76, 78, 79, 88], "wiki": [72, 73, 76, 78, 79, 88], "decision_tree_learn": [72, 73, 76, 78, 79, 88], "olshen": [72, 73, 76, 78, 79], "stone": [72, 73, 76, 78, 79], "wadsworth": [72, 73, 76, 78, 79], "belmont": [72, 73, 76, 78, 79], "ca": [72, 73, 76, 78, 79], "1984": [72, 73, 76, 78, 79], "hasti": [72, 73, 76, 78, 79, 88], "springer": [72, 73, 76, 78, 79, 88], "2009": [72, 73, 76, 78, 79, 88], "cutler": [72, 73, 76, 78, 79], "berkelei": [72, 73, 76, 78, 79], "edu": [72, 73, 76, 78, 79], "randomforest": [72, 73, 76, 78, 79], "cc_home": [72, 73, 76, 78, 79], "htm": [72, 73, 76, 78, 79], "93": [72, 78], "86": [72, 78, 94], "max_features_": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "_tree": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "understand": [72, 73, 74, 75, 76, 87], "builder_": [72, 73, 74, 75], "treebuild": [72, 73, 74, 75], "min_samples_split_": [72, 73, 74, 75], "need": [72, 73, 74, 75, 86, 88, 90], "17": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "bypass": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "don": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "know": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "node_count": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "cost_complexity_pruning_path": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "ccp_path": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "bunch": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "leaf_nodes_sampl": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "get_n_leav": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "n_leav": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "proba": [72, 74, 76, 77, 78, 80], "set_predict_proba_request": [72, 74, 76, 77, 78, 80], "set_predict_request": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "46": 73, "16": 73, "11": [73, 94], "73": 73, "pick": [74, 75], "baggingclassifi": 74, "extra_tre": [74, 75], "cl": 74, "8947": 74, "baggingregressor": 75, "instanti": 76, "93333333": 76, "empirical_prior_": 76, "logic": 77, "feature_combinations_": [77, 78, 79], "feature_set_ends_": 77, "n_feature_sets_": 77, "fact": [78, 79], "caveat": [78, 79], "willing": [78, 79, 88], "spend": [78, 79, 88], "resourc": [78, 79, 88], "68908909": 79, "35854406": 79, "35223873": 79, "03616902": 79, "56008907": 79, "32235221": 79, "06945264": 79, "1465216": 79, "34597007": 79, "15308512": 79, "morf": [80, 81, 85, 94], "discontigu": [80, 81], "sensor": [80, 81], "mask": [80, 81], "onto": [80, 81], "data_width": [80, 81], "data_height": [80, 81], "tt": [80, 81], "last": [80, 81], "height": [80, 81], "albeit": [80, 81, 96], "efficienc": [80, 81], "min_patch_dims_": [80, 81], "max_patch_dims_": [80, 81], "data_dims_": [80, 81], "rg": 81, "10163671": 81, "78786738": 81, "01490768": 81, "32737289": 81, "24816698": 81, "41881754": 81, "0588273": 81, "48722913": 81, "07927208": 81, "15600762": 81, "unsupervisedcriterion": [82, 83], "abid": [82, 83], "unsupervisedsplitt": [82, 83], "enablescomput": 82, "alexand": 82, "marx": 82, "jona": 82, "fischer": 82, "sdm": 82, "415": 82, "423": 82, "evimaria": 82, "terzi": 82, "panayioti": 82, "tsapara": 82, "316": 82, "327": 82, "intermedi": 84, "aff_matrix": 84, "packag": [85, 86], "modern": 85, "supervis": [85, 89, 91], "strong": 85, "madhyastha2020": 85, "sporf": 85, "tomita2020": 85, "li2023": 85, "perry2021": 85, "futur": 85, "plan": 85, "stream": [85, 95], "xu2022": 85, "encourag": 85, "pull": 85, "walk": 85, "contribut": [85, 87, 94, 95, 96, 97, 98, 99, 100], "licens": 85, "bsd": 85, "xu": [85, 94, 95, 99], "haoyin": [85, 94, 95, 99], "simplest": 85, "2110": 85, "08483": 85, "releas": [85, 95, 96, 98, 99], "histori": 85, "unreleas": [85, 92], "instal": 85, "pip": 85, "meson": 85, "conda": 85, "pypi": 86, "clone": 86, "repositori": 86, "git": 86, "com": 86, "neurodata": 86, "cd": 86, "virtual": 86, "dev": 86, "build_requir": 86, "txt": 86, "spin": 86, "cli": 86, "edit": 86, "pend": 86, "repo": 86, "zipbal": 86, "master": 86, "forg": 86, "threadpoolctl": 86, "pytest": 86, "compil": 86, "llvm": 86, "openmp": 86, "directori": 86, "obliquepr": 86, "pr": 86, "checkout": 86, "instruct": 86, "divers": 87, "sometim": 87, "slight": 87, "aim": 87, "motiv": 87, "therebi": [87, 88], "often": [87, 89], "yield": 87, "intuit": [87, 88], "leo": 87, "assess": 87, "essenti": 87, "abil": 87, "mdi": 87, "l2014": 87, "suffer": 87, "flaw": 87, "conclus": 87, "deriv": 87, "most": [87, 88, 98], "held": 87, "secondli": 87, "favor": 87, "whose": 87, "jaewon": 87, "chung": 87, "benjamin": 87, "jason": 87, "yim": 87, "mauro": 87, "maggioni": 87, "jmlr": 87, "v21": 87, "664": 87, "loupp": 87, "phd": 87, "thesi": 87, "lieg": 87, "2014": 87, "dt": 88, "ot": 88, "ref": 88, "rc": 88, "landmark": 88, "varieti": [88, 89], "major": [88, 92, 93, 94, 95, 96, 97, 98, 99, 100], "definit": 88, "x_i": [88, 89], "recurs": 88, "orthogon": 88, "a_i": 88, "langl": 88, "rangl": 88, "entri": 88, "q_m": 88, "n_m": 88, "t_m": 88, "x_j": 88, "leq": 88, "setminu": 88, "e_i": 88, "basi": 88, "elsewher": 88, "exact": 88, "_featur": 88, "come": 88, "sparsiti": 88, "consider": 88, "disc": 88, "earlier": 88, "sai": 88, "storag": 88, "ask": 88, "question": 88, "gridsearchcv": 88, "There": 88, "imput": 88, "1023": 88, "1010933404324": 88, "predictive_analyt": 88, "quinlan": 88, "c4": 88, "program": 88, "morgan": 88, "kaufmann": 88, "1993": 88, "prevent": 88, "overfit": 88, "triplet": 88, "treatment": 88, "sacrific": 88, "goal": 89, "overview": 89, "cutpoint": 89, "cutoff": 89, "min_": 89, "sum_": 89, "hat": 89, "mu": 89, "_1": 89, "_2": 89, "sample_indic": 89, "popular": 89, "seleciton": 89, "kmean": 89, "mclust": 89, "tri": 89, "mle": 89, "hard": 89, "soft": 89, "gmm": 89, "simpler": 89, "x_n": 89, "quad": 89, "le": 89, "mu_j": 89, "notion": 89, "efficaci": 89, "scheme": 89, "adjusted_rand_scor": 89, "tip": [91, 92], "enhanc": [92, 93, 94, 95, 96, 97, 98, 99, 100], "link": 92, "subscrib": 92, "io": 92, "notifi": 92, "jong": 94, "shin": 94, "bug": [94, 96, 97, 98], "outsid": 94, "61": 94, "arbitrari": 94, "discontinu": 94, "64": 94, "67": 94, "patchobliquerandomforestregressor": 94, "suki": [94, 95], "57": 94, "nearestneighborsmetaestim": 94, "83": 94, "thank": [94, 95, 96, 97, 98, 99, 100], "everyon": [94, 95, 96, 97, 98, 99, 100], "who": [94, 95, 96, 97, 98, 99, 100], "mainten": [94, 95, 96, 97, 98, 99, 100], "incept": [94, 95, 96, 97, 98, 99, 100], "analog": 95, "upgrad": 95, "reli": 95, "109": 95, "extraobliquedecisiontreeclassifi": 95, "2x": 95, "114": 95, "101": 95, "streamdecisionforest": 95, "116": 95, "undergon": 96, "organiz": 96, "overhaul": 96, "135": 96, "were": 96, "140": 96, "129": 96, "featureimport": [96, 97], "yuxin": 96, "bai": 96, "143": 96, "156": 96, "158": 96, "issu": 97, "featureimportanceforest": 97, "permute_per_forest_fract": 97, "145": 97, "169": 97, "164": 97, "conditional_resampl": 97, "170": 97, "rate": 97, "152": 97, "apply_max_features_per_set": 97, "incorrect": 97, "oversampl": 97, "after": 97, "172": 97, "mainli": [98, 99], "183": [98, 99], "exhaust": [98, 99], "make_trunk_classif": 99, "approximate_clf_mutual_inform": 99, "approximate_clf_mutual_information_with_monte_carlo": 99, "mont": 99, "carlo": 99, "199": 99, "206": 99}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[40, 1, 1, "", "ExtendedIsolationForest"], [41, 1, 1, "", "ExtraTreesClassifier"], [42, 1, 1, "", "ExtraTreesRegressor"], [43, 1, 1, "", "HonestForestClassifier"], [44, 1, 1, "", "MultiViewRandomForestClassifier"], [45, 1, 1, "", "NearestNeighborsMetaEstimator"], [46, 1, 1, "", "ObliqueRandomForestClassifier"], [47, 1, 1, "", "ObliqueRandomForestRegressor"], [48, 1, 1, "", "PatchObliqueRandomForestClassifier"], [49, 1, 1, "", "PatchObliqueRandomForestRegressor"], [50, 1, 1, "", "RandomForestClassifier"], [51, 1, 1, "", "RandomForestRegressor"], [52, 1, 1, "", "UnsupervisedObliqueRandomForest"], [53, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ExtendedIsolationForest": [[40, 2, 1, "", "decision_function"], [40, 3, 1, "", "estimators_samples_"], [40, 2, 1, "", "fit"], [40, 2, 1, "", "fit_predict"], [40, 2, 1, "", "get_metadata_routing"], [40, 2, 1, "", "get_params"], [40, 2, 1, "", "predict"], [40, 2, 1, "", "score_samples"], [40, 2, 1, "", "set_fit_request"], [40, 2, 1, "", "set_params"]], "sktree.ExtraTreesClassifier": [[41, 2, 1, "", "apply"], [41, 2, 1, "", "decision_path"], [41, 3, 1, "", "estimators_samples_"], [41, 3, 1, "", "feature_importances_"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "get_leaf_node_samples"], [41, 2, 1, "", "get_metadata_routing"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "partial_fit"], [41, 2, 1, "", "predict"], [41, 2, 1, "", "predict_log_proba"], [41, 2, 1, "", "predict_proba"], [41, 2, 1, "", "predict_quantiles"], [41, 2, 1, "", "score"], [41, 2, 1, "", "set_fit_request"], [41, 2, 1, "", "set_params"], [41, 2, 1, "", "set_partial_fit_request"], [41, 2, 1, "", "set_score_request"]], "sktree.ExtraTreesRegressor": [[42, 2, 1, "", "apply"], [42, 2, 1, "", "decision_path"], [42, 3, 1, "", "estimators_samples_"], [42, 3, 1, "", "feature_importances_"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "get_leaf_node_samples"], [42, 2, 1, "", "get_metadata_routing"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "predict"], [42, 2, 1, "", "predict_quantiles"], [42, 2, 1, "", "score"], [42, 2, 1, "", "set_fit_request"], [42, 2, 1, "", "set_params"], [42, 2, 1, "", "set_score_request"]], "sktree.HonestForestClassifier": [[43, 2, 1, "", "apply"], [43, 2, 1, "", "decision_path"], [43, 3, 1, "", "estimators_samples_"], [43, 3, 1, "", "feature_importances_"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "get_leaf_node_samples"], [43, 2, 1, "", "get_metadata_routing"], [43, 2, 1, "", "get_params"], [43, 3, 1, "", "honest_indices_"], [43, 3, 1, "", "oob_samples_"], [43, 2, 1, "", "partial_fit"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "predict_log_proba"], [43, 2, 1, "", "predict_proba"], [43, 2, 1, "", "predict_quantiles"], [43, 2, 1, "", "score"], [43, 2, 1, "", "set_fit_request"], [43, 2, 1, "", "set_params"], [43, 2, 1, "", "set_partial_fit_request"], [43, 2, 1, "", "set_score_request"], [43, 3, 1, "", "structure_indices_"]], "sktree.MultiViewRandomForestClassifier": [[44, 2, 1, "", "apply"], [44, 2, 1, "", "compute_similarity_matrix"], [44, 2, 1, "", "decision_path"], [44, 3, 1, "", "estimators_samples_"], [44, 3, 1, "", "feature_importances_"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "get_leaf_node_samples"], [44, 2, 1, "", "get_metadata_routing"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "partial_fit"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_log_proba"], [44, 2, 1, "", "predict_proba"], [44, 2, 1, "", "predict_quantiles"], [44, 2, 1, "", "score"], [44, 2, 1, "", "set_fit_request"], [44, 2, 1, "", "set_params"], [44, 2, 1, "", "set_partial_fit_request"], [44, 2, 1, "", "set_score_request"]], "sktree.NearestNeighborsMetaEstimator": [[45, 2, 1, "", "fit"], [45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "kneighbors"], [45, 2, 1, "", "radius_neighbors"], [45, 2, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[46, 2, 1, "", "apply"], [46, 2, 1, "", "compute_similarity_matrix"], [46, 2, 1, "", "decision_path"], [46, 3, 1, "", "estimators_samples_"], [46, 3, 1, "", "feature_importances_"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "get_leaf_node_samples"], [46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "partial_fit"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_log_proba"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "predict_quantiles"], [46, 2, 1, "", "score"], [46, 2, 1, "", "set_fit_request"], [46, 2, 1, "", "set_params"], [46, 2, 1, "", "set_partial_fit_request"], [46, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[47, 2, 1, "", "apply"], [47, 2, 1, "", "compute_similarity_matrix"], [47, 2, 1, "", "decision_path"], [47, 3, 1, "", "estimators_samples_"], [47, 3, 1, "", "feature_importances_"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "get_leaf_node_samples"], [47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_quantiles"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_fit_request"], [47, 2, 1, "", "set_params"], [47, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[48, 2, 1, "", "apply"], [48, 2, 1, "", "compute_similarity_matrix"], [48, 2, 1, "", "decision_path"], [48, 3, 1, "", "estimators_samples_"], [48, 3, 1, "", "feature_importances_"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "get_leaf_node_samples"], [48, 2, 1, "", "get_metadata_routing"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "partial_fit"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_log_proba"], [48, 2, 1, "", "predict_proba"], [48, 2, 1, "", "predict_quantiles"], [48, 2, 1, "", "score"], [48, 2, 1, "", "set_fit_request"], [48, 2, 1, "", "set_params"], [48, 2, 1, "", "set_partial_fit_request"], [48, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[49, 2, 1, "", "apply"], [49, 2, 1, "", "compute_similarity_matrix"], [49, 2, 1, "", "decision_path"], [49, 3, 1, "", "estimators_samples_"], [49, 3, 1, "", "feature_importances_"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "get_leaf_node_samples"], [49, 2, 1, "", "get_metadata_routing"], [49, 2, 1, "", "get_params"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "predict_quantiles"], [49, 2, 1, "", "score"], [49, 2, 1, "", "set_fit_request"], [49, 2, 1, "", "set_params"], [49, 2, 1, "", "set_score_request"]], "sktree.RandomForestClassifier": [[50, 2, 1, "", "apply"], [50, 2, 1, "", "decision_path"], [50, 3, 1, "", "estimators_samples_"], [50, 3, 1, "", "feature_importances_"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "get_leaf_node_samples"], [50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "partial_fit"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "predict_log_proba"], [50, 2, 1, "", "predict_proba"], [50, 2, 1, "", "predict_quantiles"], [50, 2, 1, "", "score"], [50, 2, 1, "", "set_fit_request"], [50, 2, 1, "", "set_params"], [50, 2, 1, "", "set_partial_fit_request"], [50, 2, 1, "", "set_score_request"]], "sktree.RandomForestRegressor": [[51, 2, 1, "", "apply"], [51, 2, 1, "", "decision_path"], [51, 3, 1, "", "estimators_samples_"], [51, 3, 1, "", "feature_importances_"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "get_leaf_node_samples"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_quantiles"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_fit_request"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[52, 2, 1, "", "apply"], [52, 2, 1, "", "compute_similarity_matrix"], [52, 2, 1, "", "decision_path"], [52, 3, 1, "", "estimators_samples_"], [52, 3, 1, "", "feature_importances_"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "fit_predict"], [52, 2, 1, "", "fit_transform"], [52, 2, 1, "", "get_leaf_node_samples"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "predict_quantiles"], [52, 2, 1, "", "set_fit_request"], [52, 2, 1, "", "set_output"], [52, 2, 1, "", "set_params"], [52, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[53, 2, 1, "", "apply"], [53, 2, 1, "", "compute_similarity_matrix"], [53, 2, 1, "", "decision_path"], [53, 3, 1, "", "estimators_samples_"], [53, 3, 1, "", "feature_importances_"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "fit_predict"], [53, 2, 1, "", "fit_transform"], [53, 2, 1, "", "get_leaf_node_samples"], [53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_quantiles"], [53, 2, 1, "", "set_fit_request"], [53, 2, 1, "", "set_output"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "transform"]], "sktree._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "sktree.datasets": [[54, 4, 1, "", "approximate_clf_mutual_information"], [55, 4, 1, "", "approximate_clf_mutual_information_with_monte_carlo"], [56, 4, 1, "", "make_gaussian_mixture"], [57, 4, 1, "", "make_joint_factor_model"], [58, 4, 1, "", "make_quadratic_classification"], [59, 4, 1, "", "make_trunk_classification"]], "sktree.experimental": [[60, 4, 1, "", "conditional_resample"], [64, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.mutual_info": [[61, 4, 1, "", "cmi_gaussian"], [62, 4, 1, "", "entropy_gaussian"], [63, 4, 1, "", "mi_gaussian"]], "sktree.experimental.simulate": [[65, 4, 1, "", "simulate_helix"], [66, 4, 1, "", "simulate_multivariate_gaussian"], [67, 4, 1, "", "simulate_sphere"]], "sktree.stats": [[68, 1, 1, "", "FeatureImportanceForestClassifier"], [69, 1, 1, "", "FeatureImportanceForestRegressor"], [70, 1, 1, "", "PermutationForestClassifier"], [71, 1, 1, "", "PermutationForestRegressor"]], "sktree.stats.FeatureImportanceForestClassifier": [[68, 2, 1, "", "statistic"], [68, 2, 1, "", "test"], [68, 3, 1, "", "train_test_samples_"]], "sktree.stats.FeatureImportanceForestRegressor": [[69, 2, 1, "", "statistic"], [69, 2, 1, "", "test"], [69, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestClassifier": [[70, 2, 1, "", "statistic"], [70, 2, 1, "", "test"], [70, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestRegressor": [[71, 2, 1, "", "statistic"], [71, 2, 1, "", "test"], [71, 3, 1, "", "train_test_samples_"]], "sktree.tree": [[72, 1, 1, "", "DecisionTreeClassifier"], [73, 1, 1, "", "DecisionTreeRegressor"], [74, 1, 1, "", "ExtraTreeClassifier"], [75, 1, 1, "", "ExtraTreeRegressor"], [76, 1, 1, "", "HonestTreeClassifier"], [77, 1, 1, "", "MultiViewDecisionTreeClassifier"], [78, 1, 1, "", "ObliqueDecisionTreeClassifier"], [79, 1, 1, "", "ObliqueDecisionTreeRegressor"], [80, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [81, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [82, 1, 1, "", "UnsupervisedDecisionTree"], [83, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [84, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.DecisionTreeClassifier": [[72, 2, 1, "", "apply"], [72, 2, 1, "", "cost_complexity_pruning_path"], [72, 2, 1, "", "decision_path"], [72, 3, 1, "", "feature_importances_"], [72, 2, 1, "", "fit"], [72, 2, 1, "", "get_depth"], [72, 2, 1, "", "get_leaf_node_samples"], [72, 2, 1, "", "get_metadata_routing"], [72, 2, 1, "", "get_n_leaves"], [72, 2, 1, "", "get_params"], [72, 2, 1, "", "partial_fit"], [72, 2, 1, "", "predict"], [72, 2, 1, "", "predict_log_proba"], [72, 2, 1, "", "predict_proba"], [72, 2, 1, "", "predict_quantiles"], [72, 2, 1, "", "score"], [72, 2, 1, "", "set_fit_request"], [72, 2, 1, "", "set_params"], [72, 2, 1, "", "set_partial_fit_request"], [72, 2, 1, "", "set_predict_proba_request"], [72, 2, 1, "", "set_predict_request"], [72, 2, 1, "", "set_score_request"]], "sktree.tree.DecisionTreeRegressor": [[73, 2, 1, "", "apply"], [73, 2, 1, "", "cost_complexity_pruning_path"], [73, 2, 1, "", "decision_path"], [73, 3, 1, "", "feature_importances_"], [73, 2, 1, "", "fit"], [73, 2, 1, "", "get_depth"], [73, 2, 1, "", "get_leaf_node_samples"], [73, 2, 1, "", "get_metadata_routing"], [73, 2, 1, "", "get_n_leaves"], [73, 2, 1, "", "get_params"], [73, 2, 1, "", "predict"], [73, 2, 1, "", "predict_quantiles"], [73, 2, 1, "", "score"], [73, 2, 1, "", "set_fit_request"], [73, 2, 1, "", "set_params"], [73, 2, 1, "", "set_predict_request"], [73, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeClassifier": [[74, 2, 1, "", "apply"], [74, 2, 1, "", "cost_complexity_pruning_path"], [74, 2, 1, "", "decision_path"], [74, 3, 1, "", "feature_importances_"], [74, 2, 1, "", "fit"], [74, 2, 1, "", "get_depth"], [74, 2, 1, "", "get_leaf_node_samples"], [74, 2, 1, "", "get_metadata_routing"], [74, 2, 1, "", "get_n_leaves"], [74, 2, 1, "", "get_params"], [74, 2, 1, "", "partial_fit"], [74, 2, 1, "", "predict"], [74, 2, 1, "", "predict_log_proba"], [74, 2, 1, "", "predict_proba"], [74, 2, 1, "", "predict_quantiles"], [74, 2, 1, "", "score"], [74, 2, 1, "", "set_fit_request"], [74, 2, 1, "", "set_params"], [74, 2, 1, "", "set_partial_fit_request"], [74, 2, 1, "", "set_predict_proba_request"], [74, 2, 1, "", "set_predict_request"], [74, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeRegressor": [[75, 2, 1, "", "apply"], [75, 2, 1, "", "cost_complexity_pruning_path"], [75, 2, 1, "", "decision_path"], [75, 3, 1, "", "feature_importances_"], [75, 2, 1, "", "fit"], [75, 2, 1, "", "get_depth"], [75, 2, 1, "", "get_leaf_node_samples"], [75, 2, 1, "", "get_metadata_routing"], [75, 2, 1, "", "get_n_leaves"], [75, 2, 1, "", "get_params"], [75, 2, 1, "", "predict"], [75, 2, 1, "", "predict_quantiles"], [75, 2, 1, "", "score"], [75, 2, 1, "", "set_fit_request"], [75, 2, 1, "", "set_params"], [75, 2, 1, "", "set_predict_request"], [75, 2, 1, "", "set_score_request"]], "sktree.tree.HonestTreeClassifier": [[76, 2, 1, "", "apply"], [76, 2, 1, "", "cost_complexity_pruning_path"], [76, 2, 1, "", "decision_path"], [76, 3, 1, "", "feature_importances_"], [76, 2, 1, "", "fit"], [76, 2, 1, "", "get_depth"], [76, 2, 1, "", "get_leaf_node_samples"], [76, 2, 1, "", "get_metadata_routing"], [76, 2, 1, "", "get_n_leaves"], [76, 2, 1, "", "get_params"], [76, 2, 1, "", "partial_fit"], [76, 2, 1, "", "predict"], [76, 2, 1, "", "predict_proba"], [76, 2, 1, "", "predict_quantiles"], [76, 2, 1, "", "score"], [76, 2, 1, "", "set_fit_request"], [76, 2, 1, "", "set_params"], [76, 2, 1, "", "set_partial_fit_request"], [76, 2, 1, "", "set_predict_proba_request"], [76, 2, 1, "", "set_predict_request"], [76, 2, 1, "", "set_score_request"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[77, 2, 1, "", "apply"], [77, 2, 1, "", "compute_similarity_matrix"], [77, 2, 1, "", "cost_complexity_pruning_path"], [77, 2, 1, "", "decision_path"], [77, 3, 1, "", "feature_importances_"], [77, 2, 1, "", "fit"], [77, 2, 1, "", "get_depth"], [77, 2, 1, "", "get_leaf_node_samples"], [77, 2, 1, "", "get_metadata_routing"], [77, 2, 1, "", "get_n_leaves"], [77, 2, 1, "", "get_params"], [77, 2, 1, "", "partial_fit"], [77, 2, 1, "", "predict"], [77, 2, 1, "", "predict_log_proba"], [77, 2, 1, "", "predict_proba"], [77, 2, 1, "", "predict_quantiles"], [77, 2, 1, "", "score"], [77, 2, 1, "", "set_fit_request"], [77, 2, 1, "", "set_params"], [77, 2, 1, "", "set_partial_fit_request"], [77, 2, 1, "", "set_predict_proba_request"], [77, 2, 1, "", "set_predict_request"], [77, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[78, 2, 1, "", "apply"], [78, 2, 1, "", "compute_similarity_matrix"], [78, 2, 1, "", "cost_complexity_pruning_path"], [78, 2, 1, "", "decision_path"], [78, 3, 1, "", "feature_importances_"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "get_depth"], [78, 2, 1, "", "get_leaf_node_samples"], [78, 2, 1, "", "get_metadata_routing"], [78, 2, 1, "", "get_n_leaves"], [78, 2, 1, "", "get_params"], [78, 2, 1, "", "partial_fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "predict_log_proba"], [78, 2, 1, "", "predict_proba"], [78, 2, 1, "", "predict_quantiles"], [78, 2, 1, "", "score"], [78, 2, 1, "", "set_fit_request"], [78, 2, 1, "", "set_params"], [78, 2, 1, "", "set_partial_fit_request"], [78, 2, 1, "", "set_predict_proba_request"], [78, 2, 1, "", "set_predict_request"], [78, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[79, 2, 1, "", "apply"], [79, 2, 1, "", "compute_similarity_matrix"], [79, 2, 1, "", "cost_complexity_pruning_path"], [79, 2, 1, "", "decision_path"], [79, 3, 1, "", "feature_importances_"], [79, 2, 1, "", "fit"], [79, 2, 1, "", "get_depth"], [79, 2, 1, "", "get_leaf_node_samples"], [79, 2, 1, "", "get_metadata_routing"], [79, 2, 1, "", "get_n_leaves"], [79, 2, 1, "", "get_params"], [79, 2, 1, "", "predict"], [79, 2, 1, "", "predict_quantiles"], [79, 2, 1, "", "score"], [79, 2, 1, "", "set_fit_request"], [79, 2, 1, "", "set_params"], [79, 2, 1, "", "set_predict_request"], [79, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[80, 2, 1, "", "apply"], [80, 2, 1, "", "compute_similarity_matrix"], [80, 2, 1, "", "cost_complexity_pruning_path"], [80, 2, 1, "", "decision_path"], [80, 3, 1, "", "feature_importances_"], [80, 2, 1, "", "fit"], [80, 2, 1, "", "get_depth"], [80, 2, 1, "", "get_leaf_node_samples"], [80, 2, 1, "", "get_metadata_routing"], [80, 2, 1, "", "get_n_leaves"], [80, 2, 1, "", "get_params"], [80, 2, 1, "", "partial_fit"], [80, 2, 1, "", "predict"], [80, 2, 1, "", "predict_log_proba"], [80, 2, 1, "", "predict_proba"], [80, 2, 1, "", "predict_quantiles"], [80, 2, 1, "", "score"], [80, 2, 1, "", "set_fit_request"], [80, 2, 1, "", "set_params"], [80, 2, 1, "", "set_partial_fit_request"], [80, 2, 1, "", "set_predict_proba_request"], [80, 2, 1, "", "set_predict_request"], [80, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[81, 2, 1, "", "apply"], [81, 2, 1, "", "compute_similarity_matrix"], [81, 2, 1, "", "cost_complexity_pruning_path"], [81, 2, 1, "", "decision_path"], [81, 3, 1, "", "feature_importances_"], [81, 2, 1, "", "fit"], [81, 2, 1, "", "get_depth"], [81, 2, 1, "", "get_leaf_node_samples"], [81, 2, 1, "", "get_metadata_routing"], [81, 2, 1, "", "get_n_leaves"], [81, 2, 1, "", "get_params"], [81, 2, 1, "", "predict"], [81, 2, 1, "", "predict_quantiles"], [81, 2, 1, "", "score"], [81, 2, 1, "", "set_fit_request"], [81, 2, 1, "", "set_params"], [81, 2, 1, "", "set_predict_request"], [81, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[82, 2, 1, "", "apply"], [82, 2, 1, "", "compute_similarity_matrix"], [82, 2, 1, "", "cost_complexity_pruning_path"], [82, 2, 1, "", "decision_path"], [82, 3, 1, "", "feature_importances_"], [82, 2, 1, "", "fit_predict"], [82, 2, 1, "", "fit_transform"], [82, 2, 1, "", "get_depth"], [82, 2, 1, "", "get_leaf_node_samples"], [82, 2, 1, "", "get_metadata_routing"], [82, 2, 1, "", "get_n_leaves"], [82, 2, 1, "", "get_params"], [82, 2, 1, "", "predict"], [82, 2, 1, "", "predict_quantiles"], [82, 2, 1, "", "set_fit_request"], [82, 2, 1, "", "set_output"], [82, 2, 1, "", "set_params"], [82, 2, 1, "", "set_predict_request"], [82, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[83, 2, 1, "", "apply"], [83, 2, 1, "", "compute_similarity_matrix"], [83, 2, 1, "", "cost_complexity_pruning_path"], [83, 2, 1, "", "decision_path"], [83, 3, 1, "", "feature_importances_"], [83, 2, 1, "", "fit_predict"], [83, 2, 1, "", "fit_transform"], [83, 2, 1, "", "get_depth"], [83, 2, 1, "", "get_leaf_node_samples"], [83, 2, 1, "", "get_metadata_routing"], [83, 2, 1, "", "get_n_leaves"], [83, 2, 1, "", "get_params"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "predict_quantiles"], [83, 2, 1, "", "set_fit_request"], [83, 2, 1, "", "set_output"], [83, 2, 1, "", "set_params"], [83, 2, 1, "", "set_predict_request"], [83, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 94, 95, 96, 97, 98, 99, 100], "scikit": [0, 85, 90], "learn": [0, 12, 13, 90], "tree": [0, 1, 4, 12, 13, 17, 25, 26, 28, 32, 35, 36, 37, 38, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90], "estim": 0, "supervis": [0, 88], "unsupervis": [0, 89], "outlier": [0, 12, 16, 90], "detect": [0, 12, 16, 90], "distanc": 0, "metric": 0, "statist": [0, 9, 10], "hypothesi": [0, 4, 5, 6, 7, 8, 9, 12, 90], "test": [0, 4, 5, 6, 7, 9, 10, 12, 90], "dataset": [0, 14, 26, 29, 30, 33, 54, 55, 56, 57, 58, 59], "experiment": [0, 60, 61, 62, 63, 64, 65, 66, 67], "function": [0, 21], "calibr": [1, 2, 12, 90], "decis": [1, 4, 12, 13, 17, 25, 26, 28, 32, 35, 88, 89, 90], "via": [1, 12, 90], "honesti": [1, 12, 90], "plot": [2, 17, 21, 22, 23, 26, 31, 33, 37, 38], "honest": [2, 88], "forest": [2, 12, 14, 17, 19, 21, 22, 23, 29, 30, 31, 33, 87, 90], "overlap": 2, "gaussian": 2, "simul": [2, 5, 6, 7, 8, 9, 10, 14, 31, 65, 66, 67], "refer": [2, 5, 6, 7, 8, 17, 29, 30, 85, 87, 88, 89], "comput": [3, 9, 10, 11, 15, 18, 24, 27, 34, 39], "time": [3, 11, 15, 18, 24, 27, 34, 37, 39], "mutual": [5, 6, 7, 9], "inform": [5, 6, 7, 9], "genuin": [5, 6, 7, 9], "might": [5, 6, 7, 8, 9, 10], "data": [5, 6, 7, 8, 9, 10, 14, 17, 20, 23], "perform": [5, 6, 7, 14], "us": [5, 6, 9, 10, 56, 88, 90], "imbalanc": 6, "discuss": [6, 7, 8, 29, 30, 36, 38], "demonstr": [7, 36], "condit": [7, 8], "co": [7, 8], "when": 8, "exhibit": 8, "independ": 8, "analysi": 8, "null": 8, "i": 8, "true": 8, "partial": [9, 10], "auc": [9, 10], "repeat": [9, 10], "second": 9, "featur": [9, 36, 87], "set": [9, 36], "all": [9, 10], "posterior": [9, 10], "ar": [9, 10], "save": [9, 10], "within": [9, 10, 17], "model": [9, 10, 17, 22], "multi": [10, 12, 13, 14, 36, 88, 90], "view": [10, 12, 13, 14, 36, 90], "mv": 10, "without": 10, "exampl": [12, 17, 56, 87, 90], "quantil": [12, 19, 20, 21, 22, 23, 90], "predict": [12, 17, 19, 20, 21, 22, 23, 29, 31, 33, 90], "random": [12, 14, 19, 21, 22, 29, 30, 31, 33, 87, 90], "compar": [12, 14, 25, 29, 32, 88, 90], "sklearn": [12, 25, 90], "sktree": [12, 25, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90], "spars": [12, 28, 31, 38, 90], "obliqu": [12, 23, 28, 29, 30, 31, 32, 33, 37, 38, 87, 88, 90], "project": [12, 28, 36, 37, 38, 90], "splitter": [12, 35, 36, 37, 38, 90], "analyz": 14, "fit": [14, 22], "visual": [14, 17, 36], "score": 14, "extendedisolationforest": [17, 40], "gener": [17, 20, 23, 37, 38], "train": [17, 22, 26], "discret": 17, "boundari": 17, "path": 17, "length": 17, "each": [17, 36], "differ": [20, 30, 88], "interpol": 20, "method": 20, "The": 20, "interv": 21, "regressor": [21, 22], "result": [21, 22, 23], "class": 22, "sampl": [22, 36, 37], "regress": [23, 88], "v": [23, 30], "standard": [23, 32], "surfac": [26, 32], "iri": 26, "extra": [29, 30, 32], "cc18": [29, 33], "speed": 30, "size": 30, "axi": [31, 33, 36], "align": [31, 33, 36], "pariti": 31, "matrix": [36, 38], "an": [36, 37, 38], "initi": [36, 37, 38], "split": 36, "candid": 36, "scale": 36, "dimension": 36, "matric": [37, 38], "imag": 37, "seri": 37, "patch": [37, 38], "1d": 37, "2d": 37, "3d": 37, "discontigu": 37, "extratreesclassifi": 41, "extratreesregressor": 42, "honestforestclassifi": 43, "multiviewrandomforestclassifi": 44, "nearestneighborsmetaestim": 45, "obliquerandomforestclassifi": 46, "obliquerandomforestregressor": 47, "patchobliquerandomforestclassifi": 48, "patchobliquerandomforestregressor": 49, "randomforestclassifi": 50, "randomforestregressor": 51, "unsupervisedobliquerandomforest": 52, "unsupervisedrandomforest": 53, "approximate_clf_mutual_inform": 54, "approximate_clf_mutual_information_with_monte_carlo": 55, "make_gaussian_mixtur": 56, "make_joint_factor_model": 57, "make_quadratic_classif": 58, "make_trunk_classif": 59, "conditional_resampl": 60, "mutual_info": [61, 62, 63], "cmi_gaussian": 61, "entropy_gaussian": 62, "mi_gaussian": 63, "mutual_info_ksg": 64, "simulate_helix": 65, "simulate_multivariate_gaussian": 66, "simulate_spher": 67, "stat": [68, 69, 70, 71], "featureimportanceforestclassifi": 68, "featureimportanceforestregressor": 69, "permutationforestclassifi": 70, "permutationforestregressor": 71, "decisiontreeclassifi": 72, "decisiontreeregressor": 73, "extratreeclassifi": 74, "extratreeregressor": 75, "honesttreeclassifi": 76, "multiviewdecisiontreeclassifi": 77, "obliquedecisiontreeclassifi": 78, "obliquedecisiontreeregressor": 79, "patchobliquedecisiontreeclassifi": 80, "patchobliquedecisiontreeregressor": 81, "unsuperviseddecisiontre": 82, "unsupervisedobliquedecisiontre": 83, "compute_forest_similarity_matrix": 84, "content": 85, "get": 85, "start": 85, "indic": 85, "tabl": 85, "instal": 86, "depend": 86, "pip": 86, "from": 86, "sourc": 86, "meson": 86, "conda": 86, "recommend": 86, "import": 87, "evalu": [87, 89], "mathemat": 88, "formul": 88, "classif": 88, "output": 88, "problem": 88, "complex": 88, "tip": 88, "practic": 88, "limit": 88, "criterion": 89, "two": 89, "mean": 89, "fast": 89, "bic": 89, "user": 91, "guid": 91, "releas": 92, "histori": 92, "version": [94, 95, 96, 97, 98, 99, 100], "0": [94, 95, 96, 97, 98, 99, 100], "1": 94, "changelog": [94, 95, 96, 97, 98, 99, 100], "code": [94, 95, 96, 97, 98, 99, 100], "contributor": [94, 95, 96, 97, 98, 99, 100], "2": 95, "3": 96, "4": 97, "5": 98, "6": 99, "7": 100}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Outlier Detection": [[0, "outlier-detection"]], "Distance Metrics": [[0, "distance-metrics"]], "Statistical Hypothesis Testing": [[0, "statistical-hypothesis-testing"]], "Datasets": [[0, "datasets"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Calibrated decision trees via honesty": [[1, "calibrated-decision-trees-via-honesty"], [12, "calibrated-decision-trees-via-honesty"], [90, "calibrated-decision-trees-via-honesty"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[2, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[2, "references"], [5, "references"], [6, "references"], [7, "references"], [8, "references"], [17, "references"], [29, "references"], [30, "references"], [85, null], [87, null], [87, null], [89, null]], "Computation times": [[3, "computation-times"], [11, "computation-times"], [15, "computation-times"], [18, "computation-times"], [24, "computation-times"], [27, "computation-times"], [34, "computation-times"], [39, "computation-times"]], "Hypothesis testing with decision trees": [[4, "hypothesis-testing-with-decision-trees"], [12, "hypothesis-testing-with-decision-trees"], [90, "hypothesis-testing-with-decision-trees"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[5, "mutual-information-for-genuine-hypothesis-testing-might"]], "Simulate data": [[5, "simulate-data"], [6, "simulate-data"], [7, "simulate-data"], [8, "simulate-data"], [9, "simulate-data"], [10, "simulate-data"], [14, "simulate-data"]], "Perform hypothesis testing using Mutual Information": [[5, "perform-hypothesis-testing-using-mutual-information"], [6, "perform-hypothesis-testing-using-mutual-information"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data": [[6, "mutual-information-for-genuine-hypothesis-testing-might-with-imbalanced-data"]], "Discussion": [[6, "discussion"], [7, "discussion"], [8, "discussion"], [29, "discussion"], [30, "discussion"], [36, "discussion"], [38, "discussion"]], "Demonstrate Conditional Mutual Information for Genuine Hypothesis Testing (Co-MIGHT)": [[7, "demonstrate-conditional-mutual-information-for-genuine-hypothesis-testing-co-might"]], "Perform hypothesis testing": [[7, "perform-hypothesis-testing"]], "Co-MIGHT when Data Exhibits Conditional Independence": [[8, "co-might-when-data-exhibits-conditional-independence"]], "Analysis when the null hypothesis is true": [[8, "analysis-when-the-null-hypothesis-is-true"]], "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[9, "compute-partial-auc-using-mutual-information-for-genuine-hypothesis-testing-might"]], "Use partial AUC as test statistic": [[9, "use-partial-auc-as-test-statistic"], [10, "use-partial-auc-as-test-statistic"]], "Repeat for the second feature set": [[9, "repeat-for-the-second-feature-set"]], "All posteriors are saved within the model": [[9, "all-posteriors-are-saved-within-the-model"], [10, "all-posteriors-are-saved-within-the-model"]], "Compute partial AUC using multi-view MIGHT (MV-MIGHT)": [[10, "compute-partial-auc-using-multi-view-might-mv-might"]], "Repeat without multi-view": [[10, "repeat-without-multi-view"]], "Examples": [[12, "examples"], [90, "examples"]], "Multi-view learning with Decision-trees": [[12, "multi-view-learning-with-decision-trees"], [13, "multi-view-learning-with-decision-trees"], [90, "multi-view-learning-with-decision-trees"]], "Outlier-detection": [[12, "outlier-detection"], [16, "outlier-detection"], [90, "outlier-detection"]], "Quantile Predictions with Random Forest": [[12, "quantile-predictions-with-random-forest"], [19, "quantile-predictions-with-random-forest"], [90, "quantile-predictions-with-random-forest"]], "Comparing sklearn and sktree decision trees": [[12, "comparing-sklearn-and-sktree-decision-trees"], [25, "comparing-sklearn-and-sktree-decision-trees"], [90, "comparing-sklearn-and-sktree-decision-trees"]], "Sparse oblique projections with oblique decision-trees": [[12, "sparse-oblique-projections-with-oblique-decision-trees"], [28, "sparse-oblique-projections-with-oblique-decision-trees"], [90, "sparse-oblique-projections-with-oblique-decision-trees"]], "Decision-tree splitters": [[12, "decision-tree-splitters"], [35, "decision-tree-splitters"], [90, "decision-tree-splitters"]], "Analyze a multi-view dataset with a multi-view random forest": [[14, "analyze-a-multi-view-dataset-with-a-multi-view-random-forest"]], "Fit Random Forest and Multi-view Random Forest": [[14, "fit-random-forest-and-multi-view-random-forest"]], "Visualize scores and compare performance": [[14, "visualize-scores-and-compare-performance"]], "ExtendedIsolationForest example": [[17, "extendedisolationforest-example"]], "Data generation": [[17, "data-generation"]], "Training of the model": [[17, "training-of-the-model"]], "Plot discrete decision boundary": [[17, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[17, "plot-path-length-decision-boundary"]], "Visualize the prediction of each tree within the forest": [[17, "visualize-the-prediction-of-each-tree-within-the-forest"]], "Predicting with different quantile interpolation methods": [[20, "predicting-with-different-quantile-interpolation-methods"]], "Generate the data": [[20, "generate-the-data"], [23, "generate-the-data"]], "The interpolation methods": [[20, "the-interpolation-methods"]], "Quantile prediction intervals with Random Forest Regressor": [[21, "quantile-prediction-intervals-with-random-forest-regressor"]], "Quantile Prediction Function": [[21, "quantile-prediction-function"]], "Plot the results": [[21, "plot-the-results"], [22, "plot-the-results"], [23, "plot-the-results"]], "Quantile prediction with Random Forest Regressor class": [[22, "quantile-prediction-with-random-forest-regressor-class"]], "Fit the model to the training samples": [[22, "fit-the-model-to-the-training-samples"]], "Quantile regression vs. standard and oblique regression forest": [[23, "quantile-regression-vs-standard-and-oblique-regression-forest"]], "Generate Quantile Predictions": [[23, "generate-quantile-predictions"]], "Plot the decision surface of decision trees trained on the iris dataset": [[26, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Compare extra oblique forest and oblique random forest predictions on cc18 datasets": [[29, "compare-extra-oblique-forest-and-oblique-random-forest-predictions-on-cc18-datasets"]], "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes": [[30, "speed-of-extra-oblique-random-forest-vs-oblique-random-forest-on-different-dataset-sizes"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[31, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Compare the decision surfaces of oblique extra-trees with standard oblique trees": [[32, "compare-the-decision-surfaces-of-oblique-extra-trees-with-standard-oblique-trees"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[33, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree": [[36, "demonstrate-and-visualize-a-multi-view-projection-matrix-for-an-axis-aligned-tree"]], "Initialize the multi-view splitter": [[36, "initialize-the-multi-view-splitter"]], "Sample the projection matrix": [[36, "sample-the-projection-matrix"]], "Sampling split candidates scaled to each feature-set dimensionality": [[36, "sampling-split-candidates-scaled-to-each-feature-set-dimensionality"]], "Plot the projection matrices of an oblique tree for sampling images, or time-series": [[37, "plot-the-projection-matrices-of-an-oblique-tree-for-sampling-images-or-time-series"]], "Initialize patch splitter": [[37, "initialize-patch-splitter"], [38, "initialize-patch-splitter"]], "Generate 1D patches": [[37, "generate-1d-patches"]], "Generate 2D patches": [[37, "generate-2d-patches"]], "Generate 3D patches": [[37, "generate-3d-patches"]], "Discontiguous Patches": [[37, "discontiguous-patches"]], "Plot the sparse projection matrices of an oblique tree": [[38, "plot-the-sparse-projection-matrices-of-an-oblique-tree"]], "Initialize the splitter": [[38, "initialize-the-splitter"]], "Generate projection matrix": [[38, "generate-projection-matrix"]], "sktree.ExtendedIsolationForest": [[40, "sktree-extendedisolationforest"]], "sktree.ExtraTreesClassifier": [[41, "sktree-extratreesclassifier"]], "sktree.ExtraTreesRegressor": [[42, "sktree-extratreesregressor"]], "sktree.HonestForestClassifier": [[43, "sktree-honestforestclassifier"]], "sktree.MultiViewRandomForestClassifier": [[44, "sktree-multiviewrandomforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[45, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[46, "sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[47, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[48, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[49, "sktree-patchobliquerandomforestregressor"]], "sktree.RandomForestClassifier": [[50, "sktree-randomforestclassifier"]], "sktree.RandomForestRegressor": [[51, "sktree-randomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[52, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[53, "sktree-unsupervisedrandomforest"]], "sktree.datasets.approximate_clf_mutual_information": [[54, "sktree-datasets-approximate-clf-mutual-information"]], "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo": [[55, "sktree-datasets-approximate-clf-mutual-information-with-monte-carlo"]], "sktree.datasets.make_gaussian_mixture": [[56, "sktree-datasets-make-gaussian-mixture"]], "Examples using sktree.datasets.make_gaussian_mixture": [[56, "examples-using-sktree-datasets-make-gaussian-mixture"]], "sktree.datasets.make_joint_factor_model": [[57, "sktree-datasets-make-joint-factor-model"]], "sktree.datasets.make_quadratic_classification": [[58, "sktree-datasets-make-quadratic-classification"]], "sktree.datasets.make_trunk_classification": [[59, "sktree-datasets-make-trunk-classification"]], "sktree.experimental.conditional_resample": [[60, "sktree-experimental-conditional-resample"]], "sktree.experimental.mutual_info.cmi_gaussian": [[61, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[62, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[63, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[64, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[65, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[66, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[67, "sktree-experimental-simulate-simulate-sphere"]], "sktree.stats.FeatureImportanceForestClassifier": [[68, "sktree-stats-featureimportanceforestclassifier"]], "sktree.stats.FeatureImportanceForestRegressor": [[69, "sktree-stats-featureimportanceforestregressor"]], "sktree.stats.PermutationForestClassifier": [[70, "sktree-stats-permutationforestclassifier"]], "sktree.stats.PermutationForestRegressor": [[71, "sktree-stats-permutationforestregressor"]], "sktree.tree.DecisionTreeClassifier": [[72, "sktree-tree-decisiontreeclassifier"]], "sktree.tree.DecisionTreeRegressor": [[73, "sktree-tree-decisiontreeregressor"]], "sktree.tree.ExtraTreeClassifier": [[74, "sktree-tree-extratreeclassifier"]], "sktree.tree.ExtraTreeRegressor": [[75, "sktree-tree-extratreeregressor"]], "sktree.tree.HonestTreeClassifier": [[76, "sktree-tree-honesttreeclassifier"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[77, "sktree-tree-multiviewdecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[78, "sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[79, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[80, "sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[81, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[82, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[83, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[84, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[85, "scikit-tree"]], "Contents": [[85, "contents"]], "Getting started:": [[85, null]], "Indices and tables": [[85, "indices-and-tables"]], "Installation": [[86, "installation"]], "Dependencies": [[86, "dependencies"]], "Installing with pip": [[86, "installing-with-pip"]], "Installing from source with Meson": [[86, "installing-from-source-with-meson"]], "Conda (Recommended)": [[86, "conda-recommended"]], "Oblique Random Forests": [[87, "oblique-random-forests"]], "Examples:": [[87, null]], "Feature importance evaluation": [[87, "feature-importance-evaluation"]], "Supervised Decision Trees": [[88, "supervised-decision-trees"]], "Oblique Trees": [[88, "oblique-trees"]], "Differences compared to decision trees": [[88, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[88, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[88, "classification-regression-and-multi-output-problems"]], "Complexity": [[88, "complexity"]], "Tips on practical use": [[88, "tips-on-practical-use"]], "Limitations compared to decision trees": [[88, "limitations-compared-to-decision-trees"]], "References:": [[88, null]], "Honest Trees": [[88, "honest-trees"]], "Unsupervised Decision Trees": [[89, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[89, "unsupervised-criterion"]], "Two-Means": [[89, "two-means"]], "Fast-BIC": [[89, "fast-bic"]], "Evaluating Unsupervised Trees": [[89, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[90, "examples-using-scikit-tree"]], "User Guide": [[91, "user-guide"]], "Version 0.1": [[94, "version-0-1"]], "Changelog": [[94, "changelog"], [95, "changelog"], [96, "changelog"], [97, "changelog"], [98, "changelog"], [99, "changelog"], [100, "changelog"]], "Code and Documentation Contributors": [[94, "code-and-documentation-contributors"], [95, "code-and-documentation-contributors"], [96, "code-and-documentation-contributors"], [97, "code-and-documentation-contributors"], [98, "code-and-documentation-contributors"], [99, "code-and-documentation-contributors"], [100, "code-and-documentation-contributors"]], "Version 0.2": [[95, "version-0-2"]], "Version 0.3": [[96, "version-0-3"]], "Version 0.4": [[97, "version-0-4"]], "Version 0.5": [[98, "version-0-5"]], "Release History": [[92, "release-history"]], "Version 0.6": [[99, "version-0-6"]], "Version 0.7": [[100, "version-0-7"]]}, "indexentries": {"module": [[0, "module-sktree"], [0, "module-sktree._lib.sklearn.ensemble"]], "sktree": [[0, "module-sktree"]], "sktree._lib.sklearn.ensemble": [[0, "module-sktree._lib.sklearn.ensemble"]], "extendedisolationforest (class in sktree)": [[40, "sktree.ExtendedIsolationForest"]], "decision_function() (sktree.extendedisolationforest method)": [[40, "sktree.ExtendedIsolationForest.decision_function"]], "estimators_samples_ (sktree.extendedisolationforest property)": [[40, "sktree.ExtendedIsolationForest.estimators_samples_"]], "fit() (sktree.extendedisolationforest method)": [[40, "sktree.ExtendedIsolationForest.fit"]], "fit_predict() (sktree.extendedisolationforest method)": [[40, "sktree.ExtendedIsolationForest.fit_predict"]], "get_metadata_routing() (sktree.extendedisolationforest method)": [[40, "sktree.ExtendedIsolationForest.get_metadata_routing"]], "get_params() (sktree.extendedisolationforest method)": [[40, "sktree.ExtendedIsolationForest.get_params"]], "predict() (sktree.extendedisolationforest method)": [[40, "sktree.ExtendedIsolationForest.predict"]], "score_samples() (sktree.extendedisolationforest method)": [[40, "sktree.ExtendedIsolationForest.score_samples"]], "set_fit_request() (sktree.extendedisolationforest method)": [[40, "sktree.ExtendedIsolationForest.set_fit_request"]], "set_params() (sktree.extendedisolationforest method)": [[40, "sktree.ExtendedIsolationForest.set_params"]], "extratreesclassifier (class in sktree)": [[41, "sktree.ExtraTreesClassifier"]], "apply() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.apply"]], "decision_path() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sktree.extratreesclassifier property)": [[41, "sktree.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sktree.extratreesclassifier property)": [[41, "sktree.ExtraTreesClassifier.feature_importances_"]], "fit() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.get_params"]], "partial_fit() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.partial_fit"]], "predict() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.predict"]], "predict_log_proba() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.predict_quantiles"]], "score() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.score"]], "set_fit_request() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.set_fit_request"]], "set_params() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.set_params"]], "set_partial_fit_request() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.set_partial_fit_request"]], "set_score_request() (sktree.extratreesclassifier method)": [[41, "sktree.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sktree)": [[42, "sktree.ExtraTreesRegressor"]], "apply() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.apply"]], "decision_path() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sktree.extratreesregressor property)": [[42, "sktree.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sktree.extratreesregressor property)": [[42, "sktree.ExtraTreesRegressor.feature_importances_"]], "fit() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.get_params"]], "predict() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.predict"]], "predict_quantiles() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.predict_quantiles"]], "score() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.score"]], "set_fit_request() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.set_fit_request"]], "set_params() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.set_params"]], "set_score_request() (sktree.extratreesregressor method)": [[42, "sktree.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in sktree)": [[43, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.apply"]], "decision_path() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.decision_path"]], "estimators_samples_ (sktree.honestforestclassifier property)": [[43, "sktree.HonestForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.honestforestclassifier property)": [[43, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.get_params"]], "honest_indices_ (sktree.honestforestclassifier property)": [[43, "sktree.HonestForestClassifier.honest_indices_"]], "oob_samples_ (sktree.honestforestclassifier property)": [[43, "sktree.HonestForestClassifier.oob_samples_"]], "partial_fit() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.partial_fit"]], "predict() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.predict_proba"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.honestforestclassifier method)": [[43, "sktree.HonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.honestforestclassifier property)": [[43, "sktree.HonestForestClassifier.structure_indices_"]], "multiviewrandomforestclassifier (class in sktree)": [[44, "sktree.MultiViewRandomForestClassifier"]], "apply() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.multiviewrandomforestclassifier property)": [[44, "sktree.MultiViewRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.multiviewrandomforestclassifier property)": [[44, "sktree.MultiViewRandomForestClassifier.feature_importances_"]], "fit() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.get_params"]], "partial_fit() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.partial_fit"]], "predict() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.predict"]], "predict_log_proba() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.predict_quantiles"]], "score() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.score"]], "set_fit_request() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.set_fit_request"]], "set_params() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.multiviewrandomforestclassifier method)": [[44, "sktree.MultiViewRandomForestClassifier.set_score_request"]], "nearestneighborsmetaestimator (class in sktree)": [[45, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[45, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[45, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[45, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[45, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[45, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[45, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[46, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestclassifier property)": [[46, "sktree.ObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[46, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[46, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[47, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestregressor property)": [[47, "sktree.ObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[47, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.get_params"]], "predict() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[47, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[48, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestclassifier property)": [[48, "sktree.PatchObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[48, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[48, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[49, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestregressor property)": [[49, "sktree.PatchObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[49, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[49, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in sktree)": [[50, "sktree.RandomForestClassifier"]], "apply() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.apply"]], "decision_path() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.randomforestclassifier property)": [[50, "sktree.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.randomforestclassifier property)": [[50, "sktree.RandomForestClassifier.feature_importances_"]], "fit() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.get_params"]], "partial_fit() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.partial_fit"]], "predict() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.predict"]], "predict_log_proba() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.predict_quantiles"]], "score() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.score"]], "set_fit_request() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.set_fit_request"]], "set_params() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.randomforestclassifier method)": [[50, "sktree.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sktree)": [[51, "sktree.RandomForestRegressor"]], "apply() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.apply"]], "decision_path() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.randomforestregressor property)": [[51, "sktree.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.randomforestregressor property)": [[51, "sktree.RandomForestRegressor.feature_importances_"]], "fit() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.get_params"]], "predict() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.predict"]], "predict_quantiles() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.predict_quantiles"]], "score() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.score"]], "set_fit_request() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.set_fit_request"]], "set_params() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.set_params"]], "set_score_request() (sktree.randomforestregressor method)": [[51, "sktree.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[52, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedobliquerandomforest property)": [[52, "sktree.UnsupervisedObliqueRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[52, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[52, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[53, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedrandomforest property)": [[53, "sktree.UnsupervisedRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[53, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[53, "sktree.UnsupervisedRandomForest.transform"]], "approximate_clf_mutual_information() (in module sktree.datasets)": [[54, "sktree.datasets.approximate_clf_mutual_information"]], "approximate_clf_mutual_information_with_monte_carlo() (in module sktree.datasets)": [[55, "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo"]], "make_gaussian_mixture() (in module sktree.datasets)": [[56, "sktree.datasets.make_gaussian_mixture"]], "make_joint_factor_model() (in module sktree.datasets)": [[57, "sktree.datasets.make_joint_factor_model"]], "make_quadratic_classification() (in module sktree.datasets)": [[58, "sktree.datasets.make_quadratic_classification"]], "make_trunk_classification() (in module sktree.datasets)": [[59, "sktree.datasets.make_trunk_classification"]], "conditional_resample() (in module sktree.experimental)": [[60, "sktree.experimental.conditional_resample"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[61, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[62, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[63, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[64, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[65, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[66, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[67, "sktree.experimental.simulate.simulate_sphere"]], "featureimportanceforestclassifier (class in sktree.stats)": [[68, "sktree.stats.FeatureImportanceForestClassifier"]], "statistic() (sktree.stats.featureimportanceforestclassifier method)": [[68, "sktree.stats.FeatureImportanceForestClassifier.statistic"]], "test() (sktree.stats.featureimportanceforestclassifier method)": [[68, "sktree.stats.FeatureImportanceForestClassifier.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestclassifier property)": [[68, "sktree.stats.FeatureImportanceForestClassifier.train_test_samples_"]], "featureimportanceforestregressor (class in sktree.stats)": [[69, "sktree.stats.FeatureImportanceForestRegressor"]], "statistic() (sktree.stats.featureimportanceforestregressor method)": [[69, "sktree.stats.FeatureImportanceForestRegressor.statistic"]], "test() (sktree.stats.featureimportanceforestregressor method)": [[69, "sktree.stats.FeatureImportanceForestRegressor.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestregressor property)": [[69, "sktree.stats.FeatureImportanceForestRegressor.train_test_samples_"]], "permutationforestclassifier (class in sktree.stats)": [[70, "sktree.stats.PermutationForestClassifier"]], "statistic() (sktree.stats.permutationforestclassifier method)": [[70, "sktree.stats.PermutationForestClassifier.statistic"]], "test() (sktree.stats.permutationforestclassifier method)": [[70, "sktree.stats.PermutationForestClassifier.test"]], "train_test_samples_ (sktree.stats.permutationforestclassifier property)": [[70, "sktree.stats.PermutationForestClassifier.train_test_samples_"]], "permutationforestregressor (class in sktree.stats)": [[71, "sktree.stats.PermutationForestRegressor"]], "statistic() (sktree.stats.permutationforestregressor method)": [[71, "sktree.stats.PermutationForestRegressor.statistic"]], "test() (sktree.stats.permutationforestregressor method)": [[71, "sktree.stats.PermutationForestRegressor.test"]], "train_test_samples_ (sktree.stats.permutationforestregressor property)": [[71, "sktree.stats.PermutationForestRegressor.train_test_samples_"]], "decisiontreeclassifier (class in sktree.tree)": [[72, "sktree.tree.DecisionTreeClassifier"]], "apply() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeclassifier property)": [[72, "sktree.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeclassifier method)": [[72, "sktree.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sktree.tree)": [[73, "sktree.tree.DecisionTreeRegressor"]], "apply() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeregressor property)": [[73, "sktree.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.get_params"]], "predict() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeregressor method)": [[73, "sktree.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sktree.tree)": [[74, "sktree.tree.ExtraTreeClassifier"]], "apply() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.extratreeclassifier property)": [[74, "sktree.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.fit"]], "get_depth() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.get_params"]], "partial_fit() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.partial_fit"]], "predict() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.predict_quantiles"]], "score() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.extratreeclassifier method)": [[74, "sktree.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sktree.tree)": [[75, "sktree.tree.ExtraTreeRegressor"]], "apply() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.extratreeregressor property)": [[75, "sktree.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.fit"]], "get_depth() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.get_params"]], "predict() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.predict_quantiles"]], "score() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.extratreeregressor method)": [[75, "sktree.tree.ExtraTreeRegressor.set_score_request"]], "honesttreeclassifier (class in sktree.tree)": [[76, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[76, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.get_params"]], "partial_fit() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.partial_fit"]], "predict() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "score() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.score"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.honesttreeclassifier method)": [[76, "sktree.tree.HonestTreeClassifier.set_score_request"]], "multiviewdecisiontreeclassifier (class in sktree.tree)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier"]], "apply() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.multiviewdecisiontreeclassifier property)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[77, "sktree.tree.MultiViewDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[78, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[79, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[80, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[81, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[82, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[82, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[82, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[83, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[84, "sktree.tree.compute_forest_similarity_matrix"]]}})