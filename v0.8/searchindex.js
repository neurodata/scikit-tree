Search.setIndex({"docnames": ["api", "auto_examples/calibration/index", "auto_examples/calibration/plot_overlapping_gaussians", "auto_examples/calibration/sg_execution_times", "auto_examples/index", "auto_examples/multiview/index", "auto_examples/multiview/plot_multiview_dtc", "auto_examples/multiview/sg_execution_times", "auto_examples/outlier_detection/index", "auto_examples/outlier_detection/plot_extended_isolation_forest", "auto_examples/outlier_detection/sg_execution_times", "auto_examples/quantile_predictions/index", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest", "auto_examples/quantile_predictions/sg_execution_times", "auto_examples/sklearn_vs_sktree/index", "auto_examples/sklearn_vs_sktree/plot_iris_dtc", "auto_examples/sklearn_vs_sktree/sg_execution_times", "auto_examples/sparse_oblique_trees/index", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest", "auto_examples/sparse_oblique_trees/sg_execution_times", "auto_examples/splitters/index", "auto_examples/splitters/plot_multiview_axis_aligned_splitter", "auto_examples/splitters/plot_projection_matrices", "auto_examples/splitters/plot_sparse_projection_matrix", "auto_examples/splitters/sg_execution_times", "auto_examples/treeple/index", "auto_examples/treeple/sg_execution_times", "auto_examples/treeple/treeple_tutorial_0_GMM", "auto_examples/treeple/treeple_tutorial_1_1a_SA98", "auto_examples/treeple/treeple_tutorial_1_1b_MI", "auto_examples/treeple/treeple_tutorial_1_1c_pAUC", "auto_examples/treeple/treeple_tutorial_1_1d_HD", "auto_examples/treeple/treeple_tutorial_1_2_pvalue", "auto_examples/treeple/treeple_tutorial_2_1a_SA98_multiview", "auto_examples/treeple/treeple_tutorial_2_1b_CMI", "auto_examples/treeple/treeple_tutorial_2_2_pvalue_multiview", "generated/sktree.ExtendedIsolationForest", "generated/sktree.ExtraTreesClassifier", "generated/sktree.ExtraTreesRegressor", "generated/sktree.HonestForestClassifier", "generated/sktree.MultiViewRandomForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.RandomForestClassifier", "generated/sktree.RandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.datasets.approximate_clf_mutual_information", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "generated/sktree.datasets.make_gaussian_mixture", "generated/sktree.datasets.make_joint_factor_model", "generated/sktree.datasets.make_marron_wand_classification", "generated/sktree.datasets.make_quadratic_classification", "generated/sktree.datasets.make_trunk_classification", "generated/sktree.datasets.make_trunk_mixture_classification", "generated/sktree.experimental.conditional_resample", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.stats.PermutationHonestForestClassifier", "generated/sktree.stats.build_coleman_forest", "generated/sktree.stats.build_cv_forest", "generated/sktree.stats.build_oob_forest", "generated/sktree.stats.build_permutation_forest", "generated/sktree.tree.DecisionTreeClassifier", "generated/sktree.tree.DecisionTreeRegressor", "generated/sktree.tree.ExtraTreeClassifier", "generated/sktree.tree.ExtraTreeRegressor", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.MultiViewDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4", "whats_new/v0.5", "whats_new/v0.6", "whats_new/v0.7", "whats_new/v0.8", "whats_new/v0.9"], "filenames": ["api.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_overlapping_gaussians.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/multiview/index.rst", "auto_examples/multiview/plot_multiview_dtc.rst", "auto_examples/multiview/sg_execution_times.rst", "auto_examples/outlier_detection/index.rst", "auto_examples/outlier_detection/plot_extended_isolation_forest.rst", "auto_examples/outlier_detection/sg_execution_times.rst", "auto_examples/quantile_predictions/index.rst", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest.rst", "auto_examples/quantile_predictions/sg_execution_times.rst", "auto_examples/sklearn_vs_sktree/index.rst", "auto_examples/sklearn_vs_sktree/plot_iris_dtc.rst", "auto_examples/sklearn_vs_sktree/sg_execution_times.rst", "auto_examples/sparse_oblique_trees/index.rst", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size.rst", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris.rst", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/sg_execution_times.rst", "auto_examples/splitters/index.rst", "auto_examples/splitters/plot_multiview_axis_aligned_splitter.rst", "auto_examples/splitters/plot_projection_matrices.rst", "auto_examples/splitters/plot_sparse_projection_matrix.rst", "auto_examples/splitters/sg_execution_times.rst", "auto_examples/treeple/index.rst", "auto_examples/treeple/sg_execution_times.rst", "auto_examples/treeple/treeple_tutorial_0_GMM.rst", "auto_examples/treeple/treeple_tutorial_1_1a_SA98.rst", "auto_examples/treeple/treeple_tutorial_1_1b_MI.rst", "auto_examples/treeple/treeple_tutorial_1_1c_pAUC.rst", "auto_examples/treeple/treeple_tutorial_1_1d_HD.rst", "auto_examples/treeple/treeple_tutorial_1_2_pvalue.rst", "auto_examples/treeple/treeple_tutorial_2_1a_SA98_multiview.rst", "auto_examples/treeple/treeple_tutorial_2_1b_CMI.rst", "auto_examples/treeple/treeple_tutorial_2_2_pvalue_multiview.rst", "generated/sktree.ExtendedIsolationForest.rst", "generated/sktree.ExtraTreesClassifier.rst", "generated/sktree.ExtraTreesRegressor.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.MultiViewRandomForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.RandomForestClassifier.rst", "generated/sktree.RandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.datasets.approximate_clf_mutual_information.rst", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo.rst", "generated/sktree.datasets.make_gaussian_mixture.rst", "generated/sktree.datasets.make_joint_factor_model.rst", "generated/sktree.datasets.make_marron_wand_classification.rst", "generated/sktree.datasets.make_quadratic_classification.rst", "generated/sktree.datasets.make_trunk_classification.rst", "generated/sktree.datasets.make_trunk_mixture_classification.rst", "generated/sktree.experimental.conditional_resample.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.stats.PermutationHonestForestClassifier.rst", "generated/sktree.stats.build_coleman_forest.rst", "generated/sktree.stats.build_cv_forest.rst", "generated/sktree.stats.build_oob_forest.rst", "generated/sktree.stats.build_permutation_forest.rst", "generated/sktree.tree.DecisionTreeClassifier.rst", "generated/sktree.tree.DecisionTreeRegressor.rst", "generated/sktree.tree.ExtraTreeClassifier.rst", "generated/sktree.tree.ExtraTreeRegressor.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.MultiViewDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst", "whats_new/v0.5.rst", "whats_new/v0.6.rst", "whats_new/v0.7.rst", "whats_new/v0.8.rst", "whats_new/v0.9.rst"], "titles": ["API Documentation", "Calibrated decision trees via honesty", "Plot honest forest calibrations on overlapping gaussian simulations", "Computation times", "Examples", "Multi-view learning with Decision-trees", "Analyze a multi-view dataset with a multi-view random forest", "Computation times", "Outlier-detection", "ExtendedIsolationForest example", "Computation times", "Quantile Predictions with Random Forest", "Predicting with different quantile interpolation methods", "Quantile prediction intervals with Random Forest Regressor", "Quantile prediction with Random Forest Regressor class", "Quantile regression with oblique regression forest", "Computation times", "Comparing sklearn and sktree decision trees", "Plot the decision surface of decision trees trained on the iris dataset", "Computation times", "Sparse oblique projections with oblique decision-trees", "Compare extra oblique forest and oblique random forest predictions on cc18 datasets", "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Compare the decision surfaces of oblique extra-trees with standard oblique trees", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Computation times", "Decision-tree splitters", "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree", "Plot the projection matrices of an oblique tree for sampling images, or time-series", "Plot the sparse projection matrices of an oblique tree", "Computation times", "Treeple for Hypothesis Testing", "Computation times", "Estimating true posteriors &amp; statistics", "Calculating S&#64;98", "Calculating MI", "Calculating pAUC", "Calculating Hellinger Distance", "Calculating p-value (MIGHT)", "Calculating S&#64;98 with multiview data", "Calculating CMI", "Calculating p-value with multiview data (CoMIGHT)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtendedIsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.MultiViewRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.datasets.approximate_clf_mutual_information", "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "sktree.datasets.make_gaussian_mixture", "sktree.datasets.make_joint_factor_model", "sktree.datasets.make_marron_wand_classification", "sktree.datasets.make_quadratic_classification", "sktree.datasets.make_trunk_classification", "sktree.datasets.make_trunk_mixture_classification", "sktree.experimental.conditional_resample", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationHonestForestClassifier", "sktree.stats.build_coleman_forest", "sktree.stats.build_cv_forest", "sktree.stats.build_oob_forest", "sktree.stats.build_permutation_forest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.MultiViewDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "Version 0.1", "Version 0.2", "Version 0.3", "Version 0.4", "Version 0.5", "Version 0.6", "Version 0.7", "Version 0.8", "Version 0.9"], "terms": {"sktree": [0, 2, 6, 9, 12, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 91, 92, 94, 103, 104, 105, 106, 107], "manifold": [0, 29, 51, 52, 86, 87, 91, 93, 100], "obliqu": [0, 11, 16, 18, 26, 27, 31, 47, 49, 50, 51, 52, 55, 83, 84, 85, 86, 87, 89, 91, 92, 97, 100, 101], "random": [0, 2, 5, 7, 9, 15, 16, 20, 24, 26, 28, 29, 30, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 97, 100, 102, 106], "forest": [0, 1, 3, 5, 7, 12, 16, 20, 24, 26, 28, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 69, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 97, 100, 101, 102, 103, 106], "we": [0, 2, 6, 9, 12, 13, 15, 18, 24, 28, 29, 30, 34, 39, 42, 43, 46, 65, 66, 70, 91, 92, 93, 94, 95, 101, 102, 106], "provid": [0, 18, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "drop": [0, 12, 13, 14, 15, 21, 22, 23, 25, 94], "replac": [0, 40, 41, 42, 43, 46, 65, 93], "featur": [0, 6, 12, 15, 18, 21, 22, 23, 24, 25, 29, 30, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "have": [0, 2, 6, 24, 29, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 101, 102, 105], "develop": [0, 92, 107, 108], "These": [0, 24, 29, 46, 73, 82, 93], "ar": [0, 2, 6, 9, 12, 13, 14, 15, 21, 22, 23, 24, 25, 28, 29, 30, 37, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 70, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 98, 103, 106, 107], "still": [0, 29, 46], "compat": [0, 29, 55, 56, 88, 89], "all": [0, 4, 6, 18, 22, 25, 28, 29, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 63, 64, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 96, 98, 100, 101, 106, 107], "capabl": [0, 101], "bin": [0, 2, 15, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 53, 54], "which": [0, 2, 9, 13, 21, 23, 28, 29, 39, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 64, 65, 70, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 102, 103, 104, 105, 106, 107], "theoret": [0, 2, 91], "improv": [0, 2, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108], "runtim": [0, 43, 94, 106], "significantli": [0, 39, 42, 45, 50, 52, 54], "high": [0, 6, 9, 21, 23, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 101], "dimension": [0, 6, 21, 43, 61, 63, 64, 71, 95, 100, 101], "sampl": [0, 2, 4, 6, 9, 12, 13, 15, 18, 21, 22, 23, 25, 27, 30, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 100, 102, 103, 105, 106, 107], "size": [0, 2, 4, 6, 9, 13, 14, 20, 21, 26, 29, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 84, 85, 86, 87, 94, 96, 103, 107], "data": [0, 2, 4, 13, 14, 18, 21, 22, 23, 24, 25, 28, 29, 30, 32, 33, 39, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 100, 102], "us": [0, 2, 4, 5, 6, 9, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 28, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 69, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 101, 102, 105, 106], "your": [0, 86, 87, 91], "own": [0, 44, 46, 47, 48, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "risk": 0, "extens": 0, "compar": [0, 2, 9, 13, 14, 20, 25, 26, 30, 39, 42, 53, 54, 74, 77, 83, 84, 85, 86, 87, 91, 97, 106], "decis": [0, 8, 19, 21, 26, 28, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 97, 101, 102], "model": [0, 6, 12, 18, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 100, 105, 106], "tradition": 0, "implement": [0, 28, 29, 30, 43, 44, 45, 46, 59, 61, 63, 64, 65, 84, 85, 91, 93, 94, 100, 101], "axi": [0, 2, 4, 6, 9, 12, 13, 18, 20, 22, 24, 26, 27, 29, 30, 31, 34, 35, 36, 37, 38, 40, 41, 47, 49, 50, 51, 52, 83, 84, 85, 86, 87, 93, 94, 96, 100, 102], "align": [0, 4, 6, 18, 20, 26, 27, 30, 31, 47, 49, 50, 51, 52, 83, 84, 85, 86, 87, 93, 94, 96, 102], "split": [0, 2, 4, 9, 13, 21, 24, 27, 29, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 96, 103, 104, 105], "store": [0, 24, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 83, 84, 85, 86, 87, 93, 94], "mean": [0, 2, 9, 13, 15, 21, 22, 23, 24, 25, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 97, 100, 101, 103], "outcom": 0, "i": [0, 2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103, 104, 105, 107], "e": [0, 9, 13, 15, 28, 29, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95], "label": [0, 2, 9, 13, 14, 15, 18, 23, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95], "vote": [0, 44, 46, 47, 49, 51, 53, 55, 56, 73, 82], "leaf": [0, 9, 12, 13, 14, 15, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94], "node": [0, 4, 9, 12, 13, 14, 15, 21, 27, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 96], "howev": [0, 21, 24, 28, 94], "more": [0, 2, 9, 12, 18, 21, 22, 28, 39, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94, 103], "exot": 0, "possibl": [0, 21, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "call": [0, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 65, 69, 70, 72, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 103], "some": [0, 6, 9, 21, 28, 29, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 96, 103], "multipl": [0, 6, 28, 29, 43, 48, 65, 83, 94, 102], "column": [0, 21, 22, 23, 24, 25, 28, 29, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 80, 82, 83, 84, 85, 86, 87, 94, 100], "creat": [0, 6, 9, 12, 13, 14, 15, 24, 28, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93], "new": [0, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 98, 101, 105, 106], "valu": [0, 4, 9, 12, 13, 15, 21, 22, 28, 29, 30, 32, 33, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63, 64, 69, 70, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 96, 104, 106, 107], "thi": [0, 2, 6, 9, 12, 13, 14, 15, 21, 22, 23, 24, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62, 63, 64, 65, 69, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 95, 98, 101, 102, 103, 104, 105, 106, 107], "can": [0, 6, 9, 12, 24, 28, 29, 30, 34, 36, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 63, 64, 65, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 100], "take": [0, 13, 18, 24, 55, 56, 65, 69, 74, 77, 88, 89, 101], "form": [0, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "spars": [0, 21, 25, 26, 27, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94], "linear": [0, 12, 18, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "combin": [0, 18, 30, 34, 43, 47, 49, 50, 55, 83, 84, 85, 89, 93, 94, 95], "even": [0, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "advantag": [0, 101], "structur": [0, 6, 18, 28, 29, 46, 65, 73, 78, 79, 80, 81, 82, 86, 87, 95, 100], "g": [0, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94], "an": [0, 4, 6, 9, 12, 13, 14, 15, 21, 24, 25, 27, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 63, 64, 65, 67, 69, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 100, 101, 102, 103, 104, 105, 106, 107], "imag": [0, 4, 27, 31, 86, 87, 96], "indic": [0, 12, 13, 14, 15, 24, 28, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 66, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 102, 105], "awar": [0, 28, 86, 87], "fashion": [0, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "class": [0, 2, 4, 9, 11, 13, 16, 23, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 95, 96, 103, 106, 107], "gener": [0, 2, 4, 6, 11, 13, 14, 18, 21, 22, 23, 24, 25, 28, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 81, 82, 85, 86, 87, 93, 94, 95, 96, 100, 103, 105, 106], "while": [0, 2, 6, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 106], "everyth": [0, 96], "els": [0, 9, 24, 25, 34, 35, 37, 39, 40, 42, 61, 63, 64], "consist": [0, 9, 21, 25, 28, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 79, 81, 85, 87, 88, 89, 94, 102], "how": [0, 4, 6, 8, 11, 13, 14, 21, 24, 28, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 96, 106], "build": [0, 24, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 92, 101, 102], "classif": [0, 6, 23, 24, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 97, 103], "regress": [0, 2, 4, 11, 16, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 103], "thei": [0, 9, 21, 29, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 106], "also": [0, 2, 18, 28, 29, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 102, 103, 106], "power": [0, 93], "non": [0, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "parametr": [0, 94], "embed": 0, "cluster": [0, 2, 9, 24, 55, 56, 88, 89, 95], "The": [0, 2, 6, 9, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 102], "randomtreesembed": [0, 80], "exampl": [0, 1, 2, 5, 6, 8, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 95, 102], "other": [0, 2, 6, 9, 13, 39, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "state": [0, 39, 42], "art": 0, "explicitli": [0, 106], "base": [0, 9, 13, 21, 34, 36, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 103, 105, 106], "criterion": [0, 28, 29, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 100], "varianc": [0, 13, 21, 45, 46, 50, 52, 54, 55, 56, 59, 73, 79, 81, 82, 85, 87, 88, 89, 93, 95], "bic": [0, 55, 56, 88, 89, 97], "compris": [0, 86, 87], "those": [0, 13, 14, 21, 44, 45, 46, 49, 50, 51, 52, 53, 54, 71, 78, 79, 80, 81, 82, 84, 85, 93, 94], "avail": [0, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 92, 101], "standalon": 0, "isol": [0, 9, 43, 91, 92, 101], "ensembl": [0, 2, 9, 12, 13, 14, 15, 23, 24, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 80, 81, 93], "extrem": [0, 21, 22, 39, 44, 45, 53, 54, 80, 81], "extend": [0, 6, 9, 43, 91, 94, 101], "allow": [0, 13, 21, 29, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101, 102, 103, 105, 106], "flexibl": [0, 95], "inher": [0, 55, 56], "produc": [0, 9, 107], "like": [0, 9, 28, 29, 30, 34, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95], "extract": [0, 21, 22, 25], "pairwis": 0, "from": [0, 2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 93, 94, 95, 102, 106], "includ": [0, 2, 4, 32, 44, 46, 47, 48, 49, 51, 53, 69, 73, 78, 80, 82, 83, 84, 86, 91, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108], "correct": 0, "turn": [0, 106], "proper": 0, "In": [0, 6, 9, 15, 21, 22, 24, 28, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 106, 108], "addit": [0, 44, 45, 53, 54, 55, 56, 59, 74, 76, 77, 88, 89, 94, 106], "leav": [0, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "natur": [0, 57, 58, 70, 95], "wai": [0, 9, 21, 43, 65, 80, 81, 95], "comput": [0, 21, 25, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 66, 67, 68, 69, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 100, 106], "neighbor": [0, 2, 43, 48, 65, 69, 91, 103], "nearest": [0, 2, 12, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 103, 104, 105], "interfac": [0, 28, 29, 30], "similar": [0, 21, 24, 38, 47, 49, 50, 51, 52, 55, 56, 61, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 100], "nearestneighbor": [0, 48, 65, 69], "perform": [0, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 95, 106], "conveni": 0, "simul": [0, 1, 3, 4, 20, 26, 28, 58, 61, 62, 63, 64, 93, 96, 106, 107], "beyond": [0, 94], "offer": 0, "work": [0, 6, 15, 28, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "progress": 0, "help": [0, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "evalu": [0, 9, 21, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 97], "mutual": [0, 36, 39, 41, 42, 57, 58, 66, 67, 68, 69, 70, 72, 88, 100, 105], "inform": [0, 2, 6, 18, 22, 23, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 64, 66, 67, 68, 69, 70, 72, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 100, 105], "mi": [0, 4, 32, 33, 41, 42, 57, 58, 63, 69, 71, 76, 96, 103], "condit": [0, 13, 14, 34, 36, 39, 41, 42, 51, 52, 57, 58, 65, 66, 69, 86, 87, 100, 103], "cmi": [0, 4, 32, 33, 63, 66, 69, 71, 76, 96], "specif": [0, 28, 29, 30, 34, 35, 37, 40, 44, 46, 47, 49, 51, 53, 61, 63, 64, 73, 74, 77, 94, 102], "multivari": [0, 23, 29, 57, 58, 61, 64, 66, 67, 68, 71, 86, 87, 101], "gaussian": [0, 1, 3, 4, 9, 43, 57, 58, 59, 61, 63, 64, 66, 67, 68, 71, 95, 96], "analyt": [0, 66, 67, 68, 69, 71], "solut": [0, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 66, 67, 68, 69, 73], "entropi": [0, 34, 36, 39, 41, 44, 46, 47, 49, 51, 53, 57, 58, 66, 67, 68, 71, 73, 78, 80, 82, 83, 84, 86], "distribut": [0, 9, 13, 15, 23, 38, 43, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 77, 94, 95, 104, 105], "demonstr": [1, 4, 5, 6, 11, 12, 14, 17, 20, 21, 24, 27, 29, 30, 31, 96], "usag": [1, 4, 21, 22, 78, 79, 80, 81, 82, 96, 102], "honest": [1, 3, 4, 46, 73, 82, 91, 96, 97, 105, 106], "obtain": [1, 4, 6, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 93, 96], "predict": [1, 2, 16, 18, 20, 24, 26, 28, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 106], "plot": [1, 3, 4, 6, 17, 19, 20, 21, 22, 24, 26, 27, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 93, 96], "overlap": [1, 3, 4, 63, 96], "go": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 61, 63, 64], "end": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "download": [2, 4, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 96], "full": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 61, 63, 64, 74], "code": [2, 4, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 88, 89, 92, 96], "result": [2, 9, 22, 24, 28, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95, 103], "variou": [2, 44, 45, 47, 49, 50, 51, 52, 53, 54, 106], "method": [2, 4, 11, 15, 16, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 96, 102, 106], "tree": [2, 6, 8, 12, 13, 14, 15, 19, 21, 22, 25, 26, 31, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 75, 76, 92, 93, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107], "achiev": [2, 24, 45, 54, 91, 93], "see": [2, 6, 12, 13, 14, 15, 18, 21, 22, 24, 25, 28, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 65, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95], "user": [2, 18, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 100, 102], "guid": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 95, 100], "isoton": 2, "irf": 2, "sigmoid": 2, "sigrf": 2, "regular": [2, 6, 15, 18, 21, 61, 63, 64], "without": [2, 43, 46, 78, 79, 80, 81, 95, 105], "rf": [2, 6, 13, 14, 23, 25, 94], "show": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42], "curv": [2, 34, 35, 37, 40, 94], "differ": [2, 4, 6, 11, 16, 17, 20, 21, 24, 26, 27, 28, 36, 39, 41, 42, 43, 48, 60, 61, 63, 64, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 104, 105], "dataset": [2, 4, 5, 7, 9, 13, 15, 17, 19, 20, 23, 24, 26, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 69, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 103, 105, 106, 107], "two": [2, 6, 9, 12, 18, 21, 22, 24, 25, 28, 55, 56, 59, 61, 63, 64, 74, 77, 80, 81, 93, 94, 97, 100, 103], "red": 2, "line": [2, 13, 14], "closest": 2, "ideal": [2, 78, 79, 80, 81, 92], "figur": [2, 9, 18, 21, 29], "reproduc": [2, 43, 59, 60, 65, 105], "1": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 98, 101], "ronan": [2, 51, 52, 86, 87, 91, 93, 100], "perri": [2, 51, 52, 86, 87, 91, 93, 100], "ronak": [2, 51, 52, 86, 87, 93], "mehta": [2, 51, 52, 86, 87, 93], "richard": 2, "guo": 2, "eva": 2, "yezeret": 2, "jes\u00fa": 2, "arroyo": [2, 51, 52, 86, 87, 93], "mike": 2, "powel": 2, "hayden": 2, "helm": 2, "cencheng": [2, 62, 93], "shen": [2, 62, 93], "joshua": [2, 51, 52, 56, 62, 86, 87, 93, 95], "t": [2, 6, 9, 14, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 60, 62, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95], "vogelstein": [2, 51, 52, 56, 62, 86, 87, 93, 95], "adapt": [2, 55, 56, 67, 91, 95], "estim": [2, 4, 13, 18, 21, 22, 23, 24, 25, 32, 33, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 67, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 100, 106, 107], "quantiti": [2, 91], "arxiv": [2, 62, 91], "2021": [2, 91], "1907": [2, 91], "00325": [2, 91], "import": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 97, 101], "necessari": [2, 92], "modul": [2, 28, 29, 30, 91], "librari": [2, 98, 100], "matplotlib": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 92], "pyplot": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42], "plt": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42], "numpi": [2, 6, 9, 12, 13, 14, 15, 18, 22, 23, 24, 28, 29, 30, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92], "np": [2, 6, 9, 12, 13, 14, 15, 18, 22, 23, 24, 28, 29, 30, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "cm": [2, 18, 24, 28, 30], "sklearn": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 37, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 95, 102], "calibratedclassifiercv": 2, "randomforestclassifi": [2, 6, 23, 25, 44, 45, 47, 49, 51, 80], "model_select": [2, 6, 9, 13, 14, 15, 21, 22, 23, 25, 45, 78, 79, 80, 81, 82, 84, 85, 87], "train_test_split": [2, 9, 14, 15, 45, 80, 81], "honestforestclassifi": [2, 35, 36, 37, 38, 39, 40, 41, 42, 100, 102, 105, 106, 107], "defin": [2, 23, 28, 29, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 69, 70, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 103], "classifi": [2, 24, 43, 44, 45, 46, 47, 49, 51, 53, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 106], "color_dict": 2, "honestrf": 2, "f41711": 2, "1b9e77": 2, "377eb8": 2, "fdae61": 2, "n_estim": [2, 6, 9, 12, 13, 15, 21, 22, 23, 24, 25, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 75, 76, 77, 106], "100": [2, 6, 9, 13, 21, 23, 25, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 73], "n_job": [2, 6, 21, 22, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 69, 73, 74, 77], "2": [2, 6, 9, 12, 13, 14, 15, 18, 23, 24, 25, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 98], "clf_cv": 2, "5": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 64, 70, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 98, 101], "max_featur": [2, 6, 13, 21, 22, 23, 25, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 103, 104, 105], "0": [2, 3, 6, 7, 9, 10, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 69, 70, 72, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 98], "rep": 2, "clf": [2, 9, 18, 21, 22, 23, 25, 43, 44, 46, 49, 53, 78, 82, 84, 94], "honest_fract": [2, 46, 73, 82], "cv": [2, 6, 21, 22, 23, 25, 75, 78, 79, 82, 84, 85, 87], "def": [2, 6, 13, 14, 21, 22, 23, 25, 34, 35, 36, 37, 38, 40, 41], "likelihood": [2, 34, 35, 36, 37, 38, 39, 95], "x": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 95, 107], "lik1": 2, "prod": 2, "exp": [2, 14, 34, 36, 41, 57, 58], "asarrai": 2, "lik0": 2, "return": [2, 6, 9, 13, 14, 21, 22, 23, 25, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "n_sampl": [2, 6, 9, 13, 14, 15, 23, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 106], "60000": 2, "n_bin": 2, "3": [2, 6, 9, 13, 14, 18, 21, 22, 23, 24, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63, 64, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 98, 101], "calibration_curv": 2, "here": [2, 6, 9, 12, 13, 14, 15, 28, 29, 30, 46, 94, 96], "blob": 2, "where": [2, 6, 18, 25, 29, 34, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63, 64, 66, 69, 70, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95, 100, 102, 103, 104, 105, 107], "second": [2, 6, 9, 13, 14, 18, 21, 22, 23, 24, 25, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 59, 61, 63, 64, 83, 94], "contain": [2, 6, 9, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "half": [2, 46, 73], "posit": [2, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 53, 78, 80, 82, 93, 95], "neg": [2, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "probabl": [2, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 49, 51, 53, 55, 56, 57, 58, 59, 64, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 86, 94, 106], "therefor": [2, 46, 49, 50, 51, 52, 53, 54, 86, 87, 93, 94], "center": [2, 6, 9, 13, 15, 55, 56, 59, 88, 89], "y": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 66, 67, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "make_blob": [2, 6], "shuffl": [2, 24, 42, 46, 49, 50, 52, 53, 54, 59, 65, 73, 74, 77, 102], "fals": [2, 9, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 104, 105], "random_st": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 102], "42": [2, 9, 21, 22, 44, 45, 54, 59, 80, 81], "sample_weight": [2, 28, 29, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "randomst": [2, 9, 14, 28, 29, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 60, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "rand": [2, 9], "shape": [2, 6, 9, 12, 13, 14, 15, 21, 22, 24, 25, 28, 29, 30, 34, 35, 37, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93], "train": [2, 4, 12, 13, 15, 17, 19, 21, 22, 24, 29, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 102], "test": [2, 13, 14, 21, 22, 23, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 61, 63, 64, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 91, 92, 101, 102, 103, 106], "x_train": [2, 9, 13, 14, 15, 45, 80, 81], "x_test": [2, 9, 12, 13, 14, 15, 45, 80, 81], "y_train": [2, 9, 12, 13, 14, 15, 45, 78, 79, 80, 81], "y_test": [2, 9, 13, 14, 15, 45, 80, 81], "sw_train": 2, "sw_test": 2, "test_siz": [2, 15, 75], "9": [2, 9, 21, 24, 25, 28, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 92, 100], "class_one_prob": 2, "name": [2, 9, 15, 21, 22, 24, 25, 35, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "fit": [2, 9, 12, 13, 15, 18, 24, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 105, 106], "predict_proba": [2, 44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "fig": [2, 6, 9, 13, 18, 21, 22, 23, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42], "ax": [2, 6, 9, 18, 21, 22, 23, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 94], "subplot": [2, 6, 9, 13, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42], "figsiz": [2, 9, 13, 23, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42], "10": [2, 6, 9, 12, 13, 14, 15, 21, 22, 23, 24, 28, 30, 44, 45, 47, 51, 52, 53, 54, 56, 59, 60, 61, 63, 64, 78, 79, 82, 83, 84, 85, 86, 87, 93, 94, 95], "y_uniqu": 2, "uniqu": [2, 21, 22, 25, 34, 36, 41, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "color": [2, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42], "rainbow": 2, "linspac": [2, 6, 9, 14, 22], "this_i": 2, "zip": [2, 4, 6, 9, 12, 13, 18, 24, 34, 35, 40, 96], "this_x": 2, "this_sw": 2, "scatter": [2, 9, 12, 18, 24, 29], "": [2, 4, 9, 18, 21, 23, 24, 28, 32, 33, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 96], "50": [2, 15, 21, 22, 24, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42, 79], "c": [2, 9, 13, 14, 18, 24, 67, 68, 78, 79, 81, 82, 84, 85, 86, 87, 92, 106], "newaxi": 2, "alpha": [2, 9, 13, 24, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 70, 72, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "edgecolor": [2, 9, 18, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42], "k": [2, 9, 12, 24, 44, 45, 48, 69, 88], "legend": [2, 9, 12, 14, 15, 18, 23, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42], "loc": [2, 12, 14, 15, 18, 23], "best": [2, 21, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "set_xtick": [2, 28, 30], "set_ytick": [2, 28, 30], "clf_name": 2, "prob": 2, "item": [2, 12, 13, 14, 15, 22], "order": [2, 13, 21, 22, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "lexsort": 2, "51": 2, "reshap": [2, 9, 15, 24, 28, 29, 30, 34, 40, 41, 42], "25": [2, 12, 14, 24, 28, 29, 34], "x_test_prob": 2, "linewidth": [2, 28], "l": [2, 13, 21, 22, 44, 45, 54, 78, 79, 80, 81, 82, 84, 85, 93, 94, 95], "r": [2, 9, 24, 34, 35, 40, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 69, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 94], "truth": [2, 9, 14, 94], "set_ylim": [2, 13, 34, 35, 37, 40], "05": [2, 39, 42], "set_xlabel": [2, 6, 13, 21, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42], "instanc": [2, 15, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 63, 64, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 107], "sort": [2, 9, 13, 21, 22, 25, 46, 48, 88, 95], "true": [2, 4, 9, 18, 21, 22, 23, 25, 29, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 66, 67, 68, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 96, 103, 107], "p": [2, 4, 13, 21, 22, 23, 32, 33, 34, 35, 40, 44, 45, 46, 47, 49, 51, 53, 54, 61, 63, 70, 73, 74, 77, 80, 81, 96, 106], "set_ylabel": [2, 6, 13, 21, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42], "upper": [2, 13, 14], "left": [2, 13, 14, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "tight_layout": [2, 9, 13, 18, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42], "savefig": [2, 23], "overlapping_gaussian": 2, "png": 2, "discuss": [2, 24], "well": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "closer": [2, 61, 63, 64], "shown": [2, 66], "below": [2, 37], "total": [2, 3, 6, 7, 9, 10, 13, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 29, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "run": [2, 6, 9, 13, 14, 18, 21, 22, 23, 24, 25, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 73, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 102, 103], "time": [2, 4, 6, 9, 13, 14, 18, 21, 22, 23, 24, 25, 27, 28, 34, 35, 36, 37, 38, 39, 40, 41, 42, 54, 55, 56, 70, 74, 77, 84, 85, 86, 87, 88, 90, 94, 96], "script": [2, 6, 9, 13, 14, 18, 21, 22, 23, 24, 25, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42], "minut": [2, 6, 9, 13, 14, 18, 21, 22, 23, 24, 25, 29, 34, 35, 36, 37, 38, 39, 40, 41, 42], "4": [2, 9, 13, 23, 28, 29, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 98], "430": [2, 3], "python": [2, 4, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 92, 96], "sourc": [2, 4, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96], "plot_overlapping_gaussian": [2, 3], "py": [2, 3, 6, 7, 9, 10, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "jupyt": [2, 4, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 96], "notebook": [2, 4, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 96], "ipynb": [2, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42], "galleri": [2, 4, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 96], "sphinx": [2, 4, 6, 9, 12, 13, 14, 15, 18, 21, 22, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 96], "00": [3, 7, 10, 16, 19, 26, 31, 33, 79], "04": [3, 10, 16, 26], "execut": [3, 7, 10, 16, 19, 26, 31, 33], "auto_examples_calibr": 3, "file": [3, 7, 10, 16, 19, 26, 31, 33, 92], "calibr": [3, 91, 94], "mb": [3, 7, 10, 16, 19, 26, 31, 33], "scikit": [4, 18, 28, 55, 56, 88, 89, 92, 93, 94, 98, 106], "algorithm": [4, 9, 21, 43, 48, 55, 56, 69, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 96], "variant": [4, 5, 6, 11, 96], "analyz": [4, 5, 7, 28, 29, 96], "concern": [4, 8, 32, 96], "do": [4, 8, 24, 28, 29, 30, 55, 56, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 96], "extendedisolationforest": [4, 8, 10, 96], "interpol": [4, 11, 16, 28, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96], "interv": [4, 11, 12, 14, 16, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 94, 96], "regressor": [4, 11, 15, 16, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 85, 87, 96], "between": [4, 6, 12, 13, 17, 21, 22, 23, 25, 28, 36, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 96], "surfac": [4, 17, 19, 20, 26, 29, 30, 96], "iri": [4, 17, 19, 24, 78, 82, 84, 94, 96], "extra": [4, 20, 25, 26, 30, 44, 45, 80, 81, 96, 101, 106], "cc18": [4, 20, 26, 30, 93, 96], "speed": [4, 20, 21, 26, 54, 95, 96, 101], "v": [4, 6, 20, 21, 26, 45, 46, 50, 52, 54, 61, 62, 63, 64, 79, 81, 85, 87, 93, 94, 96], "pariti": [4, 20, 26, 93, 96], "standard": [4, 9, 20, 21, 22, 23, 25, 26, 30, 35, 36, 37, 38, 39, 40, 41, 42, 48, 59, 69, 71, 77, 86, 87, 94, 96], "strategi": [4, 27, 46, 53, 54, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96], "visual": [4, 27, 29, 30, 31, 96], "matrix": [4, 6, 27, 29, 31, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 66, 67, 68, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 96], "matric": [4, 27, 28, 31, 43, 55, 56, 60, 61, 63, 64, 65, 94, 96, 100], "seri": [4, 27, 31, 86, 87, 96], "tool": [4, 32, 96], "tutori": [4, 32, 35, 36, 37, 38, 39, 40, 41, 42, 96], "statist": [4, 15, 32, 33, 39, 42, 46, 60, 61, 63, 64, 74, 77, 78, 79, 82, 84, 85, 91, 93, 94, 96, 103], "posterior": [4, 32, 33, 35, 36, 37, 38, 40, 41, 46, 64, 73, 74, 75, 76, 77, 82, 96, 107], "functionss": [4, 32, 96], "calcul": [4, 13, 29, 32, 33, 63, 74, 76, 90, 95, 96], "98": [4, 24, 32, 33, 63, 74, 76, 77, 96], "pauc": [4, 32, 33, 63, 76, 96], "helling": [4, 32, 33, 63, 76, 96], "distanc": [4, 32, 33, 48, 55, 56, 63, 69, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 96], "might": [4, 32, 33, 44, 46, 47, 49, 50, 51, 53, 55, 56, 63, 73, 74, 94, 96, 107], "multiview": [4, 6, 32, 33, 41, 59, 63, 74, 76, 96], "comight": [4, 32, 33, 63, 74, 96], "auto_examples_python": [4, 96], "auto_examples_jupyt": [4, 96], "multiviewrandomforestclassifi": 6, "when": [6, 9, 12, 21, 30, 35, 37, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 98, 101, 102, 103, 104, 105, 106, 107], "set": [6, 9, 21, 22, 24, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 102, 103, 106], "correl": 6, "target": [6, 13, 15, 18, 24, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 62, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94], "variabl": [6, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 66, 70, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94], "each": [6, 12, 13, 14, 15, 18, 21, 22, 24, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 103, 104, 105, 107], "uniformli": [6, 23, 28, 29], "instead": [6, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 107], "vastli": 6, "case": [6, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 94, 102, 104, 105], "n_featur": [6, 28, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 62, 65, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94], "sum": [6, 23, 28, 38, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "number": [6, 9, 23, 24, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 102, 103, 104, 105, 107], "If": [6, 29, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 65, 69, 70, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "known": [6, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "one": [6, 9, 12, 13, 14, 15, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63, 64, 65, 69, 70, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 103, 104, 105], "pass": [6, 22, 29, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 100, 104, 105, 106], "via": [6, 18, 62, 84, 85, 88, 91, 92, 93, 100, 102, 103, 105], "feature_set_end": [6, 28, 47, 83], "paramet": [6, 13, 18, 21, 22, 23, 24, 28, 29, 30, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 101, 105, 106], "For": [6, 9, 12, 18, 21, 22, 25, 28, 29, 30, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 69, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 95, 101], "splitter": [6, 46, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 102], "project": [6, 9, 25, 27, 31, 47, 49, 50, 84, 85, 91, 93, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108], "collect": [6, 9, 12, 13, 14, 15, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 82], "defaultdict": [6, 12, 13, 14, 15], "panda": [6, 21, 22, 23, 24, 25, 40, 41, 42, 55, 56, 62, 88, 89, 100, 101, 102, 106, 107], "pd": [6, 21, 22, 23, 24, 25, 40, 41, 42, 71], "seaborn": [6, 21, 22, 23, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42], "sn": [6, 21, 22, 23, 25, 34, 35, 36, 37, 38, 39, 40, 41, 42], "cross_val_scor": [6, 78, 79, 82, 84, 85, 87], "seed": [6, 14, 23, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42, 55, 56, 57, 58, 61, 62, 63, 64, 69, 70, 71, 72, 74, 75, 77, 106], "12345": 6, "rng": [6, 9, 13, 14, 15], "default_rng": [6, 71], "make_multiview_classif": 6, "n_features_1": 6, "n_features_2": 6, "1000": [6, 9, 13, 14, 22, 23, 35, 36, 37, 38, 39, 40, 41, 42, 46, 49, 53, 70, 71, 72], "cluster_std_first": 6, "cluster_std_second": 6, "x0_first": 6, "none": [6, 23, 24, 25, 28, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "y0": 6, "x1_first": 6, "y1": [6, 72], "low": [6, 9, 13, 21, 22, 60, 107], "subspac": [6, 69], "cluster_std": 6, "integ": [6, 43, 44, 46, 47, 49, 51, 53, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 104, 105], "10000": [6, 13, 22, 34, 39, 42, 74, 77], "x0": 6, "concaten": [6, 9, 12, 13, 83], "standard_norm": 6, "x1": 6, "vstack": 6, "hstack": [6, 34, 40, 41, 42], "both": [6, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 59, 73, 74, 78, 80, 94], "first": [6, 18, 23, 24, 28, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 63, 64, 65, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 93, 94, 103], "ha": [6, 24, 25, 29, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 100, 101, 102, 103, 104, 105, 106, 107, 108], "five": 6, "dimens": [6, 21, 22, 23, 28, 29, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 62, 63, 64, 65, 70, 73, 86, 87, 88, 89, 94, 107], "vari": [6, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "thousand": 6, "kept": 6, "fix": [6, 46, 49, 50, 51, 52, 53, 54, 69, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "so": [6, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 64, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "500": [6, 35, 36, 37, 38, 39, 40, 41, 42, 77], "n_features_view": 6, "20000": 6, "astyp": [6, 21, 22, 23, 25, 28, 29, 30], "int": [6, 9, 13, 21, 22, 25, 28, 30, 34, 35, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "make": [6, 13, 21, 29, 93, 100, 102], "signal": [6, 60, 63, 64], "portion": 6, "increasingli": 6, "add": [6, 24, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 59, 62, 70, 72, 73, 100, 102, 103, 106], "nois": [6, 9, 14, 59, 60, 61, 62, 63, 64, 70, 72], "idx": [6, 12, 13, 14, 15, 18, 24, 29], "enumer": [6, 12, 13, 14, 15, 18, 21, 22, 23, 25, 29, 46, 49, 50, 51, 52, 53, 54], "append": [6, 9, 12, 13, 14, 15, 21, 22, 23, 25], "over": [6, 9, 28, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 59, 73, 78, 80, 82, 83, 86, 87, 93, 103], "sqrt": [6, 21, 22, 38, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 103], "list": [6, 12, 13, 14, 15, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "arrai": [6, 9, 12, 28, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 71, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 104, 105, 107], "mvrf": 6, "cross": [6, 75, 94], "valid": [6, 13, 15, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "rf_score": 6, "mvrf_score": 6, "len": [6, 9, 12, 13, 14, 15, 24, 28, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "now": [6, 21, 22, 23, 24, 25, 29, 92, 100, 103, 104, 105, 106, 107], "experi": 6, "df": [6, 21, 22, 23, 25], "datafram": [6, 21, 22, 23, 24, 25, 40, 41, 42, 55, 56, 65, 88, 89], "melt": 6, "easier": [6, 102], "id_var": 6, "var_nam": 6, "value_nam": 6, "lineplot": [6, 22], "marker": [6, 13, 29], "o": [6, 9, 12, 21, 29, 61, 63, 64, 88, 94, 100, 101], "hue": [6, 22, 40, 41, 42], "set_titl": [6, 9, 21, 22, 23, 25], "As": [6, 25, 28, 30, 34, 61, 63, 64, 90, 94], "outperform": [6, 25, 94], "increas": [6, 13, 21, 22, 44, 45, 48, 53, 54, 60, 61, 63, 64, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93], "becaus": [6, 28, 45, 46, 48, 50, 52, 54, 79, 81, 85, 87, 94], "kei": [6, 28, 78, 79, 80, 81], "22": [6, 7, 44, 45, 48, 53, 54, 78, 79, 80, 81], "040": [6, 7], "plot_multiview_dtc": [6, 7], "auto_examples_multiview": 7, "multi": [7, 27, 31, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 80, 82, 83, 84, 86, 91, 97, 100, 102, 103], "view": [7, 27, 31, 47, 59, 60, 83, 91, 102, 103, 104, 105], "anomali": [9, 43], "detect": [9, 43, 91], "isolationforest": [9, 43], "present": [9, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 88, 89, 94], "demo": 9, "toi": 9, "randomli": [9, 21, 28, 30, 39, 42, 43, 46, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "normal": [9, 15, 21, 22, 28, 30, 37, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 63, 64, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 100], "randn": [9, 15], "One": [9, 34, 35, 36, 37, 38, 39, 40, 41, 42, 78, 79, 80, 81], "them": [9, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 93], "spheric": 9, "slightli": 9, "deform": 9, "notat": 9, "inlier": [9, 43], "assign": [9, 88, 89, 95], "ground": [9, 14, 94], "wherea": [9, 54, 70, 94], "outlier": [9, 43, 61, 91], "uniform": [9, 14, 23, 46, 59, 69, 70, 72, 73, 82], "copi": [9, 18, 42, 65], "inspect": [9, 18, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "decisionboundarydisplai": [9, 18], "n_outlier": 9, "120": 9, "40": [9, 23], "covari": [9, 43, 57, 58, 59, 61, 63, 64, 66, 67, 68, 69, 71, 74, 77, 102, 105, 106], "7": [9, 25, 91, 98], "cluster_1": 9, "cluster_2": 9, "ones": [9, 28, 29, 30], "dtype": [9, 25, 28, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "stratifi": [9, 35, 36, 37, 38, 39, 40, 41, 42, 46, 65, 73, 82, 102, 107], "20": [9, 23, 24, 43, 47, 56, 61, 83, 95], "handl": [9, 94, 104, 105], "legend_el": 9, "squar": [9, 29, 45, 50, 52, 54, 61, 79, 81, 85, 87, 103], "titl": [9, 18, 24, 28, 29, 30], "nuniformli": 9, "extended_clf": 9, "max_sampl": [9, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 105], "feature_combin": [9, 28, 29, 30, 43, 47, 49, 50, 55, 83, 84, 85, 89, 93, 94], "environ": [9, 92], "pleas": [9, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "rerun": 9, "cell": 9, "html": [9, 93], "represent": 9, "trust": 9, "On": 9, "github": [9, 92], "unabl": [9, 103], "render": 9, "try": [9, 94], "load": [9, 13, 18, 24, 25, 60], "page": [9, 92, 98, 102], "nbviewer": 9, "org": [9, 21, 22, 23, 25, 56, 60, 61, 63, 64, 78, 79, 82, 84, 85, 93, 94, 95], "nbsp": 9, "document": [9, 18, 91, 93], "isolationforestifittedisolationforest": 9, "background": 9, "repres": [9, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 107], "whether": [9, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 62, 63, 64, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "given": [9, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95, 106], "area": [9, 14, 37], "displai": [9, 18], "isoforest": 9, "extendedisoforest": 9, "disp": 9, "from_estim": [9, 18], "response_method": [9, 18], "ax_": 9, "f": [9, 14, 18, 21, 23, 25, 29, 34, 35, 37, 40], "binari": [9, 23, 35, 36, 37, 38, 39, 40, 41, 42, 57, 58, 61, 63, 64, 74, 75, 76, 77], "nof": 9, "By": [9, 39, 42, 44, 45, 46, 53, 54, 55, 56, 61, 63, 64, 70, 71, 73, 78, 79, 80, 81, 82, 88, 89, 93, 105, 107], "decision_funct": [9, 43], "measur": [9, 35, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "observ": [9, 13, 14, 39, 42, 43, 67], "Such": 9, "score": [9, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "averag": [9, 21, 30, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 69, 83, 84, 85, 89, 93], "itself": [9, 23, 44, 46, 47, 49, 51, 53, 55, 56, 69, 73], "depth": [9, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "equival": [9, 43, 45, 47, 49, 50, 53, 54, 84, 85, 94], "requir": [9, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "short": 9, "particular": [9, 43, 94], "highli": [9, 101], "close": [9, 43, 51, 52, 86, 87, 91, 93], "similarli": [9, 94], "larg": [9, 21, 22, 25, 44, 45, 46, 49, 50, 51, 52, 53, 54, 61, 63, 64, 78, 79, 80, 81, 82, 84, 85], "correspond": [9, 12, 13, 14, 15, 18, 24, 34, 44, 46, 47, 49, 51, 52, 53, 60, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "colorbar": [9, 28, 30], "d": [9, 12, 13, 14, 15, 21, 22, 28, 30, 44, 45, 54, 59, 61, 63, 64, 66, 67, 68, 71, 80, 81], "sinusoid": 9, "ad": [9, 43, 44, 45, 53, 54, 55, 56, 59, 70, 78, 79, 80, 81, 88, 89, 94, 100, 101, 102, 106], "top": [9, 13, 24, 91, 93], "n": [9, 21, 22, 25, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 95, 100], "8": [9, 13, 21, 25, 29, 38, 54, 70, 82, 91, 98], "pi": [9, 68, 70, 95], "sin": [9, 14, 59, 70], "6": [9, 21, 22, 23, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 60, 91, 98], "add_subplot": [9, 29], "111": 9, "xlim": [9, 12, 29], "30": [9, 21, 22, 47, 79, 83], "ylim": [9, 29], "200": [9, 105], "15": [9, 12, 13, 18, 24, 34, 35, 36, 37, 38, 39, 40, 41, 42], "circl": 9, "locat": 9, "bottom": 9, "right": [9, 13, 15, 18, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "corner": 9, "inlier_sampl": 9, "outlier_sampl": 9, "theta": [9, 94], "estimators_": [9, 24, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "max_tree_depth": 9, "max": [9, 13, 24, 34, 35, 40, 43, 44, 45, 53, 54, 55, 56, 78, 79, 80, 81, 88, 89, 94], "get_depth": [9, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "rang": [9, 12, 13, 14, 15, 18, 21, 23, 24, 29, 43, 48, 86, 87], "polar": [9, 55, 56, 88, 89], "radii_in": 9, "radii_out": 9, "get": [9, 12, 13, 14, 15, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "radii": 9, "lw": [9, 13, 14], "b": [9, 24, 60], "max_depth_tre": 9, "leaf_index": 9, "appli": [9, 12, 13, 14, 15, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 103, 104, 105], "_decision_path_length": 9, "squeez": [9, 29, 34, 35, 37, 40], "j": [9, 12, 46, 61, 63, 64, 78, 79, 82, 84, 85, 92, 94], "nnomin": 9, "round": [9, 13, 23, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 49, 50, 51, 52, 53, 54, 73, 104, 105], "var": 9, "xlabel": [9, 12, 14, 15, 18, 28, 30], "set_xticklabel": [9, 28, 30], "get_xaxi": 9, "set_vis": 9, "get_yaxi": 9, "sahand": 9, "hariri": 9, "matia": 9, "carrasco": 9, "kind": 9, "robert": [9, 60], "brunner": 9, "ieee": [9, 43, 61, 63, 64, 67], "transact": [9, 43], "knowledg": [9, 43, 56, 94, 95], "engin": 9, "33": [9, 81], "1479": 9, "1489": 9, "2019": [9, 46, 82], "815": [9, 10], "plot_extended_isolation_forest": [9, 10], "auto_examples_outlier_detect": 10, "comparison": [12, 21, 22, 23, 25, 53, 54], "dure": [12, 21, 29, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 106], "desir": [12, 15, 94], "li": [12, 13, 14, 15, 51, 52, 56, 86, 87, 91, 93, 95, 100, 101, 102, 103, 104, 105, 106, 107, 108], "point": [12, 13, 18, 23, 24, 29, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "wa": [12, 13, 14, 15, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 73, 88, 89, 94, 103, 106, 107], "heavili": [12, 13, 14, 15], "inspir": [12, 13, 14, 15], "packag": [12, 13, 14, 15, 91, 92], "randomforestregressor": [12, 13, 14, 44, 45, 50, 52, 80], "four": [12, 21, 44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "simpl": [12, 18, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "illustr": 12, "follow": [12, 13, 21, 22, 25, 28, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 63, 64, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95], "To": [12, 21, 28, 29, 30, 44, 45, 46, 49, 50, 51, 52, 53, 54, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 96], "lower": [12, 13, 18, 43, 46, 70, 72, 73, 78, 79, 80, 81, 82, 94], "higher": [12, 22, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 93, 94, 105], "midpoint": 12, "detail": [12, 21, 22, 23, 25, 28, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 63, 64, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "006aff": [12, 13, 14], "ffd237": 12, "0d4599": 12, "f2a619": [12, 13, 14], "a6e5ff": [12, 15], "025": [12, 13, 14], "975": [12, 13, 14], "y_median": 12, "y_err": 12, "est": [12, 35, 36, 37, 38, 39, 40, 41, 42, 74, 75, 76, 77], "fell": [12, 13, 14, 15], "leaf_id": [12, 13, 14, 15], "dictionari": [12, 13, 14, 15, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "map": [12, 13, 14, 15, 24, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "node_to_indic": [12, 13, 14, 15], "id": [12, 13, 14, 15, 21, 22, 25], "fall": [12, 13, 14, 15, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "leaf_ids_test": [12, 13, 14, 15], "same": [12, 13, 14, 15, 18, 28, 29, 30, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 73, 78, 80, 82, 83, 84, 86, 87, 90, 93, 94, 103], "y_pred_quantil": [12, 13, 15], "merg": [12, 13, 14, 15], "sublist": [12, 13, 14, 15], "quatil": [12, 13, 14, 15], "predit": [12, 13, 14, 15], "y_pred": [12, 13, 14, 44, 45, 50, 52, 53, 54, 79, 81, 85, 87], "sc": 12, "arang": [12, 13, 24, 28, 29, 30], "35": 12, "zorder": 12, "eb": 12, "median": [12, 13, 14, 15, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "errorbar": 12, "yerr": 12, "ecolor": 12, "fmt": 12, "75": [12, 28, 34, 101], "xtick": 12, "tolist": 12, "ylabel": [12, 14, 15, 18, 28, 30], "actual": [12, 15, 28, 29, 30, 43], "plot_quantile_interpolation_with_rf": [12, 16], "california": 13, "hous": 13, "being": [13, 48, 59, 94], "u": [13, 45, 50, 52, 54, 60, 79, 81, 85, 87, 92, 93], "95": [13, 14], "bound": [13, 29, 70, 72, 106], "ticker": 13, "funcformatt": 13, "kfold": 13, "util": [13, 15, 25, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "check_random_st": [13, 15], "argument": [13, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 102, 103, 104, 105, 107], "ani": [13, 29, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 106], "variat": [13, 23], "get_quantile_predict": 13, "dollar_formatt": 13, "lambda": [13, 94], "format": [13, 24, 28, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 88, 89], "price": 13, "fetch_california_h": 13, "min": [13, 24, 43], "perm": 13, "permut": [13, 39, 46, 49, 50, 51, 52, 53, 54, 65, 73, 74, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 93, 101, 103, 106], "kf": 13, "n_split": [13, 21, 22, 23, 25], "get_n_split": 13, "y_true": [13, 34, 35, 36, 37, 40, 41, 44, 45, 50, 52, 53, 54, 79, 81, 85, 87], "y_pred_low": [13, 14], "y_pred_upp": [13, 14], "train_index": 13, "test_index": 13, "set_param": [13, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "y_pred_i": 13, "scale": [13, 15, 60, 61, 63, 64, 103], "dollar": 13, "1e5": 13, "confid": [13, 14, 46, 94], "against": 13, "blue": [13, 14], "segment": [13, 88], "halfwai": 13, "ax1": 13, "ax2": 13, "nrow": [13, 29], "ncol": [13, 29], "y_pred_interv": 13, "sort_idx": 13, "argsort": 13, "y_min": [13, 24], "minimum": [13, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "y_max": [13, 24], "maximum": [13, 24, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "float": [13, 21, 22, 23, 25, 34, 35, 37, 38, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "mid": [13, 34, 35, 36, 39, 40, 42], "upp": 13, "e0f2ff": [13, 14], "m": [13, 14, 51, 52, 60, 86, 87, 91, 93, 94], "_": [13, 18, 34, 35, 36, 37, 38, 39, 40, 41, 42], "grei": 13, "grid": [13, 23, 24, 29], "xaxi": 13, "set_major_formatt": 13, "yaxi": 13, "set_xlim": [13, 34, 35, 37, 40], "fill_between": [13, 14, 34, 37], "subplots_adjust": 13, "pad": [13, 18, 24], "897": [13, 16], "plot_quantile_regression_intervals_with_rf": [13, 16], "function": [14, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 65, 69, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 104, 105], "noisi": [14, 23, 59, 60], "make_toy_dataset": 14, "sigma": [14, 95], "lognorm": 14, "atleast_2d": 14, "xx": [14, 24], "max_depth": [14, 21, 22, 23, 24, 25, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "y_pred_quatil": 14, "y_pred_m": 14, "shade": 14, "dot": [14, 59], "black": [14, 18, 24, 28, 29], "ravel": [14, 24], "955": [14, 16], "plot_quantile_toy_example_with_rf": [14, 16], "synthet": 15, "skew": 15, "scipi": [15, 34, 36, 41, 51, 52, 65, 86, 87, 92], "sp": 15, "obliquerandomforestregressor": [15, 93, 100], "5000": [15, 34], "skewnorm_rv": 15, "stat": [15, 34, 35, 36, 37, 38, 39, 40, 41, 42, 78, 79, 82, 84, 85, 104, 105, 106], "skewnorm": 15, "rv": 15, "regr_orf": 15, "y_pred_orf": 15, "idea": 15, "better": [15, 84, 85, 93, 94], "off": [15, 23, 70, 106], "than": [15, 21, 22, 23, 24, 28, 39, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 103, 105, 106, 107], "c0c0c0": 15, "e7a4f5": 15, "qrf": 15, "orf": [15, 21, 22], "hist": [15, 34, 35, 36, 37, 38, 39, 40, 41, 42], "count": [15, 34, 36, 41, 90], "plot_quantile_vs_standard_oblique_forest": [15, 16], "632": 16, "auto_examples_quantile_predict": 16, "quantil": [16, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91], "01": [16, 24, 26, 29, 33], "463": 16, "317": 16, "pair": [18, 24, 39, 42, 90, 94], "learn": [18, 20, 21, 22, 24, 44, 45, 46, 49, 50, 53, 54, 55, 56, 62, 73, 74, 78, 79, 80, 81, 82, 84, 85, 88, 89, 91, 92, 93, 94, 95], "boundari": [18, 24, 29, 48, 51, 52, 86, 87, 100], "made": [18, 106], "threshold": [18, 21, 34, 35, 37, 40, 43, 94], "rule": 18, "infer": [18, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "built": [18, 21, 24, 80, 81, 93, 94], "load_iri": [18, 24, 78, 80, 82, 84, 94], "_lib": [18, 28, 29, 30], "decisiontreeclassifi": [18, 24, 28, 30, 44, 46, 53, 73, 79, 80, 82, 83, 84, 85, 86, 106], "plot_tre": 18, "obliquedecisiontreeclassifi": [18, 30, 46, 47, 49, 51, 85, 94], "ship": 18, "n_class": [18, 24, 34, 36, 41, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 106], "plot_color": 18, "ryb": 18, "plot_step": [18, 24], "02": [18, 19, 31, 33, 34, 35, 40, 79], "clf_label": 18, "123456": [18, 23, 25], "flatten": [18, 29], "pairidx": 18, "onli": [18, 24, 29, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 61, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "h_pad": [18, 24], "w_pad": [18, 24], "cmap": [18, 24, 28, 29, 30], "rdylbu": 18, "feature_nam": [18, 24], "target_nam": 18, "suptitl": [18, 24, 29], "borderpad": 18, "handletextpad": 18, "tight": [18, 24], "adam2392": 18, "sklearn_vs_sktre": 18, "plot_iris_dtc": [18, 19], "73": [18, 79], "userwarn": 18, "No": 18, "colormap": 18, "ignor": [18, 34, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "singl": [18, 24, 40, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "togeth": [18, 24, 94, 95], "fill": [18, 24], "304": [18, 19], "auto_examples_sklearn_vs_sktre": 19, "A": [21, 22, 23, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 67, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 100], "openml": [21, 22, 25], "benchmark": [21, 22, 25, 91], "suit": [21, 22, 25], "classic": [21, 80, 81], "look": [21, 28, 29, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96], "separ": [21, 46, 80, 81, 106], "group": [21, 28, 80, 81, 94, 95], "drawn": [21, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 71, 73, 80, 81, 93], "select": [21, 28, 43, 45, 50, 52, 54, 60, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "among": [21, 47, 49, 50, 51, 52, 55, 56, 61, 63, 64, 70, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "chosen": [21, 44, 45, 46, 53, 54, 73, 78, 79, 80, 81, 82], "contrast": [21, 24, 28, 30, 93, 94], "greedi": [21, 46], "approach": [21, 61, 74, 77, 93], "origin": [21, 39, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 106], "phish": [21, 22, 25], "websit": [21, 22, 25], "http": [21, 22, 23, 25, 56, 60, 61, 63, 64, 78, 79, 82, 84, 85, 92, 93, 94, 95], "www": [21, 22, 25, 60, 78, 79, 82, 84, 85], "search": [21, 22, 23, 25, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "type": [21, 22, 24, 25, 46, 61, 63, 64, 73, 74, 75, 76, 77, 82, 94, 100], "4534": [21, 22, 25], "wdbc": [21, 25], "1510": [21, 25], "lsvt": 21, "1484": 21, "har": [21, 22], "1478": [21, 22], "cnae": [21, 25], "1468": [21, 25], "subsampl": [21, 22, 25, 43, 46, 73, 82, 94], "due": [21, 25, 67, 106, 107], "constraint": [21, 25, 44, 45, 53, 54, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "note": [21, 24, 28, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 98], "veri": [21, 24, 44, 45, 46, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 84, 85], "856": 21, "mostli": [21, 30], "zero": [21, 23, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "datatyp": [21, 22], "2000": 21, "nomin": [21, 22], "455": 21, "numer": [21, 22, 25, 105], "310": 21, "561": 21, "864": 21, "deliber": [21, 22], "our": [21, 28, 29, 30, 91, 94], "ci": [21, 22], "should": [21, 22, 28, 29, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92], "appropri": [21, 22], "depend": [21, 22, 36, 39, 41, 42, 70, 91], "bia": [21, 93], "tradeoff": [21, 94], "substanti": 21, "faster": [21, 22, 88, 106], "process": [21, 43, 46, 70, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101], "omit": [21, 44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "computation": 21, "expens": 21, "main": [21, 43, 92], "stem": [21, 74, 77], "omiss": 21, "ascend": 21, "determin": [21, 43, 45, 50, 52, 54, 65, 79, 81, 85, 87, 94], "henc": [21, 93], "complex": [21, 44, 45, 46, 49, 50, 51, 52, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97], "nlog": 21, "draw": [21, 22, 23, 25, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "suitabl": 21, "affect": 21, "geurt": [21, 22, 44, 45, 54, 80, 81], "ernst": [21, 22, 44, 45, 54, 80, 81], "wehenkel": [21, 22, 44, 45, 54, 80, 81], "machin": [21, 22, 44, 45, 46, 49, 50, 53, 54, 74, 80, 81, 91, 93, 94], "63": [21, 22, 34, 44, 45, 54, 80, 81, 100], "2006": [21, 22, 44, 45, 54, 80, 81, 88], "123": [21, 22, 24], "n_cv": [21, 22, 23, 25], "n_repeat": [21, 22, 23, 25, 39, 42, 74, 77], "time_taken": [21, 22], "phishingwebsit": [21, 25], "eorf": [21, 22], "690718": 21, "827556": 21, "875107": 21, "852900": 21, "338809": 21, "821889": 21, "692878": 21, "697487": 21, "567335": 21, "696511": 21, "datetim": [21, 22, 23, 25], "fetch_openml": [21, 22, 25], "repeatedkfold": [21, 22, 23, 25], "cross_valid": [21, 22, 23, 25], "extraobliquerandomforestclassifi": [21, 22, 24], "obliquerandomforestclassifi": [21, 22, 23, 24, 25, 93], "max_sample_s": [21, 22], "phishing_websit": [21, 22], "cnae_9": 21, "data_id": [21, 22, 25], "load_cc18": [21, 22, 25], "as_fram": [21, 22, 25], "parser": [21, 22, 25], "d_name": [21, 22, 25], "frame": [21, 22, 25], "iloc": [21, 22, 23, 25], "get_scor": [21, 22, 23, 25], "kwarg": [21, 22, 23, 25, 43, 55, 56, 88, 89, 104, 105], "dim": [21, 22, 29], "tmp": [21, 22, 23, 25], "t0": [21, 22, 23, 25], "test_scor": [21, 22, 23, 25], "accuraci": [21, 22, 23, 25, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 78, 80, 82, 83, 84, 86], "convert": [21, 22, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "taken": [21, 22, 59, 61, 83, 84, 85, 93], "total_second": [21, 22], "explod": [21, 22, 23, 25], "reset_index": [21, 22, 23, 25], "inplac": [21, 22, 23, 25], "param": [21, 22, 23, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "concat": [21, 22, 25], "print": [21, 23, 24, 25, 28, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 49, 50, 52, 53, 54, 59], "from_dict": 21, "orient": 21, "index": [21, 28, 30, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 106], "groupbi": [21, 22], "set_size_inch": [21, 22, 25], "stripplot": [21, 23, 25], "queri": [21, 23, 25, 48], "dodg": [21, 23, 25], "boxplot": [21, 23, 25], "white": [21, 23, 25, 28, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42], "11": [21, 26, 35, 79, 100], "366": [21, 26], "plot_extra_oblique_random_forest": [21, 26], "purpos": [22, 24, 92], "chang": [22, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "11055": 22, "10299": 22, "562": 22, "section": [22, 24, 60], "focu": 22, "notabl": [22, 25, 104], "grow": [22, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "linearli": [22, 30, 60], "signific": [22, 93], "sample_s": 22, "n_row": [22, 24, 29], "df_tmp": 22, "55": [22, 26], "554": [22, 26], "plot_extra_orf_sample_s": [22, 26], "problem": [23, 44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86, 91, 97], "xor": 23, "task": [23, 24, 91], "limit": [23, 48, 97, 102], "carri": [23, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "about": [23, 94], "odd": 23, "across": [23, 28, 30, 43, 44, 46, 47, 49, 51, 53, 55, 56, 59, 60, 65, 73, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89], "greater": [23, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "otherwis": [23, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "further": 23, "public": [23, 28, 29, 30, 93], "epub": 23, "siam": [23, 51, 52, 86, 87, 88, 91, 93], "doi": [23, 51, 52, 56, 61, 63, 64, 86, 87, 93, 94, 95], "epdf": 23, "1137": [23, 51, 52, 86, 87, 93], "9781611974973": 23, "56": 23, "It": [23, 25, 36, 39, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 95], "took": [23, 25], "sparse_par": 23, "p_star": 23, "random_se": [23, 24, 69, 70, 72], "OF": [23, 25], "hyper": 23, "t_d": 23, "rff": 23, "plot_sim_": 23, "jpg": 23, "758": [23, 26], "plot_oblique_axis_aligned_forests_sparse_par": [23, 26], "row": [24, 29, 86, 87, 103], "sepal": 24, "width": [24, 86, 87], "length": [24, 29, 43, 46, 47, 48, 49, 51, 60, 65, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "petal": 24, "third": [24, 25, 28], "extraobliquerandomforest": 24, "92": 24, "obliquerandomforest": 24, "9866666666666667": 24, "9933333333333333": 24, "listedcolormap": [24, 28, 30], "1234": [24, 71], "spectral": 24, "fine": 24, "step": [24, 43, 65], "contour": 24, "plot_step_coars": 24, "coars": 24, "guess": 24, "plot_idx": 24, "n_model": 24, "dict": [24, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "sec": 24, "std": 24, "consol": 24, "str": [24, 34, 35, 37, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 69, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "slice": [24, 65], "awai": 24, "useless": 24, "part": [24, 28, 29, 30], "string": [24, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "model_titl": 24, "model_detail": 24, "hasattr": 24, "fontsiz": [24, 34, 35, 36, 37, 38, 39, 40, 41, 42], "mesh": 24, "input": [24, 28, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 107], "x_min": 24, "x_max": 24, "yy": 24, "meshgrid": 24, "either": [24, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 105], "blend": 24, "isinst": 24, "z": [24, 29, 42, 66, 69, 70, 72], "c_": 24, "contourf": 24, "choos": [24, 46, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "level": [24, 65], "respect": [24, 28, 63, 64, 83, 93, 95], "adaboost": 24, "fewer": 24, "its": [24, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 80, 82, 83, 84, 86, 94], "good": [24, 93], "enough": 24, "earli": 24, "estimator_alpha": 24, "coarser": 24, "what": [24, 28, 29, 30, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "regularli": 24, "space": [24, 25, 47, 48, 55, 56, 67, 69, 83, 88, 89, 94], "outlin": 24, "xx_coarser": 24, "yy_coars": 24, "z_points_coars": 24, "cs_point": 24, "move": 24, "next": [24, 47, 61, 63, 64, 83, 92], "sequenc": [24, 65, 88], "subset": [24, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 80, 82, 83, 84, 86, 94], "12": [24, 29], "obliquedecisiontre": 24, "extraobliquedecisiontre": 24, "basic": [24, 78, 79, 80, 81, 82], "decisiontre": 24, "three": [24, 25, 28], "distinct": [24, 59], "13": [24, 26], "026": [24, 26], "plot_oblique_forests_iri": [24, 26], "31": 25, "former": [25, 54], "entir": [25, 47, 51, 52, 83, 86, 87], "latter": [25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "normin": 25, "dub": 25, "statu": 25, "activ": [25, 92], "857": [25, 33, 35], "you": [25, 28, 30, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 96, 106], "notic": [25, 78, 79, 80, 81], "mechan": [25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "practic": [25, 28, 29, 30, 93, 97], "object": [25, 28, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "804": [25, 26], "plot_oblique_random_forest": [25, 26], "32": [26, 46, 49, 50, 53, 54, 93, 94], "507": 26, "auto_examples_sparse_oblique_tre": 26, "07": 26, "multiviewdecisiontreeclassifi": [28, 40, 41, 42, 103, 104, 105], "oper": [28, 78, 82, 84, 86, 87], "under": [28, 37, 39, 42, 91], "assumpt": 28, "hyperparamet": [28, 29, 30, 94, 103], "relat": [28, 29, 30, 43, 102, 106], "privat": [28, 29, 30], "cython": [28, 29, 30, 88, 89, 92, 101, 106], "patch": [28, 51, 52, 86, 87, 100, 103, 106], "api": [28, 29, 30, 43, 48, 55, 56, 73, 86, 87, 88, 89, 91, 92, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "just": [28, 29, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 70, 73, 92], "wrapper": [28, 29, 30], "underli": [28, 29, 30, 46, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 106], "relev": [28, 29, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91], "scalarmapp": [28, 30], "_criterion": [28, 29, 30], "gini": [28, 29, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "_oblique_splitt": [28, 30], "multiviewsplittertest": 28, "min_samples_leaf": [28, 29, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "min_weight_leaf": [28, 29, 30], "intp": [28, 61, 63, 64], "n_feature_set": [28, 47, 83], "max_features_per_set_": [28, 83], "monotonic_cst": [28, 29, 30, 44, 45, 53, 54, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 101], "missing_value_feature_mask": [28, 29, 30], "dummi": [28, 29, 30], "repeat": [28, 29, 61, 63, 64, 70], "float32": [28, 29, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "float64": [28, 29, 30, 61, 63, 64, 79, 81, 85, 87], "intern": [28, 30, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "expos": [28, 30], "tester": 28, "directli": [28, 29, 30, 106], "init_test": [28, 29, 30], "though": 28, "contigu": [28, 29, 51, 52, 86, 87], "projection_matrix": [28, 30], "sample_projection_matrix_pi": [28, 29, 30], "green": [28, 30], "heatmap": [28, 30], "imshow": [28, 29, 30], "aspect": [28, 30], "axvlin": [28, 34, 35, 39, 40, 42], "iend": 28, "vector": [28, 30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 61, 63, 64, 71, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 94, 95], "set_yticklabel": [28, 30], "mappabl": [28, 30], "sm": [28, 30], "set_arrai": [28, 30], "empti": [28, 30, 46, 73, 82], "bar": [28, 30], "tick": [28, 30], "set_label": [28, 30], "weight": [28, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 100, 106], "previou": [28, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 106], "setup": [28, 61], "specifi": [28, 29, 39, 42, 44, 46, 47, 49, 51, 53, 59, 60, 61, 64, 73, 78, 80, 82, 83, 84, 86, 94, 105], "max_features_per_set": 28, "factor": [28, 43, 60, 61, 63, 64], "want": 28, "onc": [28, 74], "control": [28, 30, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 60, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 103, 105], "apply_max_features_per_feature_set": [28, 47, 83, 104, 105], "plot_multiview_axis_aligned_splitt": [28, 31], "patchobliquedecisiontreeclassifi": [29, 51], "done": [29, 65, 86, 87, 93, 103], "data_dim": [29, 51, 52, 86, 87], "n_col": 29, "n_depth": 29, "robust": [29, 91], "hyperrectangl": 29, "start": [29, 63, 64, 92], "min_patch_dim": [29, 51, 52, 86, 87], "max_patch_dim": [29, 51, 52, 86, 87], "constrain": [29, 94], "within": [29, 46, 48, 55, 56, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92], "arbitrarili": [29, 45, 50, 52, 54, 79, 81, 85, 87], "_morf_splitt": 29, "bestpatchsplittertest": 29, "sake": [29, 30], "feature_weight": [29, 51, 52, 86, 87], "th": [29, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "appear": [29, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "dim_contigu": [29, 51, 52, 86, 87], "proj_mat": 29, "sharex": 29, "sharei": 29, "viridi": 29, "nonzero": 29, "custom": [29, 44, 45, 53, 54, 55, 56], "set_zlim": 29, "125": [29, 101], "necessarili": [29, 48, 93], "certain": 29, "n_channel": 29, "n_time": 29, "channel": 29, "954": [29, 31], "plot_projection_matric": [29, 31], "small": [30, 44, 46, 47, 49, 50, 51, 53, 55, 56, 73], "element": [30, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "candid": [30, 93, 94, 103], "bestobliquesplittertest": 30, "orang": 30, "plot_sparse_projection_matrix": [30, 31], "03": [31, 106], "948": 31, "auto_examples_splitt": 31, "691": 31, "302": 31, "54": 33, "784": 33, "auto_examples_treepl": 33, "treeple_tutorial_2_2_pvalue_multiview": [33, 42], "23": [33, 41, 42, 45, 50, 52, 54, 74, 79, 81, 85, 87, 92], "144": [33, 42], "treeple_tutorial_1_2_pvalu": [33, 39], "18": [33, 39, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "241": [33, 39], "treeple_tutorial_2_1b_cmi": [33, 41], "842": [33, 41], "treeple_tutorial_2_1a_sa98_multiview": [33, 40], "262": [33, 40], "treeple_tutorial_1_1c_pauc": [33, 37], "000": [33, 37], "treeple_tutorial_1_1a_sa98": [33, 35], "treeple_tutorial_0_gmm": [33, 34], "557": [33, 34], "treeple_tutorial_1_1d_hd": [33, 38], "457": [33, 38], "treeple_tutorial_1_1b_mi": [33, 36], "423": [33, 36, 88], "warn": [34, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 107], "multivariate_norm": 34, "metric": [34, 35, 37, 39, 40, 42, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 69, 73, 74, 77, 78, 80, 82, 83, 84, 86, 91, 95, 103, 104, 105], "roc_auc_scor": [34, 37], "roc_curv": [34, 35, 37, 40], "make_trunk_mixture_classif": [34, 106], "color_cod": [34, 35, 36, 37, 38, 39, 40, 41, 42], "style": [34, 35, 36, 37, 38, 39, 40, 41, 42], "context": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73], "talk": [34, 35, 36, 37, 38, 39, 40, 41, 42], "font_scal": [34, 35, 36, 37, 38, 39, 40, 41, 42], "palett": [34, 35, 36, 37, 38, 39, 40, 41, 42], "color_palett": [34, 35, 36, 37, 38, 39, 40, 41, 42], "set1": [34, 35, 36, 37, 38, 39, 40, 41, 42], "set_palett": [34, 35, 36, 37, 38, 39, 40, 41, 42], "n_color": [34, 35, 36, 37, 38, 39, 40, 41, 42], "set_styl": [34, 35, 36, 37, 38, 39, 40, 41, 42], "dddddd": [34, 35, 36, 37, 38, 39, 40, 41, 42], "filterwarn": 34, "know": [34, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "suffici": 34, "amount": [34, 43, 46, 80, 81], "n_dim": [34, 35, 36, 37, 38, 39, 40, 41, 42, 57, 58, 61, 63, 64], "n_inform": [34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 49, 50, 52, 53, 54, 61, 63, 64], "mu_0": [34, 35, 36, 37, 38, 39, 40, 41, 42, 63, 64], "mu_1": [34, 35, 36, 37, 38, 39, 40, 41, 42, 63, 64], "mix": [34, 64], "tick_param": [34, 35, 36, 37, 38, 39, 40, 41, 42], "labels": [34, 35, 36, 37, 38, 39, 40, 41, 42], "histogram": [34, 35, 36, 37, 38, 39, 40, 41, 42, 53, 54], "frameon": [34, 35, 36, 37, 38, 39, 40, 41, 42], "f_": [34, 39, 42], "mathbb": [34, 35, 37, 40], "pdf_class0": 34, "compon": [34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 60, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "pdf_class1_0": 34, "pdf_class1_1": 34, "pdf_class1": 34, "balanc": [34, 44, 46, 47, 49, 51, 53, 57, 58, 73, 78, 80, 82, 83, 84, 86], "p_x": 34, "frac": [34, 37, 38, 45, 50, 52, 54, 67, 68, 79, 81, 85, 87, 95], "pos_class0": 34, "pos_class1": 34, "po": [34, 37], "calculate_sa": [34, 35, 40], "y_pred_proba": [34, 35, 36, 37, 38, 40, 41], "max_fpr": [34, 35, 37, 40], "sensit": [34, 35, 40, 74, 77], "check": [34, 35, 37, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 106], "ndim": [34, 35, 37, 40], "rais": [34, 35, 37, 40, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 107], "valueerror": [34, 35, 37, 40, 107], "must": [34, 35, 37, 40, 44, 46, 47, 49, 50, 51, 53, 59, 61, 63, 64, 70, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 86, 88, 89], "1d": [34, 35, 37, 40, 48, 51, 52, 59, 86, 87], "find": [34, 35, 37, 40, 45, 48, 50, 52, 54, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95, 102], "fpr": [34, 35, 37, 40], "tpr": [34, 35, 37, 40], "pos_label": [34, 35, 37, 40], "drop_intermedi": [34, 35, 37, 40], "sa98": [34, 35, 40], "005": [34, 35, 37, 40, 70, 72], "rate": [34, 35, 37, 40, 103], "roc": [34, 35, 37, 40], "spec": [34, 35, 40], "ymin": [34, 35, 40], "ymax": [34, 35, 40], "linestyl": [34, 35, 37, 39, 40, 42], "axhlin": [34, 35, 40], "xmin": [34, 35, 40], "xmax": [34, 35, 40], "27": 34, "calculate_mi": [34, 36, 41], "h_yx": [34, 36, 41], "empir": [34, 36, 41, 46, 54, 73, 82, 94], "return_count": [34, 36, 41], "h_y": [34, 36, 41, 58], "09": 34, "calculate_pauc": [34, 37], "make_trunk_classif": [35, 36, 37, 38, 39, 40, 41, 42, 61, 105, 106], "build_oob_forest": [35, 36, 37, 38, 40, 41], "eta": [35, 37, 38, 40], "t_r": [35, 37, 40], "With": [35, 36, 37, 38, 39, 40, 41, 42], "treepl": [35, 36, 37, 38, 39, 40, 41, 42, 91], "initi": [35, 36, 37, 38, 39, 40, 41, 42], "bootstrap": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 74, 75, 76, 77, 93, 105, 107], "observe_proba": [35, 36, 37, 38, 40, 41], "nanmean": [35, 36, 37, 38, 40, 41], "h": [36, 38, 39, 66, 67, 68, 94], "partial": 37, "integr": [37, 57, 61], "percentag": 37, "Then": [37, 77, 90, 92], "int_": 37, "infti": 37, "mathcal": [37, 59, 95], "x_1": [37, 59], "x_0": 37, "df_1": 37, "df_0": 37, "90": [37, 43], "quantifi": 38, "bigl": 38, "bigr": 38, "_2": [38, 95], "calculate_hd": 38, "hd": 38, "81": 38, "permutationhonestforestclassifi": [39, 42, 77, 106], "build_coleman_forest": [39, 42, 106], "hypothesi": [39, 42, 61, 63, 64, 74, 75, 76, 77, 91, 101, 102, 103, 106], "altern": [39, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "h_0": [39, 42], "xy": 39, "f_x": 39, "f_y": 39, "h_a": [39, 42], "neq": [39, 42], "null": [39, 42, 74, 77, 104, 105], "would": [39, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 103, 106], "reject": [39, 42], "confirm": [39, 42], "equal": [39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 103], "becom": [39, 42, 61, 63, 64], "thu": [39, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 73, 84, 85, 93, 94, 95], "larger": [39, 42, 43, 46, 65, 73, 82, 93], "construct": [39, 42, 55, 56, 74, 77, 93, 94], "output": [39, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 97, 100, 106], "vale": [39, 42], "anoth": [39, 42, 94, 104, 105], "est_nul": [39, 42], "conduct": [39, 42], "observed_diff": [39, 42], "pvalu": [39, 42, 74, 77], "mix_diff": [39, 42], "return_posterior": [39, 42, 74, 77], "diff": [39, 42], "out": [40, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 75, 76, 77, 93, 105, 106], "simpler": [40, 95], "z_x": [40, 41, 42], "z_x_y": [40, 41, 42], "scatterplot": [40, 41, 42], "kdeplot": [40, 41, 42], "tree_estim": [40, 41, 42, 46, 73, 82, 106], "joint": [41, 42, 60], "single_proba": 41, "joint_mi": 41, "x_null": 42, "insert": 42, "covariate_index": [42, 73, 74, 77, 103], "auto": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "contamin": 43, "verbos": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 75, 76, 77, 92], "warm_start": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "read": [43, 44, 45, 49, 50, 53, 54, 78, 79, 80, 81, 82, 84, 85], "default": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 102, 107], "256": [43, 61, 63, 64], "proport": [43, 44, 46, 47, 49, 51, 53, 73, 75, 78, 80, 82, 83, 84, 86], "paper": [43, 61, 74, 93, 94], "n_features_in_": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "less": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 107], "enabl": [43, 46, 74, 75, 76, 77, 88, 101], "lead": [43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 84, 85, 93, 106], "longer": 43, "bool": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "individu": 43, "consid": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 102], "extraobliquedecisiontreeregressor": [43, 101], "job": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 69, 73], "parallel": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 69, 73, 74, 77], "unless": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "joblib": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 92], "parallel_backend": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73], "processor": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73], "glossari": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 65, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "pseudo": 43, "branch": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "reus": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73], "whole": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73], "version": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 94, 98], "21": [43, 50, 91, 93, 100], "ellipticenvelop": 43, "svm": 43, "oneclasssvm": 43, "unsupervis": [43, 55, 56, 88, 89, 91, 97, 100, 101], "support": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94, 100, 104, 105], "libsvm": 43, "localoutlierfactor": 43, "local": [43, 92], "lof": 43, "extratreeregressor": [43, 45, 80], "ceil": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "log_2": 43, "liu": 43, "et": [43, 74, 91], "al": [43, 74, 91], "2008": [43, 61, 63, 64], "refer": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 61, 62, 63, 64, 67, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "fei": 43, "toni": 43, "ting": 43, "kai": 43, "ming": 43, "zhou": 43, "zhi": 43, "hua": 43, "mine": [43, 56, 88, 95], "icdm": 43, "08": 43, "eighth": 43, "confer": [43, 56, 88, 95], "acm": [43, 56, 95], "discoveri": [43, 56, 95], "tkdd": 43, "2012": 43, "attribut": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 60, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 106], "estimator_": [43, 44, 45, 53, 54, 55, 56, 82], "child": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "templat": [43, 44, 45, 46, 53, 54, 55, 56, 73, 82], "sub": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 105], "estimators_features_": 43, "ndarrai": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "estimators_samples_": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 76], "max_samples_": 43, "offset_": 43, "offset": 43, "raw": 43, "score_sampl": 43, "expect": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 69, 73, 79, 81, 84, 85, 86, 87, 93], "seen": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "24": [43, 44, 45, 53, 54, 78, 79, 80, 81], "feature_names_in_": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "sever": [43, 46, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "n_left": 43, "path": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "array_lik": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 62, 65, 66, 67, 68, 70, 71, 72, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "csr_matrix": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "abnorm": 43, "effici": [43, 48, 55, 56, 74, 79, 81, 85, 87, 88, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "csc_matrix": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "Not": [43, 48, 55, 56, 83, 84, 85, 86, 87, 88, 89], "convent": [43, 48, 55, 56, 88, 89], "self": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "fit_predict": [43, 55, 56, 88, 89], "get_metadata_rout": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "metadata": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "rout": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "metadatarout": 43, "encapsul": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "get_param": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "deep": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93], "subobject": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "is_inli": 43, "tell": 43, "accord": [43, 48, 74, 77], "opposit": 43, "set_fit_request": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "unchang": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "request": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91], "enable_metadata_rout": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "set_config": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "option": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 102], "meta": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "error": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 107], "alia": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "metadata_rout": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "retain": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "exist": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "insid": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100], "pipelin": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "effect": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96], "updat": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "nest": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "__": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "properti": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 102, 105], "dynam": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "identifi": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 95], "member": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "bag": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 75, 76, 77, 105, 106], "re": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "reduc": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 84, 85, 93], "memori": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 84, 85], "footprint": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "fetch": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "mai": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "slower": [43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "min_samples_split": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101], "min_weight_fraction_leaf": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "max_leaf_nod": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "min_impurity_decreas": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "oob_scor": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "class_weight": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "ccp_alpha": [44, 45, 46, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "max_bin": [44, 45, 53, 54], "store_leaf_valu": [44, 45, 53, 54, 78, 79, 80, 81, 83, 84, 85, 86, 87], "log_loss": [44, 53, 78, 80], "qualiti": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95], "criteria": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 95], "impur": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94], "shannon": [44, 53, 78, 80], "gain": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "mathemat": [44, 51, 52, 53, 55, 56, 78, 80, 86, 87, 91, 93, 97], "formul": [44, 53, 55, 56, 78, 80, 97], "expand": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "until": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "pure": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "fraction": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "least": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 106], "smooth": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "especi": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "log2": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101], "doe": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 93, 94], "stop": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "partit": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 67, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 94], "found": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "rel": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 95], "reduct": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "unlimit": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "induc": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "decreas": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "equat": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "n_t": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "n_t_r": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "right_impur": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "n_t_l": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "left_impur": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "current": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94], "19": [44, 45, 53, 54, 78, 79, 80, 81], "callabl": [44, 45, 53, 54, 55, 56, 59, 70, 72, 88, 89], "accuracy_scor": [44, 53], "signatur": [44, 45, 53, 54, 55, 56], "decision_path": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "balanced_subsampl": [44, 46, 47, 49, 51, 53, 73], "associ": [44, 46, 47, 49, 51, 53, 56, 64, 73, 78, 80, 82, 83, 84, 86, 94, 95], "class_label": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "suppos": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "multioutput": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "multilabel": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "everi": [44, 46, 47, 49, 51, 52, 53, 73, 78, 80, 82, 83, 84, 86, 87, 94], "mode": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86, 92], "automat": [44, 46, 47, 49, 51, 53, 65, 73, 78, 80, 82, 83, 84, 86], "adjust": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "invers": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "frequenc": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "bincount": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "except": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 79, 81, 85, 87, 93], "grown": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 78, 79, 80, 81, 82, 84, 85], "multipli": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "through": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91], "minim": [44, 45, 46, 50, 52, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 95], "cost": [44, 45, 46, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94], "prune": [44, 45, 46, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "subtre": [44, 45, 46, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "largest": [44, 45, 46, 53, 54, 70, 73, 78, 79, 80, 81, 82], "smaller": [44, 45, 46, 53, 54, 73, 78, 79, 80, 81, 82], "255": [44, 45, 53, 54], "miss": [44, 45, 53, 54, 78, 79, 80, 81, 82, 94, 107], "experiment": [44, 45, 53, 54, 78, 79, 80, 81, 83, 91, 101, 102, 103], "get_leaf_node_sampl": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "monoton": [44, 45, 53, 54, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "enforc": [44, 45, 46, 53, 54, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "multiclass": [44, 53, 78, 80, 82], "n_outputs_": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "hold": [44, 53, 78, 80, 82], "extratreesregressor": [44, 54, 80, 81], "optim": [44, 45, 86, 87, 94, 106], "etc": [44, 45, 46, 49, 50, 51, 52, 53, 54, 69, 78, 79, 80, 81, 82, 84, 85], "fulli": [44, 45, 46, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 84, 85], "unprun": [44, 45, 46, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 84, 85], "potenti": [44, 45, 46, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 84, 85, 87], "consumpt": [44, 45, 46, 49, 50, 51, 52, 53, 54, 78, 79, 80, 81, 82, 84, 85], "make_classif": [44, 46, 49, 53], "extratreeclassifi": [44, 81], "base_estimator_": [44, 45, 53, 54], "renam": [44, 45, 53, 54], "classes_": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "n_classes_": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "feature_importances_": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 102], "oob_score_": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "oob_decision_function_": [44, 46, 47, 49, 50, 51, 53, 55, 56, 73], "n_output": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "never": [44, 46, 47, 49, 50, 51, 53, 55, 56, 73], "nan": [44, 46, 47, 49, 50, 51, 53, 55, 56, 73, 82], "x_leav": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "datapoint": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "up": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 104, 105], "n_node": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "goe": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "csr": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "n_nodes_ptr": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "give": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 84, 85], "real": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 79, 81, 85, 87], "net": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "possibli": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 59, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94], "leaf_node_sampl": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "reach": [44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "n_leaf_node_sampl": [44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "sinc": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 108], "metadatarequest": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "partial_fit": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86, 101], "subsequ": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "That": [44, 46, 47, 49, 51, 53, 55, 56, 73, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89], "highest": [44, 46, 47, 49, 51, 53, 55, 56, 73, 78, 82, 84], "predict_log_proba": [44, 46, 47, 49, 51, 53, 73, 78, 80, 83, 84, 86], "log": [44, 46, 47, 49, 51, 53, 67, 68, 73, 78, 80, 83, 84, 86, 94, 95], "predict_quantil": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "keyword": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 101, 102, 105], "accept": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 69, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "n_quantil": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73], "harsh": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "correctli": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86, 104, 105, 106], "w": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 61, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "set_partial_fit_request": [44, 46, 47, 49, 51, 53, 73, 78, 80, 82, 83, 84, 86], "set_score_request": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "brought": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "mislead": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "cardin": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93], "mani": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 93, 94, 101], "permutation_import": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "root": [44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 103], "squared_error": [45, 50, 52, 54, 79, 81, 85, 87], "absolute_error": [45, 50, 52, 54, 79, 81, 85, 87], "friedman_ms": [45, 50, 52, 54, 79, 81, 85, 87], "poisson": [45, 50, 52, 54, 79, 81, 85, 87], "l2": [45, 50, 52, 54, 79, 81, 85, 87], "loss": [45, 50, 52, 54, 79, 81, 85, 87, 94], "termin": [45, 50, 52, 54, 79, 81, 85, 87], "friedman": [45, 50, 52, 54, 78, 79, 81, 82, 84, 85, 87, 94], "absolut": [45, 50, 52, 54, 79, 81, 85, 87], "l1": [45, 50, 52, 54, 79, 81, 85, 87], "devianc": [45, 50, 52, 54, 79, 81, 85, 87], "mae": [45, 54, 79, 81], "r2_score": [45, 50, 52, 54, 79, 81, 85, 87], "extratreesclassifi": [45, 53, 80, 81], "load_diabet": [45, 79, 81, 85, 87], "return_x_i": [45, 79, 80, 81, 85, 87], "reg": [45, 81], "2727": 45, "decisiontreeregressor": [45, 53, 54, 78, 81, 85, 87], "oob_prediction_": [45, 52, 54], "coeffici": [45, 50, 52, 54, 79, 81, 85, 87], "residu": [45, 50, 52, 54, 79, 81, 85, 87], "wors": [45, 50, 52, 54, 79, 81, 85, 87], "constant": [45, 50, 52, 54, 79, 81, 85, 87], "alwai": [45, 46, 47, 49, 50, 51, 52, 53, 54, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 92, 94], "disregard": [45, 50, 52, 54, 79, 81, 85, 87], "precomput": [45, 48, 50, 52, 54, 79, 81, 85, 87], "kernel": [45, 50, 52, 54, 62, 79, 81, 85, 87, 100], "n_samples_fit": [45, 50, 52, 54, 79, 81, 85, 87], "uniform_averag": [45, 50, 52, 54, 79, 81, 85, 87], "keep": [45, 50, 52, 54, 79, 81, 85, 87, 106], "influenc": [45, 50, 52, 54, 79, 81, 85, 87], "multioutputregressor": [45, 50, 52, 54, 79, 81, 85, 87], "honest_prior": [46, 73, 82], "tree_estimator_param": [46, 73, 82], "remain": [46, 73, 82], "deal": [46, 73, 82], "prior": [46, 59, 73, 82, 94, 95], "shallow": [46, 73, 82], "instanti": [46, 82], "basedecisiontre": [46, 48, 82, 90], "need": [46, 78, 79, 80, 81, 82, 92, 94, 96], "resampl": [46, 65, 103], "ident": [46, 49, 50, 51, 52, 53, 54, 61, 63, 64, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89], "determinist": [46, 49, 50, 51, 52, 53, 54, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89], "behaviour": [46, 49, 50, 51, 52, 53, 54, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89], "honesti": [46, 91, 94], "unbias": 46, "doubl": 46, "access": 46, "ineffici": 46, "recommend": [46, 55, 56, 84, 85, 86, 87, 91, 94], "propens": [46, 94], "causal": 46, "breiman": [46, 49, 50, 53, 54, 78, 79, 82, 84, 85, 93, 94], "45": [46, 49, 50, 53, 54, 60, 67, 93, 94, 100], "2001": [46, 49, 50, 53, 54, 93, 94], "athei": [46, 82], "tibshirani": [46, 60, 78, 79, 82, 84, 85, 94], "wager": [46, 82], "annal": [46, 60, 61, 63, 64, 82], "honest_forest": [46, 82], "n_redund": [46, 49, 53], "honesttreeclassifi": [46, 73, 100, 106], "honest_decision_function_": [46, 73], "structure_indices_": [46, 73, 82], "n_structur": [46, 73, 82], "honest_indices_": [46, 73, 82], "n_honest": [46, 73, 82], "oob_samples_": [46, 47, 49, 50, 51, 52, 73, 76, 105, 106], "n_samples_bootstrap": [46, 73], "fit_param": [46, 55, 56, 88, 89], "predict_proba_per_tre": [46, 47, 49, 51, 73, 106], "proba_per_tre": [46, 47, 49, 51, 73], "tradit": [47, 49, 50, 84, 85], "assum": [47, 83, 107], "per": [47, 59, 73, 75, 76, 83, 100, 103, 104, 105, 106], "n_features_": [47, 49, 50, 51, 52, 73], "compute_similarity_matrix": [47, 49, 50, 51, 52, 55, 56, 83, 84, 85, 86, 87, 88, 89], "sim_matrix": [47, 49, 50, 51, 52, 55, 56, 83, 84, 85, 86, 87, 88, 89], "n_neighbor": 48, "radiu": [48, 69, 70, 72], "baseforest": [48, 90], "kneighbor": 48, "radius_neighbor": 48, "return_dist": 48, "n_queri": 48, "n_index": 48, "constructor": 48, "neigh_dist": 48, "neigh_ind": 48, "popul": 48, "sort_result": 48, "ly": 48, "ball": 48, "around": [48, 101], "befor": [48, 59, 70, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89], "approxim": [48, 57, 58, 105], "lie": 48, "cannot": 48, "obliquedecisiontreeregressor": [50, 52, 100], "tomita": [50, 51, 52, 86, 87, 91, 93], "journal": [50, 51, 52, 74, 86, 87, 91, 93], "research": [50, 74, 91, 93], "104": [50, 91, 93], "39": [50, 79, 91, 93], "2020": [50, 56, 91, 93, 95], "make_regress": [50, 52, 54], "regr": [50, 54], "86327109": 50, "along": [51, 52, 71, 86, 87, 94], "presum": [51, 52, 86, 87], "un": [51, 52, 86, 87], "wrap": [51, 52, 86, 87], "adam": [51, 52, 86, 87, 91, 93, 100, 101, 102, 103, 104, 105, 106, 107, 108], "chester": [51, 52, 86, 87, 93], "huynh": [51, 52, 86, 87, 93], "tyler": [51, 52, 86, 87, 91, 93], "jesu": [51, 52, 86, 87, 93], "jess": [51, 52, 86, 87, 93], "patsol": [51, 52, 86, 87, 93], "ben": [51, 52, 86, 87, 93], "falk": [51, 52, 86, 87, 93], "sridevi": [51, 52, 86, 87, 93], "sarma": [51, 52, 86, 87, 93], "toward": [51, 52, 86, 87, 91, 93], "gap": [51, 52, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93], "convolut": [51, 52, 86, 87, 91, 93], "network": [51, 52, 86, 87, 91, 93], "scienc": [51, 52, 86, 87, 91, 93], "77": [51, 52, 86, 87, 91, 93], "96": [51, 52, 86, 87, 91, 93], "2023": [51, 52, 60, 86, 87, 91, 93], "21m1449117": [51, 52, 86, 87, 93], "82818509": 52, "patchobliquedecisiontreeregressor": [52, 100], "gradient": [53, 54], "boost": [53, 54], "histgradientboostingclassifi": 53, "fast": [53, 54, 88, 97], "big": [53, 54], "10_000": [53, 54], "histgradientboostingregressor": 54, "rather": [54, 73, 95], "suggest": 54, "recent": 54, "justifi": 54, "32987858": 54, "twomean": [55, 56, 88, 89], "clustering_func": [55, 56, 88, 89], "clustering_func_arg": [55, 56, 88, 89], "simultan": [55, 56], "affin": [55, 56, 88, 89], "fastbic": [55, 56, 88, 89, 100], "maxim": [55, 56], "bayesian": [55, 56, 95], "calinski_harabasz_scor": [55, 56], "predicted_label": [55, 56], "silhouette_scor": [55, 56], "davies_bouldin_scor": [55, 56], "cpu": [55, 56], "continu": [55, 56], "instant": [55, 56], "agglomerativeclust": [55, 56, 88, 89], "unsuperviseddecisiontre": [55, 56], "labels_": [55, 56], "int64": [55, 56, 88, 89], "fit_transform": [55, 56, 88, 89], "transform": [55, 56, 59, 60, 69, 88, 89], "x_new": [55, 56, 88, 89], "n_features_new": [55, 56, 88, 89], "set_output": [55, 56, 88, 89], "introduc": [55, 56, 88, 89, 106], "configur": [55, 56, 88, 89], "typic": [55, 56, 88, 89, 94], "dens": [55, 56, 61, 63, 64, 88, 89, 94], "meghana": [56, 91, 95], "madhyastha": [56, 91, 95], "perci": [56, 95], "jame": [56, 93, 95], "brown": [56, 93, 95], "veronika": [56, 95], "strnadova": [56, 95], "neelei": [56, 95], "carei": [56, 93, 95], "prieb": [56, 93, 95], "randal": [56, 93, 95], "burn": [56, 93, 95], "geodes": [56, 69, 88, 91, 95], "proceed": [56, 88, 95], "26th": [56, 95], "sigkdd": [56, 95], "kdd": [56, 91, 95], "513": [56, 91, 95], "523": [56, 91, 95], "york": [56, 95], "ny": [56, 95], "usa": [56, 95], "machineri": [56, 95], "url": [56, 60, 61, 63, 64, 93, 95], "1145": [56, 95], "3394486": [56, 95], "3403094": [56, 95], "cov": [57, 58, 63, 64, 66, 67, 68, 71], "class_prob": [57, 58, 59], "718281828459045": [57, 58], "arraylik": [57, 58, 63, 64, 69, 74, 75, 76, 77], "bit": [57, 58], "logarithm": [57, 58], "i_xi": [57, 58], "h_x": 57, "mixtur": [57, 59, 61, 64, 106], "h_xy": 57, "int_err": 57, "100000": 58, "h_y_on_x": 58, "noise_dim": 59, "return_lat": 59, "add_latent_nois": 59, "nonlinear": 59, "latent": 59, "2d": [59, 71, 78, 79, 80, 81, 86, 87], "match": [59, 93], "divid": 59, "poli": 59, "membership": 59, "p_i": 59, "mu_i": 59, "sigma_i": 59, "y_1": 59, "x_": 59, "np_i": 59, "y_": 59, "overset": 59, "sim": 59, "ey": 59, "shuffle_random_st": 59, "n_view": 60, "joint_rank": 60, "noise_std": 60, "return_decomp": 60, "rank": [60, 69, 93], "share": 60, "common": [60, 94, 95], "strength": 60, "orthonorm": 60, "view_load": 60, "n_features_i": [60, 69], "rotat": 60, "sval": 60, "singular": 60, "w_b": 60, "n_features_b": 60, "preserv": [60, 65], "inner": [60, 94], "product": [60, 94], "unitari": 60, "x_b": 60, "diag": 60, "e_b": 60, "yunjin": 60, "choi": 60, "jonathan": 60, "taylor": 60, "princip": 60, "2590": 60, "2617": 60, "2017": 60, "jstor": 60, "stabl": 60, "26362952": 60, "visit": 60, "26": 60, "4096": [61, 63, 64], "rho": [61, 63, 64], "band_typ": [61, 63, 64], "ma": [61, 63, 64], "return_param": [61, 63, 64], "scaling_factor": [61, 63, 64], "marron": [61, 106], "wand": [61, 106], "band": [61, 63, 64, 105], "skewed_unimod": 61, "strongly_skew": 61, "kurtotic_unimod": 61, "bimod": 61, "separated_bimod": 61, "skewed_bimod": 61, "trimod": 61, "claw": 61, "double_claw": 61, "asymmetric_claw": 61, "asymmetric_double_claw": 61, "smooth_comb": 61, "discrete_comb": 61, "trunk": [61, 63, 64, 105, 106], "steve": 61, "matt": 61, "exact": [61, 94], "712": 61, "736": 61, "1992": [61, 106], "peter": [61, 63, 64], "bickel": [61, 63, 64], "elizaveta": [61, 63, 64], "levina": [61, 63, 64], "februari": [61, 63, 64], "dx": [61, 63, 64], "1214": [61, 63, 64], "009053607000000758": [61, 63, 64], "gerard": [61, 63, 64], "coleman": [61, 63, 64, 74], "tran": [61, 63, 64, 67], "pattern": [61, 63, 64, 95], "anal": [61, 63, 64], "mach": [61, 63, 64], "intel": [61, 63, 64], "343": [61, 63, 64], "345": [61, 63, 64], "1982": [61, 63, 64], "1109": [61, 63, 64], "tpami": [61, 63, 64], "4767256": [61, 63, 64], "quadrat": 62, "sambit": [62, 100, 101, 102, 106, 107], "interpret": 62, "characterist": 62, "preprint": [62, 91], "1812": 62, "00029": 62, "2018": 62, "ratio": [63, 64], "x_mixtur": 64, "conditional_arrai": 65, "nn_estim": 65, "replace_nbr": 65, "condition": [65, 70], "procedur": [65, 94], "modif": 65, "techniqu": [65, 95], "place": 65, "resampled_arrai": 65, "impact": 65, "x_index": 66, "y_index": 66, "z_index": 66, "true_mi": [66, 67, 68], "plug": 66, "entropy_gaussian": 66, "det": [67, 68], "georg": 67, "darbellai": 67, "igor": 67, "vajda": 67, "inf": 67, "theori": [67, 93], "1315": 67, "1321": 67, "1999": 67, "kd_tree": 69, "ksg": 69, "n_features_x": 69, "n_features_z": 69, "unsupervisedobliquerandomforest": 69, "knn": 69, "ball_tre": 69, "brute": 69, "preprocess": 69, "val": 69, "proce": 69, "kth": 69, "nbr": 69, "xyz": 69, "nn": [69, 88], "xz": 69, "yz": 69, "psi": 69, "n_x": 69, "n_y": 69, "n_": [69, 94], "digamma": 69, "term": [69, 70, 94, 95, 106], "n_i": 69, "denot": [69, 70, 94], "could": [69, 78, 79, 80, 81], "radius_a": 70, "radius_b": 70, "obs_noise_func": 70, "nature_noise_func": 70, "return_mi_lb": [70, 72], "helix": 70, "smallest": 70, "defauult": 70, "func": 70, "independ": [70, 74, 94], "lb": [70, 72], "approx": 70, "unif": 70, "afterward": 70, "epsilon_1": 70, "co": [70, 107], "n_1": 70, "epsilon_2": 70, "n_2": 70, "epsilon_3": 70, "n_3": 70, "And": 70, "graphic": 70, "rightarrow": 70, "confound": 70, "impli": 70, "feed": 71, "noise_func": 72, "sphere": 72, "latitud": 72, "longitud": 72, "coordin": 72, "y2": 72, "y3": 72, "permute_per_tre": 73, "namespac": 73, "permutation_indices_": 73, "were": [73, 102, 106, 107], "covariate_index_": 73, "Will": 73, "perm_est": [74, 77], "metric_kwarg": [74, 77], "2022": [74, 88, 91], "metric_forest": 74, "metric_perm_forest": 74, "most": [74, 75, 76, 77, 93, 94, 104], "n_covari": [74, 77], "observe_stat": [74, 77], "permute_stat_": [74, 77], "subtract": [74, 77], "observe_stat_": [74, 77], "orig_forest_proba": [74, 77], "perm_forest_proba": [74, 77], "null_dist": 74, "tim": 74, "wei": 74, "peng": 74, "luca": 74, "mentch": 74, "scalabl": 74, "7679": 74, "7713": 74, "return_indic": 75, "fold": 75, "all_proba_list": 75, "tr": [], "est_kwarg": 76, "oob": [76, 107], "all_proba": 76, "permutaiton": 77, "But": [78, 79, 82, 83, 84, 85, 86, 87, 88, 89], "tree_": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "node_id": [78, 79, 80, 81], "xxx": [78, 79, 80, 81], "moreov": [78, 79, 80, 81, 94, 101, 102], "upon": [78, 79, 80, 81], "twice": [78, 79, 80, 81], "ram": [78, 79, 80, 81], "diskspac": [78, 79, 80, 81], "argmax": [78, 82, 84], "ti": [78, 82, 84], "lowest": [78, 82, 84], "en": [78, 79, 82, 84, 85, 94], "wikipedia": [78, 79, 82, 84, 85, 94], "wiki": [78, 79, 82, 84, 85, 94], "decision_tree_learn": [78, 79, 82, 84, 85, 94], "olshen": [78, 79, 82, 84, 85], "stone": [78, 79, 82, 84, 85], "wadsworth": [78, 79, 82, 84, 85], "belmont": [78, 79, 82, 84, 85], "ca": [78, 79, 82, 84, 85], "1984": [78, 79, 82, 84, 85], "hasti": [78, 79, 82, 84, 85, 94], "springer": [78, 79, 82, 84, 85, 94], "2009": [78, 79, 82, 84, 85, 94], "cutler": [78, 79, 82, 84, 85], "berkelei": [78, 79, 82, 84, 85], "edu": [78, 79, 82, 84, 85], "randomforest": [78, 79, 82, 84, 85], "cc_home": [78, 79, 82, 84, 85], "htm": [78, 79, 82, 84, 85], "93": [78, 84], "86": [78, 84, 100], "max_features_": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "_tree": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87], "understand": [78, 79, 80, 81, 82, 93], "min_samples_split_": [78, 79, 80, 81], "min_weight_leaf_": [78, 79, 80, 81], "min_samples_leaf_": [78, 79, 80, 81], "monotonic_cst_": [78, 79, 80, 81], "check_input": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "17": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "bypass": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "don": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "node_count": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "cost_complexity_pruning_path": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "ccp_path": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "bunch": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "leaf_nodes_sampl": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "get_n_leav": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "n_leav": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "proba": [78, 80, 82, 83, 84, 86], "set_predict_proba_request": [78, 80, 82, 83, 84, 86], "set_predict_request": [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89], "46": 79, "06": 79, "16": 79, "pick": [80, 81], "baggingclassifi": 80, "extra_tre": [80, 81], "cl": 80, "8947": 80, "baggingregressor": 81, "93333333": 82, "empirical_prior_": 82, "logic": 83, "abov": 83, "feature_combinations_": [83, 84, 85], "feature_set_ends_": 83, "n_feature_sets_": 83, "fact": [84, 85], "caveat": [84, 85], "willing": [84, 85, 94], "spend": [84, 85, 94], "resourc": [84, 85, 94], "68908909": 85, "35854406": 85, "35223873": 85, "03616902": 85, "56008907": 85, "32235221": 85, "06945264": 85, "1465216": 85, "34597007": 85, "15308512": 85, "morf": [86, 87, 91, 100], "discontigu": [86, 87], "sensor": [86, 87], "mask": [86, 87], "onto": [86, 87], "data_width": [86, 87], "data_height": [86, 87], "tt": [86, 87], "last": [86, 87], "height": [86, 87], "exactli": [86, 87, 93], "albeit": [86, 87, 102], "efficienc": [86, 87], "min_patch_dims_": [86, 87], "max_patch_dims_": [86, 87], "data_dims_": [86, 87], "rg": 87, "10163671": 87, "78786738": 87, "01490768": 87, "32737289": 87, "24816698": 87, "41881754": 87, "0588273": 87, "48722913": 87, "07927208": 87, "15600762": 87, "unsupervisedcriterion": [88, 89], "abid": [88, 89], "unsupervisedsplitt": [88, 89], "enablescomput": 88, "describ": [88, 94], "alexand": 88, "marx": 88, "jona": 88, "fischer": 88, "sdm": 88, "415": 88, "evimaria": 88, "terzi": 88, "panayioti": 88, "tsapara": 88, "316": 88, "327": 88, "intermedi": 90, "aff_matrix": 90, "modern": 91, "supervis": [91, 95, 97], "strong": 91, "madhyastha2020": 91, "sporf": 91, "tomita2020": 91, "li2023": 91, "perry2021": 91, "futur": 91, "plan": 91, "stream": [91, 101], "xu2022": 91, "encourag": 91, "pull": 91, "walk": 91, "contribut": [91, 93, 100, 101, 102, 103, 104, 105, 106, 107, 108], "licens": 91, "bsd": 91, "xu": [91, 100, 101, 105], "haoyin": [91, 100, 101, 105], "simplest": 91, "2110": 91, "08483": 91, "releas": [91, 101, 102, 104, 105, 106, 107], "histori": 91, "unreleas": [91, 98], "instal": 91, "pip": 91, "meson": 91, "conda": 91, "pypi": 92, "clone": 92, "repositori": 92, "git": 92, "com": 92, "neurodata": 92, "cd": 92, "virtual": 92, "dev": 92, "build_requir": 92, "txt": 92, "spin": 92, "cli": 92, "abl": [92, 96, 103], "edit": 92, "pend": 92, "repo": 92, "zipbal": 92, "master": 92, "forg": 92, "threadpoolctl": 92, "pytest": 92, "compil": [92, 106], "llvm": 92, "openmp": 92, "directori": 92, "obliquepr": 92, "pr": 92, "checkout": 92, "instruct": 92, "divers": 93, "sometim": 93, "slight": 93, "aim": 93, "motiv": 93, "therebi": [93, 94], "often": [93, 95], "yield": 93, "overal": 93, "intuit": [93, 94], "leo": 93, "assess": 93, "final": [93, 94, 101], "essenti": 93, "abil": [93, 106], "mdi": 93, "l2014": 93, "suffer": 93, "flaw": 93, "conclus": 93, "deriv": 93, "held": 93, "secondli": 93, "favor": 93, "explor": 93, "whose": 93, "jaewon": 93, "chung": 93, "benjamin": 93, "jason": 93, "yim": 93, "mauro": 93, "maggioni": 93, "jmlr": 93, "v21": 93, "664": 93, "loupp": 93, "phd": 93, "thesi": 93, "lieg": 93, "2014": 93, "dt": 94, "ot": 94, "ref": 94, "rc": 94, "landmark": 94, "varieti": [94, 95], "major": [94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "definit": 94, "x_i": [94, 95], "recurs": 94, "manner": 94, "orthogon": 94, "a_i": 94, "langl": 94, "rangl": 94, "entri": 94, "rest": 94, "let": 94, "q_m": 94, "n_m": 94, "t_m": 94, "x_j": 94, "leq": 94, "setminu": 94, "e_i": 94, "basi": 94, "elsewher": 94, "_featur": 94, "come": 94, "sparsiti": 94, "consider": 94, "pickl": 94, "disc": 94, "special": 94, "earlier": 94, "sai": 94, "analysi": 94, "much": 94, "storag": 94, "ask": 94, "question": 94, "gridsearchcv": 94, "There": 94, "imput": 94, "1023": 94, "1010933404324": 94, "predictive_analyt": 94, "quinlan": 94, "c4": 94, "program": 94, "morgan": 94, "kaufmann": 94, "1993": 94, "prevent": 94, "overfit": 94, "triplet": 94, "treatment": 94, "sacrific": 94, "mse": 94, "goal": 95, "overview": 95, "cutpoint": 95, "cutoff": 95, "min_": 95, "sum_": 95, "hat": 95, "mu": 95, "_1": 95, "sample_indic": 95, "popular": 95, "seleciton": 95, "kmean": 95, "mclust": 95, "tri": 95, "mle": 95, "hard": 95, "soft": 95, "gmm": 95, "x_n": 95, "quad": 95, "le": 95, "mu_j": 95, "notion": 95, "efficaci": 95, "scheme": 95, "adjusted_rand_scor": 95, "tip": [97, 98], "enhanc": [98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "link": 98, "subscrib": 98, "io": 98, "notifi": 98, "jong": 100, "shin": 100, "bug": [100, 102, 103, 104, 107], "outsid": 100, "61": 100, "arbitrari": 100, "discontinu": 100, "dissimilar": 100, "64": 100, "67": 100, "70": 100, "patchobliquerandomforestregressor": 100, "suki": [100, 101], "72": 100, "57": 100, "nearestneighborsmetaestim": 100, "83": 100, "thank": [100, 101, 102, 103, 104, 105, 106, 107, 108], "everyon": [100, 101, 102, 103, 104, 105, 106, 107, 108], "who": [100, 101, 102, 103, 104, 105, 106, 107, 108], "mainten": [100, 101, 102, 103, 104, 105, 106, 107, 108], "incept": [100, 101, 102, 103, 104, 105, 106, 107, 108], "analog": 101, "upgrad": 101, "reli": 101, "109": 101, "extraobliquedecisiontreeclassifi": 101, "2x": [101, 106], "114": 101, "101": 101, "streamdecisionforest": 101, "116": 101, "undergon": 102, "organiz": 102, "overhaul": 102, "featureimportanceforestclassifi": [102, 104, 105, 107], "featureimportanceforestregressor": 102, "135": 102, "140": 102, "129": 102, "featureimport": [102, 103], "yuxin": 102, "bai": 102, "143": 102, "156": 102, "158": 102, "issu": 103, "featureimportanceforest": 103, "permute_per_forest_fract": 103, "145": 103, "169": 103, "auc": 103, "164": 103, "conditional_resampl": 103, "170": 103, "152": 103, "apply_max_features_per_set": 103, "incorrect": 103, "oversampl": 103, "after": 103, "172": 103, "mainli": [104, 105], "183": [104, 105], "exhaust": [104, 105], "approximate_clf_mutual_inform": 105, "approximate_clf_mutual_information_with_monte_carlo": 105, "mont": 105, "carlo": 105, "199": 105, "206": 105, "210": 105, "light": 106, "211": 106, "track": 106, "203": 106, "build_permutation_forest": 106, "222": 106, "make_marron_wand_classif": 106, "227": 106, "overwrit": 106, "228": 106, "236": 106, "direct": 106, "degrad": 106, "242": 106, "bias": 107, "ensur": 107, "addition": 107, "codebas": 107, "previous": 107, "did": 107, "silent": 107, "ran": 107, "encod": 107, "infin": 107, "encount": 107, "264": 107, "hyppo": 107, "throw": 107, "279": 107, "274": 107, "remov": 107, "outdat": 107, "imbal": 107, "283": 107, "train_idx_list": 75, "test_idx_list": 75}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[43, 1, 1, "", "ExtendedIsolationForest"], [44, 1, 1, "", "ExtraTreesClassifier"], [45, 1, 1, "", "ExtraTreesRegressor"], [46, 1, 1, "", "HonestForestClassifier"], [47, 1, 1, "", "MultiViewRandomForestClassifier"], [48, 1, 1, "", "NearestNeighborsMetaEstimator"], [49, 1, 1, "", "ObliqueRandomForestClassifier"], [50, 1, 1, "", "ObliqueRandomForestRegressor"], [51, 1, 1, "", "PatchObliqueRandomForestClassifier"], [52, 1, 1, "", "PatchObliqueRandomForestRegressor"], [53, 1, 1, "", "RandomForestClassifier"], [54, 1, 1, "", "RandomForestRegressor"], [55, 1, 1, "", "UnsupervisedObliqueRandomForest"], [56, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ExtendedIsolationForest": [[43, 2, 1, "", "decision_function"], [43, 3, 1, "", "estimators_samples_"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "fit_predict"], [43, 2, 1, "", "get_metadata_routing"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "score_samples"], [43, 2, 1, "", "set_fit_request"], [43, 2, 1, "", "set_params"]], "sktree.ExtraTreesClassifier": [[44, 2, 1, "", "apply"], [44, 2, 1, "", "decision_path"], [44, 3, 1, "", "estimators_samples_"], [44, 3, 1, "", "feature_importances_"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "get_leaf_node_samples"], [44, 2, 1, "", "get_metadata_routing"], [44, 2, 1, "", "get_params"], [44, 2, 1, "", "partial_fit"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_log_proba"], [44, 2, 1, "", "predict_proba"], [44, 2, 1, "", "predict_quantiles"], [44, 2, 1, "", "score"], [44, 2, 1, "", "set_fit_request"], [44, 2, 1, "", "set_params"], [44, 2, 1, "", "set_partial_fit_request"], [44, 2, 1, "", "set_score_request"]], "sktree.ExtraTreesRegressor": [[45, 2, 1, "", "apply"], [45, 2, 1, "", "decision_path"], [45, 3, 1, "", "estimators_samples_"], [45, 3, 1, "", "feature_importances_"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "get_leaf_node_samples"], [45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "predict_quantiles"], [45, 2, 1, "", "score"], [45, 2, 1, "", "set_fit_request"], [45, 2, 1, "", "set_params"], [45, 2, 1, "", "set_score_request"]], "sktree.HonestForestClassifier": [[46, 2, 1, "", "apply"], [46, 2, 1, "", "decision_path"], [46, 3, 1, "", "estimators_samples_"], [46, 3, 1, "", "feature_importances_"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "get_leaf_node_samples"], [46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 3, 1, "", "honest_indices_"], [46, 3, 1, "", "oob_samples_"], [46, 2, 1, "", "partial_fit"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "predict_log_proba"], [46, 2, 1, "", "predict_proba"], [46, 2, 1, "", "predict_proba_per_tree"], [46, 2, 1, "", "predict_quantiles"], [46, 2, 1, "", "score"], [46, 2, 1, "", "set_fit_request"], [46, 2, 1, "", "set_params"], [46, 2, 1, "", "set_partial_fit_request"], [46, 2, 1, "", "set_score_request"], [46, 3, 1, "", "structure_indices_"]], "sktree.MultiViewRandomForestClassifier": [[47, 2, 1, "", "apply"], [47, 2, 1, "", "compute_similarity_matrix"], [47, 2, 1, "", "decision_path"], [47, 3, 1, "", "estimators_samples_"], [47, 3, 1, "", "feature_importances_"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "get_leaf_node_samples"], [47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 3, 1, "", "oob_samples_"], [47, 2, 1, "", "partial_fit"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_log_proba"], [47, 2, 1, "", "predict_proba"], [47, 2, 1, "", "predict_proba_per_tree"], [47, 2, 1, "", "predict_quantiles"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_fit_request"], [47, 2, 1, "", "set_params"], [47, 2, 1, "", "set_partial_fit_request"], [47, 2, 1, "", "set_score_request"]], "sktree.NearestNeighborsMetaEstimator": [[48, 2, 1, "", "fit"], [48, 2, 1, "", "get_metadata_routing"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "kneighbors"], [48, 2, 1, "", "radius_neighbors"], [48, 2, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[49, 2, 1, "", "apply"], [49, 2, 1, "", "compute_similarity_matrix"], [49, 2, 1, "", "decision_path"], [49, 3, 1, "", "estimators_samples_"], [49, 3, 1, "", "feature_importances_"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "get_leaf_node_samples"], [49, 2, 1, "", "get_metadata_routing"], [49, 2, 1, "", "get_params"], [49, 3, 1, "", "oob_samples_"], [49, 2, 1, "", "partial_fit"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "predict_log_proba"], [49, 2, 1, "", "predict_proba"], [49, 2, 1, "", "predict_proba_per_tree"], [49, 2, 1, "", "predict_quantiles"], [49, 2, 1, "", "score"], [49, 2, 1, "", "set_fit_request"], [49, 2, 1, "", "set_params"], [49, 2, 1, "", "set_partial_fit_request"], [49, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[50, 2, 1, "", "apply"], [50, 2, 1, "", "compute_similarity_matrix"], [50, 2, 1, "", "decision_path"], [50, 3, 1, "", "estimators_samples_"], [50, 3, 1, "", "feature_importances_"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "get_leaf_node_samples"], [50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 3, 1, "", "oob_samples_"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "predict_quantiles"], [50, 2, 1, "", "score"], [50, 2, 1, "", "set_fit_request"], [50, 2, 1, "", "set_params"], [50, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[51, 2, 1, "", "apply"], [51, 2, 1, "", "compute_similarity_matrix"], [51, 2, 1, "", "decision_path"], [51, 3, 1, "", "estimators_samples_"], [51, 3, 1, "", "feature_importances_"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "get_leaf_node_samples"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 3, 1, "", "oob_samples_"], [51, 2, 1, "", "partial_fit"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_log_proba"], [51, 2, 1, "", "predict_proba"], [51, 2, 1, "", "predict_proba_per_tree"], [51, 2, 1, "", "predict_quantiles"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_fit_request"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "set_partial_fit_request"], [51, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[52, 2, 1, "", "apply"], [52, 2, 1, "", "compute_similarity_matrix"], [52, 2, 1, "", "decision_path"], [52, 3, 1, "", "estimators_samples_"], [52, 3, 1, "", "feature_importances_"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "get_leaf_node_samples"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 3, 1, "", "oob_samples_"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "predict_quantiles"], [52, 2, 1, "", "score"], [52, 2, 1, "", "set_fit_request"], [52, 2, 1, "", "set_params"], [52, 2, 1, "", "set_score_request"]], "sktree.RandomForestClassifier": [[53, 2, 1, "", "apply"], [53, 2, 1, "", "decision_path"], [53, 3, 1, "", "estimators_samples_"], [53, 3, 1, "", "feature_importances_"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "get_leaf_node_samples"], [53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "partial_fit"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_log_proba"], [53, 2, 1, "", "predict_proba"], [53, 2, 1, "", "predict_quantiles"], [53, 2, 1, "", "score"], [53, 2, 1, "", "set_fit_request"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "set_partial_fit_request"], [53, 2, 1, "", "set_score_request"]], "sktree.RandomForestRegressor": [[54, 2, 1, "", "apply"], [54, 2, 1, "", "decision_path"], [54, 3, 1, "", "estimators_samples_"], [54, 3, 1, "", "feature_importances_"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "get_leaf_node_samples"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_quantiles"], [54, 2, 1, "", "score"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[55, 2, 1, "", "apply"], [55, 2, 1, "", "compute_similarity_matrix"], [55, 2, 1, "", "decision_path"], [55, 3, 1, "", "estimators_samples_"], [55, 3, 1, "", "feature_importances_"], [55, 2, 1, "", "fit"], [55, 2, 1, "", "fit_predict"], [55, 2, 1, "", "fit_transform"], [55, 2, 1, "", "get_leaf_node_samples"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "predict_quantiles"], [55, 2, 1, "", "set_fit_request"], [55, 2, 1, "", "set_output"], [55, 2, 1, "", "set_params"], [55, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[56, 2, 1, "", "apply"], [56, 2, 1, "", "compute_similarity_matrix"], [56, 2, 1, "", "decision_path"], [56, 3, 1, "", "estimators_samples_"], [56, 3, 1, "", "feature_importances_"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "fit_predict"], [56, 2, 1, "", "fit_transform"], [56, 2, 1, "", "get_leaf_node_samples"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "predict"], [56, 2, 1, "", "predict_quantiles"], [56, 2, 1, "", "set_fit_request"], [56, 2, 1, "", "set_output"], [56, 2, 1, "", "set_params"], [56, 2, 1, "", "transform"]], "sktree._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "sktree.datasets": [[57, 4, 1, "", "approximate_clf_mutual_information"], [58, 4, 1, "", "approximate_clf_mutual_information_with_monte_carlo"], [59, 4, 1, "", "make_gaussian_mixture"], [60, 4, 1, "", "make_joint_factor_model"], [61, 4, 1, "", "make_marron_wand_classification"], [62, 4, 1, "", "make_quadratic_classification"], [63, 4, 1, "", "make_trunk_classification"], [64, 4, 1, "", "make_trunk_mixture_classification"]], "sktree.experimental": [[65, 4, 1, "", "conditional_resample"], [69, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.mutual_info": [[66, 4, 1, "", "cmi_gaussian"], [67, 4, 1, "", "entropy_gaussian"], [68, 4, 1, "", "mi_gaussian"]], "sktree.experimental.simulate": [[70, 4, 1, "", "simulate_helix"], [71, 4, 1, "", "simulate_multivariate_gaussian"], [72, 4, 1, "", "simulate_sphere"]], "sktree.stats": [[73, 1, 1, "", "PermutationHonestForestClassifier"], [74, 4, 1, "", "build_coleman_forest"], [75, 4, 1, "", "build_cv_forest"], [76, 4, 1, "", "build_oob_forest"], [77, 4, 1, "", "build_permutation_forest"]], "sktree.stats.PermutationHonestForestClassifier": [[73, 2, 1, "", "apply"], [73, 2, 1, "", "decision_path"], [73, 3, 1, "", "estimators_samples_"], [73, 3, 1, "", "feature_importances_"], [73, 2, 1, "", "fit"], [73, 2, 1, "", "get_leaf_node_samples"], [73, 2, 1, "", "get_metadata_routing"], [73, 2, 1, "", "get_params"], [73, 3, 1, "", "honest_indices_"], [73, 3, 1, "", "oob_samples_"], [73, 2, 1, "", "partial_fit"], [73, 2, 1, "", "predict"], [73, 2, 1, "", "predict_log_proba"], [73, 2, 1, "", "predict_proba"], [73, 2, 1, "", "predict_proba_per_tree"], [73, 2, 1, "", "predict_quantiles"], [73, 2, 1, "", "score"], [73, 2, 1, "", "set_fit_request"], [73, 2, 1, "", "set_params"], [73, 2, 1, "", "set_partial_fit_request"], [73, 2, 1, "", "set_score_request"], [73, 3, 1, "", "structure_indices_"]], "sktree.tree": [[78, 1, 1, "", "DecisionTreeClassifier"], [79, 1, 1, "", "DecisionTreeRegressor"], [80, 1, 1, "", "ExtraTreeClassifier"], [81, 1, 1, "", "ExtraTreeRegressor"], [82, 1, 1, "", "HonestTreeClassifier"], [83, 1, 1, "", "MultiViewDecisionTreeClassifier"], [84, 1, 1, "", "ObliqueDecisionTreeClassifier"], [85, 1, 1, "", "ObliqueDecisionTreeRegressor"], [86, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [87, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [88, 1, 1, "", "UnsupervisedDecisionTree"], [89, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [90, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.DecisionTreeClassifier": [[78, 2, 1, "", "apply"], [78, 2, 1, "", "cost_complexity_pruning_path"], [78, 2, 1, "", "decision_path"], [78, 3, 1, "", "feature_importances_"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "get_depth"], [78, 2, 1, "", "get_leaf_node_samples"], [78, 2, 1, "", "get_metadata_routing"], [78, 2, 1, "", "get_n_leaves"], [78, 2, 1, "", "get_params"], [78, 2, 1, "", "partial_fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "predict_log_proba"], [78, 2, 1, "", "predict_proba"], [78, 2, 1, "", "predict_quantiles"], [78, 2, 1, "", "score"], [78, 2, 1, "", "set_fit_request"], [78, 2, 1, "", "set_params"], [78, 2, 1, "", "set_partial_fit_request"], [78, 2, 1, "", "set_predict_proba_request"], [78, 2, 1, "", "set_predict_request"], [78, 2, 1, "", "set_score_request"]], "sktree.tree.DecisionTreeRegressor": [[79, 2, 1, "", "apply"], [79, 2, 1, "", "cost_complexity_pruning_path"], [79, 2, 1, "", "decision_path"], [79, 3, 1, "", "feature_importances_"], [79, 2, 1, "", "fit"], [79, 2, 1, "", "get_depth"], [79, 2, 1, "", "get_leaf_node_samples"], [79, 2, 1, "", "get_metadata_routing"], [79, 2, 1, "", "get_n_leaves"], [79, 2, 1, "", "get_params"], [79, 2, 1, "", "predict"], [79, 2, 1, "", "predict_quantiles"], [79, 2, 1, "", "score"], [79, 2, 1, "", "set_fit_request"], [79, 2, 1, "", "set_params"], [79, 2, 1, "", "set_predict_request"], [79, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeClassifier": [[80, 2, 1, "", "apply"], [80, 2, 1, "", "cost_complexity_pruning_path"], [80, 2, 1, "", "decision_path"], [80, 3, 1, "", "feature_importances_"], [80, 2, 1, "", "fit"], [80, 2, 1, "", "get_depth"], [80, 2, 1, "", "get_leaf_node_samples"], [80, 2, 1, "", "get_metadata_routing"], [80, 2, 1, "", "get_n_leaves"], [80, 2, 1, "", "get_params"], [80, 2, 1, "", "partial_fit"], [80, 2, 1, "", "predict"], [80, 2, 1, "", "predict_log_proba"], [80, 2, 1, "", "predict_proba"], [80, 2, 1, "", "predict_quantiles"], [80, 2, 1, "", "score"], [80, 2, 1, "", "set_fit_request"], [80, 2, 1, "", "set_params"], [80, 2, 1, "", "set_partial_fit_request"], [80, 2, 1, "", "set_predict_proba_request"], [80, 2, 1, "", "set_predict_request"], [80, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeRegressor": [[81, 2, 1, "", "apply"], [81, 2, 1, "", "cost_complexity_pruning_path"], [81, 2, 1, "", "decision_path"], [81, 3, 1, "", "feature_importances_"], [81, 2, 1, "", "fit"], [81, 2, 1, "", "get_depth"], [81, 2, 1, "", "get_leaf_node_samples"], [81, 2, 1, "", "get_metadata_routing"], [81, 2, 1, "", "get_n_leaves"], [81, 2, 1, "", "get_params"], [81, 2, 1, "", "predict"], [81, 2, 1, "", "predict_quantiles"], [81, 2, 1, "", "score"], [81, 2, 1, "", "set_fit_request"], [81, 2, 1, "", "set_params"], [81, 2, 1, "", "set_predict_request"], [81, 2, 1, "", "set_score_request"]], "sktree.tree.HonestTreeClassifier": [[82, 2, 1, "", "apply"], [82, 2, 1, "", "cost_complexity_pruning_path"], [82, 2, 1, "", "decision_path"], [82, 3, 1, "", "feature_importances_"], [82, 2, 1, "", "fit"], [82, 2, 1, "", "get_depth"], [82, 2, 1, "", "get_leaf_node_samples"], [82, 2, 1, "", "get_metadata_routing"], [82, 2, 1, "", "get_n_leaves"], [82, 2, 1, "", "get_params"], [82, 2, 1, "", "partial_fit"], [82, 2, 1, "", "predict"], [82, 2, 1, "", "predict_proba"], [82, 2, 1, "", "predict_quantiles"], [82, 2, 1, "", "score"], [82, 2, 1, "", "set_fit_request"], [82, 2, 1, "", "set_params"], [82, 2, 1, "", "set_partial_fit_request"], [82, 2, 1, "", "set_predict_proba_request"], [82, 2, 1, "", "set_predict_request"], [82, 2, 1, "", "set_score_request"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[83, 2, 1, "", "apply"], [83, 2, 1, "", "compute_similarity_matrix"], [83, 2, 1, "", "cost_complexity_pruning_path"], [83, 2, 1, "", "decision_path"], [83, 3, 1, "", "feature_importances_"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "get_depth"], [83, 2, 1, "", "get_leaf_node_samples"], [83, 2, 1, "", "get_metadata_routing"], [83, 2, 1, "", "get_n_leaves"], [83, 2, 1, "", "get_params"], [83, 2, 1, "", "partial_fit"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "predict_log_proba"], [83, 2, 1, "", "predict_proba"], [83, 2, 1, "", "predict_quantiles"], [83, 2, 1, "", "score"], [83, 2, 1, "", "set_fit_request"], [83, 2, 1, "", "set_params"], [83, 2, 1, "", "set_partial_fit_request"], [83, 2, 1, "", "set_predict_proba_request"], [83, 2, 1, "", "set_predict_request"], [83, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[84, 2, 1, "", "apply"], [84, 2, 1, "", "compute_similarity_matrix"], [84, 2, 1, "", "cost_complexity_pruning_path"], [84, 2, 1, "", "decision_path"], [84, 3, 1, "", "feature_importances_"], [84, 2, 1, "", "fit"], [84, 2, 1, "", "get_depth"], [84, 2, 1, "", "get_leaf_node_samples"], [84, 2, 1, "", "get_metadata_routing"], [84, 2, 1, "", "get_n_leaves"], [84, 2, 1, "", "get_params"], [84, 2, 1, "", "partial_fit"], [84, 2, 1, "", "predict"], [84, 2, 1, "", "predict_log_proba"], [84, 2, 1, "", "predict_proba"], [84, 2, 1, "", "predict_quantiles"], [84, 2, 1, "", "score"], [84, 2, 1, "", "set_fit_request"], [84, 2, 1, "", "set_params"], [84, 2, 1, "", "set_partial_fit_request"], [84, 2, 1, "", "set_predict_proba_request"], [84, 2, 1, "", "set_predict_request"], [84, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[85, 2, 1, "", "apply"], [85, 2, 1, "", "compute_similarity_matrix"], [85, 2, 1, "", "cost_complexity_pruning_path"], [85, 2, 1, "", "decision_path"], [85, 3, 1, "", "feature_importances_"], [85, 2, 1, "", "fit"], [85, 2, 1, "", "get_depth"], [85, 2, 1, "", "get_leaf_node_samples"], [85, 2, 1, "", "get_metadata_routing"], [85, 2, 1, "", "get_n_leaves"], [85, 2, 1, "", "get_params"], [85, 2, 1, "", "predict"], [85, 2, 1, "", "predict_quantiles"], [85, 2, 1, "", "score"], [85, 2, 1, "", "set_fit_request"], [85, 2, 1, "", "set_params"], [85, 2, 1, "", "set_predict_request"], [85, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[86, 2, 1, "", "apply"], [86, 2, 1, "", "compute_similarity_matrix"], [86, 2, 1, "", "cost_complexity_pruning_path"], [86, 2, 1, "", "decision_path"], [86, 3, 1, "", "feature_importances_"], [86, 2, 1, "", "fit"], [86, 2, 1, "", "get_depth"], [86, 2, 1, "", "get_leaf_node_samples"], [86, 2, 1, "", "get_metadata_routing"], [86, 2, 1, "", "get_n_leaves"], [86, 2, 1, "", "get_params"], [86, 2, 1, "", "partial_fit"], [86, 2, 1, "", "predict"], [86, 2, 1, "", "predict_log_proba"], [86, 2, 1, "", "predict_proba"], [86, 2, 1, "", "predict_quantiles"], [86, 2, 1, "", "score"], [86, 2, 1, "", "set_fit_request"], [86, 2, 1, "", "set_params"], [86, 2, 1, "", "set_partial_fit_request"], [86, 2, 1, "", "set_predict_proba_request"], [86, 2, 1, "", "set_predict_request"], [86, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[87, 2, 1, "", "apply"], [87, 2, 1, "", "compute_similarity_matrix"], [87, 2, 1, "", "cost_complexity_pruning_path"], [87, 2, 1, "", "decision_path"], [87, 3, 1, "", "feature_importances_"], [87, 2, 1, "", "fit"], [87, 2, 1, "", "get_depth"], [87, 2, 1, "", "get_leaf_node_samples"], [87, 2, 1, "", "get_metadata_routing"], [87, 2, 1, "", "get_n_leaves"], [87, 2, 1, "", "get_params"], [87, 2, 1, "", "predict"], [87, 2, 1, "", "predict_quantiles"], [87, 2, 1, "", "score"], [87, 2, 1, "", "set_fit_request"], [87, 2, 1, "", "set_params"], [87, 2, 1, "", "set_predict_request"], [87, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[88, 2, 1, "", "apply"], [88, 2, 1, "", "compute_similarity_matrix"], [88, 2, 1, "", "cost_complexity_pruning_path"], [88, 2, 1, "", "decision_path"], [88, 3, 1, "", "feature_importances_"], [88, 2, 1, "", "fit_predict"], [88, 2, 1, "", "fit_transform"], [88, 2, 1, "", "get_depth"], [88, 2, 1, "", "get_leaf_node_samples"], [88, 2, 1, "", "get_metadata_routing"], [88, 2, 1, "", "get_n_leaves"], [88, 2, 1, "", "get_params"], [88, 2, 1, "", "predict"], [88, 2, 1, "", "predict_quantiles"], [88, 2, 1, "", "set_fit_request"], [88, 2, 1, "", "set_output"], [88, 2, 1, "", "set_params"], [88, 2, 1, "", "set_predict_request"], [88, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[89, 2, 1, "", "apply"], [89, 2, 1, "", "compute_similarity_matrix"], [89, 2, 1, "", "cost_complexity_pruning_path"], [89, 2, 1, "", "decision_path"], [89, 3, 1, "", "feature_importances_"], [89, 2, 1, "", "fit_predict"], [89, 2, 1, "", "fit_transform"], [89, 2, 1, "", "get_depth"], [89, 2, 1, "", "get_leaf_node_samples"], [89, 2, 1, "", "get_metadata_routing"], [89, 2, 1, "", "get_n_leaves"], [89, 2, 1, "", "get_params"], [89, 2, 1, "", "predict"], [89, 2, 1, "", "predict_quantiles"], [89, 2, 1, "", "set_fit_request"], [89, 2, 1, "", "set_output"], [89, 2, 1, "", "set_params"], [89, 2, 1, "", "set_predict_request"], [89, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 100, 101, 102, 103, 104, 105, 106, 107, 108], "scikit": [0, 91, 96], "learn": [0, 4, 5, 96], "tree": [0, 1, 4, 5, 9, 17, 18, 20, 24, 27, 28, 29, 30, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96], "estim": [0, 34], "supervis": [0, 94], "unsupervis": [0, 95], "outlier": [0, 4, 8, 96], "detect": [0, 4, 8, 96], "distanc": [0, 38], "metric": 0, "statist": [0, 34, 35, 36, 37, 38, 40, 41], "hypothesi": [0, 4, 32, 96], "test": [0, 4, 32, 39, 42, 96], "dataset": [0, 6, 18, 21, 22, 25, 57, 58, 59, 60, 61, 62, 63, 64], "experiment": [0, 65, 66, 67, 68, 69, 70, 71, 72], "function": [0, 13], "calibr": [1, 2, 4, 96], "decis": [1, 4, 5, 9, 17, 18, 20, 24, 27, 94, 95, 96], "via": [1, 4, 96], "honesti": [1, 4, 96], "plot": [2, 9, 13, 14, 15, 18, 23, 25, 29, 30], "honest": [2, 94], "forest": [2, 4, 6, 9, 11, 13, 14, 15, 21, 22, 23, 25, 93, 96], "overlap": 2, "gaussian": [2, 34, 35, 36, 37, 38, 39, 40, 41, 42], "simul": [2, 6, 23, 34, 35, 36, 37, 38, 39, 40, 41, 42, 70, 71, 72], "refer": [2, 9, 21, 22, 91, 93, 94, 95], "comput": [3, 7, 10, 16, 19, 26, 31, 33], "time": [3, 7, 10, 16, 19, 26, 29, 31, 33], "exampl": [4, 9, 63, 64, 74, 76, 93, 96], "multi": [4, 5, 6, 28, 94, 96], "view": [4, 5, 6, 28, 96], "quantil": [4, 11, 12, 13, 14, 15, 96], "predict": [4, 9, 11, 12, 13, 14, 15, 21, 23, 25, 96], "random": [4, 6, 11, 13, 14, 21, 22, 23, 25, 93, 96], "compar": [4, 6, 17, 21, 24, 94, 96], "sklearn": [4, 17, 96], "sktree": [4, 17, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96], "spars": [4, 20, 23, 30, 96], "obliqu": [4, 15, 20, 21, 22, 23, 24, 25, 29, 30, 93, 94, 96], "project": [4, 20, 28, 29, 30, 96], "splitter": [4, 27, 28, 29, 30, 96], "treepl": [4, 32, 96], "analyz": 6, "data": [6, 9, 12, 15, 40, 42], "fit": [6, 14, 35, 36, 37, 38, 39, 40, 41, 42], "visual": [6, 9, 28], "score": 6, "perform": 6, "extendedisolationforest": [9, 43], "gener": [9, 12, 15, 29, 30, 34], "train": [9, 14, 18], "model": [9, 14, 35, 36, 37, 38, 39, 40, 41, 42], "discret": 9, "boundari": 9, "path": 9, "length": 9, "each": [9, 28], "within": 9, "differ": [12, 22, 94], "interpol": 12, "method": 12, "The": 12, "interv": 13, "regressor": [13, 14], "result": [13, 14, 15], "class": 14, "sampl": [14, 28, 29], "regress": [15, 94], "surfac": [18, 24], "iri": 18, "extra": [21, 22, 24], "cc18": [21, 25], "discuss": [21, 22, 28, 30], "speed": 22, "v": 22, "size": 22, "axi": [23, 25, 28], "align": [23, 25, 28], "pariti": 23, "standard": 24, "demonstr": 28, "matrix": [28, 30], "an": [28, 29, 30], "initi": [28, 29, 30], "split": 28, "candid": 28, "scale": 28, "featur": [28, 93], "set": 28, "dimension": [28, 40], "matric": [29, 30], "imag": 29, "seri": 29, "patch": [29, 30], "1d": 29, "2d": 29, "3d": 29, "discontigu": 29, "true": 34, "posterior": 34, "mixtur": 34, "calcul": [34, 35, 36, 37, 38, 39, 40, 41, 42], "x": [34, 40, 41], "prior": 34, "pdf": 34, "": [34, 35, 40], "98": [34, 35, 40], "mi": [34, 36, 39], "pauc": [34, 37], "90": 34, "creat": [35, 36, 37, 38, 39, 40, 41, 42], "two": [35, 36, 37, 38, 39, 40, 41, 42, 95], "r": 37, "helling": 38, "p": [39, 42], "valu": [39, 42], "might": 39, "independ": [39, 42], "multiview": [40, 42], "z": [40, 41], "cmi": [41, 42], "onli": 41, "comight": 42, "modifi": 42, "permut": 42, "variabl": 42, "extratreesclassifi": 44, "extratreesregressor": 45, "honestforestclassifi": 46, "multiviewrandomforestclassifi": 47, "nearestneighborsmetaestim": 48, "obliquerandomforestclassifi": 49, "obliquerandomforestregressor": 50, "patchobliquerandomforestclassifi": 51, "patchobliquerandomforestregressor": 52, "randomforestclassifi": 53, "randomforestregressor": 54, "unsupervisedobliquerandomforest": 55, "unsupervisedrandomforest": 56, "approximate_clf_mutual_inform": 57, "approximate_clf_mutual_information_with_monte_carlo": 58, "make_gaussian_mixtur": 59, "make_joint_factor_model": 60, "make_marron_wand_classif": 61, "make_quadratic_classif": 62, "make_trunk_classif": 63, "us": [63, 64, 74, 76, 94, 96], "make_trunk_mixture_classif": 64, "conditional_resampl": 65, "mutual_info": [66, 67, 68], "cmi_gaussian": 66, "entropy_gaussian": 67, "mi_gaussian": 68, "mutual_info_ksg": 69, "simulate_helix": 70, "simulate_multivariate_gaussian": 71, "simulate_spher": 72, "stat": [73, 74, 75, 76, 77], "permutationhonestforestclassifi": 73, "build_coleman_forest": 74, "build_cv_forest": 75, "build_oob_forest": 76, "build_permutation_forest": 77, "decisiontreeclassifi": 78, "decisiontreeregressor": 79, "extratreeclassifi": 80, "extratreeregressor": 81, "honesttreeclassifi": 82, "multiviewdecisiontreeclassifi": 83, "obliquedecisiontreeclassifi": 84, "obliquedecisiontreeregressor": 85, "patchobliquedecisiontreeclassifi": 86, "patchobliquedecisiontreeregressor": 87, "unsuperviseddecisiontre": 88, "unsupervisedobliquedecisiontre": 89, "compute_forest_similarity_matrix": 90, "content": 91, "get": 91, "start": 91, "indic": 91, "tabl": 91, "instal": 92, "depend": 92, "pip": 92, "from": 92, "sourc": 92, "meson": 92, "conda": 92, "recommend": 92, "import": 93, "evalu": [93, 95], "mathemat": 94, "formul": 94, "classif": 94, "output": 94, "problem": 94, "complex": 94, "tip": 94, "practic": 94, "limit": 94, "criterion": 95, "mean": 95, "fast": 95, "bic": 95, "user": 97, "guid": 97, "releas": 98, "histori": 98, "version": [100, 101, 102, 103, 104, 105, 106, 107, 108], "0": [100, 101, 102, 103, 104, 105, 106, 107, 108], "1": 100, "changelog": [100, 101, 102, 103, 104, 105, 106, 107, 108], "code": [100, 101, 102, 103, 104, 105, 106, 107, 108], "contributor": [100, 101, 102, 103, 104, 105, 106, 107, 108], "2": 101, "3": 102, "4": 103, "5": 104, "6": 105, "7": 106, "8": 107, "9": 108}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Outlier Detection": [[0, "outlier-detection"]], "Distance Metrics": [[0, "distance-metrics"]], "Statistical Hypothesis Testing": [[0, "statistical-hypothesis-testing"]], "Datasets": [[0, "datasets"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Calibrated decision trees via honesty": [[1, "calibrated-decision-trees-via-honesty"], [4, "calibrated-decision-trees-via-honesty"], [96, "calibrated-decision-trees-via-honesty"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[2, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[2, "references"], [9, "references"], [21, "references"], [22, "references"], [91, null], [93, null], [93, null], [95, null]], "Computation times": [[3, "computation-times"], [7, "computation-times"], [10, "computation-times"], [16, "computation-times"], [19, "computation-times"], [26, "computation-times"], [31, "computation-times"], [33, "computation-times"]], "Examples": [[4, "examples"], [96, "examples"]], "Multi-view learning with Decision-trees": [[4, "multi-view-learning-with-decision-trees"], [5, "multi-view-learning-with-decision-trees"], [96, "multi-view-learning-with-decision-trees"]], "Outlier-detection": [[4, "outlier-detection"], [8, "outlier-detection"], [96, "outlier-detection"]], "Quantile Predictions with Random Forest": [[4, "quantile-predictions-with-random-forest"], [11, "quantile-predictions-with-random-forest"], [96, "quantile-predictions-with-random-forest"]], "Comparing sklearn and sktree decision trees": [[4, "comparing-sklearn-and-sktree-decision-trees"], [17, "comparing-sklearn-and-sktree-decision-trees"], [96, "comparing-sklearn-and-sktree-decision-trees"]], "Sparse oblique projections with oblique decision-trees": [[4, "sparse-oblique-projections-with-oblique-decision-trees"], [20, "sparse-oblique-projections-with-oblique-decision-trees"], [96, "sparse-oblique-projections-with-oblique-decision-trees"]], "Decision-tree splitters": [[4, "decision-tree-splitters"], [27, "decision-tree-splitters"], [96, "decision-tree-splitters"]], "Treeple for Hypothesis Testing": [[4, "treeple-for-hypothesis-testing"], [32, "treeple-for-hypothesis-testing"], [96, "treeple-for-hypothesis-testing"]], "Analyze a multi-view dataset with a multi-view random forest": [[6, "analyze-a-multi-view-dataset-with-a-multi-view-random-forest"]], "Simulate data": [[6, "simulate-data"]], "Fit Random Forest and Multi-view Random Forest": [[6, "fit-random-forest-and-multi-view-random-forest"]], "Visualize scores and compare performance": [[6, "visualize-scores-and-compare-performance"]], "ExtendedIsolationForest example": [[9, "extendedisolationforest-example"]], "Data generation": [[9, "data-generation"]], "Training of the model": [[9, "training-of-the-model"]], "Plot discrete decision boundary": [[9, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[9, "plot-path-length-decision-boundary"]], "Visualize the prediction of each tree within the forest": [[9, "visualize-the-prediction-of-each-tree-within-the-forest"]], "Predicting with different quantile interpolation methods": [[12, "predicting-with-different-quantile-interpolation-methods"]], "Generate the data": [[12, "generate-the-data"], [15, "generate-the-data"]], "The interpolation methods": [[12, "the-interpolation-methods"]], "Quantile prediction intervals with Random Forest Regressor": [[13, "quantile-prediction-intervals-with-random-forest-regressor"]], "Quantile Prediction Function": [[13, "quantile-prediction-function"]], "Plot the results": [[13, "plot-the-results"], [14, "plot-the-results"], [15, "plot-the-results"]], "Quantile prediction with Random Forest Regressor class": [[14, "quantile-prediction-with-random-forest-regressor-class"]], "Fit the model to the training samples": [[14, "fit-the-model-to-the-training-samples"]], "Quantile regression with oblique regression forest": [[15, "quantile-regression-with-oblique-regression-forest"]], "Generate Quantile Predictions": [[15, "generate-quantile-predictions"]], "Plot the decision surface of decision trees trained on the iris dataset": [[18, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Compare extra oblique forest and oblique random forest predictions on cc18 datasets": [[21, "compare-extra-oblique-forest-and-oblique-random-forest-predictions-on-cc18-datasets"]], "Discussion": [[21, "discussion"], [22, "discussion"], [28, "discussion"], [30, "discussion"]], "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes": [[22, "speed-of-extra-oblique-random-forest-vs-oblique-random-forest-on-different-dataset-sizes"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[23, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Compare the decision surfaces of oblique extra-trees with standard oblique trees": [[24, "compare-the-decision-surfaces-of-oblique-extra-trees-with-standard-oblique-trees"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[25, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree": [[28, "demonstrate-and-visualize-a-multi-view-projection-matrix-for-an-axis-aligned-tree"]], "Initialize the multi-view splitter": [[28, "initialize-the-multi-view-splitter"]], "Sample the projection matrix": [[28, "sample-the-projection-matrix"]], "Sampling split candidates scaled to each feature-set dimensionality": [[28, "sampling-split-candidates-scaled-to-each-feature-set-dimensionality"]], "Plot the projection matrices of an oblique tree for sampling images, or time-series": [[29, "plot-the-projection-matrices-of-an-oblique-tree-for-sampling-images-or-time-series"]], "Initialize patch splitter": [[29, "initialize-patch-splitter"], [30, "initialize-patch-splitter"]], "Generate 1D patches": [[29, "generate-1d-patches"]], "Generate 2D patches": [[29, "generate-2d-patches"]], "Generate 3D patches": [[29, "generate-3d-patches"]], "Discontiguous Patches": [[29, "discontiguous-patches"]], "Plot the sparse projection matrices of an oblique tree": [[30, "plot-the-sparse-projection-matrices-of-an-oblique-tree"]], "Initialize the splitter": [[30, "initialize-the-splitter"]], "Generate projection matrix": [[30, "generate-projection-matrix"]], "Estimating true posteriors & statistics": [[34, "estimating-true-posteriors-statistics"]], "True posterior estimation": [[34, "true-posterior-estimation"]], "Generate gaussian mixture simulations": [[34, "generate-gaussian-mixture-simulations"]], "Calculate X priors with true pdfs": [[34, "calculate-x-priors-with-true-pdfs"]], "Calculate true posteriors": [[34, "calculate-true-posteriors"]], "Generate true statistic estimates: S@98": [[34, "generate-true-statistic-estimates-s-98"]], "Generate true statistic estimates: MI": [[34, "generate-true-statistic-estimates-mi"]], "Generate true statistic estimates: pAUC@90": [[34, "generate-true-statistic-estimates-pauc-90"]], "Calculating S@98": [[35, "calculating-s-98"]], "S@98": [[35, "s-98"]], "Create a simulation with two gaussians": [[35, "create-a-simulation-with-two-gaussians"], [36, "create-a-simulation-with-two-gaussians"], [37, "create-a-simulation-with-two-gaussians"], [38, "create-a-simulation-with-two-gaussians"], [39, "create-a-simulation-with-two-gaussians"], [41, "create-a-simulation-with-two-gaussians"], [42, "create-a-simulation-with-two-gaussians"]], "Fit the model": [[35, "fit-the-model"], [36, "fit-the-model"], [37, "fit-the-model"], [38, "fit-the-model"]], "Calculate the statistic": [[35, "calculate-the-statistic"], [36, "calculate-the-statistic"], [37, "calculate-the-statistic"], [38, "calculate-the-statistic"], [40, "calculate-the-statistic"], [41, "calculate-the-statistic"]], "Calculating MI": [[36, "calculating-mi"]], "MI": [[36, "mi"], [39, "mi"]], "Calculating pAUC": [[37, "calculating-pauc"]], "pAUC@r": [[37, "pauc-r"]], "Calculating Hellinger Distance": [[38, "calculating-hellinger-distance"]], "Hellinger Distance": [[38, "hellinger-distance"]], "Calculating p-value (MIGHT)": [[39, "calculating-p-value-might"]], "Independence Testing": [[39, "independence-testing"], [42, "independence-testing"]], "Fit the models and calculate the p-value": [[39, "fit-the-models-and-calculate-the-p-value"], [42, "fit-the-models-and-calculate-the-p-value"]], "Calculating S@98 with multiview data": [[40, "calculating-s-98-with-multiview-data"]], "S@98 with multiview data": [[40, "s-98-with-multiview-data"]], "Create a two-dimensional simulation with gaussians": [[40, "create-a-two-dimensional-simulation-with-gaussians"]], "Fit the model with X and Z": [[40, "fit-the-model-with-x-and-z"], [41, "fit-the-model-with-x-and-z"]], "Calculating CMI": [[41, "calculating-cmi"]], "CMI": [[41, "cmi"], [42, "cmi"]], "Fit the model with Z only": [[41, "fit-the-model-with-z-only"]], "Calculating p-value with multiview data (CoMIGHT)": [[42, "calculating-p-value-with-multiview-data-comight"]], "Modify the simulation with permuted variable two": [[42, "modify-the-simulation-with-permuted-variable-two"]], "sktree.ExtendedIsolationForest": [[43, "sktree-extendedisolationforest"]], "sktree.ExtraTreesClassifier": [[44, "sktree-extratreesclassifier"]], "sktree.ExtraTreesRegressor": [[45, "sktree-extratreesregressor"]], "sktree.HonestForestClassifier": [[46, "sktree-honestforestclassifier"]], "sktree.MultiViewRandomForestClassifier": [[47, "sktree-multiviewrandomforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[48, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[49, "sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[50, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[51, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[52, "sktree-patchobliquerandomforestregressor"]], "sktree.RandomForestClassifier": [[53, "sktree-randomforestclassifier"]], "sktree.RandomForestRegressor": [[54, "sktree-randomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[55, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[56, "sktree-unsupervisedrandomforest"]], "sktree.datasets.approximate_clf_mutual_information": [[57, "sktree-datasets-approximate-clf-mutual-information"]], "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo": [[58, "sktree-datasets-approximate-clf-mutual-information-with-monte-carlo"]], "sktree.datasets.make_gaussian_mixture": [[59, "sktree-datasets-make-gaussian-mixture"]], "sktree.datasets.make_joint_factor_model": [[60, "sktree-datasets-make-joint-factor-model"]], "sktree.datasets.make_marron_wand_classification": [[61, "sktree-datasets-make-marron-wand-classification"]], "sktree.datasets.make_quadratic_classification": [[62, "sktree-datasets-make-quadratic-classification"]], "sktree.datasets.make_trunk_classification": [[63, "sktree-datasets-make-trunk-classification"]], "Examples using sktree.datasets.make_trunk_classification": [[63, "examples-using-sktree-datasets-make-trunk-classification"]], "sktree.datasets.make_trunk_mixture_classification": [[64, "sktree-datasets-make-trunk-mixture-classification"]], "Examples using sktree.datasets.make_trunk_mixture_classification": [[64, "examples-using-sktree-datasets-make-trunk-mixture-classification"]], "sktree.experimental.conditional_resample": [[65, "sktree-experimental-conditional-resample"]], "sktree.experimental.mutual_info.cmi_gaussian": [[66, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[67, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[68, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[69, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[70, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[71, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[72, "sktree-experimental-simulate-simulate-sphere"]], "sktree.stats.PermutationHonestForestClassifier": [[73, "sktree-stats-permutationhonestforestclassifier"]], "sktree.tree.DecisionTreeClassifier": [[78, "sktree-tree-decisiontreeclassifier"]], "sktree.tree.DecisionTreeRegressor": [[79, "sktree-tree-decisiontreeregressor"]], "sktree.tree.ExtraTreeClassifier": [[80, "sktree-tree-extratreeclassifier"]], "sktree.tree.ExtraTreeRegressor": [[81, "sktree-tree-extratreeregressor"]], "sktree.tree.HonestTreeClassifier": [[82, "sktree-tree-honesttreeclassifier"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[83, "sktree-tree-multiviewdecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[84, "sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[85, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[86, "sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[87, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[88, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[89, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[90, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[91, "scikit-tree"]], "Contents": [[91, "contents"]], "Getting started:": [[91, null]], "Indices and tables": [[91, "indices-and-tables"]], "Installation": [[92, "installation"]], "Dependencies": [[92, "dependencies"]], "Installing with pip": [[92, "installing-with-pip"]], "Installing from source with Meson": [[92, "installing-from-source-with-meson"]], "Conda (Recommended)": [[92, "conda-recommended"]], "Oblique Random Forests": [[93, "oblique-random-forests"]], "Examples:": [[93, null]], "Feature importance evaluation": [[93, "feature-importance-evaluation"]], "Supervised Decision Trees": [[94, "supervised-decision-trees"]], "Oblique Trees": [[94, "oblique-trees"]], "Differences compared to decision trees": [[94, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[94, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[94, "classification-regression-and-multi-output-problems"]], "Complexity": [[94, "complexity"]], "Tips on practical use": [[94, "tips-on-practical-use"]], "Limitations compared to decision trees": [[94, "limitations-compared-to-decision-trees"]], "References:": [[94, null]], "Honest Trees": [[94, "honest-trees"]], "Unsupervised Decision Trees": [[95, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[95, "unsupervised-criterion"]], "Two-Means": [[95, "two-means"]], "Fast-BIC": [[95, "fast-bic"]], "Evaluating Unsupervised Trees": [[95, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[96, "examples-using-scikit-tree"]], "User Guide": [[97, "user-guide"]], "Release History": [[98, "release-history"]], "Version 0.1": [[100, "version-0-1"]], "Changelog": [[100, "changelog"], [101, "changelog"], [102, "changelog"], [103, "changelog"], [104, "changelog"], [105, "changelog"], [106, "changelog"], [107, "changelog"], [108, "changelog"]], "Code and Documentation Contributors": [[100, "code-and-documentation-contributors"], [101, "code-and-documentation-contributors"], [102, "code-and-documentation-contributors"], [103, "code-and-documentation-contributors"], [104, "code-and-documentation-contributors"], [105, "code-and-documentation-contributors"], [106, "code-and-documentation-contributors"], [107, "code-and-documentation-contributors"], [108, "code-and-documentation-contributors"]], "Version 0.2": [[101, "version-0-2"]], "Version 0.3": [[102, "version-0-3"]], "Version 0.4": [[103, "version-0-4"]], "Version 0.5": [[104, "version-0-5"]], "Version 0.6": [[105, "version-0-6"]], "Version 0.7": [[106, "version-0-7"]], "Version 0.8": [[107, "version-0-8"]], "Version 0.9": [[108, "version-0-9"]], "sktree.stats.build_coleman_forest": [[74, "sktree-stats-build-coleman-forest"]], "Examples using sktree.stats.build_coleman_forest": [[74, "examples-using-sktree-stats-build-coleman-forest"]], "sktree.stats.build_cv_forest": [[75, "sktree-stats-build-cv-forest"]], "sktree.stats.build_oob_forest": [[76, "sktree-stats-build-oob-forest"]], "Examples using sktree.stats.build_oob_forest": [[76, "examples-using-sktree-stats-build-oob-forest"]], "sktree.stats.build_permutation_forest": [[77, "sktree-stats-build-permutation-forest"]]}, "indexentries": {"module": [[0, "module-sktree"], [0, "module-sktree._lib.sklearn.ensemble"]], "sktree": [[0, "module-sktree"]], "sktree._lib.sklearn.ensemble": [[0, "module-sktree._lib.sklearn.ensemble"]], "extendedisolationforest (class in sktree)": [[43, "sktree.ExtendedIsolationForest"]], "decision_function() (sktree.extendedisolationforest method)": [[43, "sktree.ExtendedIsolationForest.decision_function"]], "estimators_samples_ (sktree.extendedisolationforest property)": [[43, "sktree.ExtendedIsolationForest.estimators_samples_"]], "fit() (sktree.extendedisolationforest method)": [[43, "sktree.ExtendedIsolationForest.fit"]], "fit_predict() (sktree.extendedisolationforest method)": [[43, "sktree.ExtendedIsolationForest.fit_predict"]], "get_metadata_routing() (sktree.extendedisolationforest method)": [[43, "sktree.ExtendedIsolationForest.get_metadata_routing"]], "get_params() (sktree.extendedisolationforest method)": [[43, "sktree.ExtendedIsolationForest.get_params"]], "predict() (sktree.extendedisolationforest method)": [[43, "sktree.ExtendedIsolationForest.predict"]], "score_samples() (sktree.extendedisolationforest method)": [[43, "sktree.ExtendedIsolationForest.score_samples"]], "set_fit_request() (sktree.extendedisolationforest method)": [[43, "sktree.ExtendedIsolationForest.set_fit_request"]], "set_params() (sktree.extendedisolationforest method)": [[43, "sktree.ExtendedIsolationForest.set_params"]], "extratreesclassifier (class in sktree)": [[44, "sktree.ExtraTreesClassifier"]], "apply() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.apply"]], "decision_path() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sktree.extratreesclassifier property)": [[44, "sktree.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sktree.extratreesclassifier property)": [[44, "sktree.ExtraTreesClassifier.feature_importances_"]], "fit() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.get_params"]], "partial_fit() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.partial_fit"]], "predict() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.predict"]], "predict_log_proba() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.predict_quantiles"]], "score() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.score"]], "set_fit_request() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.set_fit_request"]], "set_params() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.set_params"]], "set_partial_fit_request() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.set_partial_fit_request"]], "set_score_request() (sktree.extratreesclassifier method)": [[44, "sktree.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sktree)": [[45, "sktree.ExtraTreesRegressor"]], "apply() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.apply"]], "decision_path() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sktree.extratreesregressor property)": [[45, "sktree.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sktree.extratreesregressor property)": [[45, "sktree.ExtraTreesRegressor.feature_importances_"]], "fit() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.get_params"]], "predict() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.predict"]], "predict_quantiles() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.predict_quantiles"]], "score() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.score"]], "set_fit_request() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.set_fit_request"]], "set_params() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.set_params"]], "set_score_request() (sktree.extratreesregressor method)": [[45, "sktree.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in sktree)": [[46, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.apply"]], "decision_path() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.decision_path"]], "estimators_samples_ (sktree.honestforestclassifier property)": [[46, "sktree.HonestForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.honestforestclassifier property)": [[46, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.get_params"]], "honest_indices_ (sktree.honestforestclassifier property)": [[46, "sktree.HonestForestClassifier.honest_indices_"]], "oob_samples_ (sktree.honestforestclassifier property)": [[46, "sktree.HonestForestClassifier.oob_samples_"]], "partial_fit() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.partial_fit"]], "predict() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.honestforestclassifier method)": [[46, "sktree.HonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.honestforestclassifier property)": [[46, "sktree.HonestForestClassifier.structure_indices_"]], "multiviewrandomforestclassifier (class in sktree)": [[47, "sktree.MultiViewRandomForestClassifier"]], "apply() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.multiviewrandomforestclassifier property)": [[47, "sktree.MultiViewRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.multiviewrandomforestclassifier property)": [[47, "sktree.MultiViewRandomForestClassifier.feature_importances_"]], "fit() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.get_params"]], "oob_samples_ (sktree.multiviewrandomforestclassifier property)": [[47, "sktree.MultiViewRandomForestClassifier.oob_samples_"]], "partial_fit() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.partial_fit"]], "predict() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.predict"]], "predict_log_proba() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.predict_quantiles"]], "score() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.score"]], "set_fit_request() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.set_fit_request"]], "set_params() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.multiviewrandomforestclassifier method)": [[47, "sktree.MultiViewRandomForestClassifier.set_score_request"]], "nearestneighborsmetaestimator (class in sktree)": [[48, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[48, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[48, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[48, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[48, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[48, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[48, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[49, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestclassifier property)": [[49, "sktree.ObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[49, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.get_params"]], "oob_samples_ (sktree.obliquerandomforestclassifier property)": [[49, "sktree.ObliqueRandomForestClassifier.oob_samples_"]], "partial_fit() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[49, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[50, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestregressor property)": [[50, "sktree.ObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[50, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.get_params"]], "oob_samples_ (sktree.obliquerandomforestregressor property)": [[50, "sktree.ObliqueRandomForestRegressor.oob_samples_"]], "predict() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[50, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[51, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestclassifier property)": [[51, "sktree.PatchObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[51, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "oob_samples_ (sktree.patchobliquerandomforestclassifier property)": [[51, "sktree.PatchObliqueRandomForestClassifier.oob_samples_"]], "partial_fit() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[51, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[52, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestregressor property)": [[52, "sktree.PatchObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[52, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "oob_samples_ (sktree.patchobliquerandomforestregressor property)": [[52, "sktree.PatchObliqueRandomForestRegressor.oob_samples_"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[52, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in sktree)": [[53, "sktree.RandomForestClassifier"]], "apply() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.apply"]], "decision_path() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.randomforestclassifier property)": [[53, "sktree.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.randomforestclassifier property)": [[53, "sktree.RandomForestClassifier.feature_importances_"]], "fit() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.get_params"]], "partial_fit() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.partial_fit"]], "predict() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.predict"]], "predict_log_proba() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.predict_quantiles"]], "score() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.score"]], "set_fit_request() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.set_fit_request"]], "set_params() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.randomforestclassifier method)": [[53, "sktree.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sktree)": [[54, "sktree.RandomForestRegressor"]], "apply() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.apply"]], "decision_path() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.randomforestregressor property)": [[54, "sktree.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.randomforestregressor property)": [[54, "sktree.RandomForestRegressor.feature_importances_"]], "fit() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.get_params"]], "predict() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.predict"]], "predict_quantiles() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.predict_quantiles"]], "score() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.score"]], "set_fit_request() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.set_fit_request"]], "set_params() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.set_params"]], "set_score_request() (sktree.randomforestregressor method)": [[54, "sktree.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[55, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedobliquerandomforest property)": [[55, "sktree.UnsupervisedObliqueRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[55, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[55, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[56, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedrandomforest property)": [[56, "sktree.UnsupervisedRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[56, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[56, "sktree.UnsupervisedRandomForest.transform"]], "approximate_clf_mutual_information() (in module sktree.datasets)": [[57, "sktree.datasets.approximate_clf_mutual_information"]], "approximate_clf_mutual_information_with_monte_carlo() (in module sktree.datasets)": [[58, "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo"]], "make_gaussian_mixture() (in module sktree.datasets)": [[59, "sktree.datasets.make_gaussian_mixture"]], "make_joint_factor_model() (in module sktree.datasets)": [[60, "sktree.datasets.make_joint_factor_model"]], "make_marron_wand_classification() (in module sktree.datasets)": [[61, "sktree.datasets.make_marron_wand_classification"]], "make_quadratic_classification() (in module sktree.datasets)": [[62, "sktree.datasets.make_quadratic_classification"]], "make_trunk_classification() (in module sktree.datasets)": [[63, "sktree.datasets.make_trunk_classification"]], "make_trunk_mixture_classification() (in module sktree.datasets)": [[64, "sktree.datasets.make_trunk_mixture_classification"]], "conditional_resample() (in module sktree.experimental)": [[65, "sktree.experimental.conditional_resample"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[66, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[67, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[68, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[69, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[70, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[71, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[72, "sktree.experimental.simulate.simulate_sphere"]], "permutationhonestforestclassifier (class in sktree.stats)": [[73, "sktree.stats.PermutationHonestForestClassifier"]], "apply() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.apply"]], "decision_path() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.decision_path"]], "estimators_samples_ (sktree.stats.permutationhonestforestclassifier property)": [[73, "sktree.stats.PermutationHonestForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.stats.permutationhonestforestclassifier property)": [[73, "sktree.stats.PermutationHonestForestClassifier.feature_importances_"]], "fit() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.get_params"]], "honest_indices_ (sktree.stats.permutationhonestforestclassifier property)": [[73, "sktree.stats.PermutationHonestForestClassifier.honest_indices_"]], "oob_samples_ (sktree.stats.permutationhonestforestclassifier property)": [[73, "sktree.stats.PermutationHonestForestClassifier.oob_samples_"]], "partial_fit() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.partial_fit"]], "predict() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.predict"]], "predict_log_proba() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.predict_quantiles"]], "score() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.score"]], "set_fit_request() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.set_fit_request"]], "set_params() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.stats.permutationhonestforestclassifier method)": [[73, "sktree.stats.PermutationHonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.stats.permutationhonestforestclassifier property)": [[73, "sktree.stats.PermutationHonestForestClassifier.structure_indices_"]], "build_coleman_forest() (in module sktree.stats)": [[74, "sktree.stats.build_coleman_forest"]], "build_cv_forest() (in module sktree.stats)": [[75, "sktree.stats.build_cv_forest"]], "build_oob_forest() (in module sktree.stats)": [[76, "sktree.stats.build_oob_forest"]], "build_permutation_forest() (in module sktree.stats)": [[77, "sktree.stats.build_permutation_forest"]], "decisiontreeclassifier (class in sktree.tree)": [[78, "sktree.tree.DecisionTreeClassifier"]], "apply() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeclassifier property)": [[78, "sktree.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeclassifier method)": [[78, "sktree.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sktree.tree)": [[79, "sktree.tree.DecisionTreeRegressor"]], "apply() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeregressor property)": [[79, "sktree.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.get_params"]], "predict() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeregressor method)": [[79, "sktree.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sktree.tree)": [[80, "sktree.tree.ExtraTreeClassifier"]], "apply() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.extratreeclassifier property)": [[80, "sktree.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.fit"]], "get_depth() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.get_params"]], "partial_fit() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.partial_fit"]], "predict() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.predict_quantiles"]], "score() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.extratreeclassifier method)": [[80, "sktree.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sktree.tree)": [[81, "sktree.tree.ExtraTreeRegressor"]], "apply() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.extratreeregressor property)": [[81, "sktree.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.fit"]], "get_depth() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.get_params"]], "predict() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.predict_quantiles"]], "score() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.extratreeregressor method)": [[81, "sktree.tree.ExtraTreeRegressor.set_score_request"]], "honesttreeclassifier (class in sktree.tree)": [[82, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[82, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.get_params"]], "partial_fit() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.partial_fit"]], "predict() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "score() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.score"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.honesttreeclassifier method)": [[82, "sktree.tree.HonestTreeClassifier.set_score_request"]], "multiviewdecisiontreeclassifier (class in sktree.tree)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier"]], "apply() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.multiviewdecisiontreeclassifier property)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[83, "sktree.tree.MultiViewDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[84, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[85, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[86, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[87, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[88, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[88, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[88, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[89, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[90, "sktree.tree.compute_forest_similarity_matrix"]]}})