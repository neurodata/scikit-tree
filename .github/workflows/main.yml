name: "Build and unit tests"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.type }}
  cancel-in-progress: true

on:
  pull_request:
    paths:
      - "**.py"
      - "**.pxd"
      - "**.pyx"
  push:
    branches: [main]
    paths:
      - "**.py"
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  INSTALLDIR: "build-install"
  CCACHE_DIR: "${{ github.workspace }}/.ccache"

jobs:
  build_and_test:
    name: Meson build ${{ matrix.os }} - py${{ matrix.python-version }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-latest]
        python-version: [3.8, 3.9, "3.10"]
        poetry-version: [1.3.0]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.5.0
        with:
          python-version: ${{ matrix.python-version }}
          architecture: "x64"
          cache: "pip"
          cache-dependency-path: "requirements.txt"

      # Make sure the @v0.7.0 matches the current version of the action
      # - name: webfactory/ssh-agent
      #   uses: webfactory/ssh-agent@v0.7.0
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: show-gcc
        run: |
          gcc --version

      - name: Install Ccache for MacOSX
        if: ${{ matrix.os == 'macos-latest'}}
        run: |
          brew install ccache

      - name: Install packages for Ubuntu
        if: ${{ matrix.os == 'ubuntu-22.04'}}
        run: |
          sudo apt-get update
          sudo apt-get install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libsuitesparse-dev ccache libmpc-dev

      - name: Install Python packages
        run: |
          python -m pip install -r build_requirements.txt
          python -m pip install git+https://github.com/scientific-python/devpy
          python -m pip install -r test_requirements.txt

      - name: Prepare compiler cache
        id: prep-ccache
        shell: bash
        run: |
          mkdir -p "${CCACHE_DIR}"
          echo "dir=$CCACHE_DIR" >> $GITHUB_OUTPUT
          NOW=$(date -u +"%F-%T")
          echo "timestamp=${NOW}" >> $GITHUB_OUTPUT

      - name: Setup compiler cache
        uses: actions/cache@v3
        id: cache-ccache
        # Reference: https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
        # NOTE: The caching strategy is modeled in a way that it will always have a unique cache key for each workflow run
        # (even if the same workflow is run multiple times). The restore keys are not unique and for a partial match, they will
        # return the most recently created cache entry, according to the GitHub Action Docs.
        with:
          path: ${{ steps.prep-ccache.outputs.dir }}
          # Restores ccache from either a previous build on this branch or on main
          key: ${{ github.workflow }}-${{ matrix.python-version }}-ccache-linux-${{ steps.prep-ccache.outputs.timestamp }}
          # This evaluates to `Linux Tests-3.9-ccache-linux-` which is not unique. As the CI matrix is expanded, this will
          # need to be updated to be unique so that the cache is not restored from a different job altogether.
          restore-keys: |
            ${{ github.workflow }}-${{ matrix.python-version }}-ccache-linux-

      - name: Setup build and install scikit-tree
        run: |
          python dev.py build -j 2

      - name: Ccache performance
        shell: bash -l {0}
        run: ccache -s

      - name: build-path
        run: |
          echo "$PWD/build-install/"
          export INSTALLED_PATH=$PWD/build-install/usr/lib/python${{matrix.python-version}}/site-packages

      - name: Run unit tests and coverage
        run: |
          ./dev.py coverage
          cp $PWD/build-install/usr/lib/python${{matrix.python-version}}/site-packages/coverage.xml ./coverage.xml

      - name: debug
        run: |
          ls $PWD/build-install/usr/lib/python${{matrix.python-version}}/site-packages/
          echo "Okay..."
          ls $PWD/build
          ls ./
          
      - name: Upload coverage stats to codecov
        if: ${{ matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.10'}}
        uses: codecov/codecov-action@v3
        with:
          # python dev.py goes into the INSTALLED path in order to run pytest
          files: ./coverage.xml
          fail_ci_if_error: true
          verbose: true

      - name: Save build
        uses: actions/upload-artifact@v3
        with:
          name: sktree-build
          path: $PWD/build

  # pip-install-and-test:
  #   name: Pip install ${{ matrix.os }} - py${{ matrix.python-version }}
  #   timeout-minutes: 20
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-22.04, macos-latest]
  #       python-version: [3.8, 3.9, "3.10"]
  #       poetry-version: [1.3.0]
  #   runs-on: ${{ matrix.os }}
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Setup Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4.5.0
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         architecture: "x64"
  #         cache: "pip"
  #         cache-dependency-path: "requirements.txt"

  #     # Make sure the @v0.7.0 matches the current version of the action
  #     - uses: webfactory/ssh-agent@v0.7.0
  #       with:
  #         ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

  #     - name: show-gcc
  #       run: |
  #         gcc --version

  #     - name: Install Ccache for MacOSX
  #       if: ${{ matrix.os == 'macos-latest'}}
  #       run: |
  #         brew install ccache

  #     - name: Install packages for Ubuntu
  #       if: ${{ matrix.os == 'ubuntu-22.04'}}
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libsuitesparse-dev ccache libmpc-dev

  #     - name: Install Python packages
  #       run: |
  #         python -m pip install --upgrade pip
  #         python -m pip install -r build_requirements.txt
  #         python -m pip install -r test_requirements.txt
  #         python -m pip install .

  #     - name: Prepare compiler cache
  #       id: prep-ccache
  #       shell: bash
  #       run: |
  #         mkdir -p "${CCACHE_DIR}"
  #         echo "dir=$CCACHE_DIR" >> $GITHUB_OUTPUT
  #         NOW=$(date -u +"%F-%T")
  #         echo "timestamp=${NOW}" >> $GITHUB_OUTPUT

  #     - name: Setup compiler cache
  #       uses: actions/cache@v3
  #       id: cache-ccache
  #       # Reference: https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
  #       # NOTE: The caching strategy is modeled in a way that it will always have a unique cache key for each workflow run
  #       # (even if the same workflow is run multiple times). The restore keys are not unique and for a partial match, they will
  #       # return the most recently created cache entry, according to the GitHub Action Docs.
  #       with:
  #         path: ${{ steps.prep-ccache.outputs.dir }}
  #         # Restores ccache from either a previous build on this branch or on main
  #         key: ${{ github.workflow }}-${{ matrix.python-version }}-ccache-linux-${{ steps.prep-ccache.outputs.timestamp }}
  #         # This evaluates to `Linux Tests-3.9-ccache-linux-` which is not unique. As the CI matrix is expanded, this will
  #         # need to be updated to be unique so that the cache is not restored from a different job altogether.
  #         restore-keys: |
  #           ${{ github.workflow }}-${{ matrix.python-version }}-ccache-linux-

  #     - name: Run unit tests
  #       run: |
  #         pytest ./sktree --cov=sktree --cov-report=xml --cov-config=pyproject.toml

  #     - name: Upload coverage stats to codecov
  #       if: ${{ matrix.os == 'ubuntu-22.04' && matrix.python-version == '3.10'}}
  #       uses: codecov/codecov-action@v3
  #       with:
  #         # python dev.py goes into the INSTALLED path in order to run pytest
  #         files: ./coverage.xml
  #         fail_ci_if_error: true
  #         verbose: true

  #     - name: Ccache performance
  #       shell: bash -l {0}
  #       run: ccache -s


  build-windows:
    name: Meson build Windows
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # makes sure that SSH key allows you to pull from another repository
      # Make sure the @v0.7.0 matches the current version of the action
      - uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v4.5.0
        with:
          python-version: "3.9"
          architecture: "x64"
          cache: "pip"
          cache-dependency-path: "requirements.txt"
      - name: install-rtools
        run: |
          choco install rtools --no-progress
          echo "c:\rtools40\ucrt64\bin;" >> $env:GITHUB_PATH
      - name: pip-packages
        run: |
          pip install -r build_requirements.txt
      - name: openblas-libs
        run: |
          # Download and install pre-built OpenBLAS library
          # Built with mingw-w64, -ucrt -static.
          # https://github.com/matthew-brett/openblas-libs/blob/ucrt-build/build_openblas.ps1
          choco install unzip -y
          choco install wget -y
          wget https://github.com/scipy/scipy-ci-artifacts/raw/main/openblas_32_if.zip
          unzip -d c:\ openblas_32_if.zip
          echo "PKG_CONFIG_PATH=c:\opt\openblas\if_32\64\lib\pkgconfig;" >> $env:GITHUB_ENV
      - name: meson-configure
        run: |
          meson setup build --prefix=$PWD\build
      - name: meson-build
        run: |
          ninja -j 2 -C build
      - name: meson-install
        run: |
          cd build
          meson install
      - name: build-path
        run: |
          echo "installed_path=$PWD\build\Lib\site-packages" >> $env:GITHUB_ENV
      - name: prep-test
        run: |
          echo "PYTHONPATH=${env:installed_path}" >> $env:GITHUB_ENV
      - name: test
        run: |
          mkdir tmp
          cd tmp
          python -c 'import sktree;'

  # test:
  #   timeout-minutes: 30
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu, macos, windows]
  #       python-version: [3.8, "3.10"] # oldest and newest supported versions
  #       poetry-version: [1.3.0]
  #   name: Unit-test ${{ matrix.os }} - py${{ matrix.python-version }}
  #   runs-on: ${{ matrix.os }}-latest
  #   needs: build_and_test
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     - name: Download sktree-build
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: sktree-build

  #     - name: Setup Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4.5.0
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         architecture: "x64"

  #     - name: build-path
  #       run: |
  #         echo "installed_path=$PWD/build/usr/lib/site-packages" >> $env:GITHUB_ENV
  #         export INSTALLED_PATH=$PWD/build-install/usr/lib/python${{matrix.python-version}}/site-packages

  #     - name: prep-test
  #       run: |
  #         echo "PYTHONPATH=${env:installed_path}" >> $env:GITHUB_ENV
  #         export PYTHONPATH=$installed_path

  #     - name: Install Poetry ${{ matrix.poetry-version }}
  #       uses: abatilo/actions-poetry@v2.2.0
  #       with:
  #         poetry-version: ${{ matrix.poetry-version }}

  #     - name: Install Poetry Dynamic Versioning Plugin
  #       run: pip install poetry-dynamic-versioning
  #     - name: Install packages via poetry
  #       run: |
  #         poetry run pip install -r build_requirements.txt
  #         poetry run pip install git+https://github.com/scientific-python/devpy
  #         poetry run ./dev.py build -j 2

  #     - name: Run pytest
  #       run: poetry run ./dev.py test -- --cov=sktree --cov-report=xml
  #     - name: Upload coverage stats to codecov
  #       if: ${{ matrix.os == 'ubuntu' && matrix.python-version == '3.10'}}
  #       uses: codecov/codecov-action@v3
  #       with:
  #         files: ./coverage.xml
  #         fail_ci_if_error: true
  #         verbose: true

  # release is ran when a release is made on Github
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build_and_test]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.5.0
        with:
          python-version: 3.9
          architecture: "x64"
      - name: Install dependencies
        run: |
          python -m pip install --progress-bar off --upgrade pip setuptools wheel
          python -m pip install --progress-bar off build twine
      - name: Prepare environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Download package distribution files
        uses: actions/download-artifact@v3
        with:
          name: package
          path: dist
      # TODO: refactor scripts to generate release notes from `whats_new.rst` file instead
      # - name: Generate release notes
      #   run: |
      #     python scripts/release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md
      - name: Publish package to PyPI
        run: |
          twine upload -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }} dist/*
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # body_path: ${{ github.workspace }}-RELEASE_NOTES.md
          prerelease: ${{ contains(env.TAG, 'rc') }}
          files: |
            dist/*
