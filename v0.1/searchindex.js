Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_iris_dtc", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/plot_oblique_random_forest", "auto_examples/plot_overlapping_gaussians", "auto_examples/plot_projection_matrices", "auto_examples/sg_execution_times", "generated/sktree.HonestForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_iris_dtc.rst", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/plot_oblique_random_forest.rst", "auto_examples/plot_overlapping_gaussians.rst", "auto_examples/plot_projection_matrices.rst", "auto_examples/sg_execution_times.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst"], "titles": ["API Documentation", "Examples", "Plot the decision surface of decision trees trained on the iris dataset", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Plot honest forest calibrations on overlapping gaussian simulations", "Plot the projection matrices of an oblique tree", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "What\u2019s new?"], "terms": {"sktree": [0, 2, 3, 4, 5, 6, 32, 34], "scikit": [0, 1, 2, 14, 15, 28, 29, 32, 33, 34, 38, 40], "manifold": [0, 6, 12, 13, 26, 27, 33, 40], "obliqu": [0, 1, 2, 7, 10, 11, 12, 13, 14, 24, 25, 26, 27, 29, 31, 32, 36, 37, 40], "random": [0, 1, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 34, 36, 37, 40], "forest": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 36, 37, 40], "decis": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 33, 36, 37], "tree": [0, 1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 37, 38, 40], "model": [0, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 40], "ar": [0, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 38], "tradition": 0, "implement": [0, 6, 8, 24, 25, 33, 34, 40], "axi": [0, 1, 2, 5, 6, 7, 10, 11, 12, 13, 24, 25, 26, 27, 33, 34, 36, 40], "align": [0, 1, 2, 7, 10, 11, 12, 13, 24, 25, 26, 27, 33, 34, 36], "split": [0, 5, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35], "store": [0, 14, 15, 33, 34], "mean": [0, 3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 33, 37, 40], "outcom": 0, "i": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40], "e": [0, 6, 8, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34], "label": [0, 2, 3, 5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34, 35], "vote": [0, 8, 10, 12, 14, 15, 23], "leaf": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30, 34], "node": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35], "howev": [0, 34], "more": [0, 2, 5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 33, 34], "exot": 0, "possibl": [0, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 35], "call": [0, 8, 10, 11, 12, 13, 19, 20, 22, 25, 26, 27], "which": [0, 3, 5, 6, 8, 10, 11, 12, 13, 14, 15, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35], "some": [0, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34, 36], "multipl": [0, 6, 9, 34], "featur": [0, 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 37, 38, 39, 40], "column": [0, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 34, 40], "creat": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 32, 33], "new": [0, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 38], "valu": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34], "thi": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 38], "can": [0, 6, 8, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 40], "take": [0, 2, 14, 15, 19, 28, 29], "form": [0, 8, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 27, 28, 29, 34], "spars": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34, 36], "linear": [0, 2, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "combin": [0, 2, 10, 11, 14, 24, 25, 29, 33, 34, 35], "even": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "advantag": 0, "structur": [0, 2, 6, 8, 23, 26, 27, 35, 40], "data": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 40], "g": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34], "an": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 40], "imag": [0, 6, 26, 27], "sampl": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 40], "indic": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 34], "awar": [0, 26, 27], "fashion": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "class": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 35], "gener": [0, 1, 2, 3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 33, 34, 35, 36, 40], "while": [0, 5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "everyth": [0, 36], "els": [0, 4], "consist": [0, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 25, 27, 28, 29, 34], "how": [0, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 36], "learn": [0, 2, 8, 10, 11, 14, 15, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 36], "build": [0, 8, 10, 11, 12, 13, 23, 24, 25, 31, 32], "us": [0, 1, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 19, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 37], "classif": [0, 3, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 37], "regress": [0, 5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 37], "thei": [0, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34], "also": [0, 2, 5, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 34], "power": [0, 33], "non": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "parametr": [0, 34], "embed": 0, "cluster": [0, 5, 14, 15, 28, 29, 35], "The": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35], "randomtreesembed": 0, "exampl": [0, 2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 19, 23, 25, 27, 28, 29, 31, 35], "we": [0, 2, 5, 6, 8, 16, 20, 31, 32, 33, 34, 35, 40], "other": [0, 5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "state": 0, "art": 0, "explicitli": 0, "base": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35], "criterion": [0, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 37, 40], "varianc": [0, 8, 11, 13, 14, 15, 23, 25, 27, 28, 29, 33, 35], "bic": [0, 14, 15, 28, 29, 37], "compris": [0, 26, 27], "those": [0, 8, 10, 11, 12, 13, 21, 23, 24, 25, 33, 34], "avail": [0, 8, 10, 11, 12, 13, 14, 15, 32], "standalon": 0, "inher": [0, 14, 15], "produc": 0, "like": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35], "provid": [0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "extract": [0, 4], "pairwis": 0, "from": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 27, 31, 33, 34, 35], "includ": [0, 5, 8, 9, 10, 12, 19, 23, 24, 26, 40], "correct": 0, "turn": 0, "proper": 0, "In": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29, 33, 34, 35, 40], "addit": [0, 14, 15, 28, 29, 34], "leav": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30], "natur": [0, 20, 35], "wai": [0, 35], "comput": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 40], "neighbor": [0, 5, 9, 19], "nearest": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29], "interfac": 0, "similar": [0, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 40], "nearestneighbor": [0, 9, 19], "work": [0, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "progress": 0, "help": [0, 23, 24, 25, 26, 27], "simul": [0, 1, 7, 8, 10, 33, 36], "evalu": [0, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 37], "mutual": [0, 16, 17, 18, 19, 20, 22, 40], "inform": [0, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 40], "mi": [0, 19, 21], "condit": [0, 12, 13, 16, 19, 26, 27, 40], "cmi": [0, 16, 19, 21], "estim": [0, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 40], "specif": [0, 6, 8, 10, 12, 34], "multivari": [0, 3, 6, 16, 17, 18, 21, 26, 27], "gaussian": [0, 1, 7, 8, 16, 17, 18, 21, 35, 36], "analyt": [0, 16, 17, 18, 19, 21], "solut": [0, 8, 10, 11, 12, 13, 16, 17, 18, 19], "entropi": [0, 8, 10, 12, 16, 17, 18, 21, 23, 24, 26], "distribut": [0, 3, 16, 17, 18, 20, 21, 22, 34, 35], "demonstr": [1, 6, 36], "algorithm": [1, 9, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 31, 34, 36], "plot": [1, 7, 8, 10, 24, 26, 33, 36], "honest": [1, 7, 8, 23, 36, 37], "calibr": [1, 7, 8, 34, 36], "overlap": [1, 7, 8, 36], "predict": [1, 2, 5, 7, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34, 36], "cc18": [1, 7, 10, 33, 36], "dataset": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36], "pariti": [1, 7, 10, 33, 36], "surfac": [1, 6, 7, 24, 36], "train": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36], "iri": [1, 7, 23, 24, 34, 36], "project": [1, 4, 7, 10, 11, 24, 25, 26, 32, 33, 34, 36, 40], "matric": [1, 7, 14, 15, 26, 34, 36, 40], "download": [1, 2, 3, 4, 5, 6, 36], "all": [1, 2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 35, 36, 38, 40], "python": [1, 2, 3, 4, 5, 6, 32, 36], "sourc": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 36], "code": [1, 2, 3, 4, 5, 6, 28, 29, 32, 36], "auto_examples_python": [1, 36], "zip": [1, 2, 5, 36], "jupyt": [1, 2, 3, 4, 5, 6, 36], "notebook": [1, 2, 3, 4, 5, 6, 36], "auto_examples_jupyt": [1, 36], "galleri": [1, 2, 3, 4, 5, 6, 36], "sphinx": [1, 2, 3, 4, 5, 6, 36], "click": [2, 3, 4, 5, 6], "here": [2, 3, 4, 5, 6, 8, 34, 36, 40], "full": [2, 3, 4, 5, 6], "pair": [2, 30, 34], "see": [2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35], "For": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35], "each": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35], "boundari": [2, 6, 9, 12, 13, 26, 27, 40], "made": 2, "simpl": [2, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "threshold": [2, 34], "rule": 2, "infer": [2, 23, 24, 25, 26, 27], "same": [2, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 26, 27, 30, 33, 34], "regular": [2, 5], "show": [2, 3, 5, 6], "built": [2, 33, 34], "first": [2, 3, 8, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34], "load": [2, 4], "copi": 2, "ship": 2, "sklearn": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35], "import": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 34, 37], "load_iri": [2, 23, 24, 34], "matplotlib": [2, 3, 4, 5, 6, 32], "pyplot": [2, 3, 4, 5, 6], "plt": [2, 3, 4, 5, 6], "displai": 2, "function": [2, 8, 10, 11, 12, 13, 14, 15, 19, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34], "numpi": [2, 3, 5, 6, 8, 10, 11, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29, 32], "np": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "inspect": [2, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "decisionboundarydisplai": 2, "_lib": [2, 6], "decisiontreeclassifi": [2, 8, 23, 24, 25], "plot_tre": 2, "obliquedecisiontreeclassifi": [2, 10, 12, 25, 34], "paramet": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35], "n_class": [2, 8, 10, 11, 12, 23, 24, 26], "3": [2, 3, 5, 6, 8, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33], "plot_color": 2, "ryb": 2, "plot_step": 2, "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 38], "02": [2, 7], "clf_label": 2, "random_st": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "123456": [2, 3, 4], "clf": [2, 3, 4, 5, 8, 10, 23, 24, 34], "fig": [2, 3, 4, 5, 6], "ax": [2, 3, 4, 5, 6, 34], "subplot": [2, 3, 4, 5, 6], "2": [2, 3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35], "flatten": [2, 6], "pairidx": 2, "enumer": [2, 3, 4, 6, 8, 10, 11, 12, 13], "1": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 38], "onli": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "two": [2, 4, 5, 14, 15, 33, 34, 37, 40], "correspond": [2, 8, 10, 12, 13, 23, 24, 25, 26, 27, 28, 29], "x": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35], "y": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 34], "target": [2, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34], "fit": [2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34], "tight_layout": [2, 5], "h_pad": 2, "5": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 27, 28, 29, 33, 34], "w_pad": 2, "pad": 2, "from_estim": 2, "cmap": [2, 6], "cm": [2, 5], "rdylbu": 2, "response_method": 2, "xlabel": 2, "feature_nam": 2, "ylabel": 2, "point": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 27, 28, 29, 35], "color": [2, 3, 4, 5, 6], "rang": [2, 3, 6, 9, 26, 27], "idx": [2, 6], "where": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 40], "scatter": [2, 5, 6], "c": [2, 5, 17, 18, 23, 24, 25, 26, 27, 32], "target_nam": 2, "edgecolor": [2, 5], "black": [2, 6], "": [2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 38], "15": 2, "suptitl": [2, 6], "f": [2, 3, 4, 6], "legend": [2, 3, 5], "loc": [2, 3, 5], "lower": [2, 8, 20, 22, 23, 34], "right": [2, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "borderpad": 2, "handletextpad": 2, "_": 2, "tight": 2, "user": [2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 40], "adam2392": [2, 5], "document": [2, 31, 33], "plot_iris_dtc": [2, 7], "py": [2, 3, 4, 5, 6, 7], "78": 2, "userwarn": 2, "No": 2, "colormap": 2, "via": [2, 24, 25, 32, 33, 40], "ignor": [2, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "singl": [2, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "togeth": [2, 34, 35], "figur": [2, 5, 6], "fill": 2, "true": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 24, 25, 26, 27, 28, 29, 35], "titl": [2, 6], "total": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 35], "run": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 32, 34], "time": [2, 3, 4, 5, 6, 14, 15, 20, 24, 25, 26, 27, 30, 34], "script": [2, 3, 4, 5, 6], "minut": [2, 3, 4, 5, 6], "006": [2, 7], "second": [2, 3, 4, 5, 6, 34], "ipynb": [2, 3, 4, 5, 6], "A": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 28, 29, 34, 40], "perform": [3, 4, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 35], "comparison": [3, 4], "between": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "standard": [3, 4, 9, 19, 21, 26, 27, 34], "variat": 3, "noisi": 3, "problem": [3, 8, 10, 12, 23, 24, 26, 31, 37], "itself": [3, 14, 15, 19], "xor": 3, "binari": 3, "task": [3, 31], "high": [3, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "dimens": [3, 6, 8, 10, 11, 12, 13, 14, 15, 20, 26, 27, 28, 29, 34], "uniformli": [3, 6], "n_sampl": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "number": [3, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35], "p": [3, 5, 8, 10, 12, 20, 33], "limit": [3, 9, 37], "carri": [3, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "about": [3, 34], "defin": [3, 5, 6, 8, 10, 11, 12, 13, 14, 15, 19, 20, 23, 24, 25, 26, 27, 28, 29, 35], "odd": 3, "sum": [3, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "across": [3, 8, 10, 12, 14, 15, 23, 24, 25, 26, 27, 28, 29], "greater": [3, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "than": [3, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 35], "otherwis": [3, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "further": 3, "detail": [3, 4, 6, 8, 9, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29], "public": [3, 6, 33], "http": [3, 4, 15, 23, 24, 25, 32, 34], "epub": 3, "siam": 3, "org": [3, 4, 15, 23, 24, 25, 32, 34], "doi": [3, 15, 34], "epdf": 3, "10": [3, 5, 15, 23, 24, 25, 27, 34], "1137": 3, "9781611974973": 3, "56": 3, "It": [3, 4, 8, 10, 11, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29, 31, 34, 35], "took": [3, 4], "4": [3, 5, 6, 8, 10, 11, 12, 13, 23, 24, 25, 26], "datetim": [3, 4], "panda": [3, 4, 14, 15, 28, 29, 40], "pd": [3, 4, 21], "seaborn": [3, 4], "sn": [3, 4], "ensembl": [3, 4, 5, 8, 10, 11, 12, 13, 14, 15, 33], "randomforestclassifi": [3, 4, 5, 10, 12], "model_select": [3, 4, 5, 23, 24, 25, 27], "repeatedkfold": [3, 4], "cross_valid": [3, 4], "obliquerandomforestclassifi": [3, 4, 33], "t0": [3, 4], "now": [3, 4, 6, 32, 40], "def": [3, 4, 5], "sparse_par": 3, "20": [3, 15], "p_star": 3, "random_se": [3, 19, 20, 22], "none": [3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "kwarg": [3, 4], "seed": [3, 14, 15, 19, 20, 21, 22], "uniform": [3, 8, 19, 20, 22, 23], "zero": [3, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "return": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "get_scor": [3, 4], "n_cv": [3, 4], "n_repeat": [3, 4], "tmp": [3, 4], "cv": [3, 4, 5, 23, 24, 25, 27], "n_split": [3, 4], "test_scor": [3, 4], "score": [3, 4, 8, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27], "accuraci": [3, 4, 8, 10, 11, 12, 13, 24, 26], "append": [3, 4], "rf": [3, 4, 5, 34], "OF": [3, 4], "df": [3, 4], "datafram": [3, 4, 14, 15, 28, 29], "explod": [3, 4], "astyp": [3, 4, 6], "float": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29], "reset_index": [3, 4], "inplac": [3, 4], "drop": [3, 4, 34], "grid": [3, 6], "search": [3, 4, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "hyper": 3, "param": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "max_featur": [3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "n_estim": [3, 4, 5, 8, 10, 11, 12, 13, 14, 15], "100": [3, 4, 5, 6, 8, 10, 11, 12, 13, 14, 15], "max_depth": [3, 4, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "40": 3, "1000": [3, 8, 10, 20, 21, 22], "t_d": 3, "print": [3, 4, 6, 8, 10, 11, 13], "draw": [3, 4, 8, 10, 11, 12, 13, 14, 15], "figsiz": [3, 5, 6], "6": [3, 4, 6, 32], "stripplot": [3, 4], "dodg": [3, 4], "boxplot": [3, 4], "white": [3, 4], "set_titl": [3, 4], "queri": [3, 4, 9], "iloc": [3, 4], "rff": 3, "test": [3, 5, 8, 10, 11, 12, 13, 21, 23, 24, 25, 26, 27, 32], "round": [3, 8, 10, 11, 12, 13], "off": [3, 20], "savefig": [3, 5], "plot_sim_": 3, "jpg": 3, "445": [3, 7], "plot_oblique_axis_aligned_forests_sparse_par": [3, 7], "three": 4, "openml": 4, "benchmark": [4, 31], "suit": 4, "name": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "wdbc": 4, "www": [4, 23, 24, 25], "type": [4, 8, 23, 34, 40], "sort": [4, 5, 8, 9, 35], "id": 4, "1510": 4, "phish": 4, "websit": 4, "4534": 4, "31": 4, "former": 4, "entir": [4, 12, 13, 26, 27], "numer": 4, "latter": [4, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "normin": 4, "third": 4, "dub": 4, "cnae": 4, "9": [4, 5, 6, 32, 40], "statu": 4, "activ": [4, 32], "1468": 4, "ha": [4, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34, 40], "notabl": 4, "larg": [4, 8, 10, 11, 12, 13, 23, 24, 25], "space": [4, 9, 14, 15, 17, 19, 28, 29, 34], "857": 4, "As": [4, 30, 34], "you": [4, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 32, 36], "notic": 4, "outperform": [4, 34], "util": [4, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "mechan": [4, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "subsampl": [4, 8, 23, 34], "due": [4, 17], "constraint": 4, "phishingwebsit": 4, "fetch_openml": 4, "data_id": 4, "load_cc18": 4, "as_fram": 4, "parser": 4, "d_name": 4, "n": [4, 8, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 40], "int": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "frame": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33], "8": [4, 6, 20, 23, 32], "dtype": [4, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "object": [4, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 35], "50": [4, 5], "concat": 4, "uniqu": [4, 5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "set_size_inch": 4, "set_ylabel": [4, 5], "set_xlabel": [4, 5], "7": 4, "825": [4, 7], "plot_oblique_random_forest": [4, 7], "compar": [5, 24, 25, 26, 27, 37], "result": [5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34, 35], "variou": [5, 10, 11, 12, 13], "method": [5, 8, 9, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35], "achiev": [5, 31, 33], "improv": [5, 8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 33, 34, 40], "guid": [5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 35, 40], "isoton": 5, "irf": 5, "sigmoid": 5, "sigrf": 5, "without": [5, 35], "curv": [5, 34], "differ": [5, 9, 23, 24, 25, 26, 27, 28, 29, 37], "red": 5, "line": 5, "closest": 5, "ideal": [5, 32], "reproduc": 5, "ronan": [5, 12, 13, 26, 27, 40], "perri": [5, 12, 13, 26, 27, 40], "ronak": [5, 12, 13, 26, 27], "mehta": [5, 12, 13, 26, 27], "richard": 5, "guo": 5, "eva": 5, "yezeret": 5, "jes\u00fa": 5, "arroyo": [5, 12, 13, 26, 27], "mike": 5, "powel": 5, "hayden": 5, "helm": 5, "cencheng": 5, "shen": 5, "joshua": [5, 12, 13, 15, 26, 27], "t": [5, 8, 10, 11, 12, 13, 15, 23, 24, 25, 26, 27, 28, 29, 34], "vogelstein": [5, 12, 13, 15, 26, 27], "adapt": [5, 14, 15, 17, 35], "theoret": 5, "quantiti": 5, "arxiv": [5, 12, 13, 26, 27, 33], "2021": 5, "1907": 5, "00325": 5, "necessari": [5, 32], "modul": [5, 6, 31], "librari": [5, 38, 40], "calibratedclassifiercv": 5, "train_test_split": 5, "honestforestclassifi": [5, 40], "classifi": [5, 8, 10, 12, 23, 24, 25, 26], "color_dict": 5, "honestrf": 5, "f41711": 5, "1b9e77": 5, "377eb8": 5, "fdae61": 5, "n_job": [5, 8, 9, 10, 11, 12, 13, 14, 15, 19], "clf_cv": 5, "rep": 5, "honest_fract": [5, 8, 23], "base_estim": 5, "likelihood": [5, 35], "lik1": 5, "prod": 5, "exp": 5, "asarrai": 5, "lik0": 5, "60000": 5, "n_bin": 5, "bin": 5, "calibration_curv": 5, "have": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "blob": 5, "contain": [5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "half": 5, "posit": [5, 33, 35], "neg": [5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "probabl": [5, 8, 10, 12, 14, 15, 23, 24, 26, 34], "therefor": [5, 8, 10, 11, 12, 13, 26, 27, 33, 34], "center": [5, 14, 15, 28, 29], "make_blob": 5, "shuffl": [5, 8, 10, 11, 13], "fals": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 20, 22, 23, 24, 25, 26, 27, 28, 29], "42": [5, 33], "sample_weight": [5, 6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "randomst": [5, 6, 8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29], "rand": 5, "x_train": 5, "x_test": 5, "y_train": 5, "y_test": 5, "sw_train": 5, "sw_test": 5, "test_siz": 5, "class_one_prob": 5, "predict_proba": [5, 8, 10, 12, 23, 24, 26], "miniforge3": 5, "env": 5, "lib": 5, "python3": 5, "site": 5, "packag": [5, 31, 32], "300": 5, "futurewarn": 5, "wa": [5, 8, 10, 11, 12, 14, 15, 34], "renam": 5, "version": [5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 38], "remov": 5, "warn": [5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "y_uniqu": 5, "rainbow": 5, "linspac": 5, "size": [5, 6, 8, 9, 10, 11, 12, 13, 23, 24, 25, 26, 27, 34], "this_i": 5, "this_x": 5, "this_sw": 5, "newaxi": 5, "alpha": [5, 6, 20, 22, 23, 24, 25, 26, 27, 28, 29], "k": [5, 9, 19], "best": [5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "set_xtick": 5, "set_ytick": 5, "clf_name": 5, "prob": 5, "item": 5, "order": [5, 8, 10, 11, 12, 23, 24, 25, 26, 27], "lexsort": 5, "51": 5, "reshap": [5, 6], "25": [5, 6], "x_test_prob": 5, "linewidth": 5, "l": [5, 23, 24, 25, 33, 34, 35], "r": [5, 8, 10, 11, 12, 13, 19, 20, 23, 24, 25, 26, 27, 32, 34], "truth": [5, 34], "set_ylim": 5, "05": [5, 7], "instanc": [5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "upper": 5, "left": [5, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "overlapping_gaussian": 5, "png": 5, "discuss": 5, "well": [5, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "closer": 5, "shown": [5, 16], "below": 5, "253": [5, 7], "plot_overlapping_gaussian": [5, 7], "patchobliquedecisiontreeclassifi": [6, 12], "one": [6, 8, 10, 11, 12, 13, 14, 15, 19, 20, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35], "specifi": [6, 8, 10, 12, 23, 24, 26, 34], "done": [6, 26, 27, 33], "data_dim": [6, 12, 13, 26, 27], "should": [6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 32], "set": [6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35], "n_row": 6, "n_col": 6, "row": [6, 26, 27], "arrai": [6, 8, 9, 10, 11, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29, 33], "length": [6, 9], "If": [6, 8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 34], "n_depth": 6, "allow": [6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34], "ani": [6, 8, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 40], "still": [6, 8], "compat": [6, 14, 15, 28, 29], "robust": [6, 31], "api": [6, 9, 14, 15, 26, 27, 28, 29, 31, 32, 38, 39, 40], "These": [6, 33], "calcul": [6, 30, 35], "dure": [6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "hyperrectangl": 6, "start": [6, 32], "squar": [6, 11, 13, 25, 27], "min_patch_dim": [6, 12, 13, 26, 27], "max_patch_dim": [6, 12, 13, 26, 27], "constrain": [6, 34], "within": [6, 9, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 32], "bound": [6, 20, 22], "arbitrarili": [6, 11, 13, 25, 27], "hyperparamet": [6, 34], "relat": 6, "note": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 32, 34, 38], "privat": 6, "cython": [6, 28, 29, 32], "what": [6, 23, 24, 25, 26, 27, 28, 29, 31, 38], "look": [6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 36], "part": 6, "just": [6, 8, 10, 11, 12, 13, 20, 32], "wrapper": 6, "underli": [6, 23, 24, 25, 26, 27], "actual": 6, "To": [6, 8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 32, 36], "relev": [6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31], "_criterion": 6, "gini": [6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "_morf_splitt": 6, "bestpatchsplittertest": 6, "dummi": 6, "sake": 6, "min_samples_leaf": [6, 8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "min_weight_leaf": 6, "feature_weight": [6, 12, 13, 26, 27], "repeat": [6, 20], "arang": 6, "float32": [6, 8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "float64": [6, 25, 27], "ones": 6, "our": [6, 31, 34], "th": [6, 8, 10, 11, 12, 13, 14, 15], "visual": 6, "appear": 6, "make": [6, 33, 40], "contigu": [6, 12, 13, 26, 27], "dim_contigu": [6, 12, 13, 26, 27], "init_test": 6, "matrix": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 23, 24, 25, 26, 27, 28, 29, 30, 34], "proj_mat": 6, "sample_projection_matrix": 6, "nrow": 6, "ncol": 6, "12": 6, "sharex": 6, "sharei": 6, "squeez": 6, "imshow": 6, "viridi": 6, "xlim": 6, "ylim": 6, "add_subplot": 6, "z": [6, 16, 19, 20, 22], "nonzero": 6, "marker": 6, "o": [6, 34, 40], "custom": [6, 14, 15], "set_zlim": 6, "01": 6, "125": 6, "analyz": 6, "necessarili": [6, 9, 33], "certain": 6, "seri": [6, 26, 27], "n_channel": 6, "n_time": 6, "channel": 6, "dim": 6, "873": [6, 7], "plot_projection_matric": [6, 7], "00": 7, "22": [7, 9], "401": 7, "execut": 7, "auto_exampl": 7, "file": [7, 32], "07": 7, "mb": 7, "04": 7, "splitter": [8, 23, 24, 25, 26, 27, 28, 29], "min_samples_split": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "min_weight_fraction_leaf": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "sqrt": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "max_leaf_nod": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "min_impurity_decreas": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "bootstrap": [8, 10, 11, 12, 13, 14, 15, 33], "oob_scor": [8, 10, 11, 12, 13, 14, 15], "verbos": [8, 10, 11, 12, 13, 14, 15, 32], "warm_start": [8, 10, 11, 12, 13, 14, 15], "class_weight": [8, 10, 12, 23, 24, 26], "ccp_alpha": [8, 23, 24, 25, 26, 27, 28, 29], "max_sampl": [8, 10, 11, 12, 13, 14, 15], "honest_prior": [8, 23], "empir": [8, 23, 34], "tree_estim": [8, 23], "default": [8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 34], "measur": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 35], "qualiti": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34, 35], "support": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 32, 34, 40], "criteria": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 35], "impur": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34], "gain": [8, 10, 12, 23, 24, 26], "strategi": [8, 23, 24, 25, 26, 27, 28, 29], "choos": [8, 23, 24, 25, 26, 27, 28, 29], "maximum": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 35], "depth": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "expand": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "until": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "pure": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "less": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "minimum": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "requir": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "intern": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "consid": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "fraction": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "ceil": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "least": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "branch": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "mai": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 35], "effect": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 36], "smooth": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "especi": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "weight": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34, 40], "input": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34], "equal": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "when": [8, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 27, 28, 29, 34, 38], "log2": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "n_featur": [8, 9, 10, 11, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34], "auto": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "doe": [8, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 33, 34], "stop": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27], "valid": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "partit": [8, 10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 34], "found": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "grow": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "rel": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 35], "reduct": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "unlimit": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "induc": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "decreas": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "equat": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "follow": [8, 10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35], "n_t": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "n_t_r": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "right_impur": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "n_t_l": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "left_impur": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "current": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 32, 34], "child": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "refer": [8, 10, 11, 12, 13, 14, 15, 17, 23, 24, 25, 26, 27, 28, 29], "pass": [8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 25, 26, 27, 28, 29, 34, 40], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 20, 22, 23, 24, 25, 26, 27, 28, 29], "whether": [8, 9, 10, 11, 12, 13, 14, 15, 20, 22, 23, 24, 25, 26, 27, 28, 29], "whole": [8, 10, 11, 12, 13], "out": [8, 10, 11, 12, 13, 14, 15, 33], "bag": [8, 10, 11, 12, 13, 14, 15], "job": [8, 9, 10, 11, 12, 13, 19], "parallel": [8, 9, 10, 11, 12, 13, 14, 15, 19], "decision_path": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "appli": [8, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 30], "over": [8, 10, 11, 12, 13, 26, 27, 33], "unless": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "joblib": [8, 10, 11, 12, 13, 14, 15, 32], "parallel_backend": [8, 10, 11, 12, 13], "context": [8, 10, 11, 12, 13], "processor": [8, 10, 11, 12, 13], "glossari": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27], "control": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 33, 34], "both": [8, 10, 11, 12, 13, 34], "reus": [8, 10, 11, 12, 13], "previou": [8, 10, 11, 12, 13, 14, 15], "add": [8, 10, 11, 12, 13, 20, 22, 32, 40], "balanc": [8, 10, 12, 23, 24, 26], "balanced_subsampl": [8, 10, 12], "dict": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "list": [8, 10, 11, 12, 13, 14, 15, 16, 23, 24, 25, 26, 27, 28, 29, 40], "associ": [8, 10, 12, 15, 23, 24, 26, 34], "class_label": [8, 10, 12, 23, 24, 26], "given": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 34, 35], "suppos": [8, 10, 12, 23, 24, 26], "multi": [8, 10, 11, 12, 13, 14, 15, 23, 24, 26, 37, 40], "output": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 37, 40], "multioutput": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27], "multilabel": [8, 10, 12, 23, 24, 26], "everi": [8, 10, 12, 13, 23, 24, 26, 27, 34], "its": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 26, 34], "own": [8, 9, 10, 12, 23, 24, 26], "four": [8, 10, 12, 23, 24, 26], "instead": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "mode": [8, 10, 12, 23, 24, 26, 32], "automat": [8, 10, 12, 23, 24, 26], "adjust": [8, 10, 12, 23, 24, 26], "invers": [8, 10, 12, 23, 24, 26], "proport": [8, 10, 12, 23, 24, 26], "frequenc": [8, 10, 12, 23, 24, 26], "bincount": [8, 10, 12, 23, 24, 26], "except": [8, 10, 11, 12, 13, 25, 27, 33], "grown": [8, 10, 11, 12, 13, 23, 24, 25], "multipli": [8, 10, 12, 23, 24, 26], "through": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31], "complex": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 37], "minim": [8, 11, 13, 23, 24, 25, 26, 27, 28, 29, 34, 35], "cost": [8, 23, 24, 25, 26, 27, 28, 29, 33, 34], "prune": [8, 23, 24, 25, 26, 27, 28, 29, 34], "subtre": [8, 23, 24, 25, 26, 27, 28, 29], "largest": [8, 20, 23], "smaller": [8, 23], "chosen": [8, 23], "By": [8, 14, 15, 20, 21, 23, 28, 29, 33], "thu": [8, 10, 11, 12, 13, 14, 15, 24, 25, 33, 34, 35], "interv": [8, 10, 11, 12, 13, 14, 15, 34], "deal": [8, 23], "empti": [8, 23], "prior": [8, 23, 34, 35], "posterior": [8, 23], "remain": [8, 23], "larger": [8, 23, 33], "shallow": [8, 23], "etc": [8, 10, 11, 12, 13, 19, 23, 24, 25], "lead": [8, 10, 11, 12, 13, 23, 24, 25, 33], "fulli": [8, 10, 11, 12, 13, 23, 24, 25], "unprun": [8, 10, 11, 12, 13, 23, 24, 25], "potenti": [8, 10, 11, 12, 13, 23, 24, 25, 27], "veri": [8, 10, 11, 12, 13, 23, 24, 25], "reduc": [8, 10, 11, 12, 13, 23, 24, 25, 33], "memori": [8, 10, 11, 12, 13, 23, 24, 25], "consumpt": [8, 10, 11, 12, 13, 23, 24, 25], "alwai": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 32, 34], "randomli": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29], "permut": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 33], "vari": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "ident": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29], "sever": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29, 33], "obtain": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "determinist": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29], "behaviour": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27, 28, 29], "fix": [8, 10, 11, 12, 13, 19, 23, 24, 25, 26, 27, 28, 29, 38, 39, 40], "honesti": [8, 34], "enabl": 8, "unbias": 8, "confid": [8, 34], "doubl": 8, "amount": 8, "v": [8, 11, 13, 25, 27, 33, 34], "enforc": 8, "access": 8, "subset": [8, 10, 12, 24, 26, 34], "ineffici": 8, "greedi": 8, "recommend": [8, 14, 15, 24, 25, 26, 27, 31, 34], "propens": [8, 34], "causal": 8, "meta": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "becaus": [8, 9, 11, 13, 25, 27, 34], "process": [8, 20, 23, 24, 25, 26, 27, 28, 29], "separ": 8, "breiman": [8, 10, 11, 23, 24, 25, 33, 34], "machin": [8, 10, 11, 33, 34], "45": [8, 10, 11, 17, 33, 34, 40], "32": [8, 10, 11, 33, 34], "2001": [8, 10, 11, 33, 34], "athei": [8, 23], "j": [8, 23, 24, 25, 32, 34], "tibshirani": [8, 23, 24, 25, 34], "wager": [8, 23], "annal": [8, 23], "statist": [8, 23, 24, 25, 33, 34], "2019": [8, 12, 13, 23, 26, 27, 33], "honest_forest": [8, 23], "make_classif": [8, 10], "n_inform": [8, 10, 11, 13], "n_redund": [8, 10], "attribut": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "honesttreeclassifi": [8, 40], "templat": [8, 14, 15, 23], "collect": [8, 10, 11, 12, 13, 14, 15, 23], "sub": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "estimators_": [8, 10, 11, 12, 13, 14, 15], "classes_": [8, 10, 12, 23, 24, 26], "ndarrai": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "n_classes_": [8, 10, 12, 23, 24, 26], "n_features_": [8, 10, 11, 12, 13], "n_features_in_": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "seen": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27], "feature_names_in_": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27], "string": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "n_outputs_": [8, 10, 11, 12, 13, 23, 24, 25, 26, 27], "feature_importances_": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "oob_score_": [8, 10, 11, 12, 13, 14, 15], "exist": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "oob_decision_function_": [8, 10, 11, 12, 14, 15], "n_output": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "small": [8, 10, 11, 12, 14, 15], "might": [8, 10, 11, 12, 14, 15, 34], "never": [8, 10, 11, 12, 14, 15], "case": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "nan": [8, 10, 11, 12, 14, 15, 23], "honest_decision_function_": 8, "structure_indices_": [8, 23], "n_structur": [8, 23], "honest_indices_": [8, 23], "n_honest": [8, 23], "array_lik": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "convert": [8, 9, 10, 11, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29], "csr_matrix": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "x_leav": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "datapoint": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "index": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 34], "end": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30], "up": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 30, 34], "path": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "18": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "n_node": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "element": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "goe": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "csr": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "format": [8, 10, 11, 12, 13, 14, 15, 28, 29], "n_nodes_ptr": [8, 10, 11, 12, 13, 14, 15], "give": [8, 10, 11, 12, 13, 14, 15, 24, 25], "csc_matrix": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "real": [8, 10, 11, 12, 13, 25, 27], "would": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 32, 34], "net": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "either": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "self": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "get_leaf_node_sampl": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "get": [8, 9, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 30], "leaf_node_sampl": [8, 10, 11, 12, 13, 14, 15], "repres": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "reach": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "n_leaf_node_sampl": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "sinc": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 40], "fall": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "variabl": [8, 10, 11, 12, 13, 14, 15, 16, 20, 23, 24, 25, 26, 27, 28, 29, 33, 34], "get_metadata_rout": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "metadata": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "rout": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "pleas": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "check": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "metadatarequest": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "encapsul": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "get_param": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "deep": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "subobject": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "map": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "That": [8, 10, 12, 14, 15, 23, 24, 25, 26, 27, 28, 29], "highest": [8, 10, 12, 14, 15, 23, 24], "predict_log_proba": [8, 10, 12, 24, 26], "log": [8, 10, 12, 17, 18, 24, 26, 34, 35], "predict_quantil": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "quantil": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "option": [8, 9, 10, 11, 12, 13, 14, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32], "median": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "str": [8, 9, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29], "interpol": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "keyword": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "argument": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "accept": [8, 10, 11, 12, 13, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29], "n_quantil": [8, 10, 11, 12, 13, 14, 15], "present": [8, 9, 10, 11, 12, 13, 14, 15, 28, 29, 34], "regressor": [8, 10, 11, 12, 13, 14, 15, 25, 27], "harsh": [8, 10, 12, 24, 26], "metric": [8, 9, 10, 12, 14, 15, 19, 24, 26, 31, 35], "correctli": [8, 10, 12, 24, 26], "w": [8, 10, 11, 12, 13, 24, 25, 26, 27], "set_fit_request": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "unchang": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "request": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31], "enable_metadata_rout": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "set_config": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "rais": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "error": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "alia": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "origin": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34], "metadata_rout": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "retain": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "chang": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 38, 39, 40], "insid": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 40], "pipelin": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "updat": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "set_param": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "nest": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "compon": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "__": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "so": [8, 9, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "set_score_request": [8, 10, 11, 12, 13, 24, 25, 26, 27], "properti": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 34], "base_estimator_": [8, 10, 11, 12, 13, 14, 15], "higher": [8, 10, 11, 12, 13, 14, 15, 33, 34], "normal": [8, 10, 11, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29, 33, 34, 40], "brought": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "known": [8, 10, 11, 12, 13, 14, 15, 21, 23, 24, 25, 26, 27, 28, 29, 33], "mislead": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "cardin": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "mani": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34], "permutation_import": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "altern": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 33], "root": [8, 10, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29], "n_neighbor": 9, "radiu": [9, 19, 20, 22], "distanc": [9, 14, 15, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35], "basedecisiontre": [9, 23, 30], "baseforest": [9, 30], "kneighbor": 9, "radius_neighbor": 9, "return_dist": 9, "find": [9, 11, 13, 23, 24, 25, 26, 27, 28, 29, 35], "n_queri": 9, "n_index": 9, "precomput": [9, 11, 13, 25, 27], "Not": [9, 14, 15, 28, 29], "convent": [9, 14, 15, 28, 29], "constructor": 9, "neigh_dist": 9, "neigh_ind": 9, "popul": 9, "sort_result": 9, "ly": 9, "ball": 9, "around": 9, "increas": [9, 24, 25, 33], "befor": [9, 20, 23, 24, 25, 26, 27, 28, 29], "being": [9, 34], "accord": 9, "approxim": 9, "lie": 9, "cannot": 9, "effici": [9, 14, 15, 25, 27, 38, 39, 40], "1d": [9, 12, 13, 26, 27], "feature_combin": [10, 11, 14, 24, 25, 29, 33, 34], "averag": [10, 11, 12, 13, 14, 19, 24, 25, 29, 33], "read": [10, 11, 24, 25], "equival": [10, 11, 24, 25, 34], "tradit": [10, 11, 24, 25], "expect": [10, 11, 13, 19, 24, 25, 26, 27, 33], "must": [10, 11, 20, 24, 25, 28, 29], "compute_similarity_matrix": [10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29], "sim_matrix": [10, 11, 12, 13, 14, 15, 24, 25, 26, 27, 28, 29], "among": [10, 11, 12, 13, 14, 15, 20, 23, 24, 25, 26, 27, 28, 29], "squared_error": [11, 13, 25, 27], "absolute_error": [11, 13, 25, 27], "friedman_ms": [11, 13, 25, 27], "poisson": [11, 13, 25, 27], "select": [11, 13, 23, 24, 25, 26, 27, 28, 29, 33], "l2": [11, 13, 25, 27], "loss": [11, 13, 25, 27, 34], "termin": [11, 13, 25, 27], "friedman": [11, 13, 23, 24, 25, 27, 34], "absolut": [11, 13, 25, 27], "l1": [11, 13, 25, 27], "devianc": [11, 13, 25, 27], "significantli": [11, 13], "slower": [11, 13], "obliquedecisiontreeregressor": [11, 13, 40], "randomforestregressor": [11, 13], "tomita": [11, 12, 13, 26, 27, 33], "journal": 11, "research": [11, 31], "21": [11, 40], "104": 11, "39": 11, "2020": [11, 15], "make_regress": [11, 13], "regr": 11, "86327109": 11, "coeffici": [11, 13, 25, 27], "determin": [11, 13, 25, 27, 34], "frac": [11, 13, 17, 18, 25, 27, 35], "u": [11, 13, 25, 27, 32, 33], "residu": [11, 13, 25, 27], "y_true": [11, 13, 25, 27], "y_pred": [11, 13, 25, 27], "wors": [11, 13, 25, 27], "constant": [11, 13, 25, 27], "disregard": [11, 13, 25, 27], "kernel": [11, 13, 25, 27, 40], "n_samples_fit": [11, 13, 25, 27], "uniform_averag": [11, 13, 25, 27], "23": [11, 13, 25, 27, 32], "keep": [11, 13, 25, 27], "r2_score": [11, 13, 25, 27], "influenc": [11, 13, 25, 27], "multioutputregressor": [11, 13, 25, 27], "patch": [12, 13, 26, 27, 40], "along": [12, 13, 21, 26, 27, 34], "presum": [12, 13, 26, 27], "un": [12, 13, 26, 27], "vector": [12, 13, 21, 26, 27, 34, 35], "wrap": [12, 13, 26, 27], "scipi": [12, 13, 26, 27, 32], "adam": [12, 13, 26, 27, 33, 40], "li": [12, 13, 15, 26, 27, 33, 40], "chester": [12, 13, 26, 27], "huynh": [12, 13, 26, 27], "tyler": [12, 13, 26, 27, 33], "m": [12, 13, 26, 27, 33, 34], "jesu": [12, 13, 26, 27], "jess": [12, 13, 26, 27], "patsol": [12, 13, 26, 27], "benjamin": [12, 13, 26, 27], "falk": [12, 13, 26, 27], "toward": [12, 13, 26, 27, 33], "close": [12, 13, 26, 27, 33], "gap": [12, 13, 23, 24, 25, 26, 27, 28, 29, 33], "convolut": [12, 13, 26, 27, 33], "network": [12, 13, 26, 27, 33], "preprint": [12, 13, 26, 27, 33], "1909": [12, 13, 26, 27, 33], "11799": [12, 13, 26, 27, 33], "82818509": 13, "patchobliquedecisiontreeregressor": [13, 40], "oob_prediction_": 13, "twomean": [14, 15, 28, 29], "clustering_func": [14, 15, 28, 29], "clustering_func_arg": [14, 15, 28, 29], "unsupervis": [14, 15, 28, 29, 31, 37, 40], "simultan": [14, 15], "affin": [14, 15, 28, 29], "do": [14, 15, 23, 24, 25, 26, 27, 28, 29, 33, 34], "fastbic": [14, 15, 28, 29, 40], "maxim": [14, 15], "bayesian": [14, 15, 35], "mathemat": [14, 15, 37], "formul": [14, 15, 37], "max": [14, 15, 28, 29, 34], "callabl": [14, 15, 20, 22, 28, 29], "calinski_harabasz_scor": [14, 15], "signatur": [14, 15], "predicted_label": [14, 15], "silhouette_scor": [14, 15], "davies_bouldin_scor": [14, 15], "cpu": [14, 15], "construct": [14, 15, 33, 34], "continu": [14, 15], "instant": [14, 15], "agglomerativeclust": [14, 15, 28, 29], "estimator_": [14, 15, 23], "unsuperviseddecisiontre": [14, 15], "labels_": [14, 15], "similarity_matrix_": [14, 15], "oob": [14, 15], "dissimilarity_matrix_": [14, 15], "dissimilar": [14, 15, 40], "fit_predict": [14, 15, 28, 29], "int64": [14, 15, 28, 29], "fit_transform": [14, 15, 28, 29], "fit_param": [14, 15, 28, 29], "transform": [14, 15, 19, 28, 29], "x_new": [14, 15, 28, 29], "n_features_new": [14, 15, 28, 29], "set_output": [14, 15, 28, 29], "introduc": [14, 15, 28, 29], "configur": [14, 15, 28, 29], "typic": [14, 15, 28, 29, 34], "dens": [14, 15, 28, 29, 34], "meghana": 15, "madhyastha": 15, "perci": 15, "jame": 15, "brown": 15, "veronika": 15, "strnadova": 15, "neelei": 15, "carei": 15, "prieb": 15, "randal": 15, "burn": 15, "geodes": [15, 19], "proceed": 15, "26th": 15, "acm": 15, "sigkdd": 15, "confer": 15, "knowledg": [15, 34], "discoveri": 15, "mine": 15, "kdd": 15, "513": 15, "523": 15, "york": 15, "ny": 15, "usa": 15, "machineri": 15, "url": 15, "1145": 15, "3394486": 15, "3403094": 15, "cov": [16, 17, 18, 21], "x_index": 16, "y_index": 16, "z_index": 16, "d": [16, 17, 18, 21, 33], "covari": [16, 17, 18, 19, 21], "true_mi": [16, 17, 18], "h": [16, 17, 18, 34], "plug": 16, "entropy_gaussian": 16, "det": [17, 18], "georg": 17, "darbellai": 17, "igor": 17, "vajda": 17, "observ": 17, "ieee": 17, "tran": 17, "inf": 17, "theori": [17, 33], "1315": 17, "1321": 17, "1999": 17, "pi": [18, 20, 35], "kd_tree": 19, "rank": [19, 33], "ksg": 19, "arraylik": 19, "n_features_x": 19, "n_features_i": 19, "n_features_z": 19, "unsupervisedobliquerandomforest": 19, "knn": 19, "ball_tre": 19, "brute": 19, "preprocess": 19, "val": 19, "proce": 19, "kth": 19, "nbr": 19, "xyz": 19, "subspac": 19, "nn": 19, "xz": 19, "yz": 19, "psi": 19, "n_x": 19, "n_y": 19, "n_": [19, 34], "digamma": 19, "term": [19, 20, 34, 35], "n_i": 19, "denot": [19, 20, 34], "could": 19, "radius_a": 20, "radius_b": 20, "obs_noise_func": 20, "nature_noise_func": 20, "005": [20, 22], "return_mi_lb": [20, 22], "helix": 20, "smallest": 20, "nois": [20, 22], "defauult": 20, "func": 20, "independ": [20, 34], "ad": [20, 34, 40], "lb": [20, 22], "approx": 20, "unif": 20, "afterward": 20, "epsilon_1": 20, "co": 20, "n_1": 20, "epsilon_2": 20, "sin": 20, "n_2": 20, "epsilon_3": 20, "n_3": 20, "And": 20, "graphic": 20, "rightarrow": 20, "confound": 20, "impli": 20, "condition": 20, "depend": [20, 31], "wherea": [20, 34], "1234": 21, "drawn": [21, 33], "2d": [21, 26, 27], "dimension": [21, 35, 40], "feed": 21, "default_rng": 21, "noise_func": 22, "sphere": 22, "latitud": 22, "longitud": 22, "y1": 22, "coordin": 22, "y2": 22, "y3": 22, "them": [23, 24, 25, 26, 27, 28, 29, 33], "But": [23, 24, 25, 26, 27, 28, 29], "integ": [23, 24, 25, 26, 27, 28, 29], "instati": 23, "oper": [23, 24, 26, 27], "argmax": [23, 24], "ti": [23, 24], "lowest": [23, 24], "en": [23, 24, 25, 34], "wikipedia": [23, 24, 25, 34], "wiki": [23, 24, 25, 34], "decision_tree_learn": [23, 24, 25, 34], "olshen": [23, 24, 25], "stone": [23, 24, 25], "wadsworth": [23, 24, 25], "belmont": [23, 24, 25], "ca": [23, 24, 25], "1984": [23, 24, 25], "hasti": [23, 24, 25, 34], "springer": [23, 24, 25, 34], "2009": [23, 24, 25, 34], "cutler": [23, 24, 25], "stat": [23, 24, 25], "berkelei": [23, 24, 25], "edu": [23, 24, 25], "randomforest": [23, 24, 25], "cc_home": [23, 24, 25], "htm": [23, 24, 25], "cross_val_scor": [23, 24, 25, 27], "93333333": 23, "max_features_": [23, 24, 25, 26, 27], "tree_": [23, 24, 25, 26, 27, 28, 29], "_tree": [23, 24, 25, 26, 27], "understand": [23, 33], "basic": 23, "usag": 23, "empirical_prior_": 23, "check_input": [23, 24, 25, 26, 27, 28, 29], "17": [23, 24, 25, 26, 27, 28, 29], "bypass": [23, 24, 25, 26, 27, 28, 29], "don": [23, 24, 25, 26, 27, 28, 29], "know": [23, 24, 25, 26, 27, 28, 29], "re": [23, 24, 25, 26, 27, 28, 29], "node_count": [23, 24, 25, 26, 27, 28, 29], "possibli": [23, 24, 25, 26, 27, 28, 29, 34], "cost_complexity_pruning_path": [23, 24, 25, 26, 27, 28, 29], "ccp_path": [23, 24, 25, 26, 27, 28, 29], "bunch": [23, 24, 25, 26, 27, 28, 29], "dictionari": [23, 24, 25, 26, 27, 28, 29], "get_depth": [23, 24, 25, 26, 27, 28, 29], "leaf_nodes_sampl": [23, 24, 25, 26, 27, 28, 29], "get_n_leav": [23, 24, 25, 26, 27, 28, 29], "n_leav": [23, 24, 25, 26, 27, 28, 29], "proba": [23, 24, 26], "len": [23, 24, 25, 26, 27, 28, 29], "set_predict_proba_request": [23, 24, 26], "set_predict_request": [23, 24, 25, 26, 27, 28, 29], "fact": [24, 25], "better": [24, 25, 33, 34], "caveat": [24, 25], "willing": [24, 25, 34], "spend": [24, 25, 34], "resourc": [24, 25, 34], "93": 24, "86": [24, 40], "feature_combinations_": [24, 25], "taken": [24, 25, 33], "decisiontreeregressor": 25, "load_diabet": [25, 27], "return_x_i": [25, 27], "68908909": 25, "35854406": 25, "35223873": 25, "03616902": 25, "56008907": 25, "32235221": 25, "06945264": 25, "1465216": 25, "34597007": 25, "15308512": 25, "morf": [26, 27, 40], "discontigu": [26, 27], "sensor": [26, 27], "mask": [26, 27], "onto": [26, 27], "data_width": [26, 27], "data_height": [26, 27], "tt": [26, 27], "last": [26, 27], "height": [26, 27], "width": [26, 27], "exactli": [26, 27, 33], "albeit": [26, 27], "efficienc": [26, 27], "optim": [26, 27, 34], "your": [26, 27, 31], "min_patch_dims_": [26, 27], "max_patch_dims_": [26, 27], "data_dims_": [26, 27], "rg": 27, "10163671": 27, "78786738": 27, "01490768": 27, "32737289": 27, "24816698": 27, "41881754": 27, "0588273": 27, "48722913": 27, "07927208": 27, "15600762": 27, "unsupervisedcriterion": [28, 29], "abid": [28, 29], "unsupervisedsplitt": [28, 29], "assign": [28, 29, 35], "intermedi": 30, "Then": [30, 32], "count": 30, "aff_matrix": 30, "modern": 31, "supervis": [31, 35, 37], "extend": [31, 34], "strong": 31, "encourag": 31, "top": [31, 33], "pull": [31, 32], "walk": 31, "contribut": [31, 33, 40], "licens": 31, "under": 31, "bsd": 31, "experiment": 31, "releas": 31, "histori": 31, "instal": 31, "pip": 31, "meson": 31, "conda": 31, "pypi": 32, "poetri": 32, "clone": 32, "repositori": 32, "github": 32, "com": 32, "neurodata": 32, "git": 32, "cd": 32, "virtual": 32, "environ": 32, "dev": 32, "build_requir": 32, "txt": 32, "spin": 32, "cli": 32, "local": 32, "abl": [32, 36], "edit": 32, "pend": 32, "isol": 32, "repo": 32, "zipbal": 32, "master": 32, "forg": 32, "threadpoolctl": 32, "pytest": 32, "compil": 32, "llvm": 32, "openmp": 32, "next": 32, "directori": 32, "dodiscov": 32, "purpos": 32, "main": 32, "obliquepr": 32, "need": [32, 34, 36], "develop": [32, 40], "pr": 32, "22754": 32, "checkout": 32, "page": [32, 38], "instruct": 32, "obliquerandomforestregressor": [33, 40], "replac": 33, "divers": 33, "sometim": 33, "slight": 33, "bia": 33, "aim": 33, "motiv": 33, "therebi": [33, 34], "practic": [33, 37], "often": [33, 35], "signific": 33, "henc": 33, "yield": 33, "overal": 33, "contrast": [33, 34], "b2001": 33, "candid": [33, 34], "intuit": [33, 34], "geurt": 33, "ernst": 33, "wehenkel": 33, "extrem": 33, "63": [33, 40], "2006": 33, "assess": 33, "respect": [33, 35], "final": [33, 34], "essenti": 33, "abil": 33, "mdi": 33, "l2014": 33, "approach": 33, "li2019": 33, "tomita2015": 33, "suffer": 33, "flaw": 33, "conclus": 33, "deriv": 33, "most": [33, 34], "good": 33, "held": 33, "secondli": 33, "favor": 33, "explor": 33, "whose": 33, "match": 33, "loupp": 33, "phd": 33, "thesi": 33, "lieg": 33, "2014": 33, "et": 33, "al": 33, "1506": 33, "03410": 33, "2015": 33, "ground": 34, "describ": 34, "beyond": 34, "dt": 34, "ot": 34, "ref": 34, "rc": 34, "landmark": 34, "paper": 34, "varieti": [34, 35], "lambda": 34, "tradeoff": 34, "similarli": 34, "anoth": 34, "major": [34, 38, 39, 40], "definit": 34, "x_i": [34, 35], "recurs": 34, "group": [34, 35], "manner": 34, "orthogon": 34, "a_i": 34, "inner": 34, "product": 34, "langl": 34, "rangl": 34, "entri": 34, "rest": 34, "let": 34, "q_m": 34, "n_m": 34, "theta": 34, "t_m": 34, "x_j": 34, "leq": 34, "setminu": 34, "e_i": 34, "basi": 34, "elsewher": 34, "exact": 34, "handl": 34, "_featur": 34, "come": 34, "sparsiti": 34, "consider": 34, "pickl": 34, "disc": 34, "special": 34, "earlier": 34, "runtim": 34, "sai": 34, "desir": 34, "analysi": 34, "much": 34, "storag": 34, "ask": 34, "question": 34, "try": 34, "cross": 34, "procedur": 34, "gridsearchcv": 34, "There": 34, "moreov": 34, "miss": 34, "imput": 34, "1023": 34, "1010933404324": 34, "predictive_analyt": 34, "quinlan": 34, "c4": 34, "program": 34, "morgan": 34, "kaufmann": 34, "1993": 34, "prevent": 34, "overfit": 34, "particular": 34, "common": [34, 35], "triplet": 34, "treatment": 34, "sacrific": 34, "mse": 34, "goal": 35, "identifi": 35, "pattern": 35, "techniqu": 35, "overview": 35, "cutpoint": 35, "cutoff": 35, "min_": 35, "sum_": 35, "hat": 35, "mu": 35, "_1": 35, "_2": 35, "sample_indic": 35, "popular": 35, "seleciton": 35, "speed": 35, "kmean": 35, "flexibl": 35, "mclust": 35, "tri": 35, "mle": 35, "hard": 35, "rather": 35, "soft": 35, "gmm": 35, "simpler": 35, "mathcal": 35, "x_n": 35, "sigma": 35, "quad": 35, "le": 35, "mu_j": 35, "notion": 35, "efficaci": 35, "scheme": 35, "adjusted_rand_scor": 35, "tip": [37, 38], "fast": 37, "enhanc": [38, 39, 40], "link": 38, "subscrib": 38, "io": 38, "notifi": 38, "11": 40, "jong": 40, "shin": 40, "bug": 40, "outsid": 40, "61": 40, "arbitrari": 40, "discontinu": 40, "sambit": 40, "64": 40, "per": 40, "67": 40, "70": 40, "patchobliquerandomforestregressor": 40, "suki": 40, "72": 40, "haoyin": 40, "xu": 40, "57": 40, "nearestneighborsmetaestim": 40, "83": 40, "thank": 40, "everyon": 40, "who": 40, "mainten": 40, "incept": 40}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[8, 1, 1, "", "HonestForestClassifier"], [9, 1, 1, "", "NearestNeighborsMetaEstimator"], [10, 1, 1, "", "ObliqueRandomForestClassifier"], [11, 1, 1, "", "ObliqueRandomForestRegressor"], [12, 1, 1, "", "PatchObliqueRandomForestClassifier"], [13, 1, 1, "", "PatchObliqueRandomForestRegressor"], [14, 1, 1, "", "UnsupervisedObliqueRandomForest"], [15, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.HonestForestClassifier": [[8, 2, 1, "", "apply"], [8, 3, 1, "", "base_estimator_"], [8, 2, 1, "", "decision_path"], [8, 3, 1, "", "feature_importances_"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "get_leaf_node_samples"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_log_proba"], [8, 2, 1, "", "predict_proba"], [8, 2, 1, "", "predict_quantiles"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_score_request"]], "sktree.NearestNeighborsMetaEstimator": [[9, 2, 1, "", "fit"], [9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "kneighbors"], [9, 2, 1, "", "radius_neighbors"], [9, 2, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[10, 2, 1, "", "apply"], [10, 3, 1, "", "base_estimator_"], [10, 2, 1, "", "compute_similarity_matrix"], [10, 2, 1, "", "decision_path"], [10, 3, 1, "", "feature_importances_"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_leaf_node_samples"], [10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "predict_log_proba"], [10, 2, 1, "", "predict_proba"], [10, 2, 1, "", "predict_quantiles"], [10, 2, 1, "", "score"], [10, 2, 1, "", "set_fit_request"], [10, 2, 1, "", "set_params"], [10, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[11, 2, 1, "", "apply"], [11, 3, 1, "", "base_estimator_"], [11, 2, 1, "", "compute_similarity_matrix"], [11, 2, 1, "", "decision_path"], [11, 3, 1, "", "feature_importances_"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "get_leaf_node_samples"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "predict_quantiles"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[12, 2, 1, "", "apply"], [12, 3, 1, "", "base_estimator_"], [12, 2, 1, "", "compute_similarity_matrix"], [12, 2, 1, "", "decision_path"], [12, 3, 1, "", "feature_importances_"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_leaf_node_samples"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_log_proba"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "predict_quantiles"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[13, 2, 1, "", "apply"], [13, 3, 1, "", "base_estimator_"], [13, 2, 1, "", "compute_similarity_matrix"], [13, 2, 1, "", "decision_path"], [13, 3, 1, "", "feature_importances_"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "get_leaf_node_samples"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "predict_quantiles"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[14, 2, 1, "", "apply"], [14, 3, 1, "", "base_estimator_"], [14, 2, 1, "", "compute_similarity_matrix"], [14, 2, 1, "", "decision_path"], [14, 3, 1, "", "feature_importances_"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "fit_predict"], [14, 2, 1, "", "fit_transform"], [14, 2, 1, "", "get_leaf_node_samples"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "predict_quantiles"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_output"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[15, 2, 1, "", "apply"], [15, 3, 1, "", "base_estimator_"], [15, 2, 1, "", "compute_similarity_matrix"], [15, 2, 1, "", "decision_path"], [15, 3, 1, "", "feature_importances_"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "fit_predict"], [15, 2, 1, "", "fit_transform"], [15, 2, 1, "", "get_leaf_node_samples"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_quantiles"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_output"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "transform"]], "sktree.experimental.mutual_info": [[16, 4, 1, "", "cmi_gaussian"], [17, 4, 1, "", "entropy_gaussian"], [18, 4, 1, "", "mi_gaussian"]], "sktree.experimental": [[19, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.simulate": [[20, 4, 1, "", "simulate_helix"], [21, 4, 1, "", "simulate_multivariate_gaussian"], [22, 4, 1, "", "simulate_sphere"]], "sktree.tree": [[23, 1, 1, "", "HonestTreeClassifier"], [24, 1, 1, "", "ObliqueDecisionTreeClassifier"], [25, 1, 1, "", "ObliqueDecisionTreeRegressor"], [26, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [27, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [28, 1, 1, "", "UnsupervisedDecisionTree"], [29, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [30, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.HonestTreeClassifier": [[23, 2, 1, "", "apply"], [23, 2, 1, "", "cost_complexity_pruning_path"], [23, 2, 1, "", "decision_path"], [23, 3, 1, "", "feature_importances_"], [23, 2, 1, "", "fit"], [23, 2, 1, "", "get_depth"], [23, 2, 1, "", "get_leaf_node_samples"], [23, 2, 1, "", "get_metadata_routing"], [23, 2, 1, "", "get_n_leaves"], [23, 2, 1, "", "get_params"], [23, 2, 1, "", "predict"], [23, 2, 1, "", "predict_proba"], [23, 2, 1, "", "predict_quantiles"], [23, 2, 1, "", "set_fit_request"], [23, 2, 1, "", "set_params"], [23, 2, 1, "", "set_predict_proba_request"], [23, 2, 1, "", "set_predict_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[24, 2, 1, "", "apply"], [24, 2, 1, "", "compute_similarity_matrix"], [24, 2, 1, "", "cost_complexity_pruning_path"], [24, 2, 1, "", "decision_path"], [24, 3, 1, "", "feature_importances_"], [24, 2, 1, "", "fit"], [24, 2, 1, "", "get_depth"], [24, 2, 1, "", "get_leaf_node_samples"], [24, 2, 1, "", "get_metadata_routing"], [24, 2, 1, "", "get_n_leaves"], [24, 2, 1, "", "get_params"], [24, 2, 1, "", "predict"], [24, 2, 1, "", "predict_log_proba"], [24, 2, 1, "", "predict_proba"], [24, 2, 1, "", "predict_quantiles"], [24, 2, 1, "", "score"], [24, 2, 1, "", "set_fit_request"], [24, 2, 1, "", "set_params"], [24, 2, 1, "", "set_predict_proba_request"], [24, 2, 1, "", "set_predict_request"], [24, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[25, 2, 1, "", "apply"], [25, 2, 1, "", "compute_similarity_matrix"], [25, 2, 1, "", "cost_complexity_pruning_path"], [25, 2, 1, "", "decision_path"], [25, 3, 1, "", "feature_importances_"], [25, 2, 1, "", "fit"], [25, 2, 1, "", "get_depth"], [25, 2, 1, "", "get_leaf_node_samples"], [25, 2, 1, "", "get_metadata_routing"], [25, 2, 1, "", "get_n_leaves"], [25, 2, 1, "", "get_params"], [25, 2, 1, "", "predict"], [25, 2, 1, "", "predict_quantiles"], [25, 2, 1, "", "score"], [25, 2, 1, "", "set_fit_request"], [25, 2, 1, "", "set_params"], [25, 2, 1, "", "set_predict_request"], [25, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[26, 2, 1, "", "apply"], [26, 2, 1, "", "compute_similarity_matrix"], [26, 2, 1, "", "cost_complexity_pruning_path"], [26, 2, 1, "", "decision_path"], [26, 3, 1, "", "feature_importances_"], [26, 2, 1, "", "fit"], [26, 2, 1, "", "get_depth"], [26, 2, 1, "", "get_leaf_node_samples"], [26, 2, 1, "", "get_metadata_routing"], [26, 2, 1, "", "get_n_leaves"], [26, 2, 1, "", "get_params"], [26, 2, 1, "", "predict"], [26, 2, 1, "", "predict_log_proba"], [26, 2, 1, "", "predict_proba"], [26, 2, 1, "", "predict_quantiles"], [26, 2, 1, "", "score"], [26, 2, 1, "", "set_fit_request"], [26, 2, 1, "", "set_params"], [26, 2, 1, "", "set_predict_proba_request"], [26, 2, 1, "", "set_predict_request"], [26, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[27, 2, 1, "", "apply"], [27, 2, 1, "", "compute_similarity_matrix"], [27, 2, 1, "", "cost_complexity_pruning_path"], [27, 2, 1, "", "decision_path"], [27, 3, 1, "", "feature_importances_"], [27, 2, 1, "", "fit"], [27, 2, 1, "", "get_depth"], [27, 2, 1, "", "get_leaf_node_samples"], [27, 2, 1, "", "get_metadata_routing"], [27, 2, 1, "", "get_n_leaves"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "predict"], [27, 2, 1, "", "predict_quantiles"], [27, 2, 1, "", "score"], [27, 2, 1, "", "set_fit_request"], [27, 2, 1, "", "set_params"], [27, 2, 1, "", "set_predict_request"], [27, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[28, 2, 1, "", "apply"], [28, 2, 1, "", "compute_similarity_matrix"], [28, 2, 1, "", "cost_complexity_pruning_path"], [28, 2, 1, "", "decision_path"], [28, 3, 1, "", "feature_importances_"], [28, 2, 1, "", "fit_predict"], [28, 2, 1, "", "fit_transform"], [28, 2, 1, "", "get_depth"], [28, 2, 1, "", "get_leaf_node_samples"], [28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_n_leaves"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "predict_quantiles"], [28, 2, 1, "", "set_fit_request"], [28, 2, 1, "", "set_output"], [28, 2, 1, "", "set_params"], [28, 2, 1, "", "set_predict_request"], [28, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[29, 2, 1, "", "apply"], [29, 2, 1, "", "compute_similarity_matrix"], [29, 2, 1, "", "cost_complexity_pruning_path"], [29, 2, 1, "", "decision_path"], [29, 3, 1, "", "feature_importances_"], [29, 2, 1, "", "fit_predict"], [29, 2, 1, "", "fit_transform"], [29, 2, 1, "", "get_depth"], [29, 2, 1, "", "get_leaf_node_samples"], [29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_n_leaves"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "predict_quantiles"], [29, 2, 1, "", "set_fit_request"], [29, 2, 1, "", "set_output"], [29, 2, 1, "", "set_params"], [29, 2, 1, "", "set_predict_request"], [29, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 40], "supervis": [0, 34], "unsupervis": [0, 35], "distanc": 0, "metric": 0, "experiment": [0, 16, 17, 18, 19, 20, 21, 22], "function": 0, "exampl": [1, 8, 10, 24, 26, 33, 36], "plot": [2, 3, 4, 5, 6], "decis": [2, 34, 35], "surfac": 2, "tree": [2, 6, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36], "train": 2, "iri": 2, "dataset": [2, 4], "obliqu": [3, 4, 6, 33, 34], "forest": [3, 4, 5, 33], "axi": [3, 4], "align": [3, 4], "random": [3, 4, 33], "predict": [3, 4], "spars": 3, "pariti": 3, "simul": [3, 5, 20, 21, 22], "cc18": 4, "honest": [5, 34], "calibr": 5, "overlap": 5, "gaussian": 5, "refer": [5, 33, 34], "project": 6, "matric": 6, "an": 6, "initi": 6, "patch": 6, "splitter": 6, "gener": 6, "1d": 6, "2d": 6, "3d": 6, "discontigu": 6, "comput": 7, "time": 7, "sktree": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "honestforestclassifi": 8, "us": [8, 10, 24, 26, 34, 36], "nearestneighborsmetaestim": 9, "obliquerandomforestclassifi": 10, "obliquerandomforestregressor": 11, "patchobliquerandomforestclassifi": 12, "patchobliquerandomforestregressor": 13, "unsupervisedobliquerandomforest": 14, "unsupervisedrandomforest": 15, "mutual_info": [16, 17, 18], "cmi_gaussian": 16, "entropy_gaussian": 17, "mi_gaussian": 18, "mutual_info_ksg": 19, "simulate_helix": 20, "simulate_multivariate_gaussian": 21, "simulate_spher": 22, "honesttreeclassifi": 23, "obliquedecisiontreeclassifi": 24, "obliquedecisiontreeregressor": 25, "patchobliquedecisiontreeclassifi": 26, "patchobliquedecisiontreeregressor": 27, "unsuperviseddecisiontre": 28, "unsupervisedobliquedecisiontre": 29, "compute_forest_similarity_matrix": 30, "scikit": [31, 36], "content": 31, "get": 31, "start": 31, "indic": 31, "tabl": 31, "instal": 32, "depend": 32, "pip": 32, "from": 32, "sourc": 32, "meson": 32, "conda": 32, "recommend": 32, "featur": 33, "import": 33, "evalu": [33, 35], "differ": 34, "compar": 34, "mathemat": 34, "formul": 34, "classif": 34, "regress": 34, "multi": 34, "output": 34, "problem": 34, "complex": 34, "tip": 34, "practic": 34, "limit": 34, "criterion": 35, "two": 35, "mean": 35, "fast": 35, "bic": 35, "user": 37, "guid": 37, "releas": 38, "histori": 38, "what": 40, "": 40, "new": 40, "version": 40, "0": 40, "1": 40, "changelog": 40, "code": 40, "contributor": 40}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Distance Metrics": [[0, "distance-metrics"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Examples": [[1, "examples"], [36, "examples"]], "Plot the decision surface of decision trees trained on the iris dataset": [[2, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[3, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[4, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[5, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[5, "references"], [33, null], [33, null]], "Plot the projection matrices of an oblique tree": [[6, "plot-the-projection-matrices-of-an-oblique-tree"]], "Initialize patch splitter": [[6, "initialize-patch-splitter"]], "Generate 1D patches": [[6, "generate-1d-patches"]], "Generate 2D patches": [[6, "generate-2d-patches"]], "Generate 3D patches": [[6, "generate-3d-patches"]], "Discontiguous Patches": [[6, "discontiguous-patches"]], "Computation times": [[7, "computation-times"]], "sktree.HonestForestClassifier": [[8, "sktree-honestforestclassifier"]], "Examples using sktree.HonestForestClassifier": [[8, "examples-using-sktree-honestforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[9, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[10, "sktree-obliquerandomforestclassifier"]], "Examples using sktree.ObliqueRandomForestClassifier": [[10, "examples-using-sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[11, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[12, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[13, "sktree-patchobliquerandomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[14, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[15, "sktree-unsupervisedrandomforest"]], "sktree.experimental.mutual_info.cmi_gaussian": [[16, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[17, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[18, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[19, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[20, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[21, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[22, "sktree-experimental-simulate-simulate-sphere"]], "sktree.tree.HonestTreeClassifier": [[23, "sktree-tree-honesttreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[24, "sktree-tree-obliquedecisiontreeclassifier"]], "Examples using sktree.tree.ObliqueDecisionTreeClassifier": [[24, "examples-using-sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[25, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[26, "sktree-tree-patchobliquedecisiontreeclassifier"]], "Examples using sktree.tree.PatchObliqueDecisionTreeClassifier": [[26, "examples-using-sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[27, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[28, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[29, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[30, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[31, "scikit-tree"]], "Contents": [[31, "contents"]], "Getting started:": [[31, null]], "Indices and tables": [[31, "indices-and-tables"]], "Installation": [[32, "installation"]], "Dependencies": [[32, "dependencies"]], "Installing with pip": [[32, "installing-with-pip"]], "Installing from source with Meson": [[32, "installing-from-source-with-meson"]], "Conda (Recommended)": [[32, "conda-recommended"]], "Oblique Random Forests": [[33, "oblique-random-forests"]], "Examples:": [[33, null]], "Feature importance evaluation": [[33, "feature-importance-evaluation"]], "Supervised Decision Trees": [[34, "supervised-decision-trees"]], "Oblique Trees": [[34, "oblique-trees"]], "Differences compared to decision trees": [[34, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[34, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[34, "classification-regression-and-multi-output-problems"]], "Complexity": [[34, "complexity"]], "Tips on practical use": [[34, "tips-on-practical-use"]], "Limitations compared to decision trees": [[34, "limitations-compared-to-decision-trees"]], "References:": [[34, null]], "Honest Trees": [[34, "honest-trees"]], "Unsupervised Decision Trees": [[35, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[35, "unsupervised-criterion"]], "Two-Means": [[35, "two-means"]], "Fast-BIC": [[35, "fast-bic"]], "Evaluating Unsupervised Trees": [[35, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[36, "examples-using-scikit-tree"]], "User Guide": [[37, "user-guide"]], "Release History": [[38, "release-history"]], "What\u2019s new?": [[40, "what-s-new"]], "Version 0.1": [[40, "version-0-1"]], "Changelog": [[40, "changelog"]], "Code and Documentation Contributors": [[40, "code-and-documentation-contributors"]]}, "indexentries": {"module": [[0, "module-sktree"]], "sktree": [[0, "module-sktree"]], "honestforestclassifier (class in sktree)": [[8, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.apply"]], "base_estimator_ (sktree.honestforestclassifier property)": [[8, "sktree.HonestForestClassifier.base_estimator_"]], "decision_path() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.decision_path"]], "feature_importances_ (sktree.honestforestclassifier property)": [[8, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.get_params"]], "predict() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.predict_proba"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.set_params"]], "set_score_request() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.set_score_request"]], "nearestneighborsmetaestimator (class in sktree)": [[9, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[9, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[9, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[9, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[9, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[9, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[9, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[10, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.obliquerandomforestclassifier property)": [[10, "sktree.ObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[10, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.get_params"]], "predict() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[10, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[11, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.obliquerandomforestregressor property)": [[11, "sktree.ObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[11, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.get_params"]], "predict() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[11, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[12, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.patchobliquerandomforestclassifier property)": [[12, "sktree.PatchObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[12, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[12, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[13, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.patchobliquerandomforestregressor property)": [[13, "sktree.PatchObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[13, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[13, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[14, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedobliquerandomforest property)": [[14, "sktree.UnsupervisedObliqueRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[14, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[14, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[15, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedrandomforest property)": [[15, "sktree.UnsupervisedRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[15, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[15, "sktree.UnsupervisedRandomForest.transform"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[16, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[17, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[18, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[19, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[20, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[21, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[22, "sktree.experimental.simulate.simulate_sphere"]], "honesttreeclassifier (class in sktree.tree)": [[23, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[23, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.get_params"]], "predict() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[23, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[24, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[25, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[26, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[27, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[28, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[28, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[28, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[29, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[30, "sktree.tree.compute_forest_similarity_matrix"]]}})