Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_iris_dtc", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/plot_oblique_random_forest", "auto_examples/plot_overlapping_gaussians", "auto_examples/plot_projection_matrices", "auto_examples/sg_execution_times", "generated/sktree.ExtraTreesClassifier", "generated/sktree.ExtraTreesRegressor", "generated/sktree.HonestForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.RandomForestClassifier", "generated/sktree.RandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.2"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_iris_dtc.rst", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/plot_oblique_random_forest.rst", "auto_examples/plot_overlapping_gaussians.rst", "auto_examples/plot_projection_matrices.rst", "auto_examples/sg_execution_times.rst", "generated/sktree.ExtraTreesClassifier.rst", "generated/sktree.ExtraTreesRegressor.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.RandomForestClassifier.rst", "generated/sktree.RandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.2.rst"], "titles": ["API Documentation", "Examples", "Plot the decision surface of decision trees trained on the iris dataset", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Plot honest forest calibrations on overlapping gaussian simulations", "Plot the projection matrices of an oblique tree", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "What\u2019s new?", "What\u2019s new?"], "terms": {"sktree": [0, 2, 3, 4, 5, 6, 36, 38], "manifold": [0, 6, 14, 15, 30, 31, 35, 37, 44], "obliqu": [0, 1, 2, 7, 12, 13, 14, 15, 18, 28, 29, 30, 31, 33, 35, 36, 40, 41, 44], "random": [0, 1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 38, 40, 41, 44], "forest": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41, 44, 45], "we": [0, 2, 5, 6, 10, 20, 24, 35, 36, 37, 38, 39, 44, 45], "provid": [0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "drop": [0, 3, 4, 38], "replac": [0, 37], "featur": [0, 2, 3, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 38, 39, 41, 42, 43, 44, 45], "have": [0, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "develop": [0, 36, 45], "These": [0, 6, 37], "ar": [0, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42], "still": [0, 6, 10], "compat": [0, 6, 18, 19, 32, 33], "all": [0, 1, 2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39, 40, 42, 44], "capabl": 0, "bin": [0, 5, 8, 9, 16, 17], "which": [0, 3, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39], "theoret": [0, 5, 35], "improv": [0, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 37, 38, 44, 45], "runtim": [0, 38], "significantli": [0, 9, 13, 15, 17], "high": [0, 3, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "dimension": [0, 25, 39, 44], "sampl": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 44], "size": [0, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 38], "data": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 44], "us": [0, 1, 3, 4, 5, 6, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 23, 27, 29, 31, 32, 33, 34, 35, 36, 37, 39, 41, 45], "your": [0, 30, 31, 35], "own": [0, 8, 10, 11, 12, 14, 16, 27, 28, 30], "risk": 0, "test": [0, 3, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 25, 27, 28, 29, 30, 31, 36], "extens": 0, "compar": [0, 5, 16, 17, 28, 29, 30, 31, 41], "decis": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 37, 40, 41, 45], "model": [0, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 44], "tradition": 0, "implement": [0, 6, 8, 9, 10, 28, 29, 35, 37, 38, 44], "axi": [0, 1, 2, 5, 6, 7, 12, 13, 14, 15, 28, 29, 30, 31, 37, 38, 40, 44], "align": [0, 1, 2, 7, 12, 13, 14, 15, 28, 29, 30, 31, 37, 38, 40], "split": [0, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39], "store": [0, 8, 9, 16, 17, 18, 19, 37, 38], "mean": [0, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 37, 41, 44], "outcom": 0, "i": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44], "e": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39], "label": [0, 2, 3, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38, 39], "vote": [0, 8, 10, 12, 14, 16, 18, 19, 27], "leaf": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34, 38], "node": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39], "howev": [0, 38], "more": [0, 2, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 37, 38], "exot": 0, "possibl": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39], "call": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 23, 24, 26, 27, 28, 29, 30, 31], "some": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38, 40], "multipl": [0, 6, 11, 38], "column": [0, 3, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 38, 44], "creat": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 36, 37], "new": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 39, 42], "valu": [0, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38], "thi": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 42], "can": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 44], "take": [0, 2, 18, 19, 23, 32, 33, 45], "form": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 28, 29, 30, 31, 32, 33, 38], "spars": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 40], "linear": [0, 2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "combin": [0, 2, 12, 13, 18, 28, 29, 33, 37, 38, 39], "even": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "advantag": [0, 45], "structur": [0, 2, 6, 10, 27, 30, 31, 39, 44], "g": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38], "an": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 44], "imag": [0, 6, 30, 31], "indic": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 29, 30, 31, 32, 33, 38], "awar": [0, 30, 31], "fashion": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "class": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 39], "gener": [0, 1, 2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 37, 38, 39, 40, 44], "while": [0, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "everyth": [0, 40], "els": [0, 4], "consist": [0, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29, 31, 32, 33, 38], "how": [0, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 40], "build": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 35, 36, 45], "classif": [0, 3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 41], "regress": [0, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 41], "thei": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38], "also": [0, 2, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 38], "power": [0, 37], "non": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "parametr": [0, 38], "embed": 0, "cluster": [0, 5, 18, 19, 32, 33, 39], "The": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39], "randomtreesembed": 0, "exampl": [0, 2, 3, 4, 5, 6, 8, 9, 13, 14, 15, 16, 17, 18, 19, 23, 27, 29, 31, 32, 33, 35, 39], "other": [0, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "state": 0, "art": 0, "explicitli": 0, "base": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39], "criterion": [0, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 41, 44], "varianc": [0, 9, 10, 13, 15, 17, 18, 19, 27, 29, 31, 32, 33, 37, 39], "bic": [0, 18, 19, 32, 33, 41], "compris": [0, 30, 31], "those": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 25, 27, 28, 29, 37, 38], "avail": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 36, 45], "standalon": 0, "inher": [0, 18, 19], "produc": 0, "like": [0, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 36, 38, 39], "extract": [0, 4], "pairwis": 0, "from": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 35, 37, 38, 39], "includ": [0, 5, 8, 10, 11, 12, 14, 16, 23, 27, 28, 30, 35, 44, 45], "correct": 0, "turn": 0, "proper": 0, "In": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 45], "addit": [0, 8, 9, 16, 17, 18, 19, 32, 33, 38], "leav": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34], "natur": [0, 24, 39], "wai": [0, 39], "comput": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 44], "neighbor": [0, 5, 11, 23, 35], "nearest": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 35], "interfac": 0, "similar": [0, 12, 13, 14, 15, 18, 19, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 44], "nearestneighbor": [0, 11, 23], "work": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "progress": 0, "help": [0, 27, 28, 29, 30, 31], "simul": [0, 1, 7, 10, 12, 37, 40], "evalu": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 41], "mutual": [0, 20, 21, 22, 23, 24, 26, 32, 44], "inform": [0, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39, 44], "mi": [0, 23, 25], "condit": [0, 14, 15, 20, 23, 30, 31, 44], "cmi": [0, 20, 23, 25], "specif": [0, 6, 8, 10, 12, 14, 16, 38], "multivari": [0, 3, 6, 20, 21, 22, 25, 30, 31], "gaussian": [0, 1, 7, 10, 20, 21, 22, 25, 39, 40], "analyt": [0, 20, 21, 22, 23, 25], "solut": [0, 8, 9, 10, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23], "entropi": [0, 8, 10, 12, 14, 16, 20, 21, 22, 25, 27, 28, 30], "distribut": [0, 3, 20, 21, 22, 24, 25, 26, 38, 39], "demonstr": [1, 6, 40], "scikit": [1, 2, 18, 19, 32, 33, 36, 37, 38, 42, 44, 45], "tree": [1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 36, 37, 41, 42, 44, 45], "algorithm": [1, 11, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 35, 38, 40], "plot": [1, 7, 10, 12, 28, 30, 37, 40], "honest": [1, 7, 10, 27, 35, 40, 41], "calibr": [1, 7, 10, 38, 40], "overlap": [1, 7, 10, 40], "predict": [1, 2, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38, 40], "cc18": [1, 7, 12, 37, 40], "dataset": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 40], "pariti": [1, 7, 12, 37, 40], "surfac": [1, 6, 7, 28, 40], "train": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 40], "iri": [1, 7, 27, 28, 38, 40], "project": [1, 2, 4, 7, 12, 13, 28, 29, 30, 35, 36, 37, 38, 40, 44, 45], "matric": [1, 7, 18, 19, 30, 38, 40, 44], "download": [1, 2, 3, 4, 5, 6, 40], "python": [1, 2, 3, 4, 5, 6, 36, 40], "sourc": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40], "code": [1, 2, 3, 4, 5, 6, 32, 33, 36, 40], "auto_examples_python": [1, 40], "zip": [1, 2, 5, 40], "jupyt": [1, 2, 3, 4, 5, 6, 40], "notebook": [1, 2, 3, 4, 5, 6, 40], "auto_examples_jupyt": [1, 40], "galleri": [1, 2, 3, 4, 5, 6, 40], "sphinx": [1, 2, 3, 4, 5, 6, 40], "go": [2, 3, 4, 5, 6], "end": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34], "full": [2, 3, 4, 5, 6], "pair": [2, 34, 38], "see": [2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38, 39], "estim": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 44], "For": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39], "each": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39], "learn": [2, 8, 9, 10, 12, 13, 16, 17, 18, 19, 27, 28, 29, 32, 33, 35, 36, 37, 38, 39, 40], "boundari": [2, 6, 11, 14, 15, 30, 31, 44], "made": 2, "simpl": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "threshold": [2, 38], "rule": 2, "infer": [2, 27, 28, 29, 30, 31], "same": [2, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 30, 31, 34, 37, 38], "regular": [2, 5], "show": [2, 3, 5, 6], "built": [2, 37, 38], "first": [2, 3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38], "load": [2, 4], "copi": 2, "ship": 2, "sklearn": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 36, 38, 39], "import": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 38, 41], "load_iri": [2, 27, 28, 38], "matplotlib": [2, 3, 4, 5, 6, 36], "pyplot": [2, 3, 4, 5, 6], "plt": [2, 3, 4, 5, 6], "displai": 2, "function": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 26, 27, 28, 29, 30, 31, 32, 33, 35, 37, 38], "numpi": [2, 3, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33, 36], "np": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "inspect": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "decisionboundarydisplai": 2, "_lib": [2, 6], "decisiontreeclassifi": [2, 8, 10, 16, 27, 28, 29, 30], "plot_tre": 2, "obliquedecisiontreeclassifi": [2, 10, 12, 14, 29, 38], "paramet": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 45], "n_class": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31], "3": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 45], "plot_color": 2, "ryb": 2, "plot_step": 2, "0": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 42], "02": 2, "clf_label": 2, "random_st": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "123456": [2, 3, 4], "clf": [2, 3, 4, 5, 8, 10, 12, 16, 27, 28, 38], "fig": [2, 3, 4, 5, 6], "ax": [2, 3, 4, 5, 6, 38], "subplot": [2, 3, 4, 5, 6], "2": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39], "flatten": [2, 6], "pairidx": 2, "enumer": [2, 3, 4, 6, 10, 12, 13, 14, 15, 16, 17], "1": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 42, 45], "onli": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "two": [2, 4, 5, 18, 19, 37, 38, 41, 44], "correspond": [2, 8, 10, 12, 14, 15, 16, 27, 28, 29, 30, 31, 32, 33], "x": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39], "y": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 38], "target": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38], "fit": [2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38], "tight_layout": [2, 5], "h_pad": 2, "5": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 45], "w_pad": 2, "pad": 2, "from_estim": 2, "cmap": [2, 6], "cm": [2, 5], "rdylbu": 2, "response_method": 2, "xlabel": 2, "feature_nam": 2, "ylabel": 2, "point": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 28, 29, 30, 31, 32, 33, 39], "color": [2, 3, 4, 5, 6], "rang": [2, 3, 6, 11, 30, 31], "idx": [2, 6], "where": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 30, 31, 32, 33, 38, 39, 44], "scatter": [2, 5, 6], "c": [2, 5, 21, 22, 27, 28, 29, 30, 31, 36], "target_nam": 2, "edgecolor": [2, 5], "black": [2, 6], "": [2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 42], "15": 2, "suptitl": [2, 6], "f": [2, 3, 4, 6], "legend": [2, 3, 5], "loc": [2, 3, 5], "lower": [2, 10, 24, 26, 27, 38], "right": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "borderpad": 2, "handletextpad": 2, "_": 2, "tight": 2, "home": [2, 3, 4, 5], "circleci": [2, 3, 4, 5], "plot_iris_dtc": [2, 7], "py": [2, 3, 4, 5, 6, 7], "78": 2, "userwarn": 2, "No": 2, "colormap": 2, "via": [2, 28, 29, 32, 36, 37, 44], "ignor": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "64": [2, 44], "figur": [2, 5, 6], "layout": 2, "ha": [2, 4, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 38, 44, 45], "chang": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 42, 43, 44, 45], "singl": [2, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "togeth": [2, 38, 39], "fill": 2, "true": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 39], "titl": [2, 6], "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39], "run": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 36, 38], "time": [2, 3, 4, 5, 6, 17, 18, 19, 24, 28, 29, 30, 31, 32, 34, 38], "script": [2, 3, 4, 5, 6], "minut": [2, 3, 4, 5, 6], "908": [2, 7], "second": [2, 3, 4, 5, 6, 38], "memori": [2, 3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29], "usag": [2, 3, 4, 5, 6, 27], "14": [2, 7], "mb": [2, 3, 4, 5, 6, 7], "ipynb": [2, 3, 4, 5, 6], "A": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 27, 28, 29, 30, 31, 32, 33, 38, 44], "perform": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 39], "comparison": [3, 4, 16, 17], "between": [3, 4, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "standard": [3, 4, 11, 23, 25, 30, 31, 38], "variat": 3, "noisi": 3, "problem": [3, 8, 10, 12, 14, 16, 27, 28, 30, 35, 41], "itself": [3, 8, 10, 12, 14, 16, 18, 19, 23], "xor": 3, "binari": 3, "task": [3, 35], "dimens": [3, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 30, 31, 32, 33, 38], "uniformli": [3, 6], "n_sampl": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "number": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39], "p": [3, 5, 8, 9, 10, 12, 14, 16, 17, 24], "limit": [3, 11, 41], "carri": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "about": [3, 38], "defin": [3, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 27, 28, 29, 30, 31, 32, 33, 39], "odd": 3, "sum": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "across": [3, 8, 10, 12, 14, 16, 18, 19, 27, 28, 29, 30, 31, 32, 33], "greater": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "than": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39], "otherwis": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "further": 3, "detail": [3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33], "public": [3, 6, 37], "http": [3, 4, 19, 27, 28, 29, 36, 37, 38, 39], "epub": 3, "siam": [3, 14, 15, 30, 31, 32, 35, 37], "org": [3, 4, 19, 27, 28, 29, 36, 37, 38, 39], "doi": [3, 14, 15, 19, 30, 31, 37, 38, 39], "epdf": 3, "10": [3, 5, 8, 9, 14, 15, 16, 17, 19, 27, 28, 29, 30, 31, 37, 38, 39], "1137": [3, 14, 15, 30, 31, 37], "9781611974973": 3, "56": 3, "It": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33, 35, 38, 39], "took": [3, 4], "12": [3, 6, 7], "pyenv": [3, 4, 5], "version": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 42], "9": [3, 4, 5, 6, 7, 36, 44], "18": [3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "lib": [3, 4, 5], "python3": [3, 4, 5], "site": [3, 4, 5], "packag": [3, 4, 5, 35, 36], "seaborn": [3, 4], "_oldcor": [3, 4], "1498": [3, 4], "futurewarn": [3, 4, 5], "is_categorical_dtyp": [3, 4], "deprec": [3, 4], "remov": [3, 4, 5], "futur": [3, 4, 35], "isinst": [3, 4], "dtype": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "categoricaldtyp": [3, 4], "instead": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "pd": [3, 4, 25], "api": [3, 4, 6, 11, 18, 19, 30, 31, 32, 33, 35, 36, 42, 43, 44, 45], "type": [3, 4, 10, 27, 38, 44], "vector": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 25, 27, 28, 29, 30, 31, 38, 39], "1119": [3, 4], "use_inf_as_na": [3, 4], "option": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36], "convert": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33], "inf": [3, 4, 21], "nan": [3, 4, 8, 10, 12, 13, 14, 16, 18, 19, 27], "befor": [3, 4, 11, 24, 27, 28, 29, 30, 31, 32, 33], "oper": [3, 4, 27, 28, 30, 31], "option_context": [3, 4], "mode": [3, 4, 8, 10, 12, 14, 16, 27, 28, 30, 36], "datetim": [3, 4], "panda": [3, 4, 18, 19, 32, 33, 44], "sn": [3, 4], "ensembl": [3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 37], "randomforestclassifi": [3, 4, 5, 8, 9, 12, 14], "model_select": [3, 4, 5, 9, 27, 28, 29, 31], "repeatedkfold": [3, 4], "cross_valid": [3, 4], "obliquerandomforestclassifi": [3, 4, 37], "t0": [3, 4], "now": [3, 4, 6, 36, 44], "def": [3, 4, 5], "sparse_par": 3, "20": [3, 5, 7, 19, 39], "p_star": 3, "random_se": [3, 23, 24, 26], "none": [3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "kwarg": [3, 4], "seed": [3, 18, 19, 23, 24, 25, 26], "uniform": [3, 10, 23, 24, 26, 27], "zero": [3, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "return": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "get_scor": [3, 4], "n_cv": [3, 4], "n_repeat": [3, 4], "tmp": [3, 4], "cv": [3, 4, 5, 27, 28, 29, 31], "n_split": [3, 4], "test_scor": [3, 4], "score": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31], "accuraci": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 30], "append": [3, 4], "rf": [3, 4, 5, 38], "OF": [3, 4], "df": [3, 4], "datafram": [3, 4, 18, 19, 32, 33], "explod": [3, 4], "astyp": [3, 4, 6], "float": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33], "reset_index": [3, 4], "inplac": [3, 4], "grid": [3, 6], "search": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "hyper": 3, "param": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "max_featur": [3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "n_estim": [3, 4, 5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "100": [3, 4, 5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "max_depth": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "40": 3, "1000": [3, 10, 12, 16, 24, 25, 26], "t_d": 3, "print": [3, 4, 6, 10, 12, 13, 15, 16, 17], "draw": [3, 4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "figsiz": [3, 5, 6], "6": [3, 4, 6, 7], "stripplot": [3, 4], "dodg": [3, 4], "boxplot": [3, 4], "white": [3, 4], "set_titl": [3, 4], "queri": [3, 4, 11], "iloc": [3, 4], "rff": 3, "round": [3, 10, 12, 13, 14, 15, 16, 17], "off": [3, 24], "4": [3, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30], "savefig": [3, 5], "plot_sim_": 3, "jpg": 3, "645": [3, 7], "plot_oblique_axis_aligned_forests_sparse_par": [3, 7], "three": 4, "openml": 4, "benchmark": [4, 35], "suit": 4, "name": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "wdbc": 4, "www": [4, 27, 28, 29], "sort": [4, 5, 10, 11, 32, 39], "id": 4, "1510": 4, "phish": 4, "websit": 4, "4534": 4, "31": 4, "former": [4, 17], "entir": [4, 14, 15, 30, 31], "numer": 4, "latter": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "normin": 4, "third": 4, "dub": 4, "cnae": 4, "statu": 4, "activ": [4, 36], "1468": 4, "notabl": 4, "larg": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29], "space": [4, 11, 18, 19, 21, 23, 32, 33, 38], "857": 4, "As": [4, 34, 38], "you": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 36, 40], "notic": 4, "outperform": [4, 38], "util": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "mechan": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "subsampl": [4, 10, 27, 38], "due": [4, 21], "constraint": [4, 8, 9, 16, 17, 27], "phishingwebsit": 4, "23": [4, 9, 13, 15, 17, 29, 31, 36], "fetch_openml": 4, "data_id": 4, "load_cc18": 4, "as_fram": 4, "parser": 4, "d_name": 4, "n": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 36, 38, 39, 44], "int": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33], "frame": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37], "8": [4, 6, 17, 24, 27], "object": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39], "50": [4, 5], "concat": 4, "uniqu": [4, 5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "set_size_inch": 4, "set_ylabel": [4, 5], "set_xlabel": [4, 5], "25": [4, 5, 6, 7], "002": [4, 7], "321": 4, "plot_oblique_random_forest": [4, 7], "result": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38, 39], "variou": [5, 8, 9, 12, 13, 14, 15, 16, 17], "method": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39], "achiev": [5, 9, 17, 35, 37], "user": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 44], "guid": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 39, 44], "isoton": 5, "irf": 5, "sigmoid": 5, "sigrf": 5, "without": [5, 39], "curv": [5, 38], "differ": [5, 11, 27, 28, 29, 30, 31, 32, 33, 41], "red": 5, "line": 5, "closest": 5, "ideal": [5, 36], "reproduc": 5, "ronan": [5, 14, 15, 30, 31, 35, 37, 44], "perri": [5, 14, 15, 30, 31, 35, 37, 44], "ronak": [5, 14, 15, 30, 31, 37], "mehta": [5, 14, 15, 30, 31, 37], "richard": 5, "guo": 5, "eva": 5, "yezeret": 5, "jes\u00fa": 5, "arroyo": [5, 14, 15, 30, 31, 37], "mike": 5, "powel": 5, "hayden": 5, "helm": 5, "cencheng": [5, 37], "shen": [5, 37], "joshua": [5, 14, 15, 19, 30, 31, 37, 39], "t": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39], "vogelstein": [5, 14, 15, 19, 30, 31, 37, 39], "adapt": [5, 18, 19, 21, 35, 39], "quantiti": [5, 35], "arxiv": [5, 35], "2021": [5, 35], "1907": [5, 35], "00325": [5, 35], "necessari": [5, 36], "modul": [5, 6, 35], "librari": [5, 42, 44], "calibratedclassifiercv": 5, "train_test_split": [5, 9], "honestforestclassifi": [5, 44], "classifi": [5, 8, 9, 10, 12, 14, 16, 17, 27, 28, 29, 30], "color_dict": 5, "honestrf": 5, "f41711": 5, "1b9e77": 5, "377eb8": 5, "fdae61": 5, "n_job": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "clf_cv": 5, "rep": 5, "honest_fract": [5, 10, 27], "base_estim": 5, "likelihood": [5, 39], "lik1": 5, "prod": 5, "exp": 5, "asarrai": 5, "lik0": 5, "60000": 5, "n_bin": 5, "calibration_curv": 5, "here": [5, 6, 10, 38, 40, 44, 45], "blob": 5, "contain": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "half": 5, "posit": [5, 8, 16, 27, 37, 39], "neg": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "probabl": [5, 8, 10, 12, 14, 16, 18, 19, 27, 28, 30, 38], "therefor": [5, 10, 12, 13, 14, 15, 16, 17, 30, 31, 37, 38], "center": [5, 18, 19, 32, 33], "make_blob": 5, "shuffl": [5, 10, 12, 13, 15, 16, 17], "fals": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 26, 27, 28, 29, 30, 31, 32, 33], "42": [5, 8, 9, 17], "sample_weight": [5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "randomst": [5, 6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33], "rand": 5, "x_train": [5, 9], "x_test": [5, 9], "y_train": [5, 9], "y_test": [5, 9], "sw_train": 5, "sw_test": 5, "test_siz": 5, "class_one_prob": 5, "predict_proba": [5, 8, 10, 12, 14, 16, 27, 28, 30], "300": 5, "wa": [5, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 38], "renam": [5, 8, 9, 16, 17], "warn": [5, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "y_uniqu": 5, "rainbow": 5, "linspac": 5, "this_i": 5, "this_x": 5, "this_sw": 5, "newaxi": 5, "alpha": [5, 6, 24, 26, 27, 28, 29, 30, 31, 32, 33], "k": [5, 8, 9, 11, 23, 32], "best": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "set_xtick": 5, "set_ytick": 5, "clf_name": 5, "prob": 5, "item": 5, "order": [5, 8, 10, 12, 13, 14, 16, 27, 28, 29, 30, 31], "lexsort": 5, "51": 5, "reshap": [5, 6], "x_test_prob": 5, "linewidth": 5, "l": [5, 8, 9, 17, 27, 28, 29, 37, 38, 39], "r": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 23, 24, 27, 28, 29, 30, 31, 36, 38], "truth": [5, 38], "set_ylim": 5, "05": 5, "instanc": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "upper": 5, "left": [5, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "overlapping_gaussian": 5, "png": 5, "discuss": 5, "well": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "closer": 5, "shown": [5, 20], "below": 5, "338": [5, 7], "75": 5, "plot_overlapping_gaussian": [5, 7], "patchobliquedecisiontreeclassifi": [6, 14], "one": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39], "specifi": [6, 8, 10, 12, 14, 16, 27, 28, 30, 38], "done": [6, 30, 31, 37], "data_dim": [6, 14, 15, 30, 31], "should": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 36], "set": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39], "n_row": 6, "n_col": 6, "row": [6, 30, 31], "arrai": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33, 37], "length": [6, 11, 27, 28, 29, 30, 31, 32, 33], "If": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 38], "n_depth": 6, "allow": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38, 45], "ani": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 44], "robust": [6, 35], "calcul": [6, 34, 39], "dure": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "hyperrectangl": 6, "start": [6, 36], "squar": [6, 9, 13, 15, 17, 29, 31], "min_patch_dim": [6, 14, 15, 30, 31], "max_patch_dim": [6, 14, 15, 30, 31], "constrain": [6, 38], "within": [6, 10, 11, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 36], "bound": [6, 24, 26], "arbitrarili": [6, 9, 13, 15, 17, 29, 31], "hyperparamet": [6, 38], "relat": 6, "note": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 36, 38, 42], "privat": 6, "cython": [6, 32, 33, 36, 45], "what": [6, 27, 28, 29, 30, 31, 32, 33, 35, 42], "look": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 40], "part": 6, "just": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 24, 36], "wrapper": 6, "underli": [6, 27, 28, 29, 30, 31], "actual": 6, "To": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 36, 40], "relev": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35], "_criterion": 6, "gini": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "_morf_splitt": 6, "bestpatchsplittertest": 6, "dummi": 6, "sake": 6, "min_samples_leaf": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "min_weight_leaf": 6, "feature_weight": [6, 14, 15, 30, 31], "missing_value_feature_mask": 6, "repeat": [6, 24], "arang": 6, "float32": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "float64": [6, 29, 31], "ones": 6, "our": [6, 35, 38], "th": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "visual": 6, "appear": [6, 8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31], "make": [6, 37, 44], "contigu": [6, 14, 15, 30, 31], "dim_contigu": [6, 14, 15, 30, 31], "init_test": 6, "matrix": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 38], "proj_mat": 6, "sample_projection_matrix": 6, "nrow": 6, "ncol": 6, "sharex": 6, "sharei": 6, "squeez": 6, "imshow": 6, "viridi": 6, "xlim": 6, "ylim": 6, "add_subplot": 6, "z": [6, 20, 23, 24, 26], "nonzero": 6, "marker": 6, "o": [6, 32, 38, 44], "custom": [6, 8, 9, 16, 17, 18, 19], "set_zlim": 6, "01": [6, 7], "125": 6, "analyz": 6, "necessarili": [6, 11, 37], "certain": 6, "seri": [6, 30, 31], "n_channel": 6, "n_time": 6, "channel": 6, "dim": 6, "841": [6, 7], "plot_projection_matric": [6, 7], "06": 7, "734": 7, "execut": 7, "auto_exampl": 7, "file": [7, 36], "00": 7, "320": 7, "74": 7, "04": 7, "11": [7, 44], "7": 7, "03": 7, "min_samples_split": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 45], "min_weight_fraction_leaf": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "sqrt": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 45], "max_leaf_nod": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "min_impurity_decreas": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "bootstrap": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 37], "oob_scor": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "verbos": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 36], "warm_start": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "class_weight": [8, 10, 12, 14, 16, 27, 28, 30], "ccp_alpha": [8, 9, 10, 16, 17, 27, 28, 29, 30, 31, 32, 33], "max_sampl": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "max_bin": [8, 9, 16, 17], "store_leaf_valu": [8, 9, 16, 17], "monotonic_cst": [8, 9, 16, 17, 27, 45], "extra": [8, 9], "meta": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "sub": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "averag": [8, 9, 12, 13, 14, 15, 16, 17, 18, 23, 28, 29, 33, 37], "control": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 37, 38], "over": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 30, 31, 37], "read": [8, 9, 12, 13, 16, 17, 27, 28, 29], "default": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38], "22": [8, 9, 11, 16, 17], "log_loss": [8, 16], "measur": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39], "qualiti": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38, 39], "support": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 36, 38, 44], "criteria": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39], "impur": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38], "both": [8, 10, 12, 13, 14, 15, 16, 17, 38], "shannon": [8, 16], "gain": [8, 10, 12, 14, 16, 27, 28, 30], "mathemat": [8, 14, 15, 16, 18, 19, 30, 31, 35, 37, 41], "formul": [8, 16, 18, 19, 41], "maximum": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39], "depth": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "expand": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "until": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "pure": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "less": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "minimum": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "requir": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "intern": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39], "consid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "fraction": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "ceil": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "ad": [8, 9, 16, 17, 24, 38, 44], "least": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "branch": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "mai": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 39], "effect": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 40], "smooth": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "especi": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "weight": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38, 44], "input": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38], "equal": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "when": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 28, 29, 30, 31, 32, 33, 38, 42, 45], "log2": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 45], "max": [8, 9, 16, 17, 18, 19, 32, 33, 38], "n_features_in_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "n_featur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38], "auto": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "doe": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 37, 38], "stop": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31], "valid": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "partit": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 27, 28, 29, 30, 31, 38], "found": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "grow": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "rel": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 39], "reduct": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "unlimit": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "induc": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "decreas": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "equat": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "follow": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 24, 27, 28, 29, 30, 31, 32, 33, 38, 39], "n_t": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "n_t_r": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "right_impur": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "n_t_l": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "left_impur": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "current": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 36, 38], "child": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "refer": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 27, 28, 29, 30, 31, 32, 33], "pass": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 27, 28, 29, 30, 31, 32, 33, 38, 44], "19": [8, 9, 16, 17], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 26, 27, 28, 29, 30, 31, 32, 33], "whether": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 26, 27, 28, 29, 30, 31, 32, 33], "whole": [8, 9, 10, 12, 13, 14, 15, 16, 17], "callabl": [8, 9, 16, 17, 18, 19, 24, 26, 32, 33], "out": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 37], "bag": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "By": [8, 9, 10, 16, 17, 18, 19, 24, 25, 27, 32, 33, 37], "accuracy_scor": [8, 16], "signatur": [8, 9, 16, 17, 18, 19], "metric": [8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 23, 27, 28, 30, 35, 39], "y_true": [8, 9, 13, 15, 16, 17, 29, 31], "y_pred": [8, 9, 13, 15, 16, 17, 29, 31], "job": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23], "parallel": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "decision_path": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "appli": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 34], "unless": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "joblib": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 36], "parallel_backend": [8, 9, 10, 12, 13, 14, 15, 16, 17], "context": [8, 9, 10, 12, 13, 14, 15, 16, 17], "processor": [8, 9, 10, 12, 13, 14, 15, 16, 17], "glossari": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31], "reus": [8, 9, 10, 12, 13, 14, 15, 16, 17], "previou": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "add": [8, 9, 10, 12, 13, 14, 15, 16, 17, 24, 26, 44], "weak": [8, 9, 16, 17], "learner": [8, 9, 16, 17], "balanc": [8, 10, 12, 14, 16, 27, 28, 30], "balanced_subsampl": [8, 10, 12, 14, 16], "dict": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "list": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27, 28, 29, 30, 31, 32, 33, 44, 45], "associ": [8, 10, 12, 14, 16, 19, 27, 28, 30, 38, 39], "class_label": [8, 10, 12, 14, 16, 27, 28, 30], "given": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 32, 33, 38, 39], "suppos": [8, 10, 12, 14, 16, 27, 28, 30], "multi": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 30, 41, 44], "output": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 41, 44], "multioutput": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31], "multilabel": [8, 10, 12, 14, 16, 27, 28, 30], "everi": [8, 10, 12, 14, 15, 16, 27, 28, 30, 31, 38], "its": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 30, 38], "four": [8, 10, 12, 14, 16, 27, 28, 30], "automat": [8, 10, 12, 14, 16, 27, 28, 30], "adjust": [8, 10, 12, 14, 16, 27, 28, 30], "invers": [8, 10, 12, 14, 16, 27, 28, 30], "proport": [8, 10, 12, 14, 16, 27, 28, 30], "frequenc": [8, 10, 12, 14, 16, 27, 28, 30], "bincount": [8, 10, 12, 14, 16, 27, 28, 30], "except": [8, 9, 10, 12, 13, 14, 15, 16, 17, 29, 31, 37], "grown": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29], "multipli": [8, 10, 12, 14, 16, 27, 28, 30], "through": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35], "complex": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 41], "minim": [8, 9, 10, 13, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 38, 39], "cost": [8, 9, 10, 16, 17, 27, 28, 29, 30, 31, 32, 33, 37, 38], "prune": [8, 9, 10, 16, 17, 27, 28, 29, 30, 31, 32, 33, 38], "subtre": [8, 9, 10, 16, 17, 27, 28, 29, 30, 31, 32, 33], "largest": [8, 9, 10, 16, 17, 24, 27], "smaller": [8, 9, 10, 16, 17, 27], "chosen": [8, 9, 10, 16, 17, 27], "thu": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29, 37, 38, 39], "interv": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 38], "255": [8, 9, 16, 17], "miss": [8, 9, 16, 17, 27, 38], "experiment": [8, 9, 16, 17, 35], "get_leaf_node_sampl": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "array_lik": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "monoton": [8, 9, 16, 17, 27], "enforc": [8, 9, 10, 16, 17, 27], "increas": [8, 9, 11, 16, 17, 27, 28, 29, 37], "multiclass": [8, 16, 27], "n_outputs_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31], "hold": [8, 16, 27], "extratreesregressor": [8, 17], "regressor": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 29, 31], "optim": [8, 9, 30, 31, 38], "randomforestregressor": [8, 9, 13, 15], "etc": [8, 9, 10, 12, 13, 14, 15, 16, 17, 23, 27, 28, 29], "lead": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 37], "fulli": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29], "unprun": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29], "potenti": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 31], "veri": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29], "reduc": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 37], "consumpt": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29], "geurt": [8, 9, 17], "d": [8, 9, 17, 20, 21, 22, 25], "ernst": [8, 9, 17], "wehenkel": [8, 9, 17], "extrem": [8, 9, 16, 17], "machin": [8, 9, 10, 12, 13, 16, 17, 35, 37, 38], "63": [8, 9, 17, 44], "2006": [8, 9, 17, 32], "make_classif": [8, 10, 12, 16], "attribut": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "estimator_": [8, 9, 16, 17, 18, 19, 27], "extratreeclassifi": 8, "templat": [8, 9, 10, 16, 17, 18, 19, 27], "collect": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27], "base_estimator_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "estimators_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "classes_": [8, 10, 12, 14, 16, 27, 28, 30], "ndarrai": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "n_classes_": [8, 10, 12, 14, 16, 27, 28, 30], "feature_importances_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "seen": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31], "24": [8, 9, 16, 17], "feature_names_in_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31], "string": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "oob_score_": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "obtain": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "exist": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "oob_decision_function_": [8, 10, 12, 13, 14, 16, 18, 19], "n_output": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "small": [8, 10, 12, 13, 14, 16, 18, 19], "might": [8, 10, 12, 13, 14, 16, 18, 19, 38], "never": [8, 10, 12, 13, 14, 16, 18, 19], "case": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "csr_matrix": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "x_leav": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "datapoint": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "index": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 38], "up": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 34, 38], "path": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "n_node": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "element": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "goe": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "csr": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "format": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 32, 33], "n_nodes_ptr": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "give": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 28, 29], "csc_matrix": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "real": [8, 9, 10, 12, 13, 14, 15, 16, 17, 29, 31], "would": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 36, 38], "net": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "either": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "possibli": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 38], "self": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "get": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 34], "leaf_node_sampl": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "repres": [8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "reach": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "n_leaf_node_sampl": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "vari": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "sinc": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 44, 45], "fall": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "variabl": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 27, 28, 29, 30, 31, 32, 33, 37, 38], "get_metadata_rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "metadata": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "pleas": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "check": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "metadatarequest": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "encapsul": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "get_param": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "deep": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35, 37], "subobject": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "map": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "partial_fit": [8, 10, 12, 14, 16, 27, 28, 30, 45], "updat": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "integ": [8, 10, 12, 14, 16, 27, 28, 29, 30, 31, 32, 33], "must": [8, 10, 12, 13, 14, 16, 24, 27, 28, 29, 30, 32, 33], "omit": [8, 10, 12, 14, 16, 27, 28, 30], "subsequ": [8, 10, 12, 14, 16, 27, 28, 30], "That": [8, 10, 12, 14, 16, 18, 19, 27, 28, 29, 30, 31, 32, 33], "highest": [8, 10, 12, 14, 16, 18, 19, 27, 28], "predict_log_proba": [8, 10, 12, 14, 16, 28, 30], "log": [8, 10, 12, 14, 16, 21, 22, 28, 30, 38, 39], "predict_quantil": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "quantil": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "median": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "str": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33], "interpol": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "keyword": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 45], "argument": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "accept": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33], "n_quantil": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "present": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 32, 33, 38], "subset": [8, 10, 12, 14, 16, 27, 28, 30, 38], "harsh": [8, 10, 12, 14, 16, 27, 28, 30], "correctli": [8, 10, 12, 14, 16, 27, 28, 30], "w": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31], "set_fit_request": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "unchang": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "request": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 35], "enable_metadata_rout": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "set_config": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "rais": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "error": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "alia": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "origin": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38], "metadata_rout": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "retain": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "insid": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 44], "pipelin": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "set_param": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "nest": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "compon": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "__": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "so": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "set_partial_fit_request": [8, 10, 12, 14, 16, 27, 28, 30], "set_score_request": [8, 9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31], "properti": [8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 38], "higher": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 37, 38], "normal": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33, 37, 38, 44], "brought": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "known": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 25, 27, 28, 29, 30, 31, 32, 33, 37], "mislead": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "cardin": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "mani": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38], "permutation_import": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "altern": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33, 37], "root": [8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 32, 33], "squared_error": [9, 13, 15, 17, 29, 31], "absolute_error": [9, 13, 15, 17, 29, 31], "friedman_ms": [9, 13, 15, 17, 29, 31], "poisson": [9, 13, 15, 17, 29, 31], "select": [9, 13, 15, 17, 27, 28, 29, 30, 31, 32, 33, 37], "l2": [9, 13, 15, 17, 29, 31], "loss": [9, 13, 15, 17, 29, 31, 38], "termin": [9, 13, 15, 17, 29, 31], "friedman": [9, 13, 15, 17, 27, 28, 29, 31, 38], "absolut": [9, 13, 15, 17, 29, 31], "l1": [9, 13, 15, 17, 29, 31], "devianc": [9, 13, 15, 17, 29, 31], "find": [9, 11, 13, 15, 17, 27, 28, 29, 30, 31, 32, 33, 39], "slower": [9, 13, 15, 17], "mae": [9, 17], "equival": [9, 12, 13, 17, 28, 29, 38], "r2_score": [9, 13, 15, 17, 29, 31], "extratreesclassifi": [9, 16], "load_diabet": [9, 29, 31], "return_x_i": [9, 29, 31], "reg": 9, "2727": 9, "extratreeregressor": 9, "decisiontreeregressor": [9, 17, 29, 31], "oob_prediction_": [9, 15, 17], "coeffici": [9, 13, 15, 17, 29, 31], "determin": [9, 13, 15, 17, 29, 31, 38], "frac": [9, 13, 15, 17, 21, 22, 29, 31, 39], "u": [9, 13, 15, 17, 29, 31, 36, 37], "v": [9, 10, 13, 15, 17, 29, 31, 37, 38], "residu": [9, 13, 15, 17, 29, 31], "becaus": [9, 10, 11, 13, 15, 17, 29, 31, 38], "wors": [9, 13, 15, 17, 29, 31], "constant": [9, 13, 15, 17, 29, 31], "alwai": [9, 10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 36, 38], "expect": [9, 12, 13, 15, 17, 23, 28, 29, 30, 31, 37], "disregard": [9, 13, 15, 17, 29, 31], "precomput": [9, 11, 13, 15, 17, 29, 31], "kernel": [9, 13, 15, 17, 29, 31, 44], "n_samples_fit": [9, 13, 15, 17, 29, 31], "uniform_averag": [9, 13, 15, 17, 29, 31], "keep": [9, 13, 15, 17, 29, 31], "influenc": [9, 13, 15, 17, 29, 31], "multioutputregressor": [9, 13, 15, 17, 29, 31], "splitter": [10, 27, 28, 29, 30, 31, 32, 33], "honest_prior": [10, 27], "empir": [10, 17, 27, 38], "tree_estim": [10, 27], "strategi": [10, 27, 28, 29, 30, 31, 32, 33], "choos": [10, 27, 28, 29, 30, 31, 32, 33], "deal": [10, 27], "empti": [10, 27], "prior": [10, 27, 38, 39], "posterior": [10, 27], "remain": [10, 27], "larger": [10, 27, 37], "shallow": [10, 27], "randomli": [10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33], "permut": [10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 37], "ident": [10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33], "sever": [10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33, 37], "determinist": [10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33], "behaviour": [10, 12, 13, 14, 15, 16, 17, 27, 28, 29, 30, 31, 32, 33], "fix": [10, 12, 13, 14, 15, 16, 17, 23, 27, 28, 29, 30, 31, 32, 33, 42, 43, 44, 45], "honesti": [10, 38], "enabl": [10, 32], "unbias": 10, "confid": [10, 38], "doubl": 10, "amount": 10, "access": 10, "ineffici": 10, "greedi": 10, "recommend": [10, 18, 19, 28, 29, 30, 31, 35, 38], "propens": [10, 38], "causal": 10, "process": [10, 24, 27, 28, 29, 30, 31, 32, 33, 45], "separ": 10, "breiman": [10, 12, 13, 16, 17, 27, 28, 29, 37, 38], "45": [10, 12, 13, 16, 17, 21, 37, 38, 44], "32": [10, 12, 13, 16, 17, 37, 38], "2001": [10, 12, 13, 16, 17, 37, 38], "athei": [10, 27], "j": [10, 27, 28, 29, 36, 38], "tibshirani": [10, 27, 28, 29, 38], "wager": [10, 27], "annal": [10, 27], "statist": [10, 27, 28, 29, 37, 38], "2019": [10, 27], "honest_forest": [10, 27], "n_inform": [10, 12, 13, 15, 16, 17], "n_redund": [10, 12, 16], "honesttreeclassifi": [10, 44], "n_features_": [10, 12, 13, 14, 15], "honest_decision_function_": 10, "structure_indices_": [10, 27], "n_structur": [10, 27], "honest_indices_": [10, 27], "n_honest": [10, 27], "n_neighbor": 11, "radiu": [11, 23, 24, 26], "distanc": [11, 18, 19, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39], "basedecisiontre": [11, 27, 34], "baseforest": [11, 34], "kneighbor": 11, "radius_neighbor": 11, "return_dist": 11, "n_queri": 11, "n_index": 11, "Not": [11, 18, 19, 32, 33], "convent": [11, 18, 19, 32, 33], "constructor": 11, "neigh_dist": 11, "neigh_ind": 11, "popul": 11, "sort_result": 11, "ly": 11, "ball": 11, "around": [11, 45], "being": [11, 38], "accord": 11, "approxim": 11, "lie": 11, "cannot": 11, "effici": [11, 18, 19, 29, 31, 32, 42, 43, 44, 45], "1d": [11, 14, 15, 30, 31], "feature_combin": [12, 13, 18, 28, 29, 33, 37, 38], "tradit": [12, 13, 28, 29], "compute_similarity_matrix": [12, 13, 14, 15, 18, 19, 28, 29, 30, 31, 32, 33], "sim_matrix": [12, 13, 14, 15, 18, 19, 28, 29, 30, 31, 32, 33], "among": [12, 13, 14, 15, 18, 19, 24, 27, 28, 29, 30, 31, 32, 33], "obliquedecisiontreeregressor": [13, 15, 44], "tomita": [13, 14, 15, 30, 31, 35, 37], "journal": [13, 14, 15, 30, 31, 35, 37], "research": [13, 35, 37], "21": [13, 35, 37, 44], "104": [13, 35, 37], "39": [13, 35, 37], "2020": [13, 19, 35, 37, 39], "make_regress": [13, 15, 17], "regr": [13, 17], "86327109": 13, "patch": [14, 15, 30, 31, 44], "along": [14, 15, 25, 30, 31, 38], "presum": [14, 15, 30, 31], "un": [14, 15, 30, 31], "wrap": [14, 15, 30, 31], "scipi": [14, 15, 30, 31, 36], "adam": [14, 15, 30, 31, 35, 37, 44, 45], "li": [14, 15, 19, 30, 31, 35, 37, 39, 44, 45], "chester": [14, 15, 30, 31, 37], "huynh": [14, 15, 30, 31, 37], "tyler": [14, 15, 30, 31, 35, 37], "m": [14, 15, 30, 31, 35, 37, 38], "jesu": [14, 15, 30, 31, 37], "jess": [14, 15, 30, 31, 37], "patsol": [14, 15, 30, 31, 37], "ben": [14, 15, 30, 31, 37], "falk": [14, 15, 30, 31, 37], "sridevi": [14, 15, 30, 31, 37], "sarma": [14, 15, 30, 31, 37], "toward": [14, 15, 30, 31, 35, 37], "close": [14, 15, 30, 31, 35, 37], "gap": [14, 15, 27, 28, 29, 30, 31, 32, 33, 35, 37], "convolut": [14, 15, 30, 31, 35, 37], "network": [14, 15, 30, 31, 35, 37], "scienc": [14, 15, 30, 31, 35, 37], "77": [14, 15, 30, 31, 35, 37], "96": [14, 15, 30, 31, 35, 37], "2023": [14, 15, 30, 31, 35, 37], "21m1449117": [14, 15, 30, 31, 37], "82818509": 15, "patchobliquedecisiontreeregressor": [15, 44], "histogram": [16, 17], "gradient": [16, 17], "boost": [16, 17], "histgradientboostingclassifi": 16, "fast": [16, 17, 32, 41], "big": [16, 17], "10_000": [16, 17], "speed": [17, 39, 45], "histgradientboostingregressor": 17, "rather": [17, 39], "suggest": 17, "wherea": [17, 24, 38], "recent": 17, "justifi": 17, "32987858": 17, "twomean": [18, 19, 32, 33], "clustering_func": [18, 19, 32, 33], "clustering_func_arg": [18, 19, 32, 33], "unsupervis": [18, 19, 32, 33, 35, 41, 44, 45], "simultan": [18, 19], "affin": [18, 19, 32, 33], "do": [18, 19, 27, 28, 29, 30, 31, 32, 33, 37, 38], "fastbic": [18, 19, 32, 33, 44], "maxim": [18, 19], "bayesian": [18, 19, 39], "calinski_harabasz_scor": [18, 19], "predicted_label": [18, 19], "silhouette_scor": [18, 19], "davies_bouldin_scor": [18, 19], "cpu": [18, 19], "construct": [18, 19, 37, 38], "continu": [18, 19], "instant": [18, 19], "agglomerativeclust": [18, 19, 32, 33], "unsuperviseddecisiontre": [18, 19], "labels_": [18, 19], "similarity_matrix_": [18, 19], "oob": [18, 19], "dissimilarity_matrix_": [18, 19], "dissimilar": [18, 19, 44], "fit_predict": [18, 19, 32, 33], "int64": [18, 19, 32, 33], "fit_transform": [18, 19, 32, 33], "fit_param": [18, 19, 32, 33], "transform": [18, 19, 23, 32, 33], "x_new": [18, 19, 32, 33], "n_features_new": [18, 19, 32, 33], "set_output": [18, 19, 32, 33], "introduc": [18, 19, 32, 33], "configur": [18, 19, 32, 33], "typic": [18, 19, 32, 33, 38], "dens": [18, 19, 32, 33, 38], "meghana": [19, 35, 39], "madhyastha": [19, 35, 39], "perci": [19, 39], "jame": [19, 37, 39], "brown": [19, 37, 39], "veronika": [19, 39], "strnadova": [19, 39], "neelei": [19, 39], "carei": [19, 37, 39], "prieb": [19, 37, 39], "randal": [19, 37, 39], "burn": [19, 37, 39], "geodes": [19, 23, 32, 35, 39], "proceed": [19, 32, 39], "26th": [19, 39], "acm": [19, 39], "sigkdd": [19, 39], "confer": [19, 32, 39], "knowledg": [19, 38, 39], "discoveri": [19, 39], "mine": [19, 32, 39], "kdd": [19, 35, 39], "513": [19, 35, 39], "523": [19, 35, 39], "york": [19, 39], "ny": [19, 39], "usa": [19, 39], "machineri": [19, 39], "url": [19, 37, 39], "1145": [19, 39], "3394486": [19, 39], "3403094": [19, 39], "cov": [20, 21, 22, 25], "x_index": 20, "y_index": 20, "z_index": 20, "covari": [20, 21, 22, 23, 25], "true_mi": [20, 21, 22], "h": [20, 21, 22, 38], "plug": 20, "entropy_gaussian": 20, "det": [21, 22], "georg": 21, "darbellai": 21, "igor": 21, "vajda": 21, "observ": 21, "ieee": 21, "tran": 21, "theori": [21, 37], "1315": 21, "1321": 21, "1999": 21, "pi": [22, 24, 39], "kd_tree": 23, "rank": [23, 37], "ksg": 23, "arraylik": 23, "n_features_x": 23, "n_features_i": 23, "n_features_z": 23, "unsupervisedobliquerandomforest": 23, "knn": 23, "ball_tre": 23, "brute": 23, "preprocess": 23, "val": 23, "proce": 23, "kth": 23, "nbr": 23, "xyz": 23, "subspac": 23, "nn": [23, 32], "xz": 23, "yz": 23, "psi": 23, "n_x": 23, "n_y": 23, "n_": [23, 38], "digamma": 23, "term": [23, 24, 38, 39], "n_i": 23, "denot": [23, 24, 38], "could": 23, "radius_a": 24, "radius_b": 24, "obs_noise_func": 24, "nature_noise_func": 24, "005": [24, 26], "return_mi_lb": [24, 26], "helix": 24, "smallest": 24, "nois": [24, 26], "defauult": 24, "func": 24, "independ": [24, 38], "lb": [24, 26], "approx": 24, "unif": 24, "afterward": 24, "epsilon_1": 24, "co": 24, "n_1": 24, "epsilon_2": 24, "sin": 24, "n_2": 24, "epsilon_3": 24, "n_3": 24, "And": 24, "graphic": 24, "rightarrow": 24, "confound": 24, "impli": 24, "condition": 24, "depend": [24, 35], "1234": 25, "drawn": [25, 37], "2d": [25, 30, 31], "feed": 25, "default_rng": 25, "noise_func": 26, "sphere": 26, "latitud": 26, "longitud": 26, "y1": 26, "coordin": 26, "y2": 26, "y3": 26, "them": [27, 28, 29, 30, 31, 32, 33, 37], "But": [27, 28, 29, 30, 31, 32, 33], "instati": 27, "argmax": [27, 28], "ti": [27, 28], "lowest": [27, 28], "en": [27, 28, 29, 38], "wikipedia": [27, 28, 29, 38], "wiki": [27, 28, 29, 38], "decision_tree_learn": [27, 28, 29, 38], "olshen": [27, 28, 29], "stone": [27, 28, 29], "wadsworth": [27, 28, 29], "belmont": [27, 28, 29], "ca": [27, 28, 29], "1984": [27, 28, 29], "hasti": [27, 28, 29, 38], "springer": [27, 28, 29, 38], "2009": [27, 28, 29, 38], "cutler": [27, 28, 29], "stat": [27, 28, 29], "berkelei": [27, 28, 29], "edu": [27, 28, 29], "randomforest": [27, 28, 29], "cc_home": [27, 28, 29], "htm": [27, 28, 29], "cross_val_scor": [27, 28, 29, 31], "93333333": 27, "max_features_": [27, 28, 29, 30, 31], "tree_": [27, 28, 29, 30, 31, 32, 33], "_tree": [27, 28, 29, 30, 31], "understand": [27, 37], "basic": 27, "empirical_prior_": 27, "check_input": [27, 28, 29, 30, 31, 32, 33], "17": [27, 28, 29, 30, 31, 32, 33], "bypass": [27, 28, 29, 30, 31, 32, 33], "don": [27, 28, 29, 30, 31, 32, 33], "know": [27, 28, 29, 30, 31, 32, 33], "re": [27, 28, 29, 30, 31, 32, 33], "node_count": [27, 28, 29, 30, 31, 32, 33], "cost_complexity_pruning_path": [27, 28, 29, 30, 31, 32, 33], "ccp_path": [27, 28, 29, 30, 31, 32, 33], "bunch": [27, 28, 29, 30, 31, 32, 33], "dictionari": [27, 28, 29, 30, 31, 32, 33], "get_depth": [27, 28, 29, 30, 31, 32, 33], "leaf_nodes_sampl": [27, 28, 29, 30, 31, 32, 33], "get_n_leav": [27, 28, 29, 30, 31, 32, 33], "n_leav": [27, 28, 29, 30, 31, 32, 33], "proba": [27, 28, 30], "len": [27, 28, 29, 30, 31, 32, 33], "set_predict_proba_request": [27, 28, 30], "set_predict_request": [27, 28, 29, 30, 31, 32, 33], "fact": [28, 29], "better": [28, 29, 37, 38], "caveat": [28, 29], "willing": [28, 29, 38], "spend": [28, 29, 38], "resourc": [28, 29, 38], "93": 28, "86": [28, 44], "feature_combinations_": [28, 29], "taken": [28, 29, 37], "68908909": 29, "35854406": 29, "35223873": 29, "03616902": 29, "56008907": 29, "32235221": 29, "06945264": 29, "1465216": 29, "34597007": 29, "15308512": 29, "morf": [30, 31, 35, 44], "discontigu": [30, 31], "sensor": [30, 31], "mask": [30, 31], "onto": [30, 31], "data_width": [30, 31], "data_height": [30, 31], "tt": [30, 31], "last": [30, 31], "height": [30, 31], "width": [30, 31], "exactli": [30, 31, 37], "albeit": [30, 31], "efficienc": [30, 31], "min_patch_dims_": [30, 31], "max_patch_dims_": [30, 31], "data_dims_": [30, 31], "rg": 31, "10163671": 31, "78786738": 31, "01490768": 31, "32737289": 31, "24816698": 31, "41881754": 31, "0588273": 31, "48722913": 31, "07927208": 31, "15600762": 31, "unsupervisedcriterion": [32, 33], "abid": [32, 33], "unsupervisedsplitt": [32, 33], "faster": 32, "enablescomput": 32, "describ": [32, 38], "alexand": 32, "marx": 32, "jona": 32, "fischer": 32, "2022": [32, 35], "sdm": 32, "415": 32, "423": 32, "evimaria": 32, "terzi": 32, "panayioti": 32, "tsapara": 32, "sequenc": 32, "segment": 32, "316": 32, "327": 32, "assign": [32, 33, 39], "intermedi": 34, "Then": [34, 36], "count": 34, "aff_matrix": 34, "modern": 35, "supervis": [35, 39, 41], "extend": [35, 38], "strong": 35, "madhyastha2020": 35, "sporf": 35, "tomita2020": 35, "li2023": 35, "perry2021": 35, "plan": 35, "isol": [35, 36], "stream": 35, "xu2022": 35, "encourag": 35, "top": [35, 37], "pull": 35, "walk": 35, "contribut": [35, 37, 44, 45], "licens": 35, "under": 35, "bsd": 35, "et": 35, "al": 35, "preprint": 35, "xu": [35, 44], "haoyin": [35, 44], "simplest": 35, "2110": 35, "08483": 35, "document": [35, 37], "releas": 35, "histori": 35, "instal": 35, "pip": 35, "meson": 35, "conda": 35, "pypi": 36, "clone": 36, "repositori": 36, "neurodata": 36, "git": 36, "github": 36, "com": 36, "cd": 36, "virtual": 36, "environ": 36, "dev": 36, "build_requir": 36, "txt": 36, "spin": 36, "cli": 36, "local": 36, "abl": [36, 40], "edit": 36, "pend": 36, "repo": 36, "zipbal": 36, "master": 36, "forg": 36, "threadpoolctl": 36, "pytest": 36, "compil": 36, "llvm": 36, "openmp": 36, "poetri": 36, "next": 36, "directori": 36, "dodiscov": 36, "purpos": 36, "main": 36, "obliquepr": 36, "need": [36, 38, 40], "pr": 36, "22754": 36, "checkout": 36, "page": [36, 42], "instruct": 36, "obliquerandomforestregressor": [37, 44], "divers": 37, "sometim": 37, "slight": 37, "bia": 37, "aim": 37, "motiv": 37, "therebi": [37, 38], "practic": [37, 41], "often": [37, 39], "signific": 37, "henc": 37, "yield": 37, "overal": 37, "contrast": [37, 38], "candid": [37, 38], "intuit": [37, 38], "leo": 37, "assess": 37, "respect": [37, 39], "final": [37, 38], "essenti": 37, "abil": 37, "mdi": 37, "l2014": 37, "approach": 37, "suffer": 37, "flaw": 37, "conclus": 37, "deriv": 37, "most": [37, 38], "good": 37, "held": 37, "secondli": 37, "favor": 37, "explor": 37, "whose": 37, "match": 37, "jaewon": 37, "chung": 37, "benjamin": 37, "jason": 37, "yim": 37, "mauro": 37, "maggioni": 37, "jmlr": 37, "paper": [37, 38], "v21": 37, "664": 37, "html": 37, "loupp": 37, "phd": 37, "thesi": 37, "lieg": 37, "2014": 37, "ground": 38, "beyond": 38, "dt": 38, "ot": 38, "ref": 38, "rc": 38, "landmark": 38, "varieti": [38, 39], "lambda": 38, "tradeoff": 38, "similarli": 38, "anoth": 38, "major": [38, 42, 43, 44, 45], "definit": 38, "x_i": [38, 39], "recurs": 38, "group": [38, 39], "manner": 38, "orthogon": 38, "a_i": 38, "inner": 38, "product": 38, "langl": 38, "rangl": 38, "entri": 38, "rest": 38, "let": 38, "q_m": 38, "n_m": 38, "theta": 38, "t_m": 38, "x_j": 38, "leq": 38, "setminu": 38, "e_i": 38, "basi": 38, "elsewher": 38, "exact": 38, "handl": 38, "_featur": 38, "come": 38, "sparsiti": 38, "consider": 38, "pickl": 38, "disc": 38, "special": 38, "earlier": 38, "sai": 38, "desir": 38, "analysi": 38, "much": 38, "storag": 38, "ask": 38, "question": 38, "try": 38, "cross": 38, "procedur": 38, "gridsearchcv": 38, "There": 38, "moreov": 38, "imput": 38, "1023": 38, "1010933404324": 38, "predictive_analyt": 38, "quinlan": 38, "c4": 38, "program": 38, "morgan": 38, "kaufmann": 38, "1993": 38, "prevent": 38, "overfit": 38, "particular": 38, "common": [38, 39], "triplet": 38, "treatment": 38, "sacrific": 38, "mse": 38, "goal": 39, "identifi": 39, "pattern": 39, "techniqu": 39, "overview": 39, "cutpoint": 39, "cutoff": 39, "min_": 39, "sum_": 39, "hat": 39, "mu": 39, "_1": 39, "_2": 39, "sample_indic": 39, "popular": 39, "seleciton": 39, "kmean": 39, "flexibl": 39, "mclust": 39, "tri": 39, "mle": 39, "hard": 39, "soft": 39, "gmm": 39, "simpler": 39, "mathcal": 39, "x_n": 39, "sigma": 39, "quad": 39, "le": 39, "mu_j": 39, "notion": 39, "efficaci": 39, "scheme": 39, "adjusted_rand_scor": 39, "tip": [41, 42], "enhanc": [42, 43, 44, 45], "link": 42, "subscrib": 42, "io": 42, "notifi": 42, "jong": 44, "shin": 44, "bug": 44, "outsid": 44, "61": 44, "arbitrari": 44, "discontinu": 44, "sambit": 44, "per": 44, "67": 44, "70": 44, "patchobliquerandomforestregressor": 44, "suki": 44, "72": 44, "57": 44, "nearestneighborsmetaestim": 44, "83": 44, "thank": [44, 45], "everyon": [44, 45], "who": [44, 45], "mainten": [44, 45], "incept": [44, 45], "upgrad": 45, "reli": 45, "109": 45, "2x": 45, "114": 45}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[8, 1, 1, "", "ExtraTreesClassifier"], [9, 1, 1, "", "ExtraTreesRegressor"], [10, 1, 1, "", "HonestForestClassifier"], [11, 1, 1, "", "NearestNeighborsMetaEstimator"], [12, 1, 1, "", "ObliqueRandomForestClassifier"], [13, 1, 1, "", "ObliqueRandomForestRegressor"], [14, 1, 1, "", "PatchObliqueRandomForestClassifier"], [15, 1, 1, "", "PatchObliqueRandomForestRegressor"], [16, 1, 1, "", "RandomForestClassifier"], [17, 1, 1, "", "RandomForestRegressor"], [18, 1, 1, "", "UnsupervisedObliqueRandomForest"], [19, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ExtraTreesClassifier": [[8, 2, 1, "", "apply"], [8, 3, 1, "", "base_estimator_"], [8, 2, 1, "", "decision_path"], [8, 3, 1, "", "feature_importances_"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "get_leaf_node_samples"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "partial_fit"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_log_proba"], [8, 2, 1, "", "predict_proba"], [8, 2, 1, "", "predict_quantiles"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_partial_fit_request"], [8, 2, 1, "", "set_score_request"]], "sktree.ExtraTreesRegressor": [[9, 2, 1, "", "apply"], [9, 3, 1, "", "base_estimator_"], [9, 2, 1, "", "decision_path"], [9, 3, 1, "", "feature_importances_"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "get_leaf_node_samples"], [9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "predict_quantiles"], [9, 2, 1, "", "score"], [9, 2, 1, "", "set_fit_request"], [9, 2, 1, "", "set_params"], [9, 2, 1, "", "set_score_request"]], "sktree.HonestForestClassifier": [[10, 2, 1, "", "apply"], [10, 3, 1, "", "base_estimator_"], [10, 2, 1, "", "decision_path"], [10, 3, 1, "", "feature_importances_"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_leaf_node_samples"], [10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 3, 1, "", "honest_indices_"], [10, 2, 1, "", "partial_fit"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "predict_log_proba"], [10, 2, 1, "", "predict_proba"], [10, 2, 1, "", "predict_quantiles"], [10, 2, 1, "", "score"], [10, 2, 1, "", "set_fit_request"], [10, 2, 1, "", "set_params"], [10, 2, 1, "", "set_partial_fit_request"], [10, 2, 1, "", "set_score_request"], [10, 3, 1, "", "structure_indices_"]], "sktree.NearestNeighborsMetaEstimator": [[11, 2, 1, "", "fit"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "kneighbors"], [11, 2, 1, "", "radius_neighbors"], [11, 2, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[12, 2, 1, "", "apply"], [12, 3, 1, "", "base_estimator_"], [12, 2, 1, "", "compute_similarity_matrix"], [12, 2, 1, "", "decision_path"], [12, 3, 1, "", "feature_importances_"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_leaf_node_samples"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "partial_fit"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_log_proba"], [12, 2, 1, "", "predict_proba"], [12, 2, 1, "", "predict_quantiles"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_partial_fit_request"], [12, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[13, 2, 1, "", "apply"], [13, 3, 1, "", "base_estimator_"], [13, 2, 1, "", "compute_similarity_matrix"], [13, 2, 1, "", "decision_path"], [13, 3, 1, "", "feature_importances_"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "get_leaf_node_samples"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "predict_quantiles"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[14, 2, 1, "", "apply"], [14, 3, 1, "", "base_estimator_"], [14, 2, 1, "", "compute_similarity_matrix"], [14, 2, 1, "", "decision_path"], [14, 3, 1, "", "feature_importances_"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "get_leaf_node_samples"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "partial_fit"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "predict_log_proba"], [14, 2, 1, "", "predict_proba"], [14, 2, 1, "", "predict_quantiles"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_partial_fit_request"], [14, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[15, 2, 1, "", "apply"], [15, 3, 1, "", "base_estimator_"], [15, 2, 1, "", "compute_similarity_matrix"], [15, 2, 1, "", "decision_path"], [15, 3, 1, "", "feature_importances_"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_leaf_node_samples"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_quantiles"], [15, 2, 1, "", "score"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_score_request"]], "sktree.RandomForestClassifier": [[16, 2, 1, "", "apply"], [16, 3, 1, "", "base_estimator_"], [16, 2, 1, "", "decision_path"], [16, 3, 1, "", "feature_importances_"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "get_leaf_node_samples"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "partial_fit"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_log_proba"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "predict_quantiles"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_partial_fit_request"], [16, 2, 1, "", "set_score_request"]], "sktree.RandomForestRegressor": [[17, 2, 1, "", "apply"], [17, 3, 1, "", "base_estimator_"], [17, 2, 1, "", "decision_path"], [17, 3, 1, "", "feature_importances_"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "get_leaf_node_samples"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_quantiles"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[18, 2, 1, "", "apply"], [18, 3, 1, "", "base_estimator_"], [18, 2, 1, "", "compute_similarity_matrix"], [18, 2, 1, "", "decision_path"], [18, 3, 1, "", "feature_importances_"], [18, 2, 1, "", "fit"], [18, 2, 1, "", "fit_predict"], [18, 2, 1, "", "fit_transform"], [18, 2, 1, "", "get_leaf_node_samples"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_quantiles"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_output"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[19, 2, 1, "", "apply"], [19, 3, 1, "", "base_estimator_"], [19, 2, 1, "", "compute_similarity_matrix"], [19, 2, 1, "", "decision_path"], [19, 3, 1, "", "feature_importances_"], [19, 2, 1, "", "fit"], [19, 2, 1, "", "fit_predict"], [19, 2, 1, "", "fit_transform"], [19, 2, 1, "", "get_leaf_node_samples"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "predict_quantiles"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_output"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "transform"]], "sktree._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "sktree.experimental.mutual_info": [[20, 4, 1, "", "cmi_gaussian"], [21, 4, 1, "", "entropy_gaussian"], [22, 4, 1, "", "mi_gaussian"]], "sktree.experimental": [[23, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.simulate": [[24, 4, 1, "", "simulate_helix"], [25, 4, 1, "", "simulate_multivariate_gaussian"], [26, 4, 1, "", "simulate_sphere"]], "sktree.tree": [[27, 1, 1, "", "HonestTreeClassifier"], [28, 1, 1, "", "ObliqueDecisionTreeClassifier"], [29, 1, 1, "", "ObliqueDecisionTreeRegressor"], [30, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [31, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [32, 1, 1, "", "UnsupervisedDecisionTree"], [33, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [34, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.HonestTreeClassifier": [[27, 2, 1, "", "apply"], [27, 2, 1, "", "cost_complexity_pruning_path"], [27, 2, 1, "", "decision_path"], [27, 3, 1, "", "feature_importances_"], [27, 2, 1, "", "fit"], [27, 2, 1, "", "get_depth"], [27, 2, 1, "", "get_leaf_node_samples"], [27, 2, 1, "", "get_metadata_routing"], [27, 2, 1, "", "get_n_leaves"], [27, 2, 1, "", "get_params"], [27, 2, 1, "", "partial_fit"], [27, 2, 1, "", "predict"], [27, 2, 1, "", "predict_proba"], [27, 2, 1, "", "predict_quantiles"], [27, 2, 1, "", "score"], [27, 2, 1, "", "set_fit_request"], [27, 2, 1, "", "set_params"], [27, 2, 1, "", "set_partial_fit_request"], [27, 2, 1, "", "set_predict_proba_request"], [27, 2, 1, "", "set_predict_request"], [27, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[28, 2, 1, "", "apply"], [28, 2, 1, "", "compute_similarity_matrix"], [28, 2, 1, "", "cost_complexity_pruning_path"], [28, 2, 1, "", "decision_path"], [28, 3, 1, "", "feature_importances_"], [28, 2, 1, "", "fit"], [28, 2, 1, "", "get_depth"], [28, 2, 1, "", "get_leaf_node_samples"], [28, 2, 1, "", "get_metadata_routing"], [28, 2, 1, "", "get_n_leaves"], [28, 2, 1, "", "get_params"], [28, 2, 1, "", "partial_fit"], [28, 2, 1, "", "predict"], [28, 2, 1, "", "predict_log_proba"], [28, 2, 1, "", "predict_proba"], [28, 2, 1, "", "predict_quantiles"], [28, 2, 1, "", "score"], [28, 2, 1, "", "set_fit_request"], [28, 2, 1, "", "set_params"], [28, 2, 1, "", "set_partial_fit_request"], [28, 2, 1, "", "set_predict_proba_request"], [28, 2, 1, "", "set_predict_request"], [28, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[29, 2, 1, "", "apply"], [29, 2, 1, "", "compute_similarity_matrix"], [29, 2, 1, "", "cost_complexity_pruning_path"], [29, 2, 1, "", "decision_path"], [29, 3, 1, "", "feature_importances_"], [29, 2, 1, "", "fit"], [29, 2, 1, "", "get_depth"], [29, 2, 1, "", "get_leaf_node_samples"], [29, 2, 1, "", "get_metadata_routing"], [29, 2, 1, "", "get_n_leaves"], [29, 2, 1, "", "get_params"], [29, 2, 1, "", "predict"], [29, 2, 1, "", "predict_quantiles"], [29, 2, 1, "", "score"], [29, 2, 1, "", "set_fit_request"], [29, 2, 1, "", "set_params"], [29, 2, 1, "", "set_predict_request"], [29, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[30, 2, 1, "", "apply"], [30, 2, 1, "", "compute_similarity_matrix"], [30, 2, 1, "", "cost_complexity_pruning_path"], [30, 2, 1, "", "decision_path"], [30, 3, 1, "", "feature_importances_"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "get_depth"], [30, 2, 1, "", "get_leaf_node_samples"], [30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_n_leaves"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "partial_fit"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "predict_log_proba"], [30, 2, 1, "", "predict_proba"], [30, 2, 1, "", "predict_quantiles"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_fit_request"], [30, 2, 1, "", "set_params"], [30, 2, 1, "", "set_partial_fit_request"], [30, 2, 1, "", "set_predict_proba_request"], [30, 2, 1, "", "set_predict_request"], [30, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[31, 2, 1, "", "apply"], [31, 2, 1, "", "compute_similarity_matrix"], [31, 2, 1, "", "cost_complexity_pruning_path"], [31, 2, 1, "", "decision_path"], [31, 3, 1, "", "feature_importances_"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "get_depth"], [31, 2, 1, "", "get_leaf_node_samples"], [31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_n_leaves"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "predict_quantiles"], [31, 2, 1, "", "score"], [31, 2, 1, "", "set_fit_request"], [31, 2, 1, "", "set_params"], [31, 2, 1, "", "set_predict_request"], [31, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[32, 2, 1, "", "apply"], [32, 2, 1, "", "compute_similarity_matrix"], [32, 2, 1, "", "cost_complexity_pruning_path"], [32, 2, 1, "", "decision_path"], [32, 3, 1, "", "feature_importances_"], [32, 2, 1, "", "fit_predict"], [32, 2, 1, "", "fit_transform"], [32, 2, 1, "", "get_depth"], [32, 2, 1, "", "get_leaf_node_samples"], [32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_n_leaves"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "predict_quantiles"], [32, 2, 1, "", "set_fit_request"], [32, 2, 1, "", "set_output"], [32, 2, 1, "", "set_params"], [32, 2, 1, "", "set_predict_request"], [32, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[33, 2, 1, "", "apply"], [33, 2, 1, "", "compute_similarity_matrix"], [33, 2, 1, "", "cost_complexity_pruning_path"], [33, 2, 1, "", "decision_path"], [33, 3, 1, "", "feature_importances_"], [33, 2, 1, "", "fit_predict"], [33, 2, 1, "", "fit_transform"], [33, 2, 1, "", "get_depth"], [33, 2, 1, "", "get_leaf_node_samples"], [33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_n_leaves"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "predict"], [33, 2, 1, "", "predict_quantiles"], [33, 2, 1, "", "set_fit_request"], [33, 2, 1, "", "set_output"], [33, 2, 1, "", "set_params"], [33, 2, 1, "", "set_predict_request"], [33, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 44, 45], "scikit": [0, 35, 40], "learn": 0, "tree": [0, 2, 6, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40], "estim": 0, "supervis": [0, 38], "unsupervis": [0, 39], "distanc": 0, "metric": 0, "experiment": [0, 20, 21, 22, 23, 24, 25, 26], "function": 0, "exampl": [1, 10, 12, 28, 30, 37, 40], "plot": [2, 3, 4, 5, 6], "decis": [2, 38, 39], "surfac": 2, "train": 2, "iri": 2, "dataset": [2, 4], "obliqu": [3, 4, 6, 37, 38], "forest": [3, 4, 5, 37], "axi": [3, 4], "align": [3, 4], "random": [3, 4, 37], "predict": [3, 4], "spars": 3, "pariti": 3, "simul": [3, 5, 24, 25, 26], "cc18": 4, "honest": [5, 38], "calibr": 5, "overlap": 5, "gaussian": 5, "refer": [5, 35, 37, 38, 39], "project": 6, "matric": 6, "an": 6, "initi": 6, "patch": 6, "splitter": 6, "gener": 6, "1d": 6, "2d": 6, "3d": 6, "discontigu": 6, "comput": 7, "time": 7, "sktree": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "extratreesclassifi": 8, "extratreesregressor": 9, "honestforestclassifi": 10, "us": [10, 12, 28, 30, 38, 40], "nearestneighborsmetaestim": 11, "obliquerandomforestclassifi": 12, "obliquerandomforestregressor": 13, "patchobliquerandomforestclassifi": 14, "patchobliquerandomforestregressor": 15, "randomforestclassifi": 16, "randomforestregressor": 17, "unsupervisedobliquerandomforest": 18, "unsupervisedrandomforest": 19, "mutual_info": [20, 21, 22], "cmi_gaussian": 20, "entropy_gaussian": 21, "mi_gaussian": 22, "mutual_info_ksg": 23, "simulate_helix": 24, "simulate_multivariate_gaussian": 25, "simulate_spher": 26, "honesttreeclassifi": 27, "obliquedecisiontreeclassifi": 28, "obliquedecisiontreeregressor": 29, "patchobliquedecisiontreeclassifi": 30, "patchobliquedecisiontreeregressor": 31, "unsuperviseddecisiontre": 32, "unsupervisedobliquedecisiontre": 33, "compute_forest_similarity_matrix": 34, "content": 35, "get": 35, "start": 35, "indic": 35, "tabl": 35, "instal": 36, "depend": 36, "pip": 36, "from": 36, "sourc": 36, "meson": 36, "conda": 36, "recommend": 36, "featur": 37, "import": 37, "evalu": [37, 39], "differ": 38, "compar": 38, "mathemat": 38, "formul": 38, "classif": 38, "regress": 38, "multi": 38, "output": 38, "problem": 38, "complex": 38, "tip": 38, "practic": 38, "limit": 38, "criterion": 39, "two": 39, "mean": 39, "fast": 39, "bic": 39, "user": 41, "guid": 41, "releas": 42, "histori": 42, "what": [44, 45], "": [44, 45], "new": [44, 45], "version": [44, 45], "0": [44, 45], "1": 44, "changelog": [44, 45], "code": [44, 45], "contributor": [44, 45], "2": 45}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Distance Metrics": [[0, "distance-metrics"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Examples": [[1, "examples"], [40, "examples"]], "Plot the decision surface of decision trees trained on the iris dataset": [[2, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[3, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[4, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[5, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[5, "references"], [35, null], [37, null], [37, null], [39, null]], "Plot the projection matrices of an oblique tree": [[6, "plot-the-projection-matrices-of-an-oblique-tree"]], "Initialize patch splitter": [[6, "initialize-patch-splitter"]], "Generate 1D patches": [[6, "generate-1d-patches"]], "Generate 2D patches": [[6, "generate-2d-patches"]], "Generate 3D patches": [[6, "generate-3d-patches"]], "Discontiguous Patches": [[6, "discontiguous-patches"]], "Computation times": [[7, "computation-times"]], "sktree.ExtraTreesClassifier": [[8, "sktree-extratreesclassifier"]], "sktree.ExtraTreesRegressor": [[9, "sktree-extratreesregressor"]], "sktree.HonestForestClassifier": [[10, "sktree-honestforestclassifier"]], "Examples using sktree.HonestForestClassifier": [[10, "examples-using-sktree-honestforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[11, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[12, "sktree-obliquerandomforestclassifier"]], "Examples using sktree.ObliqueRandomForestClassifier": [[12, "examples-using-sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[13, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[14, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[15, "sktree-patchobliquerandomforestregressor"]], "sktree.RandomForestClassifier": [[16, "sktree-randomforestclassifier"]], "sktree.RandomForestRegressor": [[17, "sktree-randomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[18, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[19, "sktree-unsupervisedrandomforest"]], "sktree.experimental.mutual_info.cmi_gaussian": [[20, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[21, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[22, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[23, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[24, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[25, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[26, "sktree-experimental-simulate-simulate-sphere"]], "sktree.tree.HonestTreeClassifier": [[27, "sktree-tree-honesttreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[28, "sktree-tree-obliquedecisiontreeclassifier"]], "Examples using sktree.tree.ObliqueDecisionTreeClassifier": [[28, "examples-using-sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[29, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[30, "sktree-tree-patchobliquedecisiontreeclassifier"]], "Examples using sktree.tree.PatchObliqueDecisionTreeClassifier": [[30, "examples-using-sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[31, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[32, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[33, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[34, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[35, "scikit-tree"]], "Contents": [[35, "contents"]], "Getting started:": [[35, null]], "Indices and tables": [[35, "indices-and-tables"]], "Installation": [[36, "installation"]], "Dependencies": [[36, "dependencies"]], "Installing with pip": [[36, "installing-with-pip"]], "Installing from source with Meson": [[36, "installing-from-source-with-meson"]], "Conda (Recommended)": [[36, "conda-recommended"]], "Oblique Random Forests": [[37, "oblique-random-forests"]], "Examples:": [[37, null]], "Feature importance evaluation": [[37, "feature-importance-evaluation"]], "Supervised Decision Trees": [[38, "supervised-decision-trees"]], "Oblique Trees": [[38, "oblique-trees"]], "Differences compared to decision trees": [[38, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[38, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[38, "classification-regression-and-multi-output-problems"]], "Complexity": [[38, "complexity"]], "Tips on practical use": [[38, "tips-on-practical-use"]], "Limitations compared to decision trees": [[38, "limitations-compared-to-decision-trees"]], "References:": [[38, null]], "Honest Trees": [[38, "honest-trees"]], "Unsupervised Decision Trees": [[39, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[39, "unsupervised-criterion"]], "Two-Means": [[39, "two-means"]], "Fast-BIC": [[39, "fast-bic"]], "Evaluating Unsupervised Trees": [[39, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[40, "examples-using-scikit-tree"]], "User Guide": [[41, "user-guide"]], "Release History": [[42, "release-history"]], "What\u2019s new?": [[44, "what-s-new"], [45, "what-s-new"]], "Version 0.1": [[44, "version-0-1"]], "Changelog": [[44, "changelog"], [45, "changelog"]], "Code and Documentation Contributors": [[44, "code-and-documentation-contributors"], [45, "code-and-documentation-contributors"]], "Version 0.2": [[45, "version-0-2"]]}, "indexentries": {"module": [[0, "module-sktree"], [0, "module-sktree._lib.sklearn.ensemble"]], "sktree": [[0, "module-sktree"]], "sktree._lib.sklearn.ensemble": [[0, "module-sktree._lib.sklearn.ensemble"]], "extratreesclassifier (class in sktree)": [[8, "sktree.ExtraTreesClassifier"]], "apply() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.apply"]], "base_estimator_ (sktree.extratreesclassifier property)": [[8, "sktree.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sktree.extratreesclassifier property)": [[8, "sktree.ExtraTreesClassifier.feature_importances_"]], "fit() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.get_params"]], "partial_fit() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.partial_fit"]], "predict() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.predict"]], "predict_log_proba() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.predict_quantiles"]], "score() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.score"]], "set_fit_request() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.set_fit_request"]], "set_params() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.set_params"]], "set_partial_fit_request() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.set_partial_fit_request"]], "set_score_request() (sktree.extratreesclassifier method)": [[8, "sktree.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sktree)": [[9, "sktree.ExtraTreesRegressor"]], "apply() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.apply"]], "base_estimator_ (sktree.extratreesregressor property)": [[9, "sktree.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sktree.extratreesregressor property)": [[9, "sktree.ExtraTreesRegressor.feature_importances_"]], "fit() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.get_params"]], "predict() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.predict"]], "predict_quantiles() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.predict_quantiles"]], "score() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.score"]], "set_fit_request() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.set_fit_request"]], "set_params() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.set_params"]], "set_score_request() (sktree.extratreesregressor method)": [[9, "sktree.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in sktree)": [[10, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.apply"]], "base_estimator_ (sktree.honestforestclassifier property)": [[10, "sktree.HonestForestClassifier.base_estimator_"]], "decision_path() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.decision_path"]], "feature_importances_ (sktree.honestforestclassifier property)": [[10, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.get_params"]], "honest_indices_ (sktree.honestforestclassifier property)": [[10, "sktree.HonestForestClassifier.honest_indices_"]], "partial_fit() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.partial_fit"]], "predict() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.predict_proba"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.honestforestclassifier method)": [[10, "sktree.HonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.honestforestclassifier property)": [[10, "sktree.HonestForestClassifier.structure_indices_"]], "nearestneighborsmetaestimator (class in sktree)": [[11, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[11, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[12, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.obliquerandomforestclassifier property)": [[12, "sktree.ObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[12, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[12, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[13, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.obliquerandomforestregressor property)": [[13, "sktree.ObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[13, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.get_params"]], "predict() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[13, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[14, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.patchobliquerandomforestclassifier property)": [[14, "sktree.PatchObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[14, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[14, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[15, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.patchobliquerandomforestregressor property)": [[15, "sktree.PatchObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[15, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[15, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in sktree)": [[16, "sktree.RandomForestClassifier"]], "apply() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.apply"]], "base_estimator_ (sktree.randomforestclassifier property)": [[16, "sktree.RandomForestClassifier.base_estimator_"]], "decision_path() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.decision_path"]], "feature_importances_ (sktree.randomforestclassifier property)": [[16, "sktree.RandomForestClassifier.feature_importances_"]], "fit() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.get_params"]], "partial_fit() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.partial_fit"]], "predict() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.predict"]], "predict_log_proba() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.predict_quantiles"]], "score() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.score"]], "set_fit_request() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.set_fit_request"]], "set_params() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.randomforestclassifier method)": [[16, "sktree.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sktree)": [[17, "sktree.RandomForestRegressor"]], "apply() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.apply"]], "base_estimator_ (sktree.randomforestregressor property)": [[17, "sktree.RandomForestRegressor.base_estimator_"]], "decision_path() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.decision_path"]], "feature_importances_ (sktree.randomforestregressor property)": [[17, "sktree.RandomForestRegressor.feature_importances_"]], "fit() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.get_params"]], "predict() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.predict"]], "predict_quantiles() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.predict_quantiles"]], "score() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.score"]], "set_fit_request() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.set_fit_request"]], "set_params() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.set_params"]], "set_score_request() (sktree.randomforestregressor method)": [[17, "sktree.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[18, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedobliquerandomforest property)": [[18, "sktree.UnsupervisedObliqueRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[18, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[18, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[19, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedrandomforest property)": [[19, "sktree.UnsupervisedRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[19, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[19, "sktree.UnsupervisedRandomForest.transform"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[20, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[21, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[22, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[23, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[24, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[25, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[26, "sktree.experimental.simulate.simulate_sphere"]], "honesttreeclassifier (class in sktree.tree)": [[27, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[27, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.get_params"]], "partial_fit() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.partial_fit"]], "predict() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "score() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.score"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.honesttreeclassifier method)": [[27, "sktree.tree.HonestTreeClassifier.set_score_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[28, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[29, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[30, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[31, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[32, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[32, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[32, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[33, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[34, "sktree.tree.compute_forest_similarity_matrix"]]}})