Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_iris_dtc", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/plot_oblique_random_forest", "auto_examples/plot_overlapping_gaussians", "auto_examples/plot_projection_matrices", "auto_examples/sg_execution_times", "generated/sktree.HonestForestClassifier", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_iris_dtc.rst", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/plot_oblique_random_forest.rst", "auto_examples/plot_overlapping_gaussians.rst", "auto_examples/plot_projection_matrices.rst", "auto_examples/sg_execution_times.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst"], "titles": ["API Documentation", "Examples", "Plot the decision surface of decision trees trained on the iris dataset", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Plot honest forest calibrations on overlapping gaussian simulations", "Plot the projection matrices of an oblique tree", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "What\u2019s new?"], "terms": {"sktree": [0, 2, 3, 4, 5, 6, 23, 25], "scikit": [0, 1, 2, 13, 14, 20, 21, 23, 24, 25, 29, 31], "manifold": [0, 6, 11, 12, 18, 19, 24, 31], "obliqu": [0, 1, 2, 7, 9, 10, 11, 12, 13, 16, 17, 18, 19, 21, 22, 23, 27, 28, 31], "random": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 27, 28, 31], "forest": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 25, 27, 28, 31], "decis": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 27, 28], "tree": [0, 1, 5, 7, 8, 9, 10, 11, 12, 13, 14, 23, 24, 28, 29, 31], "model": [0, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 31], "ar": [0, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 29], "tradition": 0, "implement": [0, 6, 8, 16, 17, 24, 25, 31], "axi": [0, 1, 2, 5, 6, 7, 9, 10, 11, 12, 16, 17, 18, 19, 24, 25, 27, 31], "align": [0, 1, 2, 7, 9, 10, 11, 12, 16, 17, 18, 19, 24, 25, 27], "split": [0, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "store": [0, 13, 14, 24, 25], "mean": [0, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 28, 31], "outcom": 0, "i": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31], "e": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25], "label": [0, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26], "vote": [0, 8, 9, 11, 13, 14, 15], "leaf": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "node": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "howev": [0, 25], "more": [0, 2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25], "exot": 0, "possibl": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "call": [0, 8, 9, 10, 11, 12, 17, 18, 19], "which": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26], "some": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 27], "function": [0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "multipl": [0, 6, 25], "featur": [0, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 28, 29, 30, 31], "column": [0, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 31], "creat": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24], "new": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 29], "valu": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "thi": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 29], "can": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 31], "take": [0, 2, 13, 14, 20, 21], "form": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "spars": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27], "linear": [0, 2], "combin": [0, 2, 9, 10, 13, 16, 17, 21, 24, 25, 26], "even": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "advantag": 0, "structur": [0, 2, 6, 8, 15, 18, 19, 26, 31], "data": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 31], "g": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "an": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 31], "imag": [0, 6, 18, 19], "sampl": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 31], "indic": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "awar": [0, 18, 19], "fashion": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "class": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26], "gener": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 24, 25, 26, 27, 31], "while": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "everyth": [0, 27], "els": [0, 4], "consist": [0, 4, 6, 8, 9, 10, 11, 12, 13, 14, 17, 19, 20, 21, 25], "how": [0, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27], "learn": [0, 2, 8, 9, 10, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27], "build": [0, 8, 9, 10, 11, 12, 15, 16, 17, 22, 23], "us": [0, 1, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 26, 28], "classif": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 28], "regress": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28], "thei": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "also": [0, 2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25], "power": [0, 24], "non": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "parametr": [0, 25], "embed": 0, "cluster": [0, 5, 13, 14, 20, 21, 26], "The": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "randomtreesembed": 0, "exampl": [0, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 26], "we": [0, 2, 5, 6, 8, 22, 23, 24, 25, 26, 31], "other": [0, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "state": 0, "art": 0, "explicitli": 0, "base": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26], "criterion": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28, 31], "varianc": [0, 8, 10, 12, 13, 14, 15, 17, 19, 20, 21, 24, 26], "bic": [0, 13, 14, 20, 21, 28], "compris": [0, 18, 19], "those": [0, 8, 9, 10, 11, 12, 15, 16, 17, 24, 25], "avail": [0, 8, 9, 10, 11, 12, 13, 14, 23], "standalon": 0, "demonstr": [1, 6, 27], "algorithm": [1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 27], "plot": [1, 7, 8, 9, 16, 18, 24, 27], "honest": [1, 7, 8, 15, 27, 28], "calibr": [1, 7, 8, 25, 27], "overlap": [1, 7, 8, 27], "gaussian": [1, 7, 8, 26, 27], "simul": [1, 7, 8, 9, 24, 27], "predict": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27], "cc18": [1, 7, 9, 24, 27], "dataset": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 24, 25, 27], "pariti": [1, 7, 9, 24, 27], "surfac": [1, 6, 7, 16, 27], "train": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 27], "iri": [1, 7, 15, 16, 25, 27], "project": [1, 2, 4, 7, 9, 10, 16, 17, 18, 23, 24, 25, 27, 31], "matric": [1, 7, 13, 14, 18, 25, 27, 31], "download": [1, 2, 3, 4, 5, 6, 27], "all": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26, 27, 29, 31], "python": [1, 2, 3, 4, 5, 6, 23, 27], "sourc": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27], "code": [1, 2, 3, 4, 5, 6, 20, 21, 23, 27], "auto_examples_python": [1, 27], "zip": [1, 2, 5, 27], "jupyt": [1, 2, 3, 4, 5, 6, 27], "notebook": [1, 2, 3, 4, 5, 6, 27], "auto_examples_jupyt": [1, 27], "galleri": [1, 2, 3, 4, 5, 6, 27], "sphinx": [1, 2, 3, 4, 5, 6, 27], "go": [2, 3, 4, 5, 6], "end": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "full": [2, 3, 4, 5, 6], "pair": [2, 25], "see": [2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26], "inform": [2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "estim": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "For": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "each": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "boundari": [2, 6, 11, 12, 18, 19, 31], "made": 2, "simpl": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "threshold": [2, 25], "rule": 2, "infer": [2, 15, 16, 17, 18, 19], "from": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 22, 24, 25, 26], "same": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 24, 25], "regular": [2, 5], "show": [2, 3, 5, 6], "built": [2, 24, 25], "first": [2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25], "load": [2, 4], "copi": 2, "ship": 2, "sklearn": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26], "import": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 28], "load_iri": [2, 15, 16, 25], "matplotlib": [2, 3, 4, 5, 6, 23], "pyplot": [2, 3, 4, 5, 6], "plt": [2, 3, 4, 5, 6], "displai": 2, "numpi": [2, 3, 5, 6, 11, 12, 15, 16, 18, 19, 23], "np": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "inspect": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "decisionboundarydisplai": 2, "_lib": [2, 6], "decisiontreeclassifi": [2, 8, 15, 16, 17], "plot_tre": 2, "obliquedecisiontreeclassifi": [2, 9, 11, 17, 25], "paramet": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "n_class": [2, 8, 9, 10, 11, 15, 16, 18], "3": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], "plot_color": 2, "ryb": 2, "plot_step": 2, "0": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29], "02": 2, "clf_label": 2, "random_st": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "123456": [2, 3, 4], "clf": [2, 3, 4, 5, 8, 9, 15, 16, 25], "fig": [2, 3, 4, 5, 6], "ax": [2, 3, 4, 5, 6, 25], "subplot": [2, 3, 4, 5, 6], "2": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26], "flatten": [2, 6], "pairidx": 2, "enumer": [2, 3, 4, 6, 8, 9, 10, 11, 12], "1": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29], "onli": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "two": [2, 4, 5, 13, 14, 24, 25, 28, 31], "correspond": [2, 8, 9, 11, 12, 15, 16, 17, 18, 19, 20, 21], "x": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26], "y": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "target": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "fit": [2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "tight_layout": [2, 5], "h_pad": 2, "5": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 21, 24, 25], "w_pad": 2, "pad": 2, "from_estim": 2, "cmap": [2, 6], "cm": [2, 5], "rdylbu": 2, "response_method": 2, "xlabel": 2, "feature_nam": 2, "ylabel": 2, "point": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "color": [2, 3, 4, 5, 6], "rang": [2, 3, 6, 18, 19], "idx": [2, 6], "where": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26, 31], "scatter": [2, 5, 6], "c": [2, 5, 15, 16, 17, 18, 19, 23], "target_nam": 2, "edgecolor": [2, 5], "black": [2, 6], "": [2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29], "15": 2, "suptitl": [2, 6], "f": [2, 3, 4, 6], "legend": [2, 3, 5], "loc": [2, 3, 5], "lower": [2, 8, 15, 25], "right": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "borderpad": 2, "handletextpad": 2, "_": 2, "tight": 2, "home": [2, 5], "circleci": [2, 5], "plot_iris_dtc": [2, 7], "py": [2, 3, 4, 5, 6, 7], "78": 2, "userwarn": 2, "No": 2, "colormap": 2, "provid": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "via": [2, 16, 17, 23, 24], "ignor": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "singl": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "togeth": [2, 25, 26], "figur": [2, 5, 6], "fill": 2, "true": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "titl": [2, 6], "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "run": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 23, 25], "time": [2, 3, 4, 5, 6, 13, 14, 16, 17, 18, 19, 25], "script": [2, 3, 4, 5, 6], "minut": [2, 3, 4, 5, 6], "444": [2, 7], "second": [2, 3, 4, 5, 6, 25], "memori": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 15, 16, 17], "usag": [2, 3, 4, 5, 6, 15], "14": [2, 6], "mb": [2, 3, 4, 5, 6, 7], "ipynb": [2, 3, 4, 5, 6], "A": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 31], "perform": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26], "comparison": [3, 4], "between": [3, 4, 15, 16, 17, 18, 19, 20, 21, 25], "standard": [3, 4, 18, 19, 25], "variat": 3, "noisi": 3, "problem": [3, 8, 9, 11, 15, 16, 18, 22, 28], "itself": [3, 13, 14], "multivari": [3, 6, 18, 19], "xor": 3, "binari": 3, "task": [3, 22], "high": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "dimens": [3, 6, 11, 12, 13, 14, 18, 19, 20, 21, 25], "uniformli": [3, 6], "distribut": [3, 25, 26], "n_sampl": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "number": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "p": [3, 5, 8, 9, 11, 24], "limit": [3, 28], "carri": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "about": [3, 25], "defin": [3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "odd": 3, "sum": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "across": [3, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21], "greater": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "than": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "otherwis": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "further": 3, "detail": [3, 4, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21], "public": [3, 6, 24], "http": [3, 4, 14, 15, 16, 17, 23, 25], "epub": 3, "siam": 3, "org": [3, 4, 14, 15, 16, 17, 23, 25], "doi": [3, 14, 25], "epdf": 3, "10": [3, 5, 14, 15, 16, 17, 19, 25], "1137": 3, "9781611974973": 3, "56": 3, "It": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26], "took": [3, 4], "6": [3, 4, 6, 7, 23], "datetim": [3, 4], "panda": [3, 4, 13, 14, 20, 21, 31], "pd": [3, 4], "seaborn": [3, 4], "sn": [3, 4], "ensembl": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 24], "randomforestclassifi": [3, 4, 5, 9, 11], "model_select": [3, 4, 5, 15, 16, 17, 19], "repeatedkfold": [3, 4], "cross_valid": [3, 4], "obliquerandomforestclassifi": [3, 4, 24], "t0": [3, 4], "now": [3, 4, 6, 23, 31], "def": [3, 4, 5], "sparse_par": 3, "20": [3, 14], "p_star": 3, "random_se": 3, "none": [3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "kwarg": [3, 4], "seed": [3, 13, 14], "uniform": [3, 8, 15], "zero": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "return": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "get_scor": [3, 4], "n_cv": [3, 4], "n_repeat": [3, 4], "tmp": [3, 4], "cv": [3, 4, 5, 15, 16, 17, 19], "n_split": [3, 4], "test_scor": [3, 4], "score": [3, 4, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19], "accuraci": [3, 4, 8, 9, 10, 11, 12, 16, 18], "append": [3, 4], "rf": [3, 4, 5, 25], "OF": [3, 4], "df": [3, 4], "datafram": [3, 4, 13, 14, 20, 21], "explod": [3, 4], "astyp": [3, 4, 6], "float": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "reset_index": [3, 4], "inplac": [3, 4], "drop": [3, 4, 25], "grid": [3, 6], "search": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "hyper": 3, "param": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "max_featur": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "n_estim": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14], "100": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14], "max_depth": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "40": 3, "1000": [3, 8, 9], "t_d": 3, "print": [3, 4, 6, 8, 9, 10, 12], "draw": [3, 4, 8, 9, 10, 11, 12, 13, 14], "figsiz": [3, 5, 6], "stripplot": [3, 4], "dodg": [3, 4], "boxplot": [3, 4], "white": [3, 4], "set_titl": [3, 4], "queri": [3, 4], "iloc": [3, 4], "rff": 3, "test": [3, 5, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 23], "round": [3, 8, 9, 10, 11, 12], "off": 3, "4": [3, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18], "savefig": [3, 5], "plot_sim_": 3, "jpg": 3, "7": 3, "545": [3, 7], "9": [3, 4, 5, 6, 7, 23, 31], "plot_oblique_axis_aligned_forests_sparse_par": [3, 7], "three": 4, "openml": 4, "benchmark": [4, 22], "suit": 4, "name": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "wdbc": 4, "www": [4, 15, 16, 17], "type": [4, 8, 15, 25, 31], "sort": [4, 5, 8, 26], "id": 4, "1510": 4, "phish": 4, "websit": 4, "4534": 4, "31": 4, "former": 4, "entir": [4, 11, 12, 18, 19], "numer": 4, "latter": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "normin": 4, "third": 4, "dub": 4, "cnae": 4, "statu": 4, "activ": [4, 23], "1468": 4, "ha": [4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 31], "notabl": 4, "larg": [4, 8, 9, 10, 11, 12, 15, 16, 17], "space": [4, 13, 14, 20, 21, 25], "857": 4, "As": [4, 25], "you": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27], "notic": 4, "outperform": [4, 25], "util": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "mechan": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "subsampl": [4, 8, 15, 25], "due": 4, "comput": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 31], "constraint": 4, "phishingwebsit": 4, "23": [4, 10, 12, 17, 19, 23], "fetch_openml": 4, "data_id": 4, "load_cc18": 4, "as_fram": 4, "parser": 4, "extract": 4, "d_name": 4, "n": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 31], "int": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "frame": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "8": [4, 6, 15, 23], "dtype": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "object": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "50": [4, 5], "concat": 4, "uniqu": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "set_size_inch": 4, "set_ylabel": [4, 5], "set_xlabel": [4, 5], "25": [4, 5, 6, 7], "126": [4, 7], "44": [4, 7], "plot_oblique_random_forest": [4, 7], "compar": [5, 16, 17, 18, 19, 28], "result": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26], "variou": [5, 9, 10, 11, 12], "method": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "achiev": [5, 22, 24], "improv": [5, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 24, 25, 31], "user": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 31], "guid": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 31], "includ": [5, 8, 9, 11, 15, 16, 18, 31], "isoton": 5, "irf": 5, "sigmoid": 5, "sigrf": 5, "without": [5, 26], "curv": [5, 25], "differ": [5, 15, 16, 17, 18, 19, 20, 21, 28], "red": 5, "line": 5, "closest": 5, "ideal": [5, 23], "reproduc": 5, "ronan": [5, 11, 12, 18, 19, 31], "perri": [5, 11, 12, 18, 19, 31], "ronak": [5, 11, 12, 18, 19], "mehta": [5, 11, 12, 18, 19], "richard": 5, "guo": 5, "eva": 5, "yezeret": 5, "jes\u00fa": 5, "arroyo": [5, 11, 12, 18, 19], "mike": 5, "powel": 5, "hayden": 5, "helm": 5, "cencheng": 5, "shen": 5, "joshua": [5, 11, 12, 14, 18, 19], "t": [5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 25], "vogelstein": [5, 11, 12, 14, 18, 19], "adapt": [5, 13, 14, 26], "nearest": 5, "neighbor": 5, "theoret": 5, "quantiti": 5, "arxiv": [5, 11, 12, 18, 19, 24], "2021": 5, "1907": 5, "00325": 5, "necessari": [5, 23], "modul": [5, 6, 22], "librari": [5, 29, 31], "calibratedclassifiercv": 5, "train_test_split": 5, "honestforestclassifi": [5, 31], "classifi": [5, 8, 9, 11, 15, 16, 17, 18], "color_dict": 5, "honestrf": 5, "f41711": 5, "1b9e77": 5, "377eb8": 5, "fdae61": 5, "n_job": [5, 8, 9, 10, 11, 12, 13, 14], "clf_cv": 5, "rep": 5, "honest_fract": [5, 8, 15], "base_estim": 5, "likelihood": [5, 26], "lik1": 5, "prod": 5, "exp": 5, "asarrai": 5, "lik0": 5, "60000": 5, "n_bin": 5, "bin": 5, "calibration_curv": 5, "have": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "here": [5, 6, 8, 25, 27, 31], "blob": 5, "contain": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "half": 5, "posit": [5, 24, 26], "neg": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "probabl": [5, 8, 9, 11, 13, 14, 15, 16, 18, 25], "therefor": [5, 8, 9, 10, 11, 12, 18, 19, 24, 25], "center": [5, 13, 14, 20, 21], "make_blob": 5, "shuffl": [5, 8, 9, 10, 12], "fals": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "42": [5, 24], "sample_weight": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "randomst": [5, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21], "rand": 5, "x_train": 5, "x_test": 5, "y_train": 5, "y_test": 5, "sw_train": 5, "sw_test": 5, "test_siz": 5, "class_one_prob": 5, "predict_proba": [5, 8, 9, 11, 15, 16, 18], "pyenv": 5, "version": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 29], "17": [5, 15, 16, 17, 18, 19, 20, 21], "lib": 5, "python3": 5, "site": 5, "packag": [5, 22, 23], "301": 5, "futurewarn": 5, "wa": [5, 8, 9, 10, 11, 13, 14, 25], "renam": 5, "remov": 5, "warn": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "y_uniqu": 5, "rainbow": 5, "linspac": 5, "size": [5, 6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 25], "this_i": 5, "this_x": 5, "this_sw": 5, "newaxi": 5, "alpha": [5, 6, 15, 16, 17, 18, 19, 20, 21], "k": 5, "best": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "set_xtick": 5, "set_ytick": 5, "clf_name": 5, "prob": 5, "item": 5, "order": [5, 8, 9, 10, 11, 15, 16, 17, 18, 19], "lexsort": 5, "51": 5, "reshap": [5, 6], "x_test_prob": 5, "linewidth": 5, "l": [5, 15, 16, 17, 24, 25, 26], "r": [5, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 23, 25], "truth": [5, 25], "set_ylim": 5, "05": 5, "instanc": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "upper": 5, "left": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "overlapping_gaussian": 5, "png": 5, "discuss": 5, "well": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "closer": 5, "shown": 5, "below": 5, "896": [5, 7], "60": [5, 7], "plot_overlapping_gaussian": [5, 7], "specif": [6, 8, 9, 11, 25], "patchobliquedecisiontreeclassifi": [6, 11], "one": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "specifi": [6, 8, 9, 11, 15, 16, 18, 25], "done": [6, 18, 19, 24], "data_dim": [6, 11, 12, 18, 19], "should": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23], "set": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26], "n_row": 6, "n_col": 6, "row": [6, 18, 19], "arrai": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "length": 6, "If": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "n_depth": 6, "allow": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "ani": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31], "still": [6, 8], "compat": [6, 13, 14, 20, 21], "robust": [6, 22], "api": [6, 13, 14, 18, 19, 20, 21, 22, 23, 29, 30, 31], "These": [6, 24], "calcul": [6, 26], "dure": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "hyperrectangl": 6, "start": [6, 23], "squar": [6, 10, 12, 17, 19], "min_patch_dim": [6, 11, 12, 18, 19], "max_patch_dim": [6, 11, 12, 18, 19], "constrain": [6, 25], "within": [6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23], "bound": 6, "arbitrarili": [6, 10, 12, 17, 19], "hyperparamet": [6, 25], "relat": 6, "note": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 29], "privat": 6, "cython": [6, 20, 21, 23], "what": [6, 15, 16, 17, 18, 19, 20, 21, 22, 29], "look": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27], "like": [6, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26], "part": 6, "just": [6, 8, 9, 10, 11, 12, 23], "wrapper": 6, "underli": [6, 15, 16, 17, 18, 19], "actual": 6, "To": [6, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 23, 27], "relev": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "_criterion": 6, "gini": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "_morf_splitt": 6, "bestpatchsplittertest": 6, "dummi": 6, "sake": 6, "min_samples_leaf": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "min_weight_leaf": 6, "feature_weight": [6, 11, 12, 18, 19], "repeat": 6, "arang": 6, "float32": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "float64": [6, 17, 19], "ones": 6, "our": [6, 22, 25], "th": [6, 8, 9, 10, 11, 12, 13, 14], "visual": 6, "appear": 6, "make": [6, 24, 31], "contigu": [6, 11, 12, 18, 19], "dim_contigu": [6, 11, 12, 18, 19], "init_test": 6, "matrix": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "proj_mat": 6, "sample_projection_matrix": 6, "nrow": 6, "ncol": 6, "12": 6, "sharex": 6, "sharei": 6, "squeez": 6, "imshow": 6, "viridi": 6, "xlim": 6, "ylim": 6, "add_subplot": 6, "z": 6, "nonzero": 6, "marker": 6, "o": [6, 25, 31], "custom": [6, 13, 14], "set_zlim": 6, "01": 6, "125": 6, "analyz": 6, "necessarili": [6, 24], "certain": 6, "seri": [6, 18, 19], "n_channel": 6, "n_time": 6, "channel": 6, "In": [6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 31], "dim": 6, "643": [6, 7], "plot_projection_matric": [6, 7], "00": 7, "45": [7, 8, 9, 10, 24, 25, 31], "654": 7, "execut": 7, "auto_exampl": 7, "file": [7, 23], "07": 7, "04": 7, "13": 7, "03": 7, "splitter": [8, 15, 16, 17, 18, 19, 20, 21], "min_samples_split": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "min_weight_fraction_leaf": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "sqrt": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "max_leaf_nod": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "min_impurity_decreas": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "bootstrap": [8, 9, 10, 11, 12, 13, 14, 24], "oob_scor": [8, 9, 10, 11, 12, 13, 14], "verbos": [8, 9, 10, 11, 12, 13, 14, 23], "warm_start": [8, 9, 10, 11, 12, 13, 14], "class_weight": [8, 9, 11, 15, 16, 18], "ccp_alpha": [8, 15, 16, 17, 18, 19, 20, 21], "max_sampl": [8, 9, 10, 11, 12, 13, 14], "honest_prior": [8, 15], "empir": [8, 15, 25], "tree_estim": [8, 15], "default": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "entropi": [8, 9, 11, 15, 16, 18], "measur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "qualiti": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26], "support": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25], "criteria": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "impur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "gain": [8, 9, 11, 15, 16, 18], "strategi": [8, 15, 16, 17, 18, 19, 20, 21], "choos": [8, 15, 16, 17, 18, 19, 20, 21], "maximum": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "depth": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "expand": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "until": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "leav": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "pure": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "less": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "minimum": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "requir": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "intern": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "consid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "fraction": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "ceil": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "least": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "branch": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "mai": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "effect": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 27], "smooth": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "especi": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "weight": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 31], "input": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "equal": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "when": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 29], "log2": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "n_featur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "auto": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "doe": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25], "stop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "valid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "partit": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25], "found": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "grow": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "rel": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 26], "reduct": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "unlimit": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "induc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "decreas": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "equat": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "follow": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26], "n_t": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "n_t_r": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "right_impur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "n_t_l": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "left_impur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "current": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25], "child": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "refer": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "pass": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 31], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "whether": [8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21], "whole": [8, 9, 10, 11, 12], "out": [8, 9, 10, 11, 12, 13, 14, 24], "bag": [8, 9, 10, 11, 12, 13, 14], "job": [8, 9, 10, 11, 12], "parallel": [8, 9, 10, 11, 12, 13, 14], "decision_path": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "appli": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "over": [8, 9, 10, 11, 12, 18, 19, 24], "unless": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "joblib": [8, 9, 10, 11, 12, 13, 14, 23], "parallel_backend": [8, 9, 10, 11, 12], "context": [8, 9, 10, 11, 12], "processor": [8, 9, 10, 11, 12], "glossari": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19], "control": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 24, 25], "both": [8, 9, 10, 11, 12, 25], "reus": [8, 9, 10, 11, 12], "solut": [8, 9, 10, 11, 12], "previou": [8, 9, 10, 11, 12, 13, 14], "add": [8, 9, 10, 11, 12, 23, 31], "balanc": [8, 9, 11, 15, 16, 18], "balanced_subsampl": [8, 9, 11], "dict": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "list": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 31], "associ": [8, 9, 11, 14, 15, 16, 18, 25], "class_label": [8, 9, 11, 15, 16, 18], "given": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25, 26], "suppos": [8, 9, 11, 15, 16, 18], "multi": [8, 9, 11, 15, 16, 18, 28], "output": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 28], "multioutput": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19], "multilabel": [8, 9, 11, 15, 16, 18], "everi": [8, 9, 11, 12, 15, 16, 18, 19, 25], "its": [8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 25], "own": [8, 9, 11, 15, 16, 18], "four": [8, 9, 11, 15, 16, 18], "instead": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "mode": [8, 9, 11, 15, 16, 18, 23], "automat": [8, 9, 11, 15, 16, 18], "adjust": [8, 9, 11, 15, 16, 18], "invers": [8, 9, 11, 15, 16, 18], "proport": [8, 9, 11, 15, 16, 18], "frequenc": [8, 9, 11, 15, 16, 18], "bincount": [8, 9, 11, 15, 16, 18], "except": [8, 9, 10, 11, 12, 17, 19, 24], "grown": [8, 9, 10, 11, 12, 15, 16, 17], "multipli": [8, 9, 11, 15, 16, 18], "through": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "complex": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 28], "minim": [8, 10, 12, 15, 16, 17, 18, 19, 20, 21, 25, 26], "cost": [8, 15, 16, 17, 18, 19, 20, 21, 24, 25], "prune": [8, 15, 16, 17, 18, 19, 20, 21, 25], "subtre": [8, 15, 16, 17, 18, 19, 20, 21], "largest": [8, 15], "smaller": [8, 15], "chosen": [8, 15], "By": [8, 13, 14, 15, 20, 21, 24], "thu": [8, 9, 10, 11, 12, 13, 14, 16, 17, 24, 25, 26], "interv": [8, 9, 10, 11, 12, 13, 14, 25], "deal": [8, 15], "empti": [8, 15], "evalu": [8, 15, 22, 28], "prior": [8, 15, 25, 26], "posterior": [8, 15], "remain": [8, 15], "larger": [8, 15, 24], "shallow": [8, 15], "etc": [8, 9, 10, 11, 12, 15, 16, 17], "lead": [8, 9, 10, 11, 12, 15, 16, 17, 24], "fulli": [8, 9, 10, 11, 12, 15, 16, 17], "unprun": [8, 9, 10, 11, 12, 15, 16, 17], "potenti": [8, 9, 10, 11, 12, 15, 16, 17, 19], "veri": [8, 9, 10, 11, 12, 15, 16, 17], "reduc": [8, 9, 10, 11, 12, 15, 16, 17, 24], "consumpt": [8, 9, 10, 11, 12, 15, 16, 17], "alwai": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 23, 25], "randomli": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21], "permut": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 24], "vari": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21], "ident": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21], "sever": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 24], "obtain": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "determinist": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21], "behaviour": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21], "fix": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31], "honesti": [8, 25], "enabl": 8, "unbias": 8, "confid": [8, 25], "doubl": 8, "amount": 8, "v": [8, 10, 12, 17, 19, 24, 25], "enforc": 8, "access": 8, "subset": [8, 9, 11, 16, 18, 25], "ineffici": 8, "greedi": 8, "recommend": [8, 13, 14, 16, 17, 18, 19, 22, 25], "propens": [8, 25], "causal": 8, "meta": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "becaus": [8, 10, 12, 17, 19, 25], "process": [8, 15, 16, 17, 18, 19, 20, 21], "separ": 8, "breiman": [8, 9, 10, 15, 16, 17, 24, 25], "machin": [8, 9, 10, 24, 25], "32": [8, 9, 10, 24, 25], "2001": [8, 9, 10, 24, 25], "athei": [8, 15], "j": [8, 15, 16, 17, 23, 25], "tibshirani": [8, 15, 16, 17, 25], "wager": [8, 15], "annal": [8, 15], "statist": [8, 15, 16, 17, 24, 25], "2019": [8, 11, 12, 15, 18, 19, 24], "honest_forest": [8, 15], "make_classif": [8, 9], "n_inform": [8, 9, 10, 12], "n_redund": [8, 9], "attribut": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "honesttreeclassifi": [8, 31], "templat": [8, 13, 14, 15], "collect": [8, 9, 10, 11, 12, 13, 14, 15], "sub": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "estimators_": [8, 9, 10, 11, 12, 13, 14], "classes_": [8, 9, 11, 15, 16, 18], "ndarrai": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "n_classes_": [8, 9, 11, 15, 16, 18], "n_features_": [8, 9, 10, 11, 12], "n_features_in_": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "seen": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "feature_names_in_": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "string": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "n_outputs_": [8, 9, 10, 11, 12, 15, 16, 17, 18, 19], "feature_importances_": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "oob_score_": [8, 9, 10, 11, 12, 13, 14], "exist": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "oob_decision_function_": [8, 9, 10, 11, 13, 14], "n_output": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "small": [8, 9, 10, 11, 13, 14], "might": [8, 9, 10, 11, 13, 14, 25], "never": [8, 9, 10, 11, 13, 14], "case": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "nan": [8, 9, 10, 11, 13, 14, 15], "honest_decision_function_": 8, "structure_indices_": [8, 15], "n_structur": [8, 15], "honest_indices_": [8, 15], "n_honest": [8, 15], "array_lik": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "convert": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "csr_matrix": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "x_leav": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "datapoint": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "index": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25], "up": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "path": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "18": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "n_node": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "element": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "goe": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "csr": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "format": [8, 9, 10, 11, 12, 13, 14, 20, 21], "n_nodes_ptr": [8, 9, 10, 11, 12, 13, 14], "give": [8, 9, 10, 11, 12, 13, 14, 16, 17], "csc_matrix": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "real": [8, 9, 10, 11, 12, 17, 19], "would": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25], "net": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "either": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "self": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "get_metadata_rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "get": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "metadata": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "pleas": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "check": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "work": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "metadatarequest": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "encapsul": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "get_param": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "deep": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "subobject": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "map": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "That": [8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21], "highest": [8, 9, 11, 13, 14, 15, 16], "predict_log_proba": [8, 9, 11, 16, 18], "log": [8, 9, 11, 16, 18, 25, 26], "harsh": [8, 9, 11, 16, 18], "metric": [8, 9, 11, 13, 14, 16, 18, 26], "sinc": [8, 9, 11, 16, 18, 31], "correctli": [8, 9, 11, 16, 18], "w": [8, 9, 10, 11, 12, 16, 17, 18, 19], "set_fit_request": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "unchang": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "request": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "enable_metadata_rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "set_config": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "option": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23], "rais": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "error": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "str": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "alia": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "origin": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "metadata_rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "retain": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "chang": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31], "insid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 31], "pipelin": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "updat": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "set_param": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "nest": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "compon": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "__": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "so": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "set_score_request": [8, 9, 10, 11, 12, 16, 17, 18, 19], "properti": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "base_estimator_": [8, 9, 10, 11, 12, 13, 14], "higher": [8, 9, 10, 11, 12, 13, 14, 24, 25], "normal": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 31], "brought": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "known": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "mislead": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "cardin": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "mani": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "permutation_import": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "altern": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24], "root": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "feature_combin": [9, 10, 13, 16, 17, 21, 24, 25], "similar": [9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 25, 26, 31], "averag": [9, 10, 11, 12, 13, 16, 17, 21, 24], "read": [9, 10, 16, 17], "equival": [9, 10, 16, 17, 25], "tradit": [9, 10, 16, 17], "expect": [9, 10, 12, 16, 17, 18, 19, 24], "must": [9, 10, 16, 17, 20, 21], "compute_similarity_matrix": [9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21], "sim_matrix": [9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21], "among": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "squared_error": [10, 12, 17, 19], "regressor": [10, 12, 17, 19], "absolute_error": [10, 12, 17, 19], "friedman_ms": [10, 12, 17, 19], "poisson": [10, 12, 17, 19], "select": [10, 12, 15, 16, 17, 18, 19, 20, 21, 24], "l2": [10, 12, 17, 19], "loss": [10, 12, 17, 19, 25], "termin": [10, 12, 17, 19], "friedman": [10, 12, 15, 16, 17, 19, 25], "absolut": [10, 12, 17, 19], "l1": [10, 12, 17, 19], "median": [10, 12, 17, 19], "devianc": [10, 12, 17, 19], "find": [10, 12, 15, 16, 17, 18, 19, 20, 21, 26], "significantli": [10, 12], "slower": [10, 12], "obliquedecisiontreeregressor": [10, 12, 31], "randomforestregressor": [10, 12], "tomita": [10, 11, 12, 18, 19, 24], "journal": 10, "research": [10, 22], "21": [10, 31], "104": 10, "39": 10, "2020": [10, 14], "make_regress": [10, 12], "regr": 10, "86327109": 10, "coeffici": [10, 12, 17, 19], "determin": [10, 12, 17, 19, 25], "frac": [10, 12, 17, 19, 26], "u": [10, 12, 17, 19, 23, 24], "residu": [10, 12, 17, 19], "y_true": [10, 12, 17, 19], "y_pred": [10, 12, 17, 19], "wors": [10, 12, 17, 19], "constant": [10, 12, 17, 19], "disregard": [10, 12, 17, 19], "precomput": [10, 12, 17, 19], "kernel": [10, 12, 17, 19, 31], "n_samples_fit": [10, 12, 17, 19], "uniform_averag": [10, 12, 17, 19], "keep": [10, 12, 17, 19], "r2_score": [10, 12, 17, 19], "influenc": [10, 12, 17, 19], "multioutputregressor": [10, 12, 17, 19], "patch": [11, 12, 18, 19, 31], "along": [11, 12, 18, 19, 25], "presum": [11, 12, 18, 19], "un": [11, 12, 18, 19], "vector": [11, 12, 18, 19, 25, 26], "1d": [11, 12, 18, 19], "wrap": [11, 12, 18, 19], "condit": [11, 12, 18, 19], "scipi": [11, 12, 18, 19, 23], "adam": [11, 12, 18, 19, 24, 31], "li": [11, 12, 14, 18, 19, 24, 31], "chester": [11, 12, 18, 19], "huynh": [11, 12, 18, 19], "tyler": [11, 12, 18, 19, 24], "m": [11, 12, 18, 19, 24, 25], "jesu": [11, 12, 18, 19], "jess": [11, 12, 18, 19], "patsol": [11, 12, 18, 19], "benjamin": [11, 12, 18, 19], "falk": [11, 12, 18, 19], "toward": [11, 12, 18, 19, 24], "close": [11, 12, 18, 19, 24], "gap": [11, 12, 15, 16, 17, 18, 19, 20, 21, 24], "convolut": [11, 12, 18, 19, 24], "network": [11, 12, 18, 19, 24], "preprint": [11, 12, 18, 19, 24], "1909": [11, 12, 18, 19, 24], "11799": [11, 12, 18, 19, 24], "82818509": 12, "patchobliquedecisiontreeregressor": [12, 31], "oob_prediction_": 12, "twomean": [13, 14, 20, 21], "clustering_func": [13, 14, 20, 21], "clustering_func_arg": [13, 14, 20, 21], "unsupervis": [13, 14, 20, 21, 22, 28, 31], "inher": [13, 14], "simultan": [13, 14], "affin": [13, 14, 20, 21], "distanc": [13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "do": [13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25], "fall": [13, 14], "fastbic": [13, 14, 20, 21, 31], "maxim": [13, 14], "bayesian": [13, 14, 26], "mathemat": [13, 14, 28], "formul": [13, 14, 28], "max": [13, 14, 20, 21, 25], "callabl": [13, 14, 20, 21], "calinski_harabasz_scor": [13, 14], "signatur": [13, 14], "predicted_label": [13, 14], "silhouette_scor": [13, 14], "davies_bouldin_scor": [13, 14], "cpu": [13, 14], "construct": [13, 14, 24, 25], "continu": [13, 14], "instant": [13, 14], "agglomerativeclust": [13, 14, 20, 21], "keyword": [13, 14, 20, 21], "argument": [13, 14, 20, 21], "estimator_": [13, 14, 15], "unsuperviseddecisiontre": [13, 14], "labels_": [13, 14], "similarity_matrix_": [13, 14], "oob": [13, 14], "dissimilarity_matrix_": [13, 14], "dissimilar": [13, 14, 31], "effici": [13, 14, 17, 19, 29, 30, 31], "Not": [13, 14, 20, 21], "present": [13, 14, 20, 21, 25], "convent": [13, 14, 20, 21], "fit_predict": [13, 14, 20, 21], "int64": [13, 14, 20, 21], "fit_transform": [13, 14, 20, 21], "fit_param": [13, 14, 20, 21], "transform": [13, 14, 20, 21], "addit": [13, 14, 20, 21, 25], "x_new": [13, 14, 20, 21], "n_features_new": [13, 14, 20, 21], "set_output": [13, 14, 20, 21], "introduc": [13, 14, 20, 21], "configur": [13, 14, 20, 21], "typic": [13, 14, 20, 21, 25], "dens": [13, 14, 20, 21, 25], "meghana": 14, "madhyastha": 14, "perci": 14, "jame": 14, "brown": 14, "veronika": 14, "strnadova": 14, "neelei": 14, "carei": 14, "prieb": 14, "randal": 14, "burn": 14, "geodes": 14, "proceed": 14, "26th": 14, "acm": 14, "sigkdd": 14, "confer": 14, "knowledg": [14, 25], "discoveri": 14, "mine": 14, "kdd": 14, "513": 14, "523": 14, "york": 14, "ny": 14, "usa": 14, "machineri": 14, "url": 14, "1145": 14, "3394486": 14, "3403094": 14, "befor": [15, 16, 17, 18, 19, 20, 21], "them": [15, 16, 17, 18, 19, 20, 21, 24], "But": [15, 16, 17, 18, 19, 20, 21], "integ": [15, 16, 17, 18, 19, 20, 21], "instati": 15, "basedecisiontre": 15, "oper": [15, 16, 18, 19], "argmax": [15, 16], "ti": [15, 16], "lowest": [15, 16], "en": [15, 16, 17, 25], "wikipedia": [15, 16, 17, 25], "wiki": [15, 16, 17, 25], "decision_tree_learn": [15, 16, 17, 25], "olshen": [15, 16, 17], "stone": [15, 16, 17], "wadsworth": [15, 16, 17], "belmont": [15, 16, 17], "ca": [15, 16, 17], "1984": [15, 16, 17], "hasti": [15, 16, 17, 25], "springer": [15, 16, 17, 25], "2009": [15, 16, 17, 25], "cutler": [15, 16, 17], "stat": [15, 16, 17], "berkelei": [15, 16, 17], "edu": [15, 16, 17], "randomforest": [15, 16, 17], "cc_home": [15, 16, 17], "htm": [15, 16, 17], "cross_val_scor": [15, 16, 17, 19], "93333333": 15, "max_features_": [15, 16, 17, 18, 19], "tree_": [15, 16, 17, 18, 19, 20, 21], "help": [15, 16, 17, 18, 19], "_tree": [15, 16, 17, 18, 19], "understand": [15, 24], "basic": 15, "empirical_prior_": 15, "check_input": [15, 16, 17, 18, 19, 20, 21], "bypass": [15, 16, 17, 18, 19, 20, 21], "don": [15, 16, 17, 18, 19, 20, 21], "know": [15, 16, 17, 18, 19, 20, 21], "re": [15, 16, 17, 18, 19, 20, 21], "node_count": [15, 16, 17, 18, 19, 20, 21], "possibli": [15, 16, 17, 18, 19, 20, 21, 25], "cost_complexity_pruning_path": [15, 16, 17, 18, 19, 20, 21], "ccp_path": [15, 16, 17, 18, 19, 20, 21], "bunch": [15, 16, 17, 18, 19, 20, 21], "dictionari": [15, 16, 17, 18, 19, 20, 21], "get_depth": [15, 16, 17, 18, 19, 20, 21], "get_n_leav": [15, 16, 17, 18, 19, 20, 21], "n_leav": [15, 16, 17, 18, 19, 20, 21], "proba": [15, 16, 18], "set_predict_proba_request": [15, 16, 18], "set_predict_request": [15, 16, 17, 18, 19, 20, 21], "fact": [16, 17], "better": [16, 17, 24, 25], "caveat": [16, 17], "increas": [16, 17, 24], "willing": [16, 17, 25], "spend": [16, 17, 25], "resourc": [16, 17, 25], "93": 16, "86": 16, "feature_combinations_": [16, 17], "taken": [16, 17, 24], "decisiontreeregressor": 17, "load_diabet": [17, 19], "return_x_i": [17, 19], "68908909": 17, "35854406": 17, "35223873": 17, "03616902": 17, "56008907": 17, "32235221": 17, "06945264": 17, "1465216": 17, "34597007": 17, "15308512": 17, "morf": [18, 19, 31], "discontigu": [18, 19], "sensor": [18, 19], "2d": [18, 19], "mask": [18, 19], "onto": [18, 19], "data_width": [18, 19], "data_height": [18, 19], "tt": [18, 19], "last": [18, 19], "height": [18, 19], "width": [18, 19], "exactli": [18, 19, 24], "albeit": [18, 19], "efficienc": [18, 19], "optim": [18, 19, 25], "your": [18, 19, 22], "min_patch_dims_": [18, 19], "max_patch_dims_": [18, 19], "data_dims_": [18, 19], "rg": 19, "10163671": 19, "78786738": 19, "01490768": 19, "32737289": 19, "24816698": 19, "41881754": 19, "0588273": 19, "48722913": 19, "07927208": 19, "15600762": 19, "unsupervisedcriterion": [20, 21], "abid": [20, 21], "unsupervisedsplitt": [20, 21], "assign": [20, 21, 26], "modern": 22, "supervis": [22, 26, 28], "extend": [22, 25], "strong": 22, "encourag": 22, "top": [22, 24], "pull": 22, "walk": 22, "contribut": [22, 24, 31], "licens": 22, "under": 22, "bsd": 22, "document": [22, 24], "releas": 22, "histori": 22, "instal": 22, "depend": 22, "pip": 22, "meson": 22, "conda": 22, "pypi": 23, "poetri": 23, "clone": 23, "repositori": 23, "neurodata": 23, "git": 23, "github": 23, "com": 23, "cd": 23, "virtual": 23, "environ": 23, "dev": 23, "Then": 23, "build_requir": 23, "txt": 23, "spin": 23, "cli": 23, "local": 23, "abl": [23, 27], "edit": 23, "pend": 23, "isol": 23, "repo": 23, "zipbal": 23, "master": 23, "forg": 23, "threadpoolctl": 23, "pytest": 23, "compil": 23, "llvm": 23, "openmp": 23, "next": 23, "directori": 23, "dodiscov": 23, "purpos": 23, "main": 23, "obliquepr": 23, "need": [23, 25, 27], "develop": [23, 31], "pr": 23, "22754": 23, "checkout": 23, "page": [23, 29], "instruct": 23, "obliquerandomforestregressor": [24, 31], "drawn": 24, "replac": 24, "divers": 24, "sometim": 24, "slight": 24, "bia": 24, "aim": 24, "motiv": 24, "therebi": [24, 25], "practic": [24, 28], "often": [24, 26], "signific": 24, "henc": 24, "yield": 24, "overal": 24, "contrast": [24, 25], "b2001": 24, "candid": [24, 25], "intuit": [24, 25], "geurt": 24, "d": 24, "ernst": 24, "wehenkel": 24, "extrem": 24, "63": [24, 31], "2006": 24, "rank": 24, "assess": 24, "respect": [24, 26], "variabl": [24, 25], "final": [24, 25], "essenti": 24, "abil": 24, "mdi": 24, "l2014": 24, "approach": 24, "li2019": 24, "tomita2015": 24, "suffer": 24, "flaw": 24, "conclus": 24, "deriv": 24, "most": [24, 25], "good": 24, "held": 24, "secondli": 24, "favor": 24, "explor": 24, "whose": 24, "match": 24, "loupp": 24, "theori": 24, "phd": 24, "thesi": 24, "lieg": 24, "2014": 24, "et": 24, "al": 24, "1506": 24, "03410": 24, "2015": 24, "ground": 25, "denot": 25, "describ": 25, "beyond": 25, "dt": 25, "ot": 25, "ref": 25, "rc": 25, "landmark": 25, "paper": 25, "varieti": [25, 26], "lambda": 25, "tradeoff": 25, "wherea": 25, "similarli": 25, "anoth": 25, "major": [25, 29, 30, 31], "definit": 25, "n_": 25, "x_i": [25, 26], "recurs": 25, "group": [25, 26], "manner": 25, "orthogon": 25, "a_i": 25, "inner": 25, "product": 25, "langl": 25, "rangl": 25, "entri": 25, "rest": 25, "being": 25, "let": 25, "repres": 25, "q_m": 25, "n_m": 25, "theta": 25, "t_m": 25, "x_j": 25, "leq": 25, "setminu": 25, "e_i": 25, "basi": 25, "elsewher": 25, "h": 25, "exact": 25, "handl": 25, "ad": 25, "_featur": 25, "term": [25, 26], "come": 25, "sparsiti": 25, "consider": 25, "pickl": 25, "disc": 25, "special": 25, "earlier": 25, "runtim": 25, "sai": 25, "desir": 25, "analysi": 25, "much": 25, "storag": 25, "ask": 25, "question": 25, "try": 25, "cross": 25, "procedur": 25, "gridsearchcv": 25, "There": 25, "moreov": 25, "miss": 25, "imput": 25, "1023": 25, "1010933404324": 25, "predictive_analyt": 25, "quinlan": 25, "c4": 25, "program": 25, "morgan": 25, "kaufmann": 25, "1993": 25, "independ": 25, "prevent": 25, "overfit": 25, "particular": 25, "common": [25, 26], "triplet": 25, "treatment": 25, "sacrific": 25, "mse": 25, "goal": 26, "identifi": 26, "pattern": 26, "techniqu": 26, "wai": 26, "overview": 26, "cutpoint": 26, "dimension": [26, 31], "cutoff": 26, "min_": 26, "sum_": 26, "hat": 26, "mu": 26, "_1": 26, "_2": 26, "sample_indic": 26, "popular": 26, "seleciton": 26, "speed": 26, "kmean": 26, "flexibl": 26, "mclust": 26, "tri": 26, "mle": 26, "hard": 26, "rather": 26, "soft": 26, "gmm": 26, "simpler": 26, "pi": 26, "mathcal": 26, "x_n": 26, "sigma": 26, "quad": 26, "le": 26, "mu_j": 26, "natur": 26, "notion": 26, "efficaci": 26, "scheme": 26, "adjusted_rand_scor": 26, "tip": [28, 29], "fast": 28, "enhanc": [29, 30, 31], "link": 29, "subscrib": 29, "io": 29, "notifi": 29, "11": 31, "jong": 31, "shin": 31, "bug": 31, "outsid": 31, "61": 31, "arbitrari": 31, "discontinu": 31, "sambit": 31, "64": 31, "per": 31, "67": 31, "70": 31, "patchobliquerandomforestregressor": 31, "suki": 31, "72": 31, "haoyin": 31, "xu": 31, "57": 31, "thank": 31, "everyon": 31, "who": 31, "mainten": 31, "incept": 31}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[8, 1, 1, "", "HonestForestClassifier"], [9, 1, 1, "", "ObliqueRandomForestClassifier"], [10, 1, 1, "", "ObliqueRandomForestRegressor"], [11, 1, 1, "", "PatchObliqueRandomForestClassifier"], [12, 1, 1, "", "PatchObliqueRandomForestRegressor"], [13, 1, 1, "", "UnsupervisedObliqueRandomForest"], [14, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.HonestForestClassifier": [[8, 2, 1, "", "apply"], [8, 3, 1, "", "base_estimator_"], [8, 2, 1, "", "decision_path"], [8, 3, 1, "", "feature_importances_"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_log_proba"], [8, 2, 1, "", "predict_proba"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestClassifier": [[9, 2, 1, "", "apply"], [9, 3, 1, "", "base_estimator_"], [9, 2, 1, "", "compute_similarity_matrix"], [9, 2, 1, "", "decision_path"], [9, 3, 1, "", "feature_importances_"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "predict_log_proba"], [9, 2, 1, "", "predict_proba"], [9, 2, 1, "", "score"], [9, 2, 1, "", "set_fit_request"], [9, 2, 1, "", "set_params"], [9, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[10, 2, 1, "", "apply"], [10, 3, 1, "", "base_estimator_"], [10, 2, 1, "", "compute_similarity_matrix"], [10, 2, 1, "", "decision_path"], [10, 3, 1, "", "feature_importances_"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "score"], [10, 2, 1, "", "set_fit_request"], [10, 2, 1, "", "set_params"], [10, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[11, 2, 1, "", "apply"], [11, 3, 1, "", "base_estimator_"], [11, 2, 1, "", "compute_similarity_matrix"], [11, 2, 1, "", "decision_path"], [11, 3, 1, "", "feature_importances_"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "predict_log_proba"], [11, 2, 1, "", "predict_proba"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[12, 2, 1, "", "apply"], [12, 3, 1, "", "base_estimator_"], [12, 2, 1, "", "compute_similarity_matrix"], [12, 2, 1, "", "decision_path"], [12, 3, 1, "", "feature_importances_"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[13, 2, 1, "", "apply"], [13, 3, 1, "", "base_estimator_"], [13, 2, 1, "", "compute_similarity_matrix"], [13, 2, 1, "", "decision_path"], [13, 3, 1, "", "feature_importances_"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "fit_predict"], [13, 2, 1, "", "fit_transform"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_output"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[14, 2, 1, "", "apply"], [14, 3, 1, "", "base_estimator_"], [14, 2, 1, "", "compute_similarity_matrix"], [14, 2, 1, "", "decision_path"], [14, 3, 1, "", "feature_importances_"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "fit_predict"], [14, 2, 1, "", "fit_transform"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_output"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "transform"]], "sktree.tree": [[15, 1, 1, "", "HonestTreeClassifier"], [16, 1, 1, "", "ObliqueDecisionTreeClassifier"], [17, 1, 1, "", "ObliqueDecisionTreeRegressor"], [18, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [19, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [20, 1, 1, "", "UnsupervisedDecisionTree"], [21, 1, 1, "", "UnsupervisedObliqueDecisionTree"]], "sktree.tree.HonestTreeClassifier": [[15, 2, 1, "", "apply"], [15, 2, 1, "", "cost_complexity_pruning_path"], [15, 2, 1, "", "decision_path"], [15, 3, 1, "", "feature_importances_"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_depth"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_n_leaves"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_predict_proba_request"], [15, 2, 1, "", "set_predict_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[16, 2, 1, "", "apply"], [16, 2, 1, "", "compute_similarity_matrix"], [16, 2, 1, "", "cost_complexity_pruning_path"], [16, 2, 1, "", "decision_path"], [16, 3, 1, "", "feature_importances_"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "get_depth"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_n_leaves"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_log_proba"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_predict_proba_request"], [16, 2, 1, "", "set_predict_request"], [16, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[17, 2, 1, "", "apply"], [17, 2, 1, "", "compute_similarity_matrix"], [17, 2, 1, "", "cost_complexity_pruning_path"], [17, 2, 1, "", "decision_path"], [17, 3, 1, "", "feature_importances_"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "get_depth"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_n_leaves"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_predict_request"], [17, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[18, 2, 1, "", "apply"], [18, 2, 1, "", "compute_similarity_matrix"], [18, 2, 1, "", "cost_complexity_pruning_path"], [18, 2, 1, "", "decision_path"], [18, 3, 1, "", "feature_importances_"], [18, 2, 1, "", "fit"], [18, 2, 1, "", "get_depth"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_n_leaves"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_log_proba"], [18, 2, 1, "", "predict_proba"], [18, 2, 1, "", "score"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "set_predict_proba_request"], [18, 2, 1, "", "set_predict_request"], [18, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[19, 2, 1, "", "apply"], [19, 2, 1, "", "compute_similarity_matrix"], [19, 2, 1, "", "cost_complexity_pruning_path"], [19, 2, 1, "", "decision_path"], [19, 3, 1, "", "feature_importances_"], [19, 2, 1, "", "fit"], [19, 2, 1, "", "get_depth"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_n_leaves"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "score"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "set_predict_request"], [19, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[20, 2, 1, "", "apply"], [20, 2, 1, "", "compute_similarity_matrix"], [20, 2, 1, "", "cost_complexity_pruning_path"], [20, 2, 1, "", "decision_path"], [20, 3, 1, "", "feature_importances_"], [20, 2, 1, "", "fit_predict"], [20, 2, 1, "", "fit_transform"], [20, 2, 1, "", "get_depth"], [20, 2, 1, "", "get_metadata_routing"], [20, 2, 1, "", "get_n_leaves"], [20, 2, 1, "", "get_params"], [20, 2, 1, "", "predict"], [20, 2, 1, "", "set_fit_request"], [20, 2, 1, "", "set_output"], [20, 2, 1, "", "set_params"], [20, 2, 1, "", "set_predict_request"], [20, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[21, 2, 1, "", "apply"], [21, 2, 1, "", "compute_similarity_matrix"], [21, 2, 1, "", "cost_complexity_pruning_path"], [21, 2, 1, "", "decision_path"], [21, 3, 1, "", "feature_importances_"], [21, 2, 1, "", "fit_predict"], [21, 2, 1, "", "fit_transform"], [21, 2, 1, "", "get_depth"], [21, 2, 1, "", "get_metadata_routing"], [21, 2, 1, "", "get_n_leaves"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "predict"], [21, 2, 1, "", "set_fit_request"], [21, 2, 1, "", "set_output"], [21, 2, 1, "", "set_params"], [21, 2, 1, "", "set_predict_request"], [21, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"]}, "titleterms": {"api": 0, "document": [0, 31], "supervis": [0, 25], "unsupervis": [0, 26], "exampl": [1, 8, 9, 16, 18, 24, 27], "plot": [2, 3, 4, 5, 6], "decis": [2, 25, 26], "surfac": 2, "tree": [2, 6, 15, 16, 17, 18, 19, 20, 21, 22, 25, 26, 27], "train": 2, "iri": 2, "dataset": [2, 4], "obliqu": [3, 4, 6, 24, 25], "forest": [3, 4, 5, 24], "axi": [3, 4], "align": [3, 4], "random": [3, 4, 24], "predict": [3, 4], "spars": 3, "pariti": 3, "simul": [3, 5], "cc18": 4, "honest": [5, 25], "calibr": 5, "overlap": 5, "gaussian": 5, "refer": [5, 24, 25], "project": 6, "matric": 6, "an": 6, "initi": 6, "patch": 6, "splitter": 6, "gener": 6, "1d": 6, "2d": 6, "3d": 6, "discontigu": 6, "comput": 7, "time": 7, "sktree": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "honestforestclassifi": 8, "us": [8, 9, 16, 18, 25, 27], "obliquerandomforestclassifi": 9, "obliquerandomforestregressor": 10, "patchobliquerandomforestclassifi": 11, "patchobliquerandomforestregressor": 12, "unsupervisedobliquerandomforest": 13, "unsupervisedrandomforest": 14, "honesttreeclassifi": 15, "obliquedecisiontreeclassifi": 16, "obliquedecisiontreeregressor": 17, "patchobliquedecisiontreeclassifi": 18, "patchobliquedecisiontreeregressor": 19, "unsuperviseddecisiontre": 20, "unsupervisedobliquedecisiontre": 21, "scikit": [22, 27], "content": 22, "get": 22, "start": 22, "indic": 22, "tabl": 22, "instal": 23, "depend": 23, "pip": 23, "from": 23, "sourc": 23, "meson": 23, "conda": 23, "recommend": 23, "featur": 24, "import": 24, "evalu": [24, 26], "differ": 25, "compar": 25, "mathemat": 25, "formul": 25, "classif": 25, "regress": 25, "multi": 25, "output": 25, "problem": 25, "complex": 25, "tip": 25, "practic": 25, "limit": 25, "criterion": 26, "two": 26, "mean": 26, "fast": 26, "bic": 26, "user": 28, "guid": 28, "releas": 29, "histori": 29, "what": 31, "": 31, "new": 31, "version": 31, "0": 31, "1": 31, "changelog": 31, "code": 31, "contributor": 31}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Examples": [[1, "examples"], [27, "examples"]], "Plot the decision surface of decision trees trained on the iris dataset": [[2, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[3, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[4, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[5, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[5, "references"], [24, null], [24, null]], "Plot the projection matrices of an oblique tree": [[6, "plot-the-projection-matrices-of-an-oblique-tree"]], "Initialize patch splitter": [[6, "initialize-patch-splitter"]], "Generate 1D patches": [[6, "generate-1d-patches"]], "Generate 2D patches": [[6, "generate-2d-patches"]], "Generate 3D patches": [[6, "generate-3d-patches"]], "Discontiguous Patches": [[6, "discontiguous-patches"]], "Computation times": [[7, "computation-times"]], "sktree.HonestForestClassifier": [[8, "sktree-honestforestclassifier"]], "Examples using sktree.HonestForestClassifier": [[8, "examples-using-sktree-honestforestclassifier"]], "sktree.ObliqueRandomForestClassifier": [[9, "sktree-obliquerandomforestclassifier"]], "Examples using sktree.ObliqueRandomForestClassifier": [[9, "examples-using-sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[10, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[11, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[12, "sktree-patchobliquerandomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[13, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[14, "sktree-unsupervisedrandomforest"]], "sktree.tree.HonestTreeClassifier": [[15, "sktree-tree-honesttreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[16, "sktree-tree-obliquedecisiontreeclassifier"]], "Examples using sktree.tree.ObliqueDecisionTreeClassifier": [[16, "examples-using-sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[17, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[18, "sktree-tree-patchobliquedecisiontreeclassifier"]], "Examples using sktree.tree.PatchObliqueDecisionTreeClassifier": [[18, "examples-using-sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[19, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[20, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[21, "sktree-tree-unsupervisedobliquedecisiontree"]], "scikit-tree": [[22, "scikit-tree"]], "Contents": [[22, "contents"]], "Getting started:": [[22, null]], "Indices and tables": [[22, "indices-and-tables"]], "Installation": [[23, "installation"]], "Dependencies": [[23, "dependencies"]], "Installing with pip": [[23, "installing-with-pip"]], "Installing from source with Meson": [[23, "installing-from-source-with-meson"]], "Conda (Recommended)": [[23, "conda-recommended"]], "Oblique Random Forests": [[24, "oblique-random-forests"]], "Examples:": [[24, null]], "Feature importance evaluation": [[24, "feature-importance-evaluation"]], "Supervised Decision Trees": [[25, "supervised-decision-trees"]], "Oblique Trees": [[25, "oblique-trees"]], "Differences compared to decision trees": [[25, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[25, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[25, "classification-regression-and-multi-output-problems"]], "Complexity": [[25, "complexity"]], "Tips on practical use": [[25, "tips-on-practical-use"]], "Limitations compared to decision trees": [[25, "limitations-compared-to-decision-trees"]], "References:": [[25, null]], "Honest Trees": [[25, "honest-trees"]], "Unsupervised Decision Trees": [[26, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[26, "unsupervised-criterion"]], "Two-Means": [[26, "two-means"]], "Fast-BIC": [[26, "fast-bic"]], "Evaluating Unsupervised Trees": [[26, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[27, "examples-using-scikit-tree"]], "User Guide": [[28, "user-guide"]], "Release History": [[29, "release-history"]], "What\u2019s new?": [[31, "what-s-new"]], "Version 0.1": [[31, "version-0-1"]], "Changelog": [[31, "changelog"]], "Code and Documentation Contributors": [[31, "code-and-documentation-contributors"]]}, "indexentries": {"module": [[0, "module-sktree"]], "sktree": [[0, "module-sktree"]], "honestforestclassifier (class in sktree)": [[8, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.apply"]], "base_estimator_ (sktree.honestforestclassifier property)": [[8, "sktree.HonestForestClassifier.base_estimator_"]], "decision_path() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.decision_path"]], "feature_importances_ (sktree.honestforestclassifier property)": [[8, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.fit"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.get_params"]], "predict() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.predict_proba"]], "score() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.set_params"]], "set_score_request() (sktree.honestforestclassifier method)": [[8, "sktree.HonestForestClassifier.set_score_request"]], "obliquerandomforestclassifier (class in sktree)": [[9, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.obliquerandomforestclassifier property)": [[9, "sktree.ObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[9, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.fit"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.get_params"]], "predict() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "score() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[9, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[10, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.obliquerandomforestregressor property)": [[10, "sktree.ObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[10, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.fit"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.get_params"]], "predict() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.predict"]], "score() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[10, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[11, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.patchobliquerandomforestclassifier property)": [[11, "sktree.PatchObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[11, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[11, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[12, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.patchobliquerandomforestregressor property)": [[12, "sktree.PatchObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[12, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.predict"]], "score() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[12, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[13, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedobliquerandomforest property)": [[13, "sktree.UnsupervisedObliqueRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[13, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.predict"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[13, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[14, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedrandomforest property)": [[14, "sktree.UnsupervisedRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[14, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.predict"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[14, "sktree.UnsupervisedRandomForest.transform"]], "honesttreeclassifier (class in sktree.tree)": [[15, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[15, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.get_params"]], "predict() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.predict_proba"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[15, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[16, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[17, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[18, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[19, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[20, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[20, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.predict"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[20, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[21, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]]}})