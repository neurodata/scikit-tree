Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_iris_dtc", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/plot_oblique_random_forest", "auto_examples/sg_execution_times", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "index", "install", "use", "whats_new", "whats_new/_contributors", "whats_new/v0.1"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_iris_dtc.rst", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/plot_oblique_random_forest.rst", "auto_examples/sg_execution_times.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "index.rst", "install.rst", "use.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst"], "titles": ["API Documentation", "Examples", "Plot the decision surface of decision trees trained on the iris dataset", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "<strong>scikit-tree</strong>", "Installation", "Examples using scikit-tree", "Release History", "&lt;no title&gt;", "What\u2019s new?"], "terms": {"sktree": [0, 2, 3, 4, 15], "scikit": [0, 1, 2, 8, 9, 12, 13, 15, 17, 19], "manifold": [0, 7, 11, 19], "obliqu": [0, 1, 2, 5, 6, 7, 8, 10, 11, 13, 15, 16, 19], "random": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 19], "forest": [0, 1, 5, 6, 7, 8, 9, 10, 11, 16, 19], "decis": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16], "tree": [0, 1, 5, 6, 7, 8, 9, 15, 17, 19], "model": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 19], "ar": [0, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17], "tradition": 0, "implement": [0, 10, 19], "axi": [0, 1, 2, 5, 6, 7, 10, 11, 16], "align": [0, 1, 2, 5, 6, 7, 10, 11, 16], "split": [0, 6, 7, 8, 9, 10, 11, 12, 13], "store": [0, 8, 9], "mean": [0, 3, 4, 6, 7, 8, 9, 10, 11, 19], "outcom": 0, "i": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "e": [0, 6, 7, 8, 9, 10, 11, 15], "label": [0, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13], "vote": [0, 6, 7, 8, 9], "leaf": [0, 6, 7, 8, 9, 10, 11, 12, 13], "node": [0, 6, 7, 8, 9, 10, 11, 12, 13], "howev": 0, "more": [0, 2, 6, 7, 8, 9, 10, 11], "exot": 0, "possibl": [0, 6, 7, 8, 9, 10, 11, 12, 13], "call": [0, 6, 7, 11], "which": [0, 3, 6, 7, 8, 9, 10, 11, 15], "some": [0, 6, 7, 10, 16], "function": [0, 2, 6, 7, 8, 9, 10, 11, 12, 13], "multipl": 0, "featur": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19], "column": [0, 3, 4, 6, 7, 8, 9, 10, 11], "creat": [0, 6, 7, 8, 9, 10, 11, 12, 13, 15], "new": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17], "valu": [0, 6, 7, 8, 9, 10, 11, 12, 13], "thi": [0, 3, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17], "can": [0, 6, 7, 8, 9, 10, 11, 12, 13, 15], "take": [0, 2, 8, 9, 12, 13], "form": [0, 6, 7, 8, 9, 10, 11, 12, 13], "spars": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16], "linear": [0, 2], "combin": [0, 2, 6, 8, 10, 13], "even": [0, 6, 7, 8, 9, 10, 11, 12, 13], "advantag": 0, "structur": [0, 2, 11], "data": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "g": [0, 6, 7, 10], "an": [0, 6, 7, 8, 9, 10, 11, 12, 13, 15], "imag": [0, 11], "sampl": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "indic": [0, 6, 7, 8, 9, 10, 11, 12, 13], "awar": [0, 11], "fashion": [0, 6, 7, 8, 9, 10, 11, 12, 13], "class": [0, 3, 6, 7, 8, 9, 10, 11, 12, 13], "gener": [0, 1, 2, 3, 4, 6, 7, 8, 9, 16], "while": [0, 6, 7, 8, 9, 10, 11, 12, 13], "everyth": [0, 16], "els": [0, 4], "consist": [0, 4, 6, 7, 8, 9, 12, 13], "how": [0, 1, 8, 9, 12, 13, 14, 16], "learn": [0, 2, 6, 8, 9, 10, 12, 13, 14, 15, 16], "build": [0, 6, 7, 10, 14, 15], "us": [0, 1, 3, 4, 7, 8, 9, 11, 12, 13, 14, 15], "classif": [0, 3, 6, 7, 8, 9, 10, 11], "regress": [0, 6, 7, 8, 9, 10, 11, 12, 13], "thei": [0, 6, 7, 8, 9, 10, 11, 12, 13], "also": [0, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14], "power": 0, "non": [0, 6, 7, 8, 9, 10, 11, 12, 13], "parametr": 0, "embed": 0, "cluster": [0, 8, 9, 12, 13], "The": [0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "randomtreesembed": 0, "exampl": [0, 2, 3, 4, 7, 8, 9, 11, 12, 13, 14], "we": [0, 2, 14, 15, 19], "other": [0, 8, 9], "state": 0, "art": 0, "explicitli": 0, "base": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14], "criterion": [0, 6, 7, 8, 9, 10, 11, 12, 13, 19], "varianc": [0, 8, 9, 12, 13], "bic": [0, 8, 9, 12, 13], "demonstr": [1, 16], "algorithm": [1, 8, 9, 10, 11, 12, 13, 14, 16], "plot": [1, 5, 6, 10, 16], "predict": [1, 2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16], "cc18": [1, 5, 6, 16], "dataset": [1, 3, 5, 6, 7, 8, 9, 10, 16], "pariti": [1, 5, 6, 16], "simul": [1, 5, 6, 16], "surfac": [1, 5, 10, 16], "train": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16], "iri": [1, 5, 10, 16], "download": [1, 2, 3, 4, 16], "all": [1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17], "python": [1, 2, 3, 4, 15, 16], "sourc": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16], "code": [1, 2, 3, 4, 12, 13, 15, 16], "auto_examples_python": [1, 16], "zip": [1, 2, 16], "jupyt": [1, 2, 3, 4, 16], "notebook": [1, 2, 3, 4, 16], "auto_examples_jupyt": [1, 16], "galleri": [1, 2, 3, 4, 16], "sphinx": [1, 2, 3, 4, 16], "go": [2, 3, 4], "end": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "full": [2, 3, 4], "pair": 2, "see": [2, 6, 7, 8, 9, 10, 11, 12, 13, 14], "inform": [2, 3, 6, 7, 8, 9, 10, 11], "estim": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "For": [2, 6, 7, 8, 9, 10, 11, 12, 13], "each": [2, 6, 7, 8, 9, 10, 11, 12, 13], "boundari": 2, "made": 2, "simpl": [2, 6, 7, 8, 9, 10, 11, 12, 13], "threshold": 2, "rule": 2, "infer": [2, 10], "from": [2, 3, 4, 6, 7, 8, 9, 10, 14], "same": [2, 6, 7, 8, 9, 10, 11], "regular": 2, "show": [2, 3], "built": 2, "first": [2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 15], "load": [2, 4], "copi": 2, "ship": 2, "sklearn": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15], "import": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "load_iri": [2, 10], "displai": 2, "numpi": [2, 3, 10, 15], "np": [2, 3, 6, 7, 8, 9, 10, 11, 12, 13], "matplotlib": [2, 3, 4, 15], "pyplot": [2, 3, 4], "plt": [2, 3, 4], "decisiontreeclassifi": [2, 10], "inspect": [2, 6, 7, 8, 9, 10, 11, 12, 13], "decisionboundarydisplai": 2, "obliquedecisiontreeclassifi": [2, 6, 7], "paramet": [2, 3, 6, 7, 8, 9, 10, 11, 12, 13], "n_class": [2, 6, 7, 10, 11], "3": [2, 3, 6, 7, 10, 11, 14, 15], "plot_color": 2, "ryb": 2, "plot_step": 2, "0": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "02": 2, "clf_label": 2, "random_st": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "123456": [2, 3, 4], "clf": [2, 3, 4, 6, 10], "fig": [2, 3, 4], "ax": [2, 3, 4], "subplot": [2, 3, 4], "2": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 15], "flatten": 2, "pairidx": 2, "enumer": [2, 3, 4, 6, 7], "1": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "onli": [2, 6, 7, 8, 9, 10, 11, 12, 13], "two": [2, 4, 8, 9, 19], "correspond": [2, 6, 7, 10, 11, 12, 13], "x": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "y": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "target": [2, 6, 7, 8, 9, 10, 11, 12, 13], "fit": [2, 6, 7, 8, 9, 10, 11, 12, 13], "tight_layout": 2, "h_pad": 2, "5": [2, 3, 4, 6, 7, 8, 10, 11, 12, 13], "w_pad": 2, "pad": 2, "from_estim": 2, "cmap": 2, "cm": 2, "rdylbu": 2, "response_method": 2, "xlabel": 2, "feature_nam": 2, "ylabel": 2, "point": [2, 3, 6, 7, 8, 9, 10, 11, 12, 13], "color": [2, 3, 4], "rang": [2, 3, 11], "idx": 2, "where": [2, 4, 6, 7, 8, 9, 10, 11, 12, 13], "scatter": 2, "c": [2, 10, 11, 15], "target_nam": 2, "edgecolor": 2, "black": 2, "": [2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "15": 2, "suptitl": 2, "f": [2, 3, 4], "legend": [2, 3], "loc": [2, 3], "lower": 2, "right": [2, 6, 7, 8, 9, 10, 11, 12, 13], "borderpad": 2, "handletextpad": 2, "_": 2, "tight": 2, "home": 2, "circleci": 2, "project": [2, 4, 6, 10, 15, 19], "plot_iris_dtc": [2, 5], "py": [2, 3, 4, 5], "78": 2, "userwarn": 2, "No": 2, "colormap": 2, "provid": [2, 6, 7, 8, 9, 10, 11, 12, 13], "via": [2, 10, 15], "ignor": [2, 6, 7, 8, 9, 10, 11, 12, 13], "singl": [2, 6, 7, 8, 9, 10, 11, 12, 13], "togeth": 2, "plot_tre": 2, "figur": 2, "fill": 2, "true": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "titl": 2, "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], "run": [2, 3, 4, 6, 7, 10, 11, 12, 13, 15], "time": [2, 3, 4, 8, 9, 10, 11], "script": [2, 3, 4], "minut": [2, 3, 4], "939": [2, 5], "second": [2, 3, 4], "memori": [2, 3, 4, 6, 7, 10], "usag": [2, 3, 4], "14": 2, "mb": [2, 3, 4, 5], "ipynb": [2, 3, 4], "A": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "perform": [3, 4, 6, 7, 8, 9, 10, 12, 13, 14], "comparison": [3, 4], "between": [3, 4, 10, 11, 12, 13], "standard": [3, 4, 11], "variat": 3, "noisi": 3, "problem": [3, 6, 7, 10, 11, 14], "itself": [3, 8, 9], "multivari": [3, 11], "xor": 3, "binari": 3, "task": [3, 14], "high": [3, 6, 7, 8, 9, 10, 11, 12, 13], "dimens": [3, 8, 9, 12, 13], "uniformli": 3, "distribut": 3, "n_sampl": [3, 6, 7, 8, 9, 10, 11, 12, 13], "number": [3, 6, 7, 8, 9, 10, 11, 12, 13], "p": [3, 6, 7], "limit": 3, "carri": [3, 6, 7, 8, 9, 10, 11, 12, 13], "about": 3, "defin": [3, 6, 7, 8, 9, 10, 11, 12, 13], "odd": 3, "sum": [3, 6, 7, 8, 9, 10, 11, 12, 13], "across": [3, 6, 7, 8, 9, 10, 11, 12, 13], "greater": [3, 6, 7, 8, 9, 10, 11, 12, 13], "than": [3, 6, 7, 8, 9, 10, 11, 12, 13], "otherwis": [3, 6, 7], "further": 3, "detail": [3, 4, 6, 7, 10, 11, 12, 13], "public": 3, "http": [3, 4, 9, 10, 15], "epub": 3, "siam": 3, "org": [3, 4, 9, 10, 15], "doi": [3, 9], "epdf": 3, "10": [3, 9, 10], "1137": 3, "9781611974973": 3, "56": 3, "It": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14], "took": [3, 4], "8": [3, 4, 5, 15], "panda": [3, 4, 8, 9, 12, 13], "pd": [3, 4], "datetim": [3, 4], "seaborn": [3, 4], "sn": [3, 4], "ensembl": [3, 4, 6, 7, 8, 9], "randomforestclassifi": [3, 4, 6, 7], "model_select": [3, 4, 10], "repeatedkfold": [3, 4], "cross_valid": [3, 4], "obliquerandomforestclassifi": [3, 4], "t0": [3, 4], "now": [3, 4, 15], "def": [3, 4], "sparse_par": 3, "20": [3, 9], "p_star": 3, "random_se": 3, "none": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "kwarg": [3, 4], "seed": [3, 8, 9], "uniform": 3, "zero": [3, 6, 7, 8, 9, 10, 11, 12, 13], "return": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "get_scor": [3, 4], "n_cv": [3, 4], "n_repeat": [3, 4], "tmp": [3, 4], "cv": [3, 4, 10], "n_split": [3, 4], "test_scor": [3, 4], "score": [3, 4, 6, 7, 8, 9, 10, 11], "accuraci": [3, 4, 6, 7, 10, 11], "append": [3, 4], "rf": [3, 4], "OF": [3, 4], "df": [3, 4], "datafram": [3, 4, 8, 9, 12, 13], "explod": [3, 4], "astyp": [3, 4], "float": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "reset_index": [3, 4], "inplac": [3, 4], "drop": [3, 4], "grid": 3, "search": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "hyper": 3, "param": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "max_featur": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "n_estim": [3, 4, 6, 7, 8, 9], "100": [3, 4, 6, 7, 8, 9], "max_depth": [3, 4, 6, 7, 8, 9, 10, 11, 12, 13], "40": 3, "1000": [3, 6], "t_d": 3, "print": [3, 4, 6], "draw": [3, 4, 6, 7, 8, 9], "figsiz": 3, "6": [3, 4, 5, 15], "stripplot": [3, 4], "dodg": [3, 4], "boxplot": [3, 4], "white": [3, 4], "set_titl": [3, 4], "queri": [3, 4], "iloc": [3, 4], "rff": 3, "test": [3, 6, 7, 10, 11, 15], "round": [3, 6, 7], "off": 3, "4": [3, 5, 6, 7, 10, 11], "savefig": 3, "plot_sim_": 3, "jpg": 3, "9": [3, 4, 5, 15, 19], "572": [3, 5], "plot_oblique_axis_aligned_forests_sparse_par": [3, 5], "three": 4, "openml": 4, "benchmark": [4, 14], "suit": 4, "name": [4, 6, 7, 8, 9, 10, 11, 12, 13], "wdbc": 4, "www": [4, 10], "type": 4, "sort": 4, "id": 4, "1510": 4, "phish": 4, "websit": 4, "4534": 4, "31": 4, "former": 4, "entir": 4, "numer": 4, "latter": [4, 6, 7, 8, 9, 10, 11, 12, 13], "normin": 4, "third": 4, "dub": 4, "cnae": 4, "statu": 4, "activ": [4, 15], "1468": 4, "ha": [4, 6, 7, 8, 9, 10, 11, 12, 13, 19], "notabl": 4, "larg": [4, 6, 7, 10], "space": [4, 8, 9, 12, 13], "857": 4, "As": 4, "you": [4, 6, 7, 10, 11, 12, 13, 14, 15, 16], "notic": 4, "outperform": 4, "util": 4, "mechan": 4, "subsampl": 4, "due": 4, "comput": [4, 6, 7, 8, 9, 10, 11, 12, 13], "constraint": 4, "phishingwebsit": 4, "34": 4, "fetch_openml": 4, "data_id": 4, "load_cc18": 4, "as_fram": 4, "parser": 4, "extract": 4, "d_name": 4, "n": [4, 6, 7, 8, 9, 10, 11, 12, 13, 15], "int": [4, 6, 7, 8, 9, 10, 11, 12, 13], "frame": 4, "shape": [4, 6, 7, 8, 9, 10, 11, 12, 13], "dtype": [4, 6, 7, 8, 9, 10, 11, 12, 13], "object": [4, 6, 7, 8, 9, 10, 11, 12, 13], "50": 4, "concat": 4, "uniqu": [4, 6, 7, 8, 9, 10, 11, 12, 13], "set_size_inch": 4, "set_ylabel": 4, "set_xlabel": 4, "36": [4, 5], "277": [4, 5], "73": 4, "plot_oblique_random_forest": [4, 5], "00": 5, "49": 5, "788": 5, "execut": 5, "auto_exampl": 5, "file": [5, 15], "72": 5, "09": 5, "03": 5, "13": 5, "gini": [6, 7, 8, 9, 10, 11, 12, 13], "min_samples_split": [6, 7, 8, 9, 10, 11, 12, 13], "min_samples_leaf": [6, 7, 8, 9, 10, 11, 12, 13], "min_weight_fraction_leaf": [6, 7, 8, 9, 10, 11, 12, 13], "sqrt": [6, 7, 8, 9, 10, 11, 12, 13], "max_leaf_nod": [6, 7, 8, 9, 10, 11, 12, 13], "min_impurity_decreas": [6, 7, 8, 9, 10, 11, 12, 13], "bootstrap": [6, 7, 8, 9], "oob_scor": [6, 7, 8, 9], "fals": [6, 7, 8, 9], "n_job": [6, 7, 8, 9], "verbos": [6, 7, 8, 9, 15], "warm_start": [6, 7, 8, 9], "class_weight": [6, 7, 10, 11], "max_sampl": [6, 7, 8, 9], "feature_combin": [6, 8, 10, 13], "classifi": [6, 7, 10, 11], "meta": [6, 7], "similar": [6, 7], "variou": [6, 7], "sub": [6, 7, 8, 9], "averag": [6, 7, 8, 10, 13], "improv": [6, 7, 10, 11, 12, 13, 19], "control": [6, 7, 10, 11, 12, 13], "over": [6, 7, 11], "size": [6, 7, 10, 11], "default": [6, 7, 8, 9, 10, 11, 12, 13], "whole": [6, 7], "read": [6, 10], "user": [6, 10, 11, 12, 13, 15], "guid": [6, 10, 14], "entropi": [6, 7, 10, 11], "measur": [6, 7, 8, 9, 10, 11, 12, 13], "qualiti": [6, 7, 8, 9, 10, 11, 12, 13], "support": [6, 7, 8, 9, 10, 11, 12, 13, 15], "criteria": [6, 7, 8, 9, 10, 11, 12, 13], "impur": [6, 7, 8, 9, 10, 11, 12, 13], "gain": [6, 7, 10, 11], "note": [6, 7, 8, 9, 10, 11, 12, 13, 15, 17], "specif": [6, 7], "maximum": [6, 7, 8, 9, 10, 11, 12, 13], "depth": [6, 7, 8, 9, 10, 11, 12, 13], "If": [6, 7, 8, 9, 10, 11, 12, 13], "expand": [6, 7, 8, 9, 10, 11, 12, 13], "until": [6, 7, 8, 9, 10, 11, 12, 13], "leav": [6, 7, 8, 9, 10, 11, 12, 13], "pure": [6, 7, 8, 9, 10, 11, 12, 13], "contain": [6, 7, 8, 9, 10, 11, 12, 13], "less": [6, 7, 8, 9, 10, 11, 12, 13], "minimum": [6, 7, 8, 9, 10, 11, 12, 13], "requir": [6, 7, 8, 9, 10, 11, 12, 13], "intern": [6, 7, 8, 9, 10, 11, 12, 13], "consid": [6, 7, 8, 9, 10, 11, 12, 13], "fraction": [6, 7, 8, 9, 10, 11, 12, 13], "ceil": [6, 7, 8, 9, 10, 11, 12, 13], "ani": [6, 7, 8, 9, 10, 11, 12, 13], "least": [6, 7, 8, 9, 10, 11, 12, 13], "left": [6, 7, 8, 9, 10, 11, 12, 13], "branch": [6, 7, 8, 9, 10, 11, 12, 13], "mai": [6, 7, 8, 9, 10, 11, 12, 13], "have": [6, 7, 8, 9, 10, 11, 12, 13], "effect": [6, 7, 8, 9, 10, 11, 12, 13, 16], "smooth": [6, 7, 8, 9, 10, 11, 12, 13], "especi": [6, 7, 8, 9, 10, 11, 12, 13], "weight": [6, 7, 8, 9, 10, 11, 12, 13], "input": [6, 7, 8, 9, 10, 11, 12, 13], "equal": [6, 7, 8, 9, 10, 11, 12, 13], "when": [6, 7, 8, 9, 10, 11, 12, 13, 17], "sample_weight": [6, 7, 8, 9, 10, 11, 12, 13], "log2": [6, 7, 8, 9, 10, 11, 12, 13], "look": [6, 7, 8, 9, 10, 11, 12, 13, 16], "best": [6, 7, 8, 9, 10, 11, 12, 13], "n_featur": [6, 7, 8, 9, 10, 11, 12, 13], "auto": [6, 7, 8, 9, 10, 11, 12, 13], "doe": [6, 7, 8, 9, 10, 11], "stop": [6, 7, 8, 9, 10, 11], "one": [6, 7, 8, 9, 10, 11, 12, 13], "valid": [6, 7, 8, 9, 10, 11, 12, 13], "partit": [6, 7, 8, 9, 10, 11], "found": [6, 7, 8, 9, 10, 11, 12, 13], "grow": [6, 7, 8, 9, 10, 11, 12, 13], "rel": [6, 7, 8, 9, 10, 11, 12, 13], "reduct": [6, 7, 8, 9, 10, 11, 12, 13], "unlimit": [6, 7, 8, 9, 10, 11, 12, 13], "induc": [6, 7, 8, 9, 10, 11, 12, 13], "decreas": [6, 7, 8, 9, 10, 11, 12, 13], "equat": [6, 7, 8, 9, 10, 11, 12, 13], "follow": [6, 7, 8, 9, 10, 11, 12, 13], "n_t": [6, 7, 8, 9, 10, 11, 12, 13], "n_t_r": [6, 7, 8, 9, 10, 11, 12, 13], "right_impur": [6, 7, 8, 9, 10, 11, 12, 13], "n_t_l": [6, 7, 8, 9, 10, 11, 12, 13], "left_impur": [6, 7, 8, 9, 10, 11, 12, 13], "current": [6, 7, 8, 9, 10, 11, 12, 13, 15], "child": [6, 7, 8, 9, 10, 11, 12, 13], "refer": [6, 7, 8, 9, 10, 11, 12, 13], "pass": [6, 7, 8, 9, 10, 11, 12, 13], "bool": [6, 7, 8, 9, 10, 11, 12, 13], "whether": [6, 7, 8, 9, 11, 12, 13], "out": [6, 7, 8, 9], "bag": [6, 7, 8, 9], "avail": [6, 7, 8, 9, 15], "job": [6, 7], "parallel": [6, 7, 8, 9], "decision_path": [6, 7, 8, 9, 10, 11, 12, 13], "appli": [6, 7, 8, 9, 10, 11, 12, 13], "unless": [6, 7, 8, 9, 10, 11, 12, 13], "joblib": [6, 7, 8, 9, 15], "parallel_backend": [6, 7], "context": [6, 7], "processor": [6, 7], "glossari": [6, 7, 10, 11], "randomst": [6, 7, 10, 11, 12, 13], "instanc": [6, 7, 8, 9, 10, 11, 12, 13], "both": [6, 7], "set": [6, 7, 8, 9, 10, 11, 12, 13], "reus": [6, 7], "solut": [6, 7], "previou": [6, 7, 8, 9], "add": [6, 7, 15], "just": [6, 7, 15], "balanc": [6, 7, 10, 11], "balanced_subsampl": [6, 7], "dict": [6, 7, 8, 9, 10, 11, 12, 13], "list": [6, 7, 8, 9, 10, 11, 19], "associ": [6, 7, 9, 10, 11], "class_label": [6, 7, 10, 11], "given": [6, 7, 10, 11], "suppos": [6, 7, 10, 11], "multi": [6, 7, 10, 11], "output": [6, 7, 8, 9, 10, 11, 12, 13], "order": [6, 7, 10, 11], "multioutput": [6, 7, 10, 11], "includ": [6, 7, 10, 11, 19], "multilabel": [6, 7, 10, 11], "should": [6, 7, 8, 9, 10, 11, 15], "everi": [6, 7, 10, 11], "its": [6, 7, 8, 9, 10, 11], "own": [6, 7, 10, 11], "four": [6, 7, 10, 11], "instead": [6, 7, 10, 11], "mode": [6, 7, 10, 11, 15], "automat": [6, 7, 10, 11], "adjust": [6, 7, 10, 11], "invers": [6, 7, 10, 11], "proport": [6, 7, 10, 11], "frequenc": [6, 7, 10, 11], "bincount": [6, 7, 10, 11], "except": [6, 7], "grown": [6, 7, 10], "multipli": [6, 7, 10, 11], "through": [6, 7, 8, 9, 10, 11, 12, 13, 14], "method": [6, 7, 8, 9, 10, 11, 12, 13], "specifi": [6, 7, 10, 11], "thu": [6, 7, 8, 9, 10], "interv": [6, 7, 8, 9], "matrix": [6, 7, 8, 9, 10, 11, 12, 13], "equival": [6, 10], "tradit": [6, 10], "give": [6, 7, 8, 9, 10], "expect": [6, 10, 11], "must": [6, 10, 12, 13], "alwai": [6, 7, 10, 11, 12, 13, 15], "etc": [6, 7, 10], "lead": [6, 7, 10], "fulli": [6, 7, 10], "unprun": [6, 7, 10], "potenti": [6, 7, 10], "veri": [6, 7, 10], "To": [6, 7, 10, 11, 12, 13, 15, 16], "reduc": [6, 7, 10], "consumpt": [6, 7, 10], "complex": [6, 7, 10, 11, 12, 13], "those": [6, 7, 10], "randomli": [6, 7, 10, 11, 12, 13], "permut": [6, 7, 10, 11, 12, 13], "therefor": [6, 7, 11], "vari": [6, 7, 10, 11, 12, 13], "ident": [6, 7, 10, 11, 12, 13], "sever": [6, 7, 10, 11, 12, 13], "dure": [6, 7, 8, 9, 10, 11, 12, 13], "obtain": [6, 7, 8, 9, 10, 11, 12, 13], "determinist": [6, 7, 10, 11, 12, 13], "behaviour": [6, 7, 10, 11, 12, 13], "fix": [6, 7, 10, 11, 12, 13, 17, 18, 19], "breiman": [6, 10], "machin": 6, "45": [6, 19], "32": 6, "2001": 6, "make_classif": 6, "n_inform": 6, "n_redund": 6, "shuffl": 6, "attribut": [6, 7, 8, 9, 10, 11, 12, 13], "base_estimator_": [6, 7, 8, 9], "estimators_": [6, 7, 8, 9], "collect": [6, 7, 8, 9], "classes_": [6, 7, 10, 11], "ndarrai": [6, 7, 8, 9, 10, 11, 12, 13], "arrai": [6, 7, 8, 9, 10, 11, 12, 13], "n_classes_": [6, 7, 10], "n_features_": [6, 7], "n_features_in_": [6, 7, 8, 9, 10, 12, 13], "seen": [6, 7, 8, 9, 10], "feature_names_in_": [6, 7, 8, 9, 10], "string": [6, 7, 8, 9, 10, 11, 12, 13], "n_outputs_": [6, 7, 10], "feature_importances_": [6, 7, 8, 9, 10, 11, 12, 13], "oob_score_": [6, 7, 8, 9], "exist": [6, 7, 8, 9], "oob_decision_function_": [6, 7, 8, 9], "n_output": [6, 7, 8, 9, 10, 11, 12, 13], "small": [6, 7, 8, 9], "might": [6, 7, 8, 9], "wa": [6, 7, 8, 9], "never": [6, 7, 8, 9], "In": [6, 7, 8, 9, 10, 11, 12, 13, 19], "case": [6, 7, 8, 9, 10, 11, 12, 13], "nan": [6, 7, 8, 9], "array_lik": [6, 7, 8, 9, 10, 11, 12, 13], "convert": [6, 7, 8, 9, 10, 11, 12, 13], "float32": [6, 7, 8, 9, 10, 11, 12, 13], "csr_matrix": [6, 7, 8, 9, 10, 11, 12, 13], "x_leav": [6, 7, 8, 9, 10, 11, 12, 13], "datapoint": [6, 7, 8, 9, 10, 11, 12, 13], "index": [6, 7, 8, 9, 10, 11, 12, 13, 14], "up": [6, 7, 8, 9, 10, 11, 12, 13], "path": [6, 7, 8, 9, 10, 11, 12, 13], "version": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "18": [6, 7, 8, 9, 10, 11, 12, 13], "n_node": [6, 7, 8, 9, 10, 11, 12, 13], "element": [6, 7, 8, 9, 10, 11, 12, 13], "goe": [6, 7, 8, 9, 10, 11, 12, 13], "csr": [6, 7, 8, 9, 10, 11, 12, 13], "format": [6, 7, 8, 9, 12, 13], "n_nodes_ptr": [6, 7, 8, 9], "th": [6, 7, 8, 9], "csc_matrix": [6, 7, 8, 9, 10, 11, 12, 13], "real": [6, 7], "would": [6, 7, 8, 9, 10, 11, 12, 13, 15], "net": [6, 7, 8, 9, 10, 11, 12, 13], "neg": [6, 7, 8, 9, 10, 11, 12, 13], "result": [6, 7, 8, 9, 10, 11, 12, 13], "either": [6, 7, 8, 9, 10, 11, 12, 13], "self": [6, 7, 8, 9, 10, 11, 12, 13], "get_param": [6, 7, 8, 9, 10, 11, 12, 13], "deep": [6, 7, 8, 9, 10, 11, 12, 13], "get": [6, 7, 8, 9, 10, 11, 12, 13], "subobject": [6, 7, 8, 9, 10, 11, 12, 13], "map": [6, 7, 8, 9, 10, 11, 12, 13], "probabl": [6, 7, 8, 9, 10, 11], "That": [6, 7, 8, 9, 10, 11, 12, 13], "highest": [6, 7, 8, 9, 10], "predict_log_proba": [6, 7, 10, 11], "log": [6, 7, 10, 11], "predict_proba": [6, 7, 10, 11], "subset": [6, 7, 10, 11], "harsh": [6, 7, 10, 11], "metric": [6, 7, 8, 9, 10, 11], "sinc": [6, 7, 10, 11, 19], "correctli": [6, 7, 10, 11], "w": [6, 7, 10, 11], "r": [6, 7, 10, 11, 15], "t": [6, 7, 9, 10, 11, 12, 13], "set_param": [6, 7, 8, 9, 10, 11, 12, 13], "work": [6, 7, 8, 9, 10, 11, 12, 13], "well": [6, 7, 8, 9, 10, 11, 12, 13], "nest": [6, 7, 8, 9, 10, 11, 12, 13], "pipelin": [6, 7, 8, 9, 10, 11, 12, 13], "compon": [6, 7, 8, 9, 10, 11, 12, 13], "__": [6, 7, 8, 9, 10, 11, 12, 13], "so": [6, 7, 8, 9, 10, 11, 12, 13], "updat": [6, 7, 8, 9, 10, 11, 12, 13], "properti": [6, 7, 8, 9, 10, 11, 12, 13], "higher": [6, 7, 8, 9], "normal": [6, 7, 8, 9, 10, 11, 12, 13], "brought": [6, 7, 8, 9, 10, 11, 12, 13], "known": [6, 7, 8, 9, 10, 11, 12, 13], "warn": [6, 7, 8, 9, 10, 11, 12, 13], "mislead": [6, 7, 8, 9, 10, 11, 12, 13], "cardin": [6, 7, 8, 9, 10, 11, 12, 13], "mani": [6, 7, 8, 9, 10, 11, 12, 13], "permutation_import": [6, 7, 8, 9, 10, 11, 12, 13], "altern": [6, 7, 8, 9, 10, 11, 12, 13], "root": [6, 7, 8, 9, 10, 11, 12, 13], "min_patch_height": [7, 11], "max_patch_height": [7, 11], "min_patch_width": [7, 11], "max_patch_width": [7, 11], "data_height": [7, 11], "data_width": [7, 11], "patch": [7, 11], "option": [7, 8, 9, 11, 12, 13, 15], "height": [7, 11], "width": [7, 11], "presum": [7, 11], "un": [7, 11], "vector": [7, 11], "adam": [7, 11, 19], "li": [7, 9, 11, 19], "ronan": [7, 11], "perri": [7, 11], "chester": [7, 11], "huynh": [7, 11], "tyler": [7, 11], "m": [7, 11], "tomita": [7, 11], "ronak": [7, 11], "mehta": [7, 11], "jesu": [7, 11], "arroyo": [7, 11], "jess": [7, 11], "patsol": [7, 11], "benjamin": [7, 11], "falk": [7, 11], "joshua": [7, 9, 11], "vogelstein": [7, 9, 11], "toward": [7, 11], "close": [7, 11], "gap": [7, 10, 11, 12, 13], "convolut": [7, 11], "network": [7, 11], "arxiv": [7, 11], "preprint": [7, 11], "1909": [7, 11], "11799": [7, 11], "2019": [7, 11], "twomean": [8, 9, 12, 13], "clustering_func": [8, 9, 12, 13], "clustering_func_arg": [8, 9, 12, 13], "unsupervis": [8, 9, 12, 13, 14, 19], "inher": [8, 9], "simultan": [8, 9], "adapt": [8, 9], "affin": [8, 9, 12, 13], "distanc": [8, 9, 10, 11, 12, 13], "do": [8, 9, 10, 11, 12, 13], "fall": [8, 9], "within": [8, 9, 10, 11, 12, 13, 15], "fastbic": [8, 9, 12, 13, 19], "maxim": [8, 9], "bayesian": [8, 9], "mathemat": [8, 9], "formul": [8, 9], "recommend": [8, 9, 10, 11, 14], "max": [8, 9, 12, 13], "callabl": [8, 9, 12, 13], "By": [8, 9, 12, 13], "calinski_harabasz_scor": [8, 9], "signatur": [8, 9], "predicted_label": [8, 9], "custom": [8, 9], "silhouette_scor": [8, 9], "davies_bouldin_scor": [8, 9], "cpu": [8, 9], "construct": [8, 9], "continu": [8, 9], "instant": [8, 9], "compat": [8, 9, 12, 13], "agglomerativeclust": [8, 9, 12, 13], "keyword": [8, 9, 12, 13], "argument": [8, 9, 12, 13], "estimator_": [8, 9], "unsuperviseddecisiontre": [8, 9], "templat": [8, 9], "labels_": [8, 9], "affinity_matrix_": [8, 9], "proxim": [8, 9], "oob": [8, 9], "effici": [8, 9, 11, 17, 18, 19], "matric": [8, 9], "Not": [8, 9, 12, 13], "present": [8, 9, 12, 13], "api": [8, 9, 11, 12, 13, 14, 15, 17, 18, 19], "convent": [8, 9, 12, 13], "fit_predict": [8, 9, 12, 13], "int64": [8, 9, 12, 13], "fit_transform": [8, 9, 12, 13], "fit_param": [8, 9, 12, 13], "transform": [8, 9, 12, 13], "addit": [8, 9, 12, 13], "x_new": [8, 9, 12, 13], "n_features_new": [8, 9, 12, 13], "set_output": [8, 9, 12, 13], "introduc": [8, 9, 12, 13], "configur": [8, 9, 12, 13], "unchang": [8, 9, 12, 13], "center": [8, 9, 12, 13], "typic": [8, 9, 12, 13], "dens": [8, 9, 12, 13], "meghana": 9, "madhyastha": 9, "perci": 9, "jame": 9, "brown": 9, "veronika": 9, "strnadova": 9, "neelei": 9, "carei": 9, "prieb": 9, "randal": 9, "burn": 9, "geodes": 9, "proceed": 9, "26th": 9, "acm": 9, "sigkdd": 9, "confer": 9, "knowledg": 9, "discoveri": 9, "mine": 9, "kdd": 9, "513": 9, "523": 9, "york": 9, "ny": 9, "usa": 9, "2020": 9, "machineri": 9, "url": 9, "1145": 9, "3394486": 9, "3403094": 9, "splitter": [10, 11, 12, 13], "strategi": [10, 11, 12, 13], "choos": [10, 11, 12, 13], "compar": [10, 11], "select": [10, 11, 12, 13], "befor": [10, 11, 12, 13], "find": [10, 11, 12, 13], "among": [10, 11, 12, 13], "them": [10, 11, 12, 13], "But": [10, 11, 12, 13], "differ": [10, 11, 12, 13], "integ": [10, 11, 12, 13], "fact": 10, "better": 10, "caveat": 10, "increas": 10, "willing": 10, "spend": 10, "resourc": 10, "oper": [10, 11], "argmax": 10, "ti": 10, "lowest": 10, "en": 10, "wikipedia": 10, "wiki": 10, "decision_tree_learn": 10, "l": 10, "j": [10, 15], "friedman": 10, "olshen": 10, "stone": 10, "wadsworth": 10, "belmont": 10, "ca": 10, "1984": 10, "hasti": 10, "tibshirani": 10, "statist": 10, "springer": 10, "2009": 10, "cutler": 10, "stat": 10, "berkelei": 10, "edu": 10, "randomforest": 10, "cc_home": 10, "htm": 10, "cross_val_scor": 10, "93": 10, "86": 10, "max_features_": 10, "tree_": [10, 11, 12, 13], "underli": 10, "pleas": 10, "help": 10, "_tree": 10, "feature_combinations_": 10, "taken": 10, "check_input": [10, 11, 12, 13], "17": [10, 11, 12, 13], "allow": [10, 11, 12, 13], "bypass": [10, 11, 12, 13], "check": [10, 11, 12, 13], "don": [10, 11, 12, 13], "know": [10, 11, 12, 13], "what": [10, 11, 12, 13, 14, 17], "re": [10, 11, 12, 13], "node_count": [10, 11, 12, 13], "possibli": [10, 11, 12, 13], "cost_complexity_pruning_path": [10, 11, 12, 13], "prune": [10, 11, 12, 13], "minim": [10, 11, 12, 13], "cost": [10, 11, 12, 13], "process": [10, 11, 12, 13], "ccp_path": [10, 11, 12, 13], "bunch": [10, 11, 12, 13], "dictionari": [10, 11, 12, 13], "like": [10, 11, 12, 13, 15], "ccp_alpha": [10, 11, 12, 13], "alpha": [10, 11, 12, 13], "subtre": [10, 11, 12, 13], "get_depth": [10, 11, 12, 13], "get_n_leav": [10, 11, 12, 13], "n_leav": [10, 11, 12, 13], "proba": [10, 11], "morf": 11, "contigu": 11, "along": 11, "row": 11, "seri": 11, "discontigu": 11, "sensor": 11, "2d": 11, "mask": 11, "onto": 11, "compris": 11, "origin": 11, "tt": 11, "done": 11, "last": 11, "exactli": 11, "albeit": 11, "optim": 11, "your": [11, 14], "unsupervisedcriterion": [12, 13], "abid": [12, 13], "cython": [12, 13, 15], "unsupervisedsplitt": [12, 13], "assign": [12, 13], "packag": [14, 15], "modern": 14, "supervis": 14, "extend": 14, "robust": 14, "achiev": 14, "strong": 14, "encourag": 14, "research": 14, "top": 14, "relev": 14, "pull": 14, "request": 14, "our": 14, "walk": 14, "contribut": [14, 19], "licens": 14, "under": 14, "bsd": 14, "document": 14, "releas": 14, "histori": 14, "instal": 14, "depend": 14, "pip": 14, "meson": 14, "conda": 14, "modul": 14, "23": 15, "scipi": 15, "pypi": 15, "poetri": 15, "clone": 15, "repositori": 15, "neurodata": 15, "git": 15, "github": 15, "com": 15, "cd": 15, "ideal": 15, "start": 15, "virtual": 15, "environ": 15, "dev": 15, "Then": 15, "build_requir": 15, "txt": 15, "spin": 15, "cli": 15, "local": 15, "abl": [15, 16], "edit": 15, "pend": 15, "isol": 15, "u": 15, "repo": 15, "zipbal": 15, "master": 15, "necessari": 15, "forg": 15, "threadpoolctl": 15, "pytest": 15, "compil": 15, "llvm": 15, "openmp": 15, "next": 15, "directori": 15, "dodiscov": 15, "purpos": 15, "main": 15, "obliquepr": 15, "need": [15, 16], "develop": [15, 19], "pr": 15, "22754": 15, "checkout": 15, "page": [15, 17], "instruct": 15, "here": [16, 19], "major": [17, 18, 19], "enhanc": [17, 18, 19], "chang": [17, 18, 19], "link": 17, "tip": 17, "subscrib": 17, "librari": 17, "io": 17, "notifi": 17, "11": 19, "21": 19, "jong": 19, "shin": 19, "thank": 19, "everyon": 19, "who": 19, "mainten": 19, "incept": 19}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[6, 1, 1, "", "ObliqueRandomForestClassifier"], [7, 1, 1, "", "PatchObliqueRandomForestClassifier"], [8, 1, 1, "", "UnsupervisedObliqueRandomForest"], [9, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ObliqueRandomForestClassifier": [[6, 2, 1, "", "apply"], [6, 3, 1, "", "base_estimator_"], [6, 2, 1, "", "decision_path"], [6, 3, 1, "", "feature_importances_"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "get_params"], [6, 2, 1, "", "predict"], [6, 2, 1, "", "predict_log_proba"], [6, 2, 1, "", "predict_proba"], [6, 2, 1, "", "score"], [6, 2, 1, "", "set_params"]], "sktree.PatchObliqueRandomForestClassifier": [[7, 2, 1, "", "apply"], [7, 3, 1, "", "base_estimator_"], [7, 2, 1, "", "decision_path"], [7, 3, 1, "", "feature_importances_"], [7, 2, 1, "", "fit"], [7, 2, 1, "", "get_params"], [7, 2, 1, "", "predict"], [7, 2, 1, "", "predict_log_proba"], [7, 2, 1, "", "predict_proba"], [7, 2, 1, "", "score"], [7, 2, 1, "", "set_params"]], "sktree.UnsupervisedObliqueRandomForest": [[8, 2, 1, "", "apply"], [8, 3, 1, "", "base_estimator_"], [8, 2, 1, "", "decision_path"], [8, 3, 1, "", "feature_importances_"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "fit_predict"], [8, 2, 1, "", "fit_transform"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "set_output"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[9, 2, 1, "", "apply"], [9, 3, 1, "", "base_estimator_"], [9, 2, 1, "", "decision_path"], [9, 3, 1, "", "feature_importances_"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "fit_predict"], [9, 2, 1, "", "fit_transform"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "set_output"], [9, 2, 1, "", "set_params"], [9, 2, 1, "", "transform"]], "sktree.tree": [[10, 1, 1, "", "ObliqueDecisionTreeClassifier"], [11, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [12, 1, 1, "", "UnsupervisedDecisionTree"], [13, 1, 1, "", "UnsupervisedObliqueDecisionTree"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[10, 2, 1, "", "apply"], [10, 2, 1, "", "cost_complexity_pruning_path"], [10, 2, 1, "", "decision_path"], [10, 3, 1, "", "feature_importances_"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_depth"], [10, 2, 1, "", "get_n_leaves"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "predict_log_proba"], [10, 2, 1, "", "predict_proba"], [10, 2, 1, "", "score"], [10, 2, 1, "", "set_params"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[11, 2, 1, "", "apply"], [11, 2, 1, "", "cost_complexity_pruning_path"], [11, 2, 1, "", "decision_path"], [11, 3, 1, "", "feature_importances_"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "get_depth"], [11, 2, 1, "", "get_n_leaves"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "predict_log_proba"], [11, 2, 1, "", "predict_proba"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_params"]], "sktree.tree.UnsupervisedDecisionTree": [[12, 2, 1, "", "apply"], [12, 2, 1, "", "cost_complexity_pruning_path"], [12, 2, 1, "", "decision_path"], [12, 3, 1, "", "feature_importances_"], [12, 2, 1, "", "fit_predict"], [12, 2, 1, "", "fit_transform"], [12, 2, 1, "", "get_depth"], [12, 2, 1, "", "get_n_leaves"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "set_output"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[13, 2, 1, "", "apply"], [13, 2, 1, "", "cost_complexity_pruning_path"], [13, 2, 1, "", "decision_path"], [13, 3, 1, "", "feature_importances_"], [13, 2, 1, "", "fit_predict"], [13, 2, 1, "", "fit_transform"], [13, 2, 1, "", "get_depth"], [13, 2, 1, "", "get_n_leaves"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "set_output"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"]}, "titleterms": {"api": 0, "document": [0, 19], "supervis": 0, "unsupervis": 0, "exampl": [1, 6, 10, 16], "plot": [2, 3, 4], "decis": 2, "surfac": 2, "tree": [2, 10, 11, 12, 13, 14, 16], "train": 2, "iri": 2, "dataset": [2, 4], "obliqu": [3, 4], "forest": [3, 4], "axi": [3, 4], "align": [3, 4], "random": [3, 4], "predict": [3, 4], "spars": 3, "pariti": 3, "simul": 3, "cc18": 4, "comput": 5, "time": 5, "sktree": [6, 7, 8, 9, 10, 11, 12, 13], "obliquerandomforestclassifi": 6, "us": [6, 10, 16], "patchobliquerandomforestclassifi": 7, "unsupervisedobliquerandomforest": 8, "unsupervisedrandomforest": 9, "obliquedecisiontreeclassifi": 10, "patchobliquedecisiontreeclassifi": 11, "unsuperviseddecisiontre": 12, "unsupervisedobliquedecisiontre": 13, "scikit": [14, 16], "content": 14, "get": 14, "start": 14, "indic": 14, "tabl": 14, "instal": 15, "depend": 15, "pip": 15, "from": 15, "sourc": 15, "meson": 15, "conda": 15, "recommend": 15, "releas": 17, "histori": 17, "what": 19, "": 19, "new": 19, "version": 19, "0": 19, "1": 19, "changelog": 19, "code": 19, "contributor": 19}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Examples": [[1, "examples"], [16, "examples"]], "Plot the decision surface of decision trees trained on the iris dataset": [[2, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[3, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[4, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Computation times": [[5, "computation-times"]], "sktree.ObliqueRandomForestClassifier": [[6, "sktree-obliquerandomforestclassifier"]], "Examples using sktree.ObliqueRandomForestClassifier": [[6, "examples-using-sktree-obliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestClassifier": [[7, "sktree-patchobliquerandomforestclassifier"]], "sktree.UnsupervisedObliqueRandomForest": [[8, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[9, "sktree-unsupervisedrandomforest"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[10, "sktree-tree-obliquedecisiontreeclassifier"]], "Examples using sktree.tree.ObliqueDecisionTreeClassifier": [[10, "examples-using-sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[11, "sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.UnsupervisedDecisionTree": [[12, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[13, "sktree-tree-unsupervisedobliquedecisiontree"]], "scikit-tree": [[14, "scikit-tree"]], "Contents": [[14, "contents"]], "Getting started:": [[14, null]], "Indices and tables": [[14, "indices-and-tables"]], "Installation": [[15, "installation"]], "Dependencies": [[15, "dependencies"]], "Installing with pip": [[15, "installing-with-pip"]], "Installing from source with Meson": [[15, "installing-from-source-with-meson"]], "Conda (Recommended)": [[15, "conda-recommended"]], "Examples using scikit-tree": [[16, "examples-using-scikit-tree"]], "Release History": [[17, "release-history"]], "What\u2019s new?": [[19, "what-s-new"]], "Version 0.1": [[19, "version-0-1"]], "Changelog": [[19, "changelog"]], "Code and Documentation Contributors": [[19, "code-and-documentation-contributors"]]}, "indexentries": {"module": [[0, "module-sktree"]], "sktree": [[0, "module-sktree"]], "obliquerandomforestclassifier (class in sktree)": [[6, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[6, "sktree.ObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.obliquerandomforestclassifier property)": [[6, "sktree.ObliqueRandomForestClassifier.base_estimator_"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[6, "sktree.ObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[6, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[6, "sktree.ObliqueRandomForestClassifier.fit"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[6, "sktree.ObliqueRandomForestClassifier.get_params"]], "predict() (sktree.obliquerandomforestclassifier method)": [[6, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[6, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[6, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "score() (sktree.obliquerandomforestclassifier method)": [[6, "sktree.ObliqueRandomForestClassifier.score"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[6, "sktree.ObliqueRandomForestClassifier.set_params"]], "patchobliquerandomforestclassifier (class in sktree)": [[7, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[7, "sktree.PatchObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.patchobliquerandomforestclassifier property)": [[7, "sktree.PatchObliqueRandomForestClassifier.base_estimator_"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[7, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[7, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[7, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[7, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[7, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[7, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[7, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[7, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[7, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "unsupervisedobliquerandomforest (class in sktree)": [[8, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedobliquerandomforest property)": [[8, "sktree.UnsupervisedObliqueRandomForest.base_estimator_"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[8, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.predict"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[8, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[9, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedrandomforest property)": [[9, "sktree.UnsupervisedRandomForest.base_estimator_"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[9, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_params() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.predict"]], "set_output() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[9, "sktree.UnsupervisedRandomForest.transform"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[10, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[11, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "unsuperviseddecisiontree (class in sktree.tree)": [[12, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.apply"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[12, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.predict"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[12, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[13, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]]}})