Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_extra_oblique_random_forest", "auto_examples/plot_extra_orf_sample_size", "auto_examples/plot_iris_dtc", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/plot_oblique_forests_iris", "auto_examples/plot_oblique_random_forest", "auto_examples/plot_overlapping_gaussians", "auto_examples/plot_projection_matrices", "auto_examples/sg_execution_times", "generated/sktree.ExtraTreesClassifier", "generated/sktree.ExtraTreesRegressor", "generated/sktree.HonestForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.RandomForestClassifier", "generated/sktree.RandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.2"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_extra_oblique_random_forest.rst", "auto_examples/plot_extra_orf_sample_size.rst", "auto_examples/plot_iris_dtc.rst", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/plot_oblique_forests_iris.rst", "auto_examples/plot_oblique_random_forest.rst", "auto_examples/plot_overlapping_gaussians.rst", "auto_examples/plot_projection_matrices.rst", "auto_examples/sg_execution_times.rst", "generated/sktree.ExtraTreesClassifier.rst", "generated/sktree.ExtraTreesRegressor.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.RandomForestClassifier.rst", "generated/sktree.RandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.2.rst"], "titles": ["API Documentation", "Examples", "Compare extra oblique forest and oblique random forest predictions on cc18 datasets", "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes", "Plot the decision surface of decision trees trained on the iris dataset", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Compare the decision surfaces of oblique extra-trees with standard oblique trees", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Plot honest forest calibrations on overlapping gaussian simulations", "Plot the projection matrices of an oblique tree", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "What\u2019s new?", "What\u2019s new?"], "terms": {"sktree": [0, 2, 3, 4, 5, 6, 7, 8, 9, 39, 41], "manifold": [0, 9, 17, 18, 33, 34, 38, 40, 47], "obliqu": [0, 1, 4, 10, 15, 16, 17, 18, 21, 31, 32, 33, 34, 36, 38, 39, 43, 44, 47], "random": [0, 1, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 43, 44, 47], "forest": [0, 1, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 44, 47, 48], "we": [0, 4, 6, 8, 9, 13, 23, 27, 38, 39, 40, 41, 42, 47, 48], "provid": [0, 4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "drop": [0, 2, 3, 5, 7, 41], "replac": [0, 40], "featur": [0, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 41, 42, 44, 45, 46, 47, 48], "have": [0, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "develop": [0, 39, 48], "These": [0, 6, 9, 40], "ar": [0, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 45], "still": [0, 9, 13], "compat": [0, 9, 21, 22, 35, 36], "all": [0, 1, 3, 4, 7, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42, 43, 45, 47], "capabl": 0, "bin": [0, 8, 11, 12, 19, 20], "which": [0, 2, 5, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42], "theoret": [0, 8, 38], "improv": [0, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 40, 41, 47, 48], "runtim": [0, 41], "significantli": [0, 12, 16, 18, 20], "high": [0, 2, 5, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "dimension": [0, 2, 28, 42, 47], "sampl": [0, 2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 47], "size": [0, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 41, 43], "data": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 47], "us": [0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 26, 30, 32, 34, 35, 36, 37, 38, 39, 40, 42, 44, 48], "your": [0, 33, 34, 38], "own": [0, 11, 13, 14, 15, 17, 19, 30, 31, 33], "risk": 0, "test": [0, 2, 3, 5, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 28, 30, 31, 32, 33, 34, 39], "extens": 0, "compar": [0, 1, 8, 10, 15, 19, 20, 31, 32, 33, 34, 43, 44], "decis": [0, 1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 40, 43, 44, 48], "model": [0, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 47], "tradition": 0, "implement": [0, 9, 11, 12, 13, 31, 32, 38, 40, 41, 47, 48], "axi": [0, 1, 3, 4, 6, 8, 9, 10, 15, 16, 17, 18, 31, 32, 33, 34, 40, 41, 43, 47], "align": [0, 1, 4, 10, 15, 16, 17, 18, 31, 32, 33, 34, 40, 41, 43], "split": [0, 2, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42], "store": [0, 6, 11, 12, 19, 20, 21, 22, 40, 41], "mean": [0, 2, 3, 5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 34, 40, 44, 47], "outcom": 0, "i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47], "e": [0, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42], "label": [0, 4, 5, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41, 42], "vote": [0, 11, 13, 15, 17, 19, 21, 22, 30], "leaf": [0, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 41], "node": [0, 2, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42], "howev": [0, 2, 6, 41], "more": [0, 2, 3, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 40, 41], "exot": 0, "possibl": [0, 2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42], "call": [0, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26, 27, 29, 30, 31, 32, 33, 34], "some": [0, 2, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41, 43], "multipl": [0, 9, 14, 41], "column": [0, 2, 3, 5, 6, 7, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 41, 47], "creat": [0, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 39, 40], "new": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 42, 45], "valu": [0, 2, 3, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41], "thi": [0, 2, 3, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 45], "can": [0, 6, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 47], "take": [0, 4, 6, 21, 22, 26, 35, 36, 48], "form": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 31, 32, 33, 34, 35, 36, 41], "spars": [0, 1, 2, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 43], "linear": [0, 4, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "combin": [0, 4, 15, 16, 21, 31, 32, 36, 40, 41, 42], "even": [0, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "advantag": [0, 48], "structur": [0, 4, 9, 13, 30, 33, 34, 42, 47], "g": [0, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41], "an": [0, 1, 2, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 47], "imag": [0, 9, 33, 34], "indic": [0, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 32, 33, 34, 35, 36, 41], "awar": [0, 33, 34], "fashion": [0, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "class": [0, 5, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 42], "gener": [0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 40, 41, 42, 43, 47], "while": [0, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "everyth": [0, 43], "els": [0, 6, 7], "consist": [0, 2, 7, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 32, 34, 35, 36, 41], "how": [0, 1, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 43], "build": [0, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 38, 39, 48], "classif": [0, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 44], "regress": [0, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 44], "thei": [0, 2, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41], "also": [0, 4, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 41], "power": [0, 40], "non": [0, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "parametr": [0, 41], "embed": 0, "cluster": [0, 6, 8, 21, 22, 35, 36, 42], "The": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42], "randomtreesembed": 0, "exampl": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 26, 30, 32, 34, 35, 36, 38, 42], "other": [0, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "state": 0, "art": 0, "explicitli": 0, "base": [0, 2, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42], "criterion": [0, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 44, 47], "varianc": [0, 2, 12, 13, 16, 18, 20, 21, 22, 30, 32, 34, 35, 36, 40, 42], "bic": [0, 21, 22, 35, 36, 44], "compris": [0, 33, 34], "those": [0, 2, 11, 12, 13, 15, 16, 17, 18, 19, 20, 28, 30, 31, 32, 40, 41], "avail": [0, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 39, 48], "standalon": 0, "inher": [0, 21, 22], "produc": 0, "like": [0, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 39, 41, 42], "extract": [0, 2, 3, 7], "pairwis": 0, "from": [0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 41, 42], "includ": [0, 8, 11, 13, 14, 15, 17, 19, 26, 30, 31, 33, 38, 47, 48], "correct": 0, "turn": 0, "proper": 0, "In": [0, 2, 3, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 48], "addit": [0, 11, 12, 19, 20, 21, 22, 35, 36, 41], "leav": [0, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37], "natur": [0, 27, 42], "wai": [0, 2, 42], "comput": [0, 2, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 47], "neighbor": [0, 8, 14, 26, 38], "nearest": [0, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 38], "interfac": 0, "similar": [0, 2, 6, 15, 16, 17, 18, 21, 22, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 47], "nearestneighbor": [0, 14, 26], "work": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "progress": 0, "help": [0, 30, 31, 32, 33, 34], "simul": [0, 1, 10, 13, 15, 40, 43], "evalu": [0, 2, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 44], "mutual": [0, 23, 24, 25, 26, 27, 29, 35, 47], "inform": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42, 47], "mi": [0, 26, 28], "condit": [0, 17, 18, 23, 26, 33, 34, 47], "cmi": [0, 23, 26, 28], "specif": [0, 9, 11, 13, 15, 17, 19, 41], "multivari": [0, 5, 9, 23, 24, 25, 28, 33, 34], "gaussian": [0, 1, 10, 13, 23, 24, 25, 28, 42, 43], "analyt": [0, 23, 24, 25, 26, 28], "solut": [0, 11, 12, 13, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26], "entropi": [0, 11, 13, 15, 17, 19, 23, 24, 25, 28, 30, 31, 33], "distribut": [0, 5, 23, 24, 25, 27, 28, 29, 41, 42], "demonstr": [1, 2, 6, 9, 43], "scikit": [1, 4, 21, 22, 35, 36, 39, 40, 41, 45, 47, 48], "tree": [1, 2, 3, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 39, 40, 44, 45, 47, 48], "algorithm": [1, 2, 14, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 38, 41, 43], "extra": [1, 10, 11, 12, 15, 31, 43], "predict": [1, 4, 6, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41, 43], "cc18": [1, 10, 15, 40, 43], "dataset": [1, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 43], "surfac": [1, 9, 10, 15, 31, 43], "standard": [1, 2, 3, 5, 7, 10, 14, 15, 26, 28, 31, 33, 34, 41, 43], "plot": [1, 2, 3, 6, 10, 13, 15, 31, 33, 40, 43], "honest": [1, 10, 13, 30, 38, 43, 44], "calibr": [1, 10, 13, 41, 43], "overlap": [1, 10, 13, 43], "pariti": [1, 10, 15, 40, 43], "train": [1, 2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 43], "iri": [1, 6, 10, 30, 31, 41, 43], "project": [1, 4, 7, 10, 15, 16, 31, 32, 33, 38, 39, 40, 41, 43, 47, 48], "matric": [1, 10, 21, 22, 33, 41, 43, 47], "speed": [1, 2, 10, 15, 20, 42, 43, 48], "v": [1, 2, 10, 12, 13, 15, 16, 18, 20, 32, 34, 40, 41, 43], "differ": [1, 2, 6, 8, 10, 14, 15, 30, 31, 32, 33, 34, 35, 36, 43, 44], "download": [1, 2, 3, 4, 5, 6, 7, 8, 9, 43], "python": [1, 2, 3, 4, 5, 6, 7, 8, 9, 39, 43], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43], "code": [1, 2, 3, 4, 5, 6, 7, 8, 9, 35, 36, 39, 43], "auto_examples_python": [1, 43], "zip": [1, 4, 6, 8, 43], "jupyt": [1, 2, 3, 4, 5, 6, 7, 8, 9, 43], "notebook": [1, 2, 3, 4, 5, 6, 7, 8, 9, 43], "auto_examples_jupyt": [1, 43], "galleri": [1, 2, 3, 4, 5, 6, 7, 8, 9, 43], "sphinx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 43], "go": [2, 3, 4, 5, 6, 7, 8, 9], "end": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37], "full": [2, 3, 4, 5, 6, 7, 8, 9], "A": [2, 3, 5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 30, 31, 32, 33, 34, 35, 36, 41, 47], "perform": [2, 3, 5, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 42], "comparison": [2, 3, 5, 7, 19, 20], "between": [2, 3, 5, 7, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "four": [2, 11, 13, 15, 17, 19, 30, 31, 33], "openml": [2, 3, 7], "benchmark": [2, 3, 7, 38], "suit": [2, 3, 7], "classic": 2, "built": [2, 4, 6, 40, 41], "when": [2, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 31, 32, 33, 34, 35, 36, 41, 45, 48], "look": [2, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 43], "best": [2, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "separ": [2, 13], "two": [2, 3, 4, 6, 7, 8, 21, 22, 40, 41, 44, 47], "group": [2, 41, 42], "drawn": [2, 28, 40], "each": [2, 3, 4, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42], "max_featur": [2, 3, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "randomli": [2, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36], "select": [2, 12, 16, 18, 20, 30, 31, 32, 33, 34, 35, 36, 40], "among": [2, 15, 16, 17, 18, 21, 22, 27, 30, 31, 32, 33, 34, 35, 36], "chosen": [2, 11, 12, 13, 19, 20, 30], "contrast": [2, 6, 40, 41], "greedi": [2, 13], "approach": [2, 40], "threshold": [2, 4, 41], "For": [2, 3, 4, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42], "detail": [2, 3, 5, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36], "origin": [2, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41], "see": [2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41, 42], "1": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 45, 48], "phish": [2, 3, 7], "websit": [2, 3, 7], "http": [2, 3, 5, 7, 22, 30, 31, 32, 39, 40, 41, 42], "www": [2, 3, 7, 30, 31, 32], "org": [2, 3, 5, 7, 22, 30, 31, 32, 39, 40, 41, 42], "search": [2, 3, 5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "type": [2, 3, 5, 6, 7, 13, 30, 41, 47], "sort": [2, 3, 7, 8, 13, 14, 35, 42], "run": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 39, 41], "id": [2, 3, 7], "4534": [2, 3, 7], "wdbc": [2, 7], "1510": [2, 7], "lsvt": 2, "1484": 2, "har": [2, 3], "1478": [2, 3], "cnae": [2, 7], "9": [2, 3, 4, 5, 6, 7, 8, 9, 10, 39, 47], "1468": [2, 7], "larg": [2, 3, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32], "subsampl": [2, 3, 7, 13, 30, 41], "due": [2, 7, 24], "constraint": [2, 7, 11, 12, 19, 20, 30], "note": [2, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 39, 41, 45], "veri": [2, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32], "856": 2, "mostli": 2, "zero": [2, 5, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "datatyp": [2, 3], "2000": 2, "30": [2, 3], "nomin": [2, 3], "455": 2, "numer": [2, 3, 7], "100": [2, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "310": 2, "561": 2, "864": 2, "follow": [2, 3, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 31, 32, 33, 34, 35, 36, 41, 42], "paramet": [2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 48], "max_depth": [2, 3, 5, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "set": [2, 3, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42], "deliber": [2, 3], "low": [2, 3], "order": [2, 3, 8, 11, 13, 15, 16, 17, 19, 30, 31, 32, 33, 34], "allow": [2, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41, 48], "our": [2, 9, 38, 41], "ci": [2, 3], "normal": [2, 3, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 36, 40, 41, 47], "usag": [2, 3, 4, 5, 6, 7, 8, 9, 30], "should": [2, 3, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 39], "appropri": [2, 3], "depend": [2, 3, 27, 38], "regular": [2, 4, 8], "averag": [2, 11, 12, 15, 16, 17, 18, 19, 20, 21, 26, 31, 32, 36, 40], "increas": [2, 3, 11, 12, 14, 19, 20, 30, 31, 32, 40], "bia": [2, 40], "tradeoff": [2, 41], "substanti": 2, "faster": [2, 3, 35], "than": [2, 3, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42], "process": [2, 13, 27, 30, 31, 32, 33, 34, 35, 36, 48], "omit": [2, 11, 13, 15, 17, 19, 30, 31, 33], "computation": 2, "expens": 2, "main": [2, 39], "stem": 2, "omiss": 2, "dure": [2, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "ascend": 2, "determin": [2, 12, 16, 18, 20, 32, 34, 41], "henc": [2, 40], "complex": [2, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 44], "o": [2, 9, 35, 41, 47, 48], "nlog": 2, "n": [2, 3, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 39, 41, 42, 47], "draw": [2, 3, 5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "": [2, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 42, 45], "rang": [2, 4, 5, 6, 9, 14, 33, 34], "make": [2, 9, 40, 47], "suitabl": 2, "p": [2, 3, 5, 8, 11, 12, 13, 15, 17, 19, 20, 27], "geurt": [2, 3, 11, 12, 20], "d": [2, 3, 11, 12, 20, 23, 24, 25, 28], "ernst": [2, 3, 11, 12, 20], "l": [2, 3, 8, 11, 12, 20, 30, 31, 32, 40, 41, 42], "wehenkel": [2, 3, 11, 12, 20], "extrem": [2, 3, 11, 12, 19, 20], "machin": [2, 3, 11, 12, 13, 15, 16, 19, 20, 38, 40, 41], "learn": [2, 3, 4, 6, 11, 12, 13, 15, 16, 19, 20, 21, 22, 30, 31, 32, 35, 36, 38, 39, 40, 41, 42, 43], "63": [2, 3, 11, 12, 20, 47], "3": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 48], "42": [2, 3, 8, 11, 12, 20], "2006": [2, 3, 11, 12, 20, 35], "sqrt": [2, 3, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 48], "n_estim": [2, 3, 5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "50": [2, 3, 6, 7, 8], "random_st": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "123": [2, 3, 6], "n_cv": [2, 3, 5, 7], "10": [2, 3, 5, 6, 8, 10, 11, 12, 17, 18, 19, 20, 22, 30, 31, 32, 33, 34, 40, 41, 42], "n_repeat": [2, 3, 5, 7], "time_taken": [2, 3], "dimens": [2, 3, 5, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 27, 33, 34, 35, 36, 41], "phishingwebsit": [2, 7], "eorf": [2, 3], "0": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 45], "820778": 2, "orf": [2, 3], "854469": 2, "493657": 2, "625873": 2, "349116": 2, "4": [2, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33], "535831": 2, "782942": 2, "880936": 2, "612580": 2, "882905": 2, "home": [2, 3, 4, 5, 7, 8], "circleci": [2, 3, 4, 5, 7, 8], "pyenv": [2, 3, 5, 7, 8], "version": [2, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 39, 41, 45], "18": [2, 3, 5, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "lib": [2, 3, 5, 7, 8], "python3": [2, 3, 5, 7, 8], "site": [2, 3, 5, 7, 8], "packag": [2, 3, 5, 7, 8, 38, 39], "seaborn": [2, 3, 5, 7], "_oldcor": [2, 3, 5, 7], "py": [2, 3, 4, 5, 6, 7, 8, 9, 10], "1498": [2, 3, 5, 7], "futurewarn": [2, 3, 5, 7, 8], "is_categorical_dtyp": [2, 3, 5, 7], "deprec": [2, 3, 5, 7], "remov": [2, 3, 5, 7, 8], "futur": [2, 3, 5, 7, 38], "isinst": [2, 3, 5, 6, 7], "dtype": [2, 3, 5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "categoricaldtyp": [2, 3, 5, 7], "instead": [2, 3, 5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "pd": [2, 3, 5, 6, 7, 28], "api": [2, 3, 5, 7, 9, 14, 21, 22, 33, 34, 35, 36, 38, 39, 45, 46, 47, 48], "vector": [2, 3, 5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 28, 30, 31, 32, 33, 34, 41, 42], "1119": [2, 3, 5, 7], "use_inf_as_na": [2, 3, 5, 7], "option": [2, 3, 5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39], "convert": [2, 3, 5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 36], "inf": [2, 3, 5, 7, 24], "nan": [2, 3, 5, 7, 11, 13, 15, 16, 17, 19, 21, 22, 30], "befor": [2, 3, 5, 7, 14, 27, 30, 31, 32, 33, 34, 35, 36], "oper": [2, 3, 5, 7, 30, 31, 33, 34], "option_context": [2, 3, 5, 7], "mode": [2, 3, 5, 7, 11, 13, 15, 17, 19, 30, 31, 33, 39], "true": [2, 3, 4, 5, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 36, 42], "datetim": [2, 3, 5, 7], "import": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 41, 44], "matplotlib": [2, 3, 4, 5, 6, 7, 8, 9, 39], "pyplot": [2, 3, 4, 5, 6, 7, 8, 9], "plt": [2, 3, 4, 5, 6, 7, 8, 9], "panda": [2, 3, 5, 6, 7, 21, 22, 35, 36, 47], "sn": [2, 3, 5, 7], "sklearn": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 39, 41, 42], "fetch_openml": [2, 3, 7], "model_select": [2, 3, 5, 7, 8, 12, 30, 31, 32, 34], "repeatedkfold": [2, 3, 5, 7], "cross_valid": [2, 3, 5, 7], "extraobliquerandomforestclassifi": [2, 3, 6], "obliquerandomforestclassifi": [2, 3, 5, 6, 7, 40], "max_sample_s": [2, 3], "phishing_websit": [2, 3], "cnae_9": 2, "data_id": [2, 3, 7], "df": [2, 3, 5, 7], "datafram": [2, 3, 5, 6, 7, 21, 22, 35, 36], "def": [2, 3, 5, 7, 8], "load_cc18": [2, 3, 7], "as_fram": [2, 3, 7], "parser": [2, 3, 7], "name": [2, 3, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "d_name": [2, 3, 7], "int": [2, 3, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "frame": [2, 3, 7], "shape": [2, 3, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40], "8": [2, 7, 9, 10, 20, 27, 30], "x": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42], "y": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 41], "iloc": [2, 3, 5, 7], "return": [2, 3, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "get_scor": [2, 3, 5, 7], "5": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 48], "kwarg": [2, 3, 5, 7], "clf": [2, 3, 4, 5, 7, 8, 11, 13, 15, 19, 30, 31, 41], "dim": [2, 3, 9], "tmp": [2, 3, 5, 7], "enumer": [2, 3, 4, 5, 7, 9, 13, 15, 16, 17, 18, 19, 20], "t0": [2, 3, 5, 7], "now": [2, 3, 5, 6, 7, 9, 39, 47], "cv": [2, 3, 5, 7, 8, 30, 31, 32, 34], "n_split": [2, 3, 5, 7], "test_scor": [2, 3, 5, 7], "estim": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 47], "score": [2, 3, 5, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34], "accuraci": [2, 3, 5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 33], "time": [2, 3, 4, 5, 6, 7, 8, 9, 20, 21, 22, 27, 31, 32, 33, 34, 35, 37, 41], "taken": [2, 3, 31, 32, 40], "second": [2, 3, 4, 5, 6, 7, 8, 9, 41], "total_second": [2, 3], "append": [2, 3, 5, 7], "explod": [2, 3, 5, 7], "astyp": [2, 3, 5, 7, 9], "float": [2, 3, 5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "reset_index": [2, 3, 5, 7], "inplac": [2, 3, 5, 7], "param": [2, 3, 5, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "concat": [2, 3, 7], "show": [2, 3, 4, 5, 6, 8, 9], "print": [2, 5, 6, 7, 9, 13, 15, 16, 18, 19, 20], "from_dict": 2, "orient": 2, "index": [2, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 41], "groupbi": [2, 3], "uniqu": [2, 3, 7, 8, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "fig": [2, 3, 4, 5, 7, 8, 9], "ax": [2, 3, 4, 5, 7, 8, 9, 41], "subplot": [2, 3, 4, 5, 6, 7, 8, 9], "set_size_inch": [2, 3, 7], "6": [2, 3, 5, 7, 9], "stripplot": [2, 5, 7], "queri": [2, 5, 7, 14], "f": [2, 4, 5, 7, 9], "dodg": [2, 5, 7], "boxplot": [2, 5, 7], "color": [2, 3, 4, 5, 6, 7, 8, 9], "white": [2, 5, 7], "set_titl": [2, 3, 5, 7], "set_ylabel": [2, 7, 8], "set_xlabel": [2, 7, 8], "figur": [2, 4, 8, 9], "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42], "script": [2, 3, 4, 5, 6, 7, 8, 9], "minut": [2, 3, 4, 5, 6, 7, 8, 9], "29": [2, 10], "927": [2, 10], "memori": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32], "115": 2, "mb": [2, 3, 4, 5, 6, 7, 8, 9, 10], "plot_extra_oblique_random_forest": [2, 10], "ipynb": [2, 3, 4, 5, 6, 7, 8, 9], "purpos": [3, 6, 39], "chang": [3, 4, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 45, 46, 47, 48], "11055": 3, "10299": 3, "562": 3, "pass": [3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 28, 30, 31, 32, 33, 34, 35, 36, 41, 47], "section": [3, 6], "focu": 3, "result": [3, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41, 42], "notabl": [3, 7], "grow": [3, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "linearli": 3, "signific": [3, 40], "higher": [3, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 40, 41], "numpi": [3, 4, 5, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 36, 39], "np": [3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "10000": 3, "sample_s": 3, "linspac": [3, 8], "1000": [3, 5, 13, 15, 19, 27, 28, 29], "n_row": [3, 6, 9], "item": [3, 8], "df_tmp": 3, "lineplot": 3, "hue": 3, "2": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42], "57": [3, 10, 47], "137": [3, 10], "207": 3, "plot_extra_orf_sample_s": [3, 10], "pair": [4, 6, 37, 41], "boundari": [4, 6, 9, 14, 17, 18, 33, 34, 47], "made": 4, "simpl": [4, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "rule": 4, "infer": [4, 30, 31, 32, 33, 34], "same": [4, 9, 11, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 33, 34, 37, 40, 41], "first": [4, 5, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41], "load": [4, 6, 7], "copi": 4, "ship": 4, "load_iri": [4, 6, 30, 31, 41], "displai": 4, "function": [4, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 29, 30, 31, 32, 33, 34, 35, 36, 38, 40, 41], "inspect": [4, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "decisionboundarydisplai": 4, "_lib": [4, 9], "decisiontreeclassifi": [4, 6, 11, 13, 19, 30, 31, 32, 33], "plot_tre": 4, "obliquedecisiontreeclassifi": [4, 13, 15, 17, 32, 41], "n_class": [4, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34], "plot_color": 4, "ryb": 4, "plot_step": [4, 6], "02": [4, 10], "clf_label": 4, "123456": [4, 5, 7], "flatten": [4, 9], "pairidx": 4, "onli": [4, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "correspond": [4, 6, 11, 13, 15, 17, 18, 19, 30, 31, 32, 33, 34, 35, 36], "target": [4, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41], "fit": [4, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41], "tight_layout": [4, 6, 8], "h_pad": [4, 6], "w_pad": [4, 6], "pad": [4, 6], "from_estim": 4, "cmap": [4, 6, 9], "cm": [4, 6, 8], "rdylbu": 4, "response_method": 4, "xlabel": 4, "feature_nam": [4, 6], "ylabel": 4, "point": [4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 30, 31, 32, 33, 34, 35, 36, 42], "idx": [4, 6, 9], "where": [4, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 30, 31, 32, 33, 34, 35, 36, 41, 42, 47], "scatter": [4, 6, 8, 9], "c": [4, 6, 8, 24, 25, 30, 31, 32, 33, 34, 39], "target_nam": 4, "edgecolor": [4, 6, 8], "black": [4, 6, 9], "15": [4, 6], "suptitl": [4, 6, 9], "legend": [4, 5, 8], "loc": [4, 5, 8], "lower": [4, 13, 27, 29, 30, 41], "right": [4, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "borderpad": 4, "handletextpad": 4, "_": 4, "tight": [4, 6], "plot_iris_dtc": [4, 10], "78": 4, "userwarn": 4, "No": 4, "colormap": 4, "via": [4, 31, 32, 35, 39, 40, 47], "ignor": [4, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "64": [4, 47], "layout": 4, "ha": [4, 6, 7, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 41, 47, 48], "singl": [4, 6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "togeth": [4, 6, 41, 42], "fill": [4, 6], "titl": [4, 6, 9], "343": [4, 10], "variat": 5, "noisi": 5, "problem": [5, 11, 13, 15, 17, 19, 30, 31, 33, 38, 44], "itself": [5, 11, 13, 15, 17, 19, 21, 22, 26], "xor": 5, "binari": 5, "task": [5, 6, 38], "uniformli": [5, 9], "n_sampl": [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "number": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42], "limit": [5, 14, 44], "carri": [5, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "about": [5, 41], "defin": [5, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 30, 31, 32, 33, 34, 35, 36, 42], "odd": 5, "sum": [5, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "across": [5, 11, 13, 15, 17, 19, 21, 22, 30, 31, 32, 33, 34, 35, 36], "greater": [5, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "otherwis": [5, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "further": 5, "public": [5, 9, 40], "epub": 5, "siam": [5, 17, 18, 33, 34, 35, 38, 40], "doi": [5, 17, 18, 22, 33, 34, 40, 41, 42], "epdf": 5, "1137": [5, 17, 18, 33, 34, 40], "9781611974973": 5, "56": [5, 10], "It": [5, 7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 36, 38, 41, 42], "took": [5, 7], "12": [5, 6, 9, 10], "ensembl": [5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 40], "randomforestclassifi": [5, 7, 8, 11, 12, 15, 17], "sparse_par": 5, "20": [5, 6, 7, 8, 10, 22, 42], "p_star": 5, "random_se": [5, 6, 26, 27, 29], "none": [5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "seed": [5, 6, 21, 22, 26, 27, 28, 29], "uniform": [5, 13, 26, 27, 29, 30], "rf": [5, 7, 8, 41], "OF": [5, 7], "grid": [5, 6, 9], "hyper": 5, "40": 5, "t_d": 5, "figsiz": [5, 8, 9], "rff": 5, "round": [5, 13, 15, 16, 17, 18, 19, 20], "off": [5, 27], "savefig": [5, 8], "plot_sim_": 5, "jpg": 5, "773": [5, 10], "plot_oblique_axis_aligned_forests_sparse_par": [5, 10], "classifi": [6, 8, 11, 12, 13, 15, 17, 19, 20, 30, 31, 32, 33], "row": [6, 9, 33, 34], "sepal": 6, "width": [6, 33, 34], "length": [6, 9, 14, 30, 31, 32, 33, 34, 35, 36], "petal": 6, "third": [6, 7], "extraobliquerandomforest": 6, "obliquerandomforest": 6, "9066666666666666": 6, "9933333333333333": 6, "98": 6, "9866666666666667": 6, "listedcolormap": 6, "1234": [6, 28], "spectral": 6, "01": [6, 9], "fine": 6, "step": 6, "contour": 6, "plot_step_coars": 6, "25": [6, 8, 9, 10], "coars": 6, "guess": 6, "plot_idx": 6, "n_model": 6, "len": [6, 30, 31, 32, 33, 34, 35, 36], "dict": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "map": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "sec": 6, "shuffl": [6, 8, 13, 15, 16, 18, 19, 20], "arang": [6, 9], "std": 6, "consol": 6, "str": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36], "slice": 6, "awai": 6, "useless": 6, "part": [6, 9], "string": [6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "model_titl": 6, "model_detail": 6, "hasattr": 6, "estimators_": [6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "format": [6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 35, 36], "add": [6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 27, 29, 47], "top": [6, 38, 40], "fontsiz": 6, "mesh": 6, "input": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41], "x_min": 6, "x_max": 6, "min": 6, "max": [6, 11, 12, 19, 20, 21, 22, 35, 36, 41], "y_min": 6, "y_max": 6, "xx": 6, "yy": 6, "meshgrid": 6, "either": [6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "alpha": [6, 8, 9, 27, 29, 30, 31, 32, 33, 34, 35, 36], "blend": 6, "z": [6, 9, 23, 26, 27, 29], "c_": 6, "ravel": 6, "reshap": [6, 8, 9], "contourf": 6, "choos": [6, 13, 30, 31, 32, 33, 34, 35, 36], "level": 6, "respect": [6, 40, 42], "adaboost": 6, "fewer": 6, "its": [6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 33, 41], "maximum": [6, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42], "achiev": [6, 8, 12, 20, 38, 40], "good": [6, 40], "enough": 6, "earli": 6, "estimator_alpha": 6, "coarser": 6, "what": [6, 9, 30, 31, 32, 33, 34, 35, 36, 38, 45], "regularli": 6, "space": [6, 7, 14, 21, 22, 24, 26, 35, 36, 41], "do": [6, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41], "outlin": 6, "xx_coarser": 6, "yy_coars": 6, "z_points_coars": 6, "cs_point": 6, "r": [6, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 26, 27, 30, 31, 32, 33, 34, 39, 41], "b": 6, "k": [6, 8, 11, 12, 14, 26, 35], "move": 6, "next": [6, 39], "sequenc": [6, 35], "subset": [6, 11, 13, 15, 17, 19, 30, 31, 33, 41], "discuss": [6, 8], "obliquedecisiontre": 6, "extraobliquedecisiontre": 6, "basic": [6, 30], "decisiontre": 6, "three": [6, 7], "distinct": 6, "291": [6, 10], "plot_oblique_forests_iri": [6, 10], "31": 7, "former": [7, 20], "entir": [7, 17, 18, 33, 34], "latter": [7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "normin": 7, "dub": 7, "statu": 7, "activ": [7, 39], "857": 7, "As": [7, 37, 41], "you": [7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 39, 43], "notic": 7, "outperform": [7, 41], "util": [7, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "mechan": [7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "19": [7, 11, 12, 19, 20], "object": [7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42], "614": [7, 10], "268": 7, "plot_oblique_random_forest": [7, 10], "variou": [8, 11, 12, 15, 16, 17, 18, 19, 20], "method": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42], "user": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 47], "guid": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 42, 47], "isoton": 8, "irf": 8, "sigmoid": 8, "sigrf": 8, "without": [8, 42], "curv": [8, 41], "red": 8, "line": 8, "closest": 8, "ideal": [8, 39], "reproduc": 8, "ronan": [8, 17, 18, 33, 34, 38, 40, 47], "perri": [8, 17, 18, 33, 34, 38, 40, 47], "ronak": [8, 17, 18, 33, 34, 40], "mehta": [8, 17, 18, 33, 34, 40], "richard": 8, "guo": 8, "eva": 8, "yezeret": 8, "jes\u00fa": 8, "arroyo": [8, 17, 18, 33, 34, 40], "mike": 8, "powel": 8, "hayden": 8, "helm": 8, "cencheng": [8, 40], "shen": [8, 40], "joshua": [8, 17, 18, 22, 33, 34, 40, 42], "t": [8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42], "vogelstein": [8, 17, 18, 22, 33, 34, 40, 42], "adapt": [8, 21, 22, 24, 38, 42], "quantiti": [8, 38], "arxiv": [8, 38], "2021": [8, 38], "1907": [8, 38], "00325": [8, 38], "necessari": [8, 39], "modul": [8, 9, 38], "librari": [8, 45, 47], "calibratedclassifiercv": 8, "train_test_split": [8, 12], "honestforestclassifi": [8, 47], "color_dict": 8, "honestrf": 8, "f41711": 8, "1b9e77": 8, "377eb8": 8, "fdae61": 8, "n_job": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26], "clf_cv": 8, "rep": 8, "honest_fract": [8, 13, 30], "base_estim": 8, "likelihood": [8, 42], "lik1": 8, "prod": 8, "exp": 8, "asarrai": 8, "lik0": 8, "60000": 8, "n_bin": 8, "calibration_curv": 8, "here": [8, 9, 13, 41, 43, 47, 48], "blob": 8, "contain": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "half": 8, "posit": [8, 11, 19, 30, 40, 42], "neg": [8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "probabl": [8, 11, 13, 15, 17, 19, 21, 22, 30, 31, 33, 41], "therefor": [8, 13, 15, 16, 17, 18, 19, 20, 33, 34, 40, 41], "center": [8, 21, 22, 35, 36], "make_blob": 8, "fals": [8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36], "sample_weight": [8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "randomst": [8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36], "rand": 8, "x_train": [8, 12], "x_test": [8, 12], "y_train": [8, 12], "y_test": [8, 12], "sw_train": 8, "sw_test": 8, "test_siz": 8, "class_one_prob": 8, "predict_proba": [8, 11, 13, 15, 17, 19, 30, 31, 33], "300": 8, "wa": [8, 11, 12, 13, 15, 16, 17, 19, 20, 21, 22, 41], "renam": [8, 11, 12, 19, 20], "warn": [8, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "y_uniqu": 8, "rainbow": 8, "this_i": 8, "this_x": 8, "this_sw": 8, "newaxi": 8, "set_xtick": 8, "set_ytick": 8, "clf_name": 8, "prob": 8, "lexsort": 8, "51": 8, "x_test_prob": 8, "linewidth": 8, "truth": [8, 41], "set_ylim": 8, "05": [8, 10], "instanc": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "upper": 8, "left": [8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "overlapping_gaussian": 8, "png": 8, "well": [8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "closer": 8, "shown": [8, 23], "below": 8, "818": [8, 10], "55": 8, "plot_overlapping_gaussian": [8, 10], "patchobliquedecisiontreeclassifi": [9, 17], "one": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42], "specifi": [9, 11, 13, 15, 17, 19, 30, 31, 33, 41], "done": [9, 33, 34, 40], "data_dim": [9, 17, 18, 33, 34], "n_col": 9, "arrai": [9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 36, 40], "If": [9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 41], "n_depth": 9, "ani": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 47], "robust": [9, 38], "calcul": [9, 37, 42], "hyperrectangl": 9, "start": [9, 39], "squar": [9, 12, 16, 18, 20, 32, 34], "min_patch_dim": [9, 17, 18, 33, 34], "max_patch_dim": [9, 17, 18, 33, 34], "constrain": [9, 41], "within": [9, 13, 14, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 39], "bound": [9, 27, 29], "arbitrarili": [9, 12, 16, 18, 20, 32, 34], "hyperparamet": [9, 41], "relat": 9, "privat": 9, "cython": [9, 35, 36, 39, 48], "just": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 27, 39], "wrapper": 9, "underli": [9, 30, 31, 32, 33, 34], "actual": 9, "To": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 39, 43], "relev": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38], "_criterion": 9, "gini": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "_morf_splitt": 9, "bestpatchsplittertest": 9, "dummi": 9, "sake": 9, "min_samples_leaf": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "min_weight_leaf": 9, "feature_weight": [9, 17, 18, 33, 34], "missing_value_feature_mask": 9, "repeat": [9, 27], "float32": [9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "float64": [9, 32, 34], "ones": 9, "th": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "visual": 9, "appear": [9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34], "contigu": [9, 17, 18, 33, 34], "dim_contigu": [9, 17, 18, 33, 34], "init_test": 9, "matrix": [9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 41], "proj_mat": 9, "sample_projection_matrix": 9, "nrow": 9, "ncol": 9, "sharex": 9, "sharei": 9, "squeez": 9, "imshow": 9, "viridi": 9, "xlim": 9, "ylim": 9, "add_subplot": 9, "nonzero": 9, "marker": 9, "custom": [9, 11, 12, 19, 20, 21, 22], "set_zlim": 9, "125": 9, "analyz": 9, "necessarili": [9, 14, 40], "certain": 9, "seri": [9, 33, 34], "n_channel": 9, "n_time": 9, "channel": 9, "540": [9, 10], "11": [9, 47], "plot_projection_matric": [9, 10], "04": 10, "443": 10, "execut": 10, "auto_exampl": 10, "file": [10, 39], "206": 10, "7": 10, "00": 10, "114": [10, 48], "122": 10, "54": 10, "267": 10, "min_samples_split": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 48], "min_weight_fraction_leaf": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "max_leaf_nod": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "min_impurity_decreas": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "bootstrap": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 40], "oob_scor": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "verbos": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 39], "warm_start": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "class_weight": [11, 13, 15, 17, 19, 30, 31, 33], "ccp_alpha": [11, 12, 13, 19, 20, 30, 31, 32, 33, 34, 35, 36], "max_sampl": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "max_bin": [11, 12, 19, 20], "store_leaf_valu": [11, 12, 19, 20], "monotonic_cst": [11, 12, 19, 20, 30, 48], "meta": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "sub": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "control": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 40, 41], "over": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 33, 34, 40], "read": [11, 12, 15, 16, 19, 20, 30, 31, 32], "default": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 41], "22": [11, 12, 14, 19, 20], "log_loss": [11, 19], "measur": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42], "qualiti": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41, 42], "support": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 39, 41, 47], "criteria": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42], "impur": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41], "both": [11, 13, 15, 16, 17, 18, 19, 20, 41], "shannon": [11, 19], "gain": [11, 13, 15, 17, 19, 30, 31, 33], "mathemat": [11, 17, 18, 19, 21, 22, 33, 34, 38, 40, 44], "formul": [11, 19, 21, 22, 44], "depth": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "expand": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "until": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "pure": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "less": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "minimum": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "requir": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "intern": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42], "consid": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "fraction": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "ceil": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "ad": [11, 12, 19, 20, 27, 41, 47], "least": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "branch": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "mai": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 42], "effect": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 43], "smooth": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "especi": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "weight": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41, 47], "equal": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "log2": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 48], "n_features_in_": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "n_featur": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41], "auto": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "doe": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 40, 41], "stop": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34], "valid": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "partit": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 30, 31, 32, 33, 34, 41], "found": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "rel": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 42], "reduct": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "unlimit": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "induc": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "decreas": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "equat": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "n_t": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "n_t_r": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "right_impur": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "n_t_l": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "left_impur": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "current": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 39, 41], "child": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "refer": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 30, 31, 32, 33, 34, 35, 36], "bool": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36], "whether": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36], "whole": [11, 12, 13, 15, 16, 17, 18, 19, 20], "callabl": [11, 12, 19, 20, 21, 22, 27, 29, 35, 36], "out": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 40], "bag": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "By": [11, 12, 13, 19, 20, 21, 22, 27, 28, 30, 35, 36, 40], "accuracy_scor": [11, 19], "signatur": [11, 12, 19, 20, 21, 22], "metric": [11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 26, 30, 31, 33, 38, 42], "y_true": [11, 12, 16, 18, 19, 20, 32, 34], "y_pred": [11, 12, 16, 18, 19, 20, 32, 34], "job": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 26], "parallel": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26], "decision_path": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "appli": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 37], "unless": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "joblib": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 39], "parallel_backend": [11, 12, 13, 15, 16, 17, 18, 19, 20], "context": [11, 12, 13, 15, 16, 17, 18, 19, 20], "processor": [11, 12, 13, 15, 16, 17, 18, 19, 20], "glossari": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34], "reus": [11, 12, 13, 15, 16, 17, 18, 19, 20], "previou": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "weak": [11, 12, 19, 20], "learner": [11, 12, 19, 20], "balanc": [11, 13, 15, 17, 19, 30, 31, 33], "balanced_subsampl": [11, 13, 15, 17, 19], "list": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 30, 31, 32, 33, 34, 35, 36, 47, 48], "associ": [11, 13, 15, 17, 19, 22, 30, 31, 33, 41, 42], "class_label": [11, 13, 15, 17, 19, 30, 31, 33], "given": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 36, 41, 42], "suppos": [11, 13, 15, 17, 19, 30, 31, 33], "multi": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 33, 44, 47], "output": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 44, 47], "multioutput": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34], "multilabel": [11, 13, 15, 17, 19, 30, 31, 33], "everi": [11, 13, 15, 17, 18, 19, 30, 31, 33, 34, 41], "automat": [11, 13, 15, 17, 19, 30, 31, 33], "adjust": [11, 13, 15, 17, 19, 30, 31, 33], "invers": [11, 13, 15, 17, 19, 30, 31, 33], "proport": [11, 13, 15, 17, 19, 30, 31, 33], "frequenc": [11, 13, 15, 17, 19, 30, 31, 33], "bincount": [11, 13, 15, 17, 19, 30, 31, 33], "except": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 34, 40], "grown": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32], "multipli": [11, 13, 15, 17, 19, 30, 31, 33], "through": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38], "minim": [11, 12, 13, 16, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 41, 42], "cost": [11, 12, 13, 19, 20, 30, 31, 32, 33, 34, 35, 36, 40, 41], "prune": [11, 12, 13, 19, 20, 30, 31, 32, 33, 34, 35, 36, 41], "subtre": [11, 12, 13, 19, 20, 30, 31, 32, 33, 34, 35, 36], "largest": [11, 12, 13, 19, 20, 27, 30], "smaller": [11, 12, 13, 19, 20, 30], "thu": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 31, 32, 40, 41, 42], "interv": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 41], "255": [11, 12, 19, 20], "miss": [11, 12, 19, 20, 30, 41], "experiment": [11, 12, 19, 20, 38], "get_leaf_node_sampl": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "array_lik": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "monoton": [11, 12, 19, 20, 30], "enforc": [11, 12, 13, 19, 20, 30], "multiclass": [11, 19, 30], "n_outputs_": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34], "hold": [11, 19, 30], "extratreesregressor": [11, 20], "regressor": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 32, 34], "optim": [11, 12, 33, 34, 41], "randomforestregressor": [11, 12, 16, 18], "etc": [11, 12, 13, 15, 16, 17, 18, 19, 20, 26, 30, 31, 32], "lead": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 40], "fulli": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32], "unprun": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32], "potenti": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 34], "reduc": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 40], "consumpt": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32], "make_classif": [11, 13, 15, 19], "attribut": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "estimator_": [11, 12, 19, 20, 21, 22, 30], "extratreeclassifi": 11, "templat": [11, 12, 13, 19, 20, 21, 22, 30], "collect": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30], "base_estimator_": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "classes_": [11, 13, 15, 17, 19, 30, 31, 33], "ndarrai": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "n_classes_": [11, 13, 15, 17, 19, 30, 31, 33], "feature_importances_": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "seen": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34], "24": [11, 12, 19, 20], "feature_names_in_": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34], "oob_score_": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "obtain": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "exist": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "oob_decision_function_": [11, 13, 15, 16, 17, 19, 21, 22], "n_output": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "small": [11, 13, 15, 16, 17, 19, 21, 22], "might": [11, 13, 15, 16, 17, 19, 21, 22, 41], "never": [11, 13, 15, 16, 17, 19, 21, 22], "case": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "csr_matrix": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "x_leav": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "datapoint": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "up": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 41], "path": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "n_node": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "element": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "goe": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "csr": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "n_nodes_ptr": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "give": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 31, 32], "csc_matrix": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "real": [11, 12, 13, 15, 16, 17, 18, 19, 20, 32, 34], "would": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 39, 41], "net": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "possibli": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 41], "self": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "get": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 37], "leaf_node_sampl": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "repres": [11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "reach": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "n_leaf_node_sampl": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "vari": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "sinc": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 47, 48], "fall": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "variabl": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 35, 36, 40, 41], "get_metadata_rout": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "metadata": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "rout": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "pleas": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "check": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "metadatarequest": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "encapsul": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "get_param": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "deep": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38, 40], "subobject": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "partial_fit": [11, 13, 15, 17, 19, 30, 31, 33, 48], "updat": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "integ": [11, 13, 15, 17, 19, 30, 31, 32, 33, 34, 35, 36], "must": [11, 13, 15, 16, 17, 19, 27, 30, 31, 32, 33, 35, 36], "subsequ": [11, 13, 15, 17, 19, 30, 31, 33], "That": [11, 13, 15, 17, 19, 21, 22, 30, 31, 32, 33, 34, 35, 36], "highest": [11, 13, 15, 17, 19, 21, 22, 30, 31], "predict_log_proba": [11, 13, 15, 17, 19, 31, 33], "log": [11, 13, 15, 17, 19, 24, 25, 31, 33, 41, 42], "predict_quantil": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "quantil": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "median": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "interpol": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "keyword": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 48], "argument": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "accept": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36], "n_quantil": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22], "present": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 35, 36, 41], "harsh": [11, 13, 15, 17, 19, 30, 31, 33], "correctli": [11, 13, 15, 17, 19, 30, 31, 33], "w": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34], "set_fit_request": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "unchang": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "request": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 38], "enable_metadata_rout": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "set_config": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "rais": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "error": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "alia": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "metadata_rout": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "retain": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "insid": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 47], "pipelin": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "set_param": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "nest": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "compon": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "__": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "so": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "set_partial_fit_request": [11, 13, 15, 17, 19, 30, 31, 33], "set_score_request": [11, 12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34], "properti": [11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 41], "brought": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "known": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 28, 30, 31, 32, 33, 34, 35, 36, 40], "mislead": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "cardin": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "mani": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40, 41], "permutation_import": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "altern": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 40], "root": [11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36], "squared_error": [12, 16, 18, 20, 32, 34], "absolute_error": [12, 16, 18, 20, 32, 34], "friedman_ms": [12, 16, 18, 20, 32, 34], "poisson": [12, 16, 18, 20, 32, 34], "l2": [12, 16, 18, 20, 32, 34], "loss": [12, 16, 18, 20, 32, 34, 41], "termin": [12, 16, 18, 20, 32, 34], "friedman": [12, 16, 18, 20, 30, 31, 32, 34, 41], "absolut": [12, 16, 18, 20, 32, 34], "l1": [12, 16, 18, 20, 32, 34], "devianc": [12, 16, 18, 20, 32, 34], "find": [12, 14, 16, 18, 20, 30, 31, 32, 33, 34, 35, 36, 42], "slower": [12, 16, 18, 20], "mae": [12, 20], "equival": [12, 15, 16, 20, 31, 32, 41], "r2_score": [12, 16, 18, 20, 32, 34], "extratreesclassifi": [12, 19], "load_diabet": [12, 32, 34], "return_x_i": [12, 32, 34], "reg": 12, "2727": 12, "extratreeregressor": 12, "decisiontreeregressor": [12, 20, 32, 34], "oob_prediction_": [12, 18, 20], "coeffici": [12, 16, 18, 20, 32, 34], "frac": [12, 16, 18, 20, 24, 25, 32, 34, 42], "u": [12, 16, 18, 20, 32, 34, 39, 40], "residu": [12, 16, 18, 20, 32, 34], "becaus": [12, 13, 14, 16, 18, 20, 32, 34, 41], "wors": [12, 16, 18, 20, 32, 34], "constant": [12, 16, 18, 20, 32, 34], "alwai": [12, 13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 39, 41], "expect": [12, 15, 16, 18, 20, 26, 31, 32, 33, 34, 40], "disregard": [12, 16, 18, 20, 32, 34], "precomput": [12, 14, 16, 18, 20, 32, 34], "kernel": [12, 16, 18, 20, 32, 34, 47], "n_samples_fit": [12, 16, 18, 20, 32, 34], "uniform_averag": [12, 16, 18, 20, 32, 34], "23": [12, 16, 18, 20, 32, 34, 39], "keep": [12, 16, 18, 20, 32, 34], "influenc": [12, 16, 18, 20, 32, 34], "multioutputregressor": [12, 16, 18, 20, 32, 34], "splitter": [13, 30, 31, 32, 33, 34, 35, 36], "honest_prior": [13, 30], "empir": [13, 20, 30, 41], "tree_estim": [13, 30], "strategi": [13, 30, 31, 32, 33, 34, 35, 36], "deal": [13, 30], "empti": [13, 30], "prior": [13, 30, 41, 42], "posterior": [13, 30], "remain": [13, 30], "larger": [13, 30, 40], "shallow": [13, 30], "permut": [13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 40], "ident": [13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36], "sever": [13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36, 40], "determinist": [13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36], "behaviour": [13, 15, 16, 17, 18, 19, 20, 30, 31, 32, 33, 34, 35, 36], "fix": [13, 15, 16, 17, 18, 19, 20, 26, 30, 31, 32, 33, 34, 35, 36, 45, 46, 47, 48], "honesti": [13, 41], "enabl": [13, 35], "unbias": 13, "confid": [13, 41], "doubl": 13, "amount": 13, "access": 13, "ineffici": 13, "recommend": [13, 21, 22, 31, 32, 33, 34, 38, 41], "propens": [13, 41], "causal": 13, "breiman": [13, 15, 16, 19, 20, 30, 31, 32, 40, 41], "45": [13, 15, 16, 19, 20, 24, 40, 41, 47], "32": [13, 15, 16, 19, 20, 40, 41], "2001": [13, 15, 16, 19, 20, 40, 41], "athei": [13, 30], "j": [13, 30, 31, 32, 39, 41], "tibshirani": [13, 30, 31, 32, 41], "wager": [13, 30], "annal": [13, 30], "statist": [13, 30, 31, 32, 40, 41], "2019": [13, 30], "honest_forest": [13, 30], "n_inform": [13, 15, 16, 18, 19, 20], "n_redund": [13, 15, 19], "honesttreeclassifi": [13, 47], "n_features_": [13, 15, 16, 17, 18], "honest_decision_function_": 13, "structure_indices_": [13, 30], "n_structur": [13, 30], "honest_indices_": [13, 30], "n_honest": [13, 30], "n_neighbor": 14, "radiu": [14, 26, 27, 29], "distanc": [14, 21, 22, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42], "basedecisiontre": [14, 30, 37], "baseforest": [14, 37], "kneighbor": 14, "radius_neighbor": 14, "return_dist": 14, "n_queri": 14, "n_index": 14, "Not": [14, 21, 22, 35, 36], "convent": [14, 21, 22, 35, 36], "constructor": 14, "neigh_dist": 14, "neigh_ind": 14, "popul": 14, "sort_result": 14, "ly": 14, "ball": 14, "around": [14, 48], "being": [14, 41], "accord": 14, "approxim": 14, "lie": 14, "cannot": 14, "effici": [14, 21, 22, 32, 34, 35, 45, 46, 47, 48], "1d": [14, 17, 18, 33, 34], "feature_combin": [15, 16, 21, 31, 32, 36, 40, 41], "tradit": [15, 16, 31, 32], "compute_similarity_matrix": [15, 16, 17, 18, 21, 22, 31, 32, 33, 34, 35, 36], "sim_matrix": [15, 16, 17, 18, 21, 22, 31, 32, 33, 34, 35, 36], "obliquedecisiontreeregressor": [16, 18, 47], "tomita": [16, 17, 18, 33, 34, 38, 40], "journal": [16, 17, 18, 33, 34, 38, 40], "research": [16, 38, 40], "21": [16, 38, 40, 47], "104": [16, 38, 40], "39": [16, 38, 40], "2020": [16, 22, 38, 40, 42], "make_regress": [16, 18, 20], "regr": [16, 20], "86327109": 16, "patch": [17, 18, 33, 34, 47], "along": [17, 18, 28, 33, 34, 41], "presum": [17, 18, 33, 34], "un": [17, 18, 33, 34], "wrap": [17, 18, 33, 34], "scipi": [17, 18, 33, 34, 39], "adam": [17, 18, 33, 34, 38, 40, 47, 48], "li": [17, 18, 22, 33, 34, 38, 40, 42, 47, 48], "chester": [17, 18, 33, 34, 40], "huynh": [17, 18, 33, 34, 40], "tyler": [17, 18, 33, 34, 38, 40], "m": [17, 18, 33, 34, 38, 40, 41], "jesu": [17, 18, 33, 34, 40], "jess": [17, 18, 33, 34, 40], "patsol": [17, 18, 33, 34, 40], "ben": [17, 18, 33, 34, 40], "falk": [17, 18, 33, 34, 40], "sridevi": [17, 18, 33, 34, 40], "sarma": [17, 18, 33, 34, 40], "toward": [17, 18, 33, 34, 38, 40], "close": [17, 18, 33, 34, 38, 40], "gap": [17, 18, 30, 31, 32, 33, 34, 35, 36, 38, 40], "convolut": [17, 18, 33, 34, 38, 40], "network": [17, 18, 33, 34, 38, 40], "scienc": [17, 18, 33, 34, 38, 40], "77": [17, 18, 33, 34, 38, 40], "96": [17, 18, 33, 34, 38, 40], "2023": [17, 18, 33, 34, 38, 40], "21m1449117": [17, 18, 33, 34, 40], "82818509": 18, "patchobliquedecisiontreeregressor": [18, 47], "histogram": [19, 20], "gradient": [19, 20], "boost": [19, 20], "histgradientboostingclassifi": 19, "fast": [19, 20, 35, 44], "big": [19, 20], "10_000": [19, 20], "histgradientboostingregressor": 20, "rather": [20, 42], "suggest": 20, "wherea": [20, 27, 41], "recent": 20, "justifi": 20, "32987858": 20, "twomean": [21, 22, 35, 36], "clustering_func": [21, 22, 35, 36], "clustering_func_arg": [21, 22, 35, 36], "unsupervis": [21, 22, 35, 36, 38, 44, 47, 48], "simultan": [21, 22], "affin": [21, 22, 35, 36], "fastbic": [21, 22, 35, 36, 47], "maxim": [21, 22], "bayesian": [21, 22, 42], "calinski_harabasz_scor": [21, 22], "predicted_label": [21, 22], "silhouette_scor": [21, 22], "davies_bouldin_scor": [21, 22], "cpu": [21, 22], "construct": [21, 22, 40, 41], "continu": [21, 22], "instant": [21, 22], "agglomerativeclust": [21, 22, 35, 36], "unsuperviseddecisiontre": [21, 22], "labels_": [21, 22], "similarity_matrix_": [21, 22], "oob": [21, 22], "dissimilarity_matrix_": [21, 22], "dissimilar": [21, 22, 47], "fit_predict": [21, 22, 35, 36], "int64": [21, 22, 35, 36], "fit_transform": [21, 22, 35, 36], "fit_param": [21, 22, 35, 36], "transform": [21, 22, 26, 35, 36], "x_new": [21, 22, 35, 36], "n_features_new": [21, 22, 35, 36], "set_output": [21, 22, 35, 36], "introduc": [21, 22, 35, 36], "configur": [21, 22, 35, 36], "typic": [21, 22, 35, 36, 41], "dens": [21, 22, 35, 36, 41], "meghana": [22, 38, 42], "madhyastha": [22, 38, 42], "perci": [22, 42], "jame": [22, 40, 42], "brown": [22, 40, 42], "veronika": [22, 42], "strnadova": [22, 42], "neelei": [22, 42], "carei": [22, 40, 42], "prieb": [22, 40, 42], "randal": [22, 40, 42], "burn": [22, 40, 42], "geodes": [22, 26, 35, 38, 42], "proceed": [22, 35, 42], "26th": [22, 42], "acm": [22, 42], "sigkdd": [22, 42], "confer": [22, 35, 42], "knowledg": [22, 41, 42], "discoveri": [22, 42], "mine": [22, 35, 42], "kdd": [22, 38, 42], "513": [22, 38, 42], "523": [22, 38, 42], "york": [22, 42], "ny": [22, 42], "usa": [22, 42], "machineri": [22, 42], "url": [22, 40, 42], "1145": [22, 42], "3394486": [22, 42], "3403094": [22, 42], "cov": [23, 24, 25, 28], "x_index": 23, "y_index": 23, "z_index": 23, "covari": [23, 24, 25, 26, 28], "true_mi": [23, 24, 25], "h": [23, 24, 25, 41], "plug": 23, "entropy_gaussian": 23, "det": [24, 25], "georg": 24, "darbellai": 24, "igor": 24, "vajda": 24, "observ": 24, "ieee": 24, "tran": 24, "theori": [24, 40], "1315": 24, "1321": 24, "1999": 24, "pi": [25, 27, 42], "kd_tree": 26, "rank": [26, 40], "ksg": 26, "arraylik": 26, "n_features_x": 26, "n_features_i": 26, "n_features_z": 26, "unsupervisedobliquerandomforest": 26, "knn": 26, "ball_tre": 26, "brute": 26, "preprocess": 26, "val": 26, "proce": 26, "kth": 26, "nbr": 26, "xyz": 26, "subspac": 26, "nn": [26, 35], "xz": 26, "yz": 26, "psi": 26, "n_x": 26, "n_y": 26, "n_": [26, 41], "digamma": 26, "term": [26, 27, 41, 42], "n_i": 26, "denot": [26, 27, 41], "could": 26, "radius_a": 27, "radius_b": 27, "obs_noise_func": 27, "nature_noise_func": 27, "005": [27, 29], "return_mi_lb": [27, 29], "helix": 27, "smallest": 27, "nois": [27, 29], "defauult": 27, "func": 27, "independ": [27, 41], "lb": [27, 29], "approx": 27, "unif": 27, "afterward": 27, "epsilon_1": 27, "co": 27, "n_1": 27, "epsilon_2": 27, "sin": 27, "n_2": 27, "epsilon_3": 27, "n_3": 27, "And": 27, "graphic": 27, "rightarrow": 27, "confound": 27, "impli": 27, "condition": 27, "2d": [28, 33, 34], "feed": 28, "default_rng": 28, "noise_func": 29, "sphere": 29, "latitud": 29, "longitud": 29, "y1": 29, "coordin": 29, "y2": 29, "y3": 29, "them": [30, 31, 32, 33, 34, 35, 36, 40], "But": [30, 31, 32, 33, 34, 35, 36], "instati": 30, "argmax": [30, 31], "ti": [30, 31], "lowest": [30, 31], "en": [30, 31, 32, 41], "wikipedia": [30, 31, 32, 41], "wiki": [30, 31, 32, 41], "decision_tree_learn": [30, 31, 32, 41], "olshen": [30, 31, 32], "stone": [30, 31, 32], "wadsworth": [30, 31, 32], "belmont": [30, 31, 32], "ca": [30, 31, 32], "1984": [30, 31, 32], "hasti": [30, 31, 32, 41], "springer": [30, 31, 32, 41], "2009": [30, 31, 32, 41], "cutler": [30, 31, 32], "stat": [30, 31, 32], "berkelei": [30, 31, 32], "edu": [30, 31, 32], "randomforest": [30, 31, 32], "cc_home": [30, 31, 32], "htm": [30, 31, 32], "cross_val_scor": [30, 31, 32, 34], "93333333": 30, "max_features_": [30, 31, 32, 33, 34], "tree_": [30, 31, 32, 33, 34, 35, 36], "_tree": [30, 31, 32, 33, 34], "understand": [30, 40], "empirical_prior_": 30, "check_input": [30, 31, 32, 33, 34, 35, 36], "17": [30, 31, 32, 33, 34, 35, 36], "bypass": [30, 31, 32, 33, 34, 35, 36], "don": [30, 31, 32, 33, 34, 35, 36], "know": [30, 31, 32, 33, 34, 35, 36], "re": [30, 31, 32, 33, 34, 35, 36], "node_count": [30, 31, 32, 33, 34, 35, 36], "cost_complexity_pruning_path": [30, 31, 32, 33, 34, 35, 36], "ccp_path": [30, 31, 32, 33, 34, 35, 36], "bunch": [30, 31, 32, 33, 34, 35, 36], "dictionari": [30, 31, 32, 33, 34, 35, 36], "get_depth": [30, 31, 32, 33, 34, 35, 36], "leaf_nodes_sampl": [30, 31, 32, 33, 34, 35, 36], "get_n_leav": [30, 31, 32, 33, 34, 35, 36], "n_leav": [30, 31, 32, 33, 34, 35, 36], "proba": [30, 31, 33], "set_predict_proba_request": [30, 31, 33], "set_predict_request": [30, 31, 32, 33, 34, 35, 36], "fact": [31, 32], "better": [31, 32, 40, 41], "caveat": [31, 32], "willing": [31, 32, 41], "spend": [31, 32, 41], "resourc": [31, 32, 41], "93": 31, "86": [31, 47], "feature_combinations_": [31, 32], "68908909": 32, "35854406": 32, "35223873": 32, "03616902": 32, "56008907": 32, "32235221": 32, "06945264": 32, "1465216": 32, "34597007": 32, "15308512": 32, "morf": [33, 34, 38, 47], "discontigu": [33, 34], "sensor": [33, 34], "mask": [33, 34], "onto": [33, 34], "data_width": [33, 34], "data_height": [33, 34], "tt": [33, 34], "last": [33, 34], "height": [33, 34], "exactli": [33, 34, 40], "albeit": [33, 34], "efficienc": [33, 34], "min_patch_dims_": [33, 34], "max_patch_dims_": [33, 34], "data_dims_": [33, 34], "rg": 34, "10163671": 34, "78786738": 34, "01490768": 34, "32737289": 34, "24816698": 34, "41881754": 34, "0588273": 34, "48722913": 34, "07927208": 34, "15600762": 34, "unsupervisedcriterion": [35, 36], "abid": [35, 36], "unsupervisedsplitt": [35, 36], "enablescomput": 35, "describ": [35, 41], "alexand": 35, "marx": 35, "jona": 35, "fischer": 35, "2022": [35, 38], "sdm": 35, "415": 35, "423": 35, "evimaria": 35, "terzi": 35, "panayioti": 35, "tsapara": 35, "segment": 35, "316": 35, "327": 35, "assign": [35, 36, 42], "intermedi": 37, "Then": [37, 39], "count": 37, "aff_matrix": 37, "modern": 38, "supervis": [38, 42, 44], "extend": [38, 41], "strong": 38, "madhyastha2020": 38, "sporf": 38, "tomita2020": 38, "li2023": 38, "perry2021": 38, "plan": 38, "isol": [38, 39], "stream": 38, "xu2022": 38, "encourag": 38, "pull": 38, "walk": 38, "contribut": [38, 40, 47, 48], "licens": 38, "under": 38, "bsd": 38, "et": 38, "al": 38, "preprint": 38, "xu": [38, 47], "haoyin": [38, 47], "simplest": 38, "2110": 38, "08483": 38, "document": [38, 40], "releas": 38, "histori": 38, "instal": 38, "pip": 38, "meson": 38, "conda": 38, "pypi": 39, "clone": 39, "repositori": 39, "neurodata": 39, "git": 39, "github": 39, "com": 39, "cd": 39, "virtual": 39, "environ": 39, "dev": 39, "build_requir": 39, "txt": 39, "spin": 39, "cli": 39, "local": 39, "abl": [39, 43], "edit": 39, "pend": 39, "repo": 39, "zipbal": 39, "master": 39, "forg": 39, "threadpoolctl": 39, "pytest": 39, "compil": 39, "llvm": 39, "openmp": 39, "poetri": 39, "directori": 39, "dodiscov": 39, "obliquepr": 39, "need": [39, 41, 43], "pr": 39, "22754": 39, "checkout": 39, "page": [39, 45], "instruct": 39, "obliquerandomforestregressor": [40, 47], "divers": 40, "sometim": 40, "slight": 40, "aim": 40, "motiv": 40, "therebi": [40, 41], "practic": [40, 44], "often": [40, 42], "yield": 40, "overal": 40, "candid": [40, 41], "intuit": [40, 41], "leo": 40, "assess": 40, "final": [40, 41], "essenti": 40, "abil": 40, "mdi": 40, "l2014": 40, "suffer": 40, "flaw": 40, "conclus": 40, "deriv": 40, "most": [40, 41], "held": 40, "secondli": 40, "favor": 40, "explor": 40, "whose": 40, "match": 40, "jaewon": 40, "chung": 40, "benjamin": 40, "jason": 40, "yim": 40, "mauro": 40, "maggioni": 40, "jmlr": 40, "paper": [40, 41], "v21": 40, "664": 40, "html": 40, "loupp": 40, "phd": 40, "thesi": 40, "lieg": 40, "2014": 40, "ground": 41, "beyond": 41, "dt": 41, "ot": 41, "ref": 41, "rc": 41, "landmark": 41, "varieti": [41, 42], "lambda": 41, "similarli": 41, "anoth": 41, "major": [41, 45, 46, 47, 48], "definit": 41, "x_i": [41, 42], "recurs": 41, "manner": 41, "orthogon": 41, "a_i": 41, "inner": 41, "product": 41, "langl": 41, "rangl": 41, "entri": 41, "rest": 41, "let": 41, "q_m": 41, "n_m": 41, "theta": 41, "t_m": 41, "x_j": 41, "leq": 41, "setminu": 41, "e_i": 41, "basi": 41, "elsewher": 41, "exact": 41, "handl": 41, "_featur": 41, "come": 41, "sparsiti": 41, "consider": 41, "pickl": 41, "disc": 41, "special": 41, "earlier": 41, "sai": 41, "desir": 41, "analysi": 41, "much": 41, "storag": 41, "ask": 41, "question": 41, "try": 41, "cross": 41, "procedur": 41, "gridsearchcv": 41, "There": 41, "moreov": 41, "imput": 41, "1023": 41, "1010933404324": 41, "predictive_analyt": 41, "quinlan": 41, "c4": 41, "program": 41, "morgan": 41, "kaufmann": 41, "1993": 41, "prevent": 41, "overfit": 41, "particular": 41, "common": [41, 42], "triplet": 41, "treatment": 41, "sacrific": 41, "mse": 41, "goal": 42, "identifi": 42, "pattern": 42, "techniqu": 42, "overview": 42, "cutpoint": 42, "cutoff": 42, "min_": 42, "sum_": 42, "hat": 42, "mu": 42, "_1": 42, "_2": 42, "sample_indic": 42, "popular": 42, "seleciton": 42, "kmean": 42, "flexibl": 42, "mclust": 42, "tri": 42, "mle": 42, "hard": 42, "soft": 42, "gmm": 42, "simpler": 42, "mathcal": 42, "x_n": 42, "sigma": 42, "quad": 42, "le": 42, "mu_j": 42, "notion": 42, "efficaci": 42, "scheme": 42, "adjusted_rand_scor": 42, "tip": [44, 45], "enhanc": [45, 46, 47, 48], "link": 45, "subscrib": 45, "io": 45, "notifi": 45, "jong": 47, "shin": 47, "bug": 47, "outsid": 47, "61": 47, "arbitrari": 47, "discontinu": 47, "sambit": 47, "per": 47, "67": 47, "70": 47, "patchobliquerandomforestregressor": 47, "suki": [47, 48], "72": 47, "nearestneighborsmetaestim": 47, "83": 47, "thank": [47, 48], "everyon": [47, 48], "who": [47, 48], "mainten": [47, 48], "incept": [47, 48], "upgrad": 48, "reli": 48, "109": 48, "extraobliquedecisiontreeclassifi": 48, "extraobliquedecisiontreeregressor": 48, "75": 48, "2x": 48}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[11, 1, 1, "", "ExtraTreesClassifier"], [12, 1, 1, "", "ExtraTreesRegressor"], [13, 1, 1, "", "HonestForestClassifier"], [14, 1, 1, "", "NearestNeighborsMetaEstimator"], [15, 1, 1, "", "ObliqueRandomForestClassifier"], [16, 1, 1, "", "ObliqueRandomForestRegressor"], [17, 1, 1, "", "PatchObliqueRandomForestClassifier"], [18, 1, 1, "", "PatchObliqueRandomForestRegressor"], [19, 1, 1, "", "RandomForestClassifier"], [20, 1, 1, "", "RandomForestRegressor"], [21, 1, 1, "", "UnsupervisedObliqueRandomForest"], [22, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ExtraTreesClassifier": [[11, 2, 1, "", "apply"], [11, 3, 1, "", "base_estimator_"], [11, 2, 1, "", "decision_path"], [11, 3, 1, "", "feature_importances_"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "get_leaf_node_samples"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "partial_fit"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "predict_log_proba"], [11, 2, 1, "", "predict_proba"], [11, 2, 1, "", "predict_quantiles"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_partial_fit_request"], [11, 2, 1, "", "set_score_request"]], "sktree.ExtraTreesRegressor": [[12, 2, 1, "", "apply"], [12, 3, 1, "", "base_estimator_"], [12, 2, 1, "", "decision_path"], [12, 3, 1, "", "feature_importances_"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "get_leaf_node_samples"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "predict_quantiles"], [12, 2, 1, "", "score"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "set_score_request"]], "sktree.HonestForestClassifier": [[13, 2, 1, "", "apply"], [13, 3, 1, "", "base_estimator_"], [13, 2, 1, "", "decision_path"], [13, 3, 1, "", "feature_importances_"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "get_leaf_node_samples"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 3, 1, "", "honest_indices_"], [13, 2, 1, "", "partial_fit"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "predict_log_proba"], [13, 2, 1, "", "predict_proba"], [13, 2, 1, "", "predict_quantiles"], [13, 2, 1, "", "score"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "set_partial_fit_request"], [13, 2, 1, "", "set_score_request"], [13, 3, 1, "", "structure_indices_"]], "sktree.NearestNeighborsMetaEstimator": [[14, 2, 1, "", "fit"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "kneighbors"], [14, 2, 1, "", "radius_neighbors"], [14, 2, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[15, 2, 1, "", "apply"], [15, 3, 1, "", "base_estimator_"], [15, 2, 1, "", "compute_similarity_matrix"], [15, 2, 1, "", "decision_path"], [15, 3, 1, "", "feature_importances_"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_leaf_node_samples"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "partial_fit"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_log_proba"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "predict_quantiles"], [15, 2, 1, "", "score"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_partial_fit_request"], [15, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[16, 2, 1, "", "apply"], [16, 3, 1, "", "base_estimator_"], [16, 2, 1, "", "compute_similarity_matrix"], [16, 2, 1, "", "decision_path"], [16, 3, 1, "", "feature_importances_"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "get_leaf_node_samples"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_quantiles"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[17, 2, 1, "", "apply"], [17, 3, 1, "", "base_estimator_"], [17, 2, 1, "", "compute_similarity_matrix"], [17, 2, 1, "", "decision_path"], [17, 3, 1, "", "feature_importances_"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "get_leaf_node_samples"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "partial_fit"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "predict_log_proba"], [17, 2, 1, "", "predict_proba"], [17, 2, 1, "", "predict_quantiles"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_partial_fit_request"], [17, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[18, 2, 1, "", "apply"], [18, 3, 1, "", "base_estimator_"], [18, 2, 1, "", "compute_similarity_matrix"], [18, 2, 1, "", "decision_path"], [18, 3, 1, "", "feature_importances_"], [18, 2, 1, "", "fit"], [18, 2, 1, "", "get_leaf_node_samples"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "predict_quantiles"], [18, 2, 1, "", "score"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "set_score_request"]], "sktree.RandomForestClassifier": [[19, 2, 1, "", "apply"], [19, 3, 1, "", "base_estimator_"], [19, 2, 1, "", "decision_path"], [19, 3, 1, "", "feature_importances_"], [19, 2, 1, "", "fit"], [19, 2, 1, "", "get_leaf_node_samples"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "partial_fit"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "predict_log_proba"], [19, 2, 1, "", "predict_proba"], [19, 2, 1, "", "predict_quantiles"], [19, 2, 1, "", "score"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "set_partial_fit_request"], [19, 2, 1, "", "set_score_request"]], "sktree.RandomForestRegressor": [[20, 2, 1, "", "apply"], [20, 3, 1, "", "base_estimator_"], [20, 2, 1, "", "decision_path"], [20, 3, 1, "", "feature_importances_"], [20, 2, 1, "", "fit"], [20, 2, 1, "", "get_leaf_node_samples"], [20, 2, 1, "", "get_metadata_routing"], [20, 2, 1, "", "get_params"], [20, 2, 1, "", "predict"], [20, 2, 1, "", "predict_quantiles"], [20, 2, 1, "", "score"], [20, 2, 1, "", "set_fit_request"], [20, 2, 1, "", "set_params"], [20, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[21, 2, 1, "", "apply"], [21, 3, 1, "", "base_estimator_"], [21, 2, 1, "", "compute_similarity_matrix"], [21, 2, 1, "", "decision_path"], [21, 3, 1, "", "feature_importances_"], [21, 2, 1, "", "fit"], [21, 2, 1, "", "fit_predict"], [21, 2, 1, "", "fit_transform"], [21, 2, 1, "", "get_leaf_node_samples"], [21, 2, 1, "", "get_metadata_routing"], [21, 2, 1, "", "get_params"], [21, 2, 1, "", "predict"], [21, 2, 1, "", "predict_quantiles"], [21, 2, 1, "", "set_fit_request"], [21, 2, 1, "", "set_output"], [21, 2, 1, "", "set_params"], [21, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[22, 2, 1, "", "apply"], [22, 3, 1, "", "base_estimator_"], [22, 2, 1, "", "compute_similarity_matrix"], [22, 2, 1, "", "decision_path"], [22, 3, 1, "", "feature_importances_"], [22, 2, 1, "", "fit"], [22, 2, 1, "", "fit_predict"], [22, 2, 1, "", "fit_transform"], [22, 2, 1, "", "get_leaf_node_samples"], [22, 2, 1, "", "get_metadata_routing"], [22, 2, 1, "", "get_params"], [22, 2, 1, "", "predict"], [22, 2, 1, "", "predict_quantiles"], [22, 2, 1, "", "set_fit_request"], [22, 2, 1, "", "set_output"], [22, 2, 1, "", "set_params"], [22, 2, 1, "", "transform"]], "sktree._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "sktree.experimental.mutual_info": [[23, 4, 1, "", "cmi_gaussian"], [24, 4, 1, "", "entropy_gaussian"], [25, 4, 1, "", "mi_gaussian"]], "sktree.experimental": [[26, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.simulate": [[27, 4, 1, "", "simulate_helix"], [28, 4, 1, "", "simulate_multivariate_gaussian"], [29, 4, 1, "", "simulate_sphere"]], "sktree.tree": [[30, 1, 1, "", "HonestTreeClassifier"], [31, 1, 1, "", "ObliqueDecisionTreeClassifier"], [32, 1, 1, "", "ObliqueDecisionTreeRegressor"], [33, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [34, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [35, 1, 1, "", "UnsupervisedDecisionTree"], [36, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [37, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.HonestTreeClassifier": [[30, 2, 1, "", "apply"], [30, 2, 1, "", "cost_complexity_pruning_path"], [30, 2, 1, "", "decision_path"], [30, 3, 1, "", "feature_importances_"], [30, 2, 1, "", "fit"], [30, 2, 1, "", "get_depth"], [30, 2, 1, "", "get_leaf_node_samples"], [30, 2, 1, "", "get_metadata_routing"], [30, 2, 1, "", "get_n_leaves"], [30, 2, 1, "", "get_params"], [30, 2, 1, "", "partial_fit"], [30, 2, 1, "", "predict"], [30, 2, 1, "", "predict_proba"], [30, 2, 1, "", "predict_quantiles"], [30, 2, 1, "", "score"], [30, 2, 1, "", "set_fit_request"], [30, 2, 1, "", "set_params"], [30, 2, 1, "", "set_partial_fit_request"], [30, 2, 1, "", "set_predict_proba_request"], [30, 2, 1, "", "set_predict_request"], [30, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[31, 2, 1, "", "apply"], [31, 2, 1, "", "compute_similarity_matrix"], [31, 2, 1, "", "cost_complexity_pruning_path"], [31, 2, 1, "", "decision_path"], [31, 3, 1, "", "feature_importances_"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "get_depth"], [31, 2, 1, "", "get_leaf_node_samples"], [31, 2, 1, "", "get_metadata_routing"], [31, 2, 1, "", "get_n_leaves"], [31, 2, 1, "", "get_params"], [31, 2, 1, "", "partial_fit"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "predict_log_proba"], [31, 2, 1, "", "predict_proba"], [31, 2, 1, "", "predict_quantiles"], [31, 2, 1, "", "score"], [31, 2, 1, "", "set_fit_request"], [31, 2, 1, "", "set_params"], [31, 2, 1, "", "set_partial_fit_request"], [31, 2, 1, "", "set_predict_proba_request"], [31, 2, 1, "", "set_predict_request"], [31, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[32, 2, 1, "", "apply"], [32, 2, 1, "", "compute_similarity_matrix"], [32, 2, 1, "", "cost_complexity_pruning_path"], [32, 2, 1, "", "decision_path"], [32, 3, 1, "", "feature_importances_"], [32, 2, 1, "", "fit"], [32, 2, 1, "", "get_depth"], [32, 2, 1, "", "get_leaf_node_samples"], [32, 2, 1, "", "get_metadata_routing"], [32, 2, 1, "", "get_n_leaves"], [32, 2, 1, "", "get_params"], [32, 2, 1, "", "predict"], [32, 2, 1, "", "predict_quantiles"], [32, 2, 1, "", "score"], [32, 2, 1, "", "set_fit_request"], [32, 2, 1, "", "set_params"], [32, 2, 1, "", "set_predict_request"], [32, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[33, 2, 1, "", "apply"], [33, 2, 1, "", "compute_similarity_matrix"], [33, 2, 1, "", "cost_complexity_pruning_path"], [33, 2, 1, "", "decision_path"], [33, 3, 1, "", "feature_importances_"], [33, 2, 1, "", "fit"], [33, 2, 1, "", "get_depth"], [33, 2, 1, "", "get_leaf_node_samples"], [33, 2, 1, "", "get_metadata_routing"], [33, 2, 1, "", "get_n_leaves"], [33, 2, 1, "", "get_params"], [33, 2, 1, "", "partial_fit"], [33, 2, 1, "", "predict"], [33, 2, 1, "", "predict_log_proba"], [33, 2, 1, "", "predict_proba"], [33, 2, 1, "", "predict_quantiles"], [33, 2, 1, "", "score"], [33, 2, 1, "", "set_fit_request"], [33, 2, 1, "", "set_params"], [33, 2, 1, "", "set_partial_fit_request"], [33, 2, 1, "", "set_predict_proba_request"], [33, 2, 1, "", "set_predict_request"], [33, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[34, 2, 1, "", "apply"], [34, 2, 1, "", "compute_similarity_matrix"], [34, 2, 1, "", "cost_complexity_pruning_path"], [34, 2, 1, "", "decision_path"], [34, 3, 1, "", "feature_importances_"], [34, 2, 1, "", "fit"], [34, 2, 1, "", "get_depth"], [34, 2, 1, "", "get_leaf_node_samples"], [34, 2, 1, "", "get_metadata_routing"], [34, 2, 1, "", "get_n_leaves"], [34, 2, 1, "", "get_params"], [34, 2, 1, "", "predict"], [34, 2, 1, "", "predict_quantiles"], [34, 2, 1, "", "score"], [34, 2, 1, "", "set_fit_request"], [34, 2, 1, "", "set_params"], [34, 2, 1, "", "set_predict_request"], [34, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[35, 2, 1, "", "apply"], [35, 2, 1, "", "compute_similarity_matrix"], [35, 2, 1, "", "cost_complexity_pruning_path"], [35, 2, 1, "", "decision_path"], [35, 3, 1, "", "feature_importances_"], [35, 2, 1, "", "fit_predict"], [35, 2, 1, "", "fit_transform"], [35, 2, 1, "", "get_depth"], [35, 2, 1, "", "get_leaf_node_samples"], [35, 2, 1, "", "get_metadata_routing"], [35, 2, 1, "", "get_n_leaves"], [35, 2, 1, "", "get_params"], [35, 2, 1, "", "predict"], [35, 2, 1, "", "predict_quantiles"], [35, 2, 1, "", "set_fit_request"], [35, 2, 1, "", "set_output"], [35, 2, 1, "", "set_params"], [35, 2, 1, "", "set_predict_request"], [35, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[36, 2, 1, "", "apply"], [36, 2, 1, "", "compute_similarity_matrix"], [36, 2, 1, "", "cost_complexity_pruning_path"], [36, 2, 1, "", "decision_path"], [36, 3, 1, "", "feature_importances_"], [36, 2, 1, "", "fit_predict"], [36, 2, 1, "", "fit_transform"], [36, 2, 1, "", "get_depth"], [36, 2, 1, "", "get_leaf_node_samples"], [36, 2, 1, "", "get_metadata_routing"], [36, 2, 1, "", "get_n_leaves"], [36, 2, 1, "", "get_params"], [36, 2, 1, "", "predict"], [36, 2, 1, "", "predict_quantiles"], [36, 2, 1, "", "set_fit_request"], [36, 2, 1, "", "set_output"], [36, 2, 1, "", "set_params"], [36, 2, 1, "", "set_predict_request"], [36, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 47, 48], "scikit": [0, 38, 43], "learn": 0, "tree": [0, 4, 6, 9, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43], "estim": 0, "supervis": [0, 41], "unsupervis": [0, 42], "distanc": 0, "metric": 0, "experiment": [0, 23, 24, 25, 26, 27, 28, 29], "function": 0, "exampl": [1, 13, 15, 31, 33, 40, 43], "compar": [2, 6, 41], "extra": [2, 3, 6], "obliqu": [2, 3, 5, 6, 7, 9, 40, 41], "forest": [2, 3, 5, 7, 8, 40], "random": [2, 3, 5, 7, 40], "predict": [2, 5, 7], "cc18": [2, 7], "dataset": [2, 3, 4, 7], "discuss": [2, 3], "refer": [2, 3, 8, 38, 40, 41, 42], "speed": 3, "v": 3, "differ": [3, 41], "size": 3, "plot": [4, 5, 7, 8, 9], "decis": [4, 6, 41, 42], "surfac": [4, 6], "train": 4, "iri": 4, "axi": [5, 7], "align": [5, 7], "spars": 5, "pariti": 5, "simul": [5, 8, 27, 28, 29], "standard": 6, "honest": [8, 41], "calibr": 8, "overlap": 8, "gaussian": 8, "project": 9, "matric": 9, "an": 9, "initi": 9, "patch": 9, "splitter": 9, "gener": 9, "1d": 9, "2d": 9, "3d": 9, "discontigu": 9, "comput": 10, "time": 10, "sktree": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "extratreesclassifi": 11, "extratreesregressor": 12, "honestforestclassifi": 13, "us": [13, 15, 31, 33, 41, 43], "nearestneighborsmetaestim": 14, "obliquerandomforestclassifi": 15, "obliquerandomforestregressor": 16, "patchobliquerandomforestclassifi": 17, "patchobliquerandomforestregressor": 18, "randomforestclassifi": 19, "randomforestregressor": 20, "unsupervisedobliquerandomforest": 21, "unsupervisedrandomforest": 22, "mutual_info": [23, 24, 25], "cmi_gaussian": 23, "entropy_gaussian": 24, "mi_gaussian": 25, "mutual_info_ksg": 26, "simulate_helix": 27, "simulate_multivariate_gaussian": 28, "simulate_spher": 29, "honesttreeclassifi": 30, "obliquedecisiontreeclassifi": 31, "obliquedecisiontreeregressor": 32, "patchobliquedecisiontreeclassifi": 33, "patchobliquedecisiontreeregressor": 34, "unsuperviseddecisiontre": 35, "unsupervisedobliquedecisiontre": 36, "compute_forest_similarity_matrix": 37, "content": 38, "get": 38, "start": 38, "indic": 38, "tabl": 38, "instal": 39, "depend": 39, "pip": 39, "from": 39, "sourc": 39, "meson": 39, "conda": 39, "recommend": 39, "featur": 40, "import": 40, "evalu": [40, 42], "mathemat": 41, "formul": 41, "classif": 41, "regress": 41, "multi": 41, "output": 41, "problem": 41, "complex": 41, "tip": 41, "practic": 41, "limit": 41, "criterion": 42, "two": 42, "mean": 42, "fast": 42, "bic": 42, "user": 44, "guid": 44, "releas": 45, "histori": 45, "what": [47, 48], "": [47, 48], "new": [47, 48], "version": [47, 48], "0": [47, 48], "1": 47, "changelog": [47, 48], "code": [47, 48], "contributor": [47, 48], "2": 48}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Distance Metrics": [[0, "distance-metrics"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Examples": [[1, "examples"], [43, "examples"]], "Compare extra oblique forest and oblique random forest predictions on cc18 datasets": [[2, "compare-extra-oblique-forest-and-oblique-random-forest-predictions-on-cc18-datasets"]], "Discussion": [[2, "discussion"], [3, "discussion"]], "References": [[2, "references"], [3, "references"], [8, "references"], [38, null], [40, null], [40, null], [42, null]], "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes": [[3, "speed-of-extra-oblique-random-forest-vs-oblique-random-forest-on-different-dataset-sizes"]], "Plot the decision surface of decision trees trained on the iris dataset": [[4, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[5, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Compare the decision surfaces of oblique extra-trees with standard oblique trees": [[6, "compare-the-decision-surfaces-of-oblique-extra-trees-with-standard-oblique-trees"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[7, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[8, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "Plot the projection matrices of an oblique tree": [[9, "plot-the-projection-matrices-of-an-oblique-tree"]], "Initialize patch splitter": [[9, "initialize-patch-splitter"]], "Generate 1D patches": [[9, "generate-1d-patches"]], "Generate 2D patches": [[9, "generate-2d-patches"]], "Generate 3D patches": [[9, "generate-3d-patches"]], "Discontiguous Patches": [[9, "discontiguous-patches"]], "Computation times": [[10, "computation-times"]], "sktree.ExtraTreesClassifier": [[11, "sktree-extratreesclassifier"]], "sktree.ExtraTreesRegressor": [[12, "sktree-extratreesregressor"]], "sktree.HonestForestClassifier": [[13, "sktree-honestforestclassifier"]], "Examples using sktree.HonestForestClassifier": [[13, "examples-using-sktree-honestforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[14, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[15, "sktree-obliquerandomforestclassifier"]], "Examples using sktree.ObliqueRandomForestClassifier": [[15, "examples-using-sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[16, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[17, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[18, "sktree-patchobliquerandomforestregressor"]], "sktree.RandomForestClassifier": [[19, "sktree-randomforestclassifier"]], "sktree.RandomForestRegressor": [[20, "sktree-randomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[21, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[22, "sktree-unsupervisedrandomforest"]], "sktree.experimental.mutual_info.cmi_gaussian": [[23, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[24, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[25, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[26, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[27, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[28, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[29, "sktree-experimental-simulate-simulate-sphere"]], "sktree.tree.HonestTreeClassifier": [[30, "sktree-tree-honesttreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[31, "sktree-tree-obliquedecisiontreeclassifier"]], "Examples using sktree.tree.ObliqueDecisionTreeClassifier": [[31, "examples-using-sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[32, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[33, "sktree-tree-patchobliquedecisiontreeclassifier"]], "Examples using sktree.tree.PatchObliqueDecisionTreeClassifier": [[33, "examples-using-sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[34, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[35, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[36, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[37, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[38, "scikit-tree"]], "Contents": [[38, "contents"]], "Getting started:": [[38, null]], "Indices and tables": [[38, "indices-and-tables"]], "Installation": [[39, "installation"]], "Dependencies": [[39, "dependencies"]], "Installing with pip": [[39, "installing-with-pip"]], "Installing from source with Meson": [[39, "installing-from-source-with-meson"]], "Conda (Recommended)": [[39, "conda-recommended"]], "Oblique Random Forests": [[40, "oblique-random-forests"]], "Examples:": [[40, null]], "Feature importance evaluation": [[40, "feature-importance-evaluation"]], "Supervised Decision Trees": [[41, "supervised-decision-trees"]], "Oblique Trees": [[41, "oblique-trees"]], "Differences compared to decision trees": [[41, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[41, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[41, "classification-regression-and-multi-output-problems"]], "Complexity": [[41, "complexity"]], "Tips on practical use": [[41, "tips-on-practical-use"]], "Limitations compared to decision trees": [[41, "limitations-compared-to-decision-trees"]], "References:": [[41, null]], "Honest Trees": [[41, "honest-trees"]], "Unsupervised Decision Trees": [[42, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[42, "unsupervised-criterion"]], "Two-Means": [[42, "two-means"]], "Fast-BIC": [[42, "fast-bic"]], "Evaluating Unsupervised Trees": [[42, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[43, "examples-using-scikit-tree"]], "User Guide": [[44, "user-guide"]], "Release History": [[45, "release-history"]], "What\u2019s new?": [[47, "what-s-new"], [48, "what-s-new"]], "Version 0.1": [[47, "version-0-1"]], "Changelog": [[47, "changelog"], [48, "changelog"]], "Code and Documentation Contributors": [[47, "code-and-documentation-contributors"], [48, "code-and-documentation-contributors"]], "Version 0.2": [[48, "version-0-2"]]}, "indexentries": {"module": [[0, "module-sktree"], [0, "module-sktree._lib.sklearn.ensemble"]], "sktree": [[0, "module-sktree"]], "sktree._lib.sklearn.ensemble": [[0, "module-sktree._lib.sklearn.ensemble"]], "extratreesclassifier (class in sktree)": [[11, "sktree.ExtraTreesClassifier"]], "apply() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.apply"]], "base_estimator_ (sktree.extratreesclassifier property)": [[11, "sktree.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.decision_path"]], "feature_importances_ (sktree.extratreesclassifier property)": [[11, "sktree.ExtraTreesClassifier.feature_importances_"]], "fit() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.get_params"]], "partial_fit() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.partial_fit"]], "predict() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.predict"]], "predict_log_proba() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.predict_quantiles"]], "score() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.score"]], "set_fit_request() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.set_fit_request"]], "set_params() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.set_params"]], "set_partial_fit_request() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.set_partial_fit_request"]], "set_score_request() (sktree.extratreesclassifier method)": [[11, "sktree.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sktree)": [[12, "sktree.ExtraTreesRegressor"]], "apply() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.apply"]], "base_estimator_ (sktree.extratreesregressor property)": [[12, "sktree.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.decision_path"]], "feature_importances_ (sktree.extratreesregressor property)": [[12, "sktree.ExtraTreesRegressor.feature_importances_"]], "fit() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.get_params"]], "predict() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.predict"]], "predict_quantiles() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.predict_quantiles"]], "score() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.score"]], "set_fit_request() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.set_fit_request"]], "set_params() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.set_params"]], "set_score_request() (sktree.extratreesregressor method)": [[12, "sktree.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in sktree)": [[13, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.apply"]], "base_estimator_ (sktree.honestforestclassifier property)": [[13, "sktree.HonestForestClassifier.base_estimator_"]], "decision_path() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.decision_path"]], "feature_importances_ (sktree.honestforestclassifier property)": [[13, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.get_params"]], "honest_indices_ (sktree.honestforestclassifier property)": [[13, "sktree.HonestForestClassifier.honest_indices_"]], "partial_fit() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.partial_fit"]], "predict() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.predict_proba"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.honestforestclassifier method)": [[13, "sktree.HonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.honestforestclassifier property)": [[13, "sktree.HonestForestClassifier.structure_indices_"]], "nearestneighborsmetaestimator (class in sktree)": [[14, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[14, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[14, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[14, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[14, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[14, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[14, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[15, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.obliquerandomforestclassifier property)": [[15, "sktree.ObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[15, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[15, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[16, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.obliquerandomforestregressor property)": [[16, "sktree.ObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[16, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.get_params"]], "predict() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[16, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[17, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.patchobliquerandomforestclassifier property)": [[17, "sktree.PatchObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[17, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[17, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[18, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.patchobliquerandomforestregressor property)": [[18, "sktree.PatchObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[18, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[18, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in sktree)": [[19, "sktree.RandomForestClassifier"]], "apply() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.apply"]], "base_estimator_ (sktree.randomforestclassifier property)": [[19, "sktree.RandomForestClassifier.base_estimator_"]], "decision_path() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.decision_path"]], "feature_importances_ (sktree.randomforestclassifier property)": [[19, "sktree.RandomForestClassifier.feature_importances_"]], "fit() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.get_params"]], "partial_fit() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.partial_fit"]], "predict() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.predict"]], "predict_log_proba() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.predict_quantiles"]], "score() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.score"]], "set_fit_request() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.set_fit_request"]], "set_params() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.randomforestclassifier method)": [[19, "sktree.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sktree)": [[20, "sktree.RandomForestRegressor"]], "apply() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.apply"]], "base_estimator_ (sktree.randomforestregressor property)": [[20, "sktree.RandomForestRegressor.base_estimator_"]], "decision_path() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.decision_path"]], "feature_importances_ (sktree.randomforestregressor property)": [[20, "sktree.RandomForestRegressor.feature_importances_"]], "fit() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.get_params"]], "predict() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.predict"]], "predict_quantiles() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.predict_quantiles"]], "score() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.score"]], "set_fit_request() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.set_fit_request"]], "set_params() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.set_params"]], "set_score_request() (sktree.randomforestregressor method)": [[20, "sktree.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[21, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedobliquerandomforest property)": [[21, "sktree.UnsupervisedObliqueRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[21, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[21, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[22, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedrandomforest property)": [[22, "sktree.UnsupervisedRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[22, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[22, "sktree.UnsupervisedRandomForest.transform"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[23, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[24, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[25, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[26, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[27, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[28, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[29, "sktree.experimental.simulate.simulate_sphere"]], "honesttreeclassifier (class in sktree.tree)": [[30, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[30, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.get_params"]], "partial_fit() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.partial_fit"]], "predict() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "score() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.score"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.honesttreeclassifier method)": [[30, "sktree.tree.HonestTreeClassifier.set_score_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[31, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[32, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[33, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[34, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[35, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[35, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[35, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[36, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[37, "sktree.tree.compute_forest_similarity_matrix"]]}})