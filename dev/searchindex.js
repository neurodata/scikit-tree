Search.setIndex({"docnames": ["api", "auto_examples/index", "auto_examples/plot_iris_dtc", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/plot_oblique_random_forest", "auto_examples/plot_overlapping_gaussians", "auto_examples/plot_projection_matrices", "auto_examples/sg_execution_times", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1"], "filenames": ["api.rst", "auto_examples/index.rst", "auto_examples/plot_iris_dtc.rst", "auto_examples/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/plot_oblique_random_forest.rst", "auto_examples/plot_overlapping_gaussians.rst", "auto_examples/plot_projection_matrices.rst", "auto_examples/sg_execution_times.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst"], "titles": ["API Documentation", "Examples", "Plot the decision surface of decision trees trained on the iris dataset", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Plot honest forest calibrations on overlapping gaussian simulations", "Plot the projection matrices of an oblique tree", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "What\u2019s new?"], "terms": {"sktree": [0, 2, 3, 4, 5, 6, 21, 23], "scikit": [0, 1, 2, 12, 13, 18, 19, 21, 22, 23, 27, 29], "manifold": [0, 6, 10, 11, 16, 17, 22, 29], "obliqu": [0, 1, 2, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 25, 26, 29], "random": [0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 25, 26, 29], "forest": [0, 1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 23, 25, 26, 29], "decis": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 25, 26], "tree": [0, 1, 7, 8, 9, 10, 11, 12, 13, 21, 22, 26, 27, 29], "model": [0, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 29], "ar": [0, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 27], "tradition": 0, "implement": [0, 6, 14, 15, 22, 23, 29], "axi": [0, 1, 2, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 22, 23, 25, 29], "align": [0, 1, 2, 7, 8, 9, 10, 11, 14, 15, 16, 17, 22, 23, 25], "split": [0, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "store": [0, 12, 13, 22, 23], "mean": [0, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 26, 29], "outcom": 0, "i": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 29], "e": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23], "label": [0, 2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24], "vote": [0, 8, 10, 12, 13], "leaf": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "node": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "howev": [0, 23], "more": [0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], "exot": 0, "possibl": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "call": [0, 8, 9, 10, 11, 15, 16, 17], "which": [0, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 21, 22, 23, 24], "some": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25], "function": [0, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "multipl": [0, 6, 23], "featur": [0, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 27, 28, 29], "column": [0, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 29], "creat": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22], "new": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 27], "valu": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "thi": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 27], "can": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 29], "take": [0, 2, 12, 13, 18, 19], "form": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "spars": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25], "linear": [0, 2], "combin": [0, 2, 8, 9, 12, 14, 15, 19, 22, 23, 24], "even": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "advantag": 0, "structur": [0, 2, 6, 16, 17, 24, 29], "data": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 29], "g": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "an": [0, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 29], "imag": [0, 6, 16, 17], "sampl": [0, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 29], "indic": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "awar": [0, 16, 17], "fashion": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "class": [0, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24], "gener": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 15, 16, 17, 22, 23, 24, 25, 29], "while": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "everyth": [0, 25], "els": [0, 4], "consist": [0, 4, 6, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 23], "how": [0, 1, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25], "learn": [0, 2, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25], "build": [0, 8, 9, 10, 11, 14, 15, 20, 21], "us": [0, 1, 3, 4, 5, 6, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 24, 26], "classif": [0, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 26], "regress": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26], "thei": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "also": [0, 2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23], "power": [0, 22], "non": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "parametr": [0, 23], "embed": 0, "cluster": [0, 5, 12, 13, 18, 19, 24], "The": [0, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "randomtreesembed": 0, "exampl": [0, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 24], "we": [0, 2, 5, 6, 20, 21, 22, 23, 24, 29], "other": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "state": 0, "art": 0, "explicitli": 0, "base": [0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24], "criterion": [0, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 29], "varianc": [0, 9, 11, 12, 13, 15, 17, 18, 19, 22, 24], "bic": [0, 12, 13, 18, 19, 26], "compris": [0, 16, 17], "those": [0, 8, 9, 10, 11, 14, 15, 22, 23], "avail": [0, 8, 9, 10, 11, 12, 13, 21], "standalon": 0, "demonstr": [1, 6, 25], "algorithm": [1, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 25], "plot": [1, 7, 8, 14, 16, 22, 25], "honest": [1, 7, 25], "calibr": [1, 7, 25], "overlap": [1, 7, 25], "gaussian": [1, 7, 24, 25], "simul": [1, 7, 8, 22, 25], "predict": [1, 2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 25], "cc18": [1, 7, 8, 22, 25], "dataset": [1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 22, 23, 25], "pariti": [1, 7, 8, 22, 25], "surfac": [1, 6, 7, 14, 25], "train": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 25], "iri": [1, 7, 14, 23, 25], "project": [1, 2, 4, 7, 8, 9, 14, 15, 16, 21, 22, 23, 25, 29], "matric": [1, 7, 12, 13, 16, 23, 25, 29], "download": [1, 2, 3, 4, 5, 6, 25], "all": [1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 27, 29], "python": [1, 2, 3, 4, 5, 6, 21, 25], "sourc": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25], "code": [1, 2, 3, 4, 5, 6, 18, 19, 21, 25], "auto_examples_python": [1, 25], "zip": [1, 2, 5, 25], "jupyt": [1, 2, 3, 4, 5, 6, 25], "notebook": [1, 2, 3, 4, 5, 6, 25], "auto_examples_jupyt": [1, 25], "galleri": [1, 2, 3, 4, 5, 6, 25], "sphinx": [1, 2, 3, 4, 5, 6, 25], "go": [2, 3, 4, 5, 6], "end": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "full": [2, 3, 4, 5, 6], "pair": 2, "see": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24], "inform": [2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "estim": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24], "For": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "each": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "boundari": [2, 6, 10, 11, 16, 17, 29], "made": 2, "simpl": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "threshold": [2, 23], "rule": 2, "infer": [2, 14, 15, 16, 17], "from": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20, 22, 23, 24], "same": [2, 6, 8, 9, 10, 11, 12, 13, 14, 16, 17, 22, 23], "regular": 2, "show": [2, 3, 6], "built": [2, 22, 23], "first": [2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23], "load": [2, 4], "copi": 2, "ship": 2, "sklearn": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24], "import": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 26], "load_iri": [2, 14, 23], "matplotlib": [2, 3, 4, 5, 6, 21], "pyplot": [2, 3, 4, 5, 6], "plt": [2, 3, 4, 5, 6], "displai": 2, "numpi": [2, 3, 5, 6, 10, 11, 14, 16, 17, 21], "np": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "inspect": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "decisionboundarydisplai": 2, "_lib": [2, 6], "decisiontreeclassifi": [2, 14, 15], "plot_tre": 2, "obliquedecisiontreeclassifi": [2, 8, 10, 15, 23], "paramet": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "n_class": [2, 8, 9, 10, 14, 16], "3": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], "plot_color": 2, "ryb": 2, "plot_step": 2, "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27], "02": 2, "clf_label": 2, "random_st": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "123456": [2, 3, 4], "clf": [2, 3, 4, 5, 8, 14, 23], "fig": [2, 3, 4, 5, 6], "ax": [2, 3, 4, 5, 6, 23], "subplot": [2, 3, 4, 5, 6], "2": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24], "flatten": [2, 6], "pairidx": 2, "enumer": [2, 3, 4, 6, 8, 9, 10, 11], "1": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27], "onli": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "two": [2, 4, 12, 13, 22, 26, 29], "correspond": [2, 8, 10, 11, 14, 15, 16, 17, 18, 19], "x": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24], "y": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "target": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "fit": [2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "tight_layout": [2, 5], "h_pad": 2, "5": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 22, 23], "w_pad": 2, "pad": 2, "from_estim": 2, "cmap": [2, 6], "cm": [2, 5], "rdylbu": 2, "response_method": 2, "xlabel": 2, "feature_nam": 2, "ylabel": 2, "point": [2, 3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "color": [2, 3, 4, 5, 6], "rang": [2, 3, 6, 16, 17], "idx": [2, 6], "where": [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 29], "scatter": [2, 5, 6], "c": [2, 5, 14, 15, 16, 17, 21], "target_nam": 2, "edgecolor": [2, 5], "black": [2, 6], "": [2, 3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 27], "15": 2, "suptitl": [2, 6], "f": [2, 3, 4, 6], "legend": [2, 3, 5], "loc": [2, 3, 5], "lower": [2, 23], "right": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "borderpad": 2, "handletextpad": 2, "_": 2, "tight": 2, "home": [2, 5], "circleci": [2, 5], "plot_iris_dtc": [2, 7], "py": [2, 3, 4, 5, 6, 7], "78": 2, "userwarn": 2, "No": 2, "colormap": 2, "provid": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "via": [2, 14, 15, 21, 22], "ignor": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "singl": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "togeth": [2, 23, 24], "figur": [2, 6], "fill": 2, "true": [2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "titl": [2, 6], "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "run": [2, 3, 4, 5, 6, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 21, 23], "time": [2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 23], "script": [2, 3, 4, 5, 6], "minut": [2, 3, 4, 5, 6], "475": [2, 7], "second": [2, 3, 4, 5, 6], "memori": [2, 3, 4, 5, 6, 8, 9, 10, 11, 14, 15], "usag": [2, 3, 4, 5, 6], "14": [2, 6, 7], "mb": [2, 3, 4, 5, 6, 7], "ipynb": [2, 3, 4, 5, 6], "A": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 29], "perform": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24], "comparison": [3, 4], "between": [3, 4, 14, 15, 16, 17, 18, 19, 23], "standard": [3, 4, 16, 17, 23], "variat": 3, "noisi": 3, "problem": [3, 8, 10, 14, 16, 20, 26], "itself": [3, 12, 13], "multivari": [3, 6, 16, 17], "xor": 3, "binari": 3, "task": [3, 20], "high": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "dimens": [3, 6, 10, 11, 12, 13, 16, 17, 18, 19, 23], "uniformli": [3, 6], "distribut": [3, 23, 24], "n_sampl": [3, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "number": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "p": [3, 5, 8, 10, 22], "limit": [3, 26], "carri": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "about": [3, 23], "defin": [3, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "odd": 3, "sum": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "across": [3, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19], "greater": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "than": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "otherwis": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "further": 3, "detail": [3, 4, 6, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19], "public": [3, 6, 22], "http": [3, 4, 13, 14, 15, 21, 23], "epub": 3, "siam": 3, "org": [3, 4, 13, 14, 15, 21, 23], "doi": [3, 13, 23], "epdf": 3, "10": [3, 5, 13, 14, 15, 17, 23], "1137": 3, "9781611974973": 3, "56": 3, "It": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24], "took": [3, 4], "6": [3, 4, 6, 7, 21], "datetim": [3, 4], "panda": [3, 4, 12, 13, 18, 19, 29], "pd": [3, 4], "seaborn": [3, 4], "sn": [3, 4], "ensembl": [3, 4, 5, 8, 9, 10, 11, 12, 13, 22], "randomforestclassifi": [3, 4, 5, 8, 10], "model_select": [3, 4, 5, 14, 15, 17], "repeatedkfold": [3, 4], "cross_valid": [3, 4], "obliquerandomforestclassifi": [3, 4, 22], "t0": [3, 4], "now": [3, 4, 6, 21, 29], "def": [3, 4, 5], "sparse_par": 3, "20": [3, 13], "p_star": 3, "random_se": 3, "none": [3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "kwarg": [3, 4], "seed": [3, 12, 13], "uniform": 3, "zero": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "return": [3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "get_scor": [3, 4], "n_cv": [3, 4], "n_repeat": [3, 4], "tmp": [3, 4], "cv": [3, 4, 5, 14, 15, 17], "n_split": [3, 4], "test_scor": [3, 4], "score": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "accuraci": [3, 4, 8, 9, 10, 11, 14, 16], "append": [3, 4], "rf": [3, 4, 5, 23], "OF": [3, 4], "df": [3, 4], "datafram": [3, 4, 12, 13, 18, 19], "explod": [3, 4], "astyp": [3, 4, 6], "float": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "reset_index": [3, 4], "inplac": [3, 4], "drop": [3, 4, 23], "grid": [3, 6], "search": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "hyper": 3, "param": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "max_featur": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "n_estim": [3, 4, 5, 8, 9, 10, 11, 12, 13], "100": [3, 4, 5, 6, 8, 9, 10, 11, 12, 13], "max_depth": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "40": 3, "1000": [3, 8], "t_d": 3, "print": [3, 4, 6, 8, 9, 11], "draw": [3, 4, 8, 9, 10, 11, 12, 13], "figsiz": [3, 5, 6], "stripplot": [3, 4], "dodg": [3, 4], "boxplot": [3, 4], "white": [3, 4], "set_titl": [3, 4], "queri": [3, 4], "iloc": [3, 4], "rff": 3, "test": [3, 5, 8, 9, 10, 11, 14, 15, 16, 17, 21], "round": [3, 8, 9, 10, 11], "off": 3, "4": [3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16], "savefig": [3, 5], "plot_sim_": 3, "jpg": 3, "7": [3, 7], "513": [3, 7, 13], "9": [3, 4, 5, 6, 7, 21, 29], "plot_oblique_axis_aligned_forests_sparse_par": [3, 7], "three": 4, "openml": 4, "benchmark": [4, 20], "suit": 4, "name": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "wdbc": 4, "www": [4, 14, 15], "type": [4, 23, 29], "sort": [4, 5, 24], "id": 4, "1510": 4, "phish": 4, "websit": 4, "4534": 4, "31": 4, "former": 4, "entir": [4, 10, 11, 16, 17], "numer": 4, "latter": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "normin": 4, "third": 4, "dub": 4, "cnae": 4, "statu": 4, "activ": [4, 21], "1468": 4, "ha": [4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 29], "notabl": 4, "larg": [4, 8, 9, 10, 11, 14, 15], "space": [4, 12, 13, 18, 19, 23], "857": 4, "As": [4, 23], "you": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 25], "notic": 4, "outperform": [4, 23], "util": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "mechan": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "subsampl": 4, "due": 4, "comput": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 29], "constraint": 4, "phishingwebsit": 4, "25": [4, 5, 6], "fetch_openml": 4, "data_id": 4, "load_cc18": 4, "as_fram": 4, "parser": 4, "extract": 4, "d_name": 4, "n": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 24, 29], "int": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "frame": 4, "shape": [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "8": [4, 6, 21], "dtype": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "object": [4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "50": [4, 5], "concat": 4, "uniqu": [4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "set_size_inch": 4, "set_ylabel": [4, 5], "set_xlabel": [4, 5], "26": [4, 7], "321": [4, 7], "49": [4, 7], "plot_oblique_random_forest": [4, 7], "compar": [5, 14, 15, 16, 17, 26], "result": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "variou": [5, 8, 9, 10, 11], "method": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "pyenv": 5, "version": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 27], "17": [5, 14, 15, 16, 17, 18, 19], "lib": 5, "python3": 5, "site": 5, "packag": [5, 20, 21], "301": 5, "futurewarn": 5, "base_estim": 5, "wa": [5, 8, 9, 10, 12, 13, 23], "renam": 5, "remov": 5, "warn": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "calibratedclassifiercv": 5, "train_test_split": 5, "honestforestclassifi": [5, 29], "color_dict": 5, "honestrf": 5, "f41711": 5, "1b9e77": 5, "sigrf": 5, "377eb8": 5, "irf": 5, "fdae61": 5, "n_job": [5, 8, 9, 10, 11, 12, 13], "clf_cv": 5, "rep": 5, "honest_fract": 5, "isoton": 5, "sigmoid": 5, "likelihood": [5, 24], "lik1": 5, "prod": 5, "exp": 5, "asarrai": 5, "lik0": 5, "60000": 5, "n_bin": 5, "bin": 5, "calibration_curv": 5, "have": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "here": [5, 6, 23, 25, 29], "blob": 5, "contain": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "half": 5, "posit": [5, 22, 24], "neg": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "probabl": [5, 8, 10, 12, 13, 14, 16, 23], "therefor": [5, 8, 9, 10, 11, 16, 17, 22, 23], "center": [5, 12, 13, 18, 19], "make_blob": 5, "shuffl": [5, 8, 9, 11], "fals": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "42": [5, 22], "sample_weight": [5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "randomst": [5, 6, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19], "rand": 5, "x_train": 5, "x_test": 5, "y_train": 5, "y_test": 5, "sw_train": 5, "sw_test": 5, "test_siz": 5, "class_one_prob": 5, "predict_proba": [5, 8, 10, 14, 16], "y_uniqu": 5, "rainbow": 5, "linspac": 5, "size": [5, 6, 8, 9, 10, 11, 14, 15, 16, 17], "this_i": 5, "this_x": 5, "this_sw": 5, "newaxi": 5, "alpha": [5, 6, 14, 15, 16, 17, 18, 19], "k": 5, "best": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "set_xtick": 5, "set_ytick": 5, "clf_name": 5, "prob": 5, "item": 5, "order": [5, 8, 9, 10, 14, 15, 16, 17], "lexsort": 5, "51": 5, "reshap": [5, 6], "x_test_prob": 5, "linewidth": 5, "l": [5, 14, 15, 22, 23, 24], "r": [5, 8, 9, 10, 11, 14, 15, 16, 17, 21, 23], "truth": [5, 23], "set_ylim": 5, "05": 5, "instanc": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "upper": 5, "left": [5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "overlapping_gaussian": 5, "png": 5, "767": [5, 7], "61": [5, 29], "plot_overlapping_gaussian": [5, 7], "specif": [6, 8, 10, 23], "patchobliquedecisiontreeclassifi": [6, 10], "one": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "specifi": [6, 8, 10, 14, 16, 23], "done": [6, 16, 17, 22], "data_dim": [6, 10, 11, 16, 17], "should": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "set": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24], "n_row": 6, "n_col": 6, "row": [6, 16, 17], "arrai": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "length": 6, "If": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "n_depth": 6, "allow": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "ani": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29], "still": 6, "compat": [6, 12, 13, 18, 19], "robust": [6, 20], "api": [6, 12, 13, 16, 17, 18, 19, 20, 21, 27, 28, 29], "These": [6, 22], "calcul": [6, 24], "dure": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "hyperrectangl": 6, "start": [6, 21], "squar": [6, 9, 11, 15, 17], "min_patch_dim": [6, 10, 11, 16, 17], "max_patch_dim": [6, 10, 11, 16, 17], "constrain": [6, 23], "within": [6, 12, 13, 14, 15, 16, 17, 18, 19, 21], "bound": 6, "arbitrarili": [6, 9, 11, 15, 17], "hyperparamet": [6, 23], "relat": 6, "modul": [6, 20], "note": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23, 27], "privat": 6, "cython": [6, 18, 19, 21], "what": [6, 14, 15, 16, 17, 18, 19, 20, 27], "look": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25], "like": [6, 14, 15, 16, 17, 18, 19, 21, 23, 24], "part": 6, "just": [6, 8, 9, 10, 11, 21], "wrapper": 6, "underli": [6, 14, 15, 16, 17], "actual": 6, "To": [6, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 21, 25], "relev": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "_criterion": 6, "gini": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "_morf_splitt": 6, "bestpatchsplittertest": 6, "dummi": 6, "sake": 6, "min_samples_leaf": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "min_weight_leaf": 6, "feature_weight": [6, 10, 11, 16, 17], "repeat": 6, "arang": 6, "float32": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "float64": [6, 15, 17], "ones": 6, "our": [6, 20, 23], "th": [6, 8, 9, 10, 11, 12, 13], "visual": 6, "appear": 6, "make": [6, 22, 29], "contigu": [6, 10, 11, 16, 17], "dim_contigu": [6, 10, 11, 16, 17], "init_test": 6, "matrix": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "proj_mat": 6, "sample_projection_matrix": 6, "nrow": 6, "ncol": 6, "12": 6, "sharex": 6, "sharei": 6, "squeez": 6, "imshow": 6, "viridi": 6, "xlim": 6, "ylim": 6, "add_subplot": 6, "z": 6, "nonzero": 6, "marker": 6, "o": [6, 23, 29], "custom": [6, 12, 13], "set_zlim": 6, "01": 6, "125": 6, "analyz": 6, "necessarili": [6, 22], "certain": 6, "seri": [6, 16, 17], "n_channel": 6, "n_time": 6, "channel": 6, "In": [6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 29], "dim": 6, "585": [6, 7], "plot_projection_matric": [6, 7], "00": 7, "46": 7, "661": 7, "execut": 7, "auto_exampl": 7, "file": [7, 21], "07": 7, "04": 7, "60": 7, "03": 7, "13": 7, "min_samples_split": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "min_weight_fraction_leaf": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "sqrt": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "max_leaf_nod": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "min_impurity_decreas": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "bootstrap": [8, 9, 10, 11, 12, 13, 22], "oob_scor": [8, 9, 10, 11, 12, 13], "verbos": [8, 9, 10, 11, 12, 13, 21], "warm_start": [8, 9, 10, 11, 12, 13], "class_weight": [8, 10, 14, 16], "max_sampl": [8, 9, 10, 11, 12, 13], "feature_combin": [8, 9, 12, 14, 15, 19, 22, 23], "classifi": [8, 10, 14, 15, 16], "meta": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "similar": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 29], "sub": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "averag": [8, 9, 10, 11, 12, 14, 15, 19, 22], "improv": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23, 29], "control": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22, 23], "over": [8, 9, 10, 11, 16, 17, 22], "default": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "whole": [8, 9, 10, 11], "read": [8, 9, 14, 15], "user": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 29], "guid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 29], "entropi": [8, 10, 14, 16], "measur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "qualiti": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24], "support": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23], "criteria": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "impur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "gain": [8, 10, 14, 16], "maximum": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "depth": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "expand": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "until": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "leav": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "pure": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "less": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "minimum": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "requir": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "intern": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "consid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "fraction": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "ceil": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "least": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "branch": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "mai": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24], "effect": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25], "smooth": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "especi": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "weight": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 29], "input": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "equal": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "when": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 27], "log2": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "n_featur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "auto": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "doe": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 22, 23], "stop": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "valid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "partit": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 23], "found": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "grow": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "rel": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 24], "reduct": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "unlimit": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "induc": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "decreas": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "equat": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "follow": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24], "n_t": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "n_t_r": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "right_impur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "n_t_l": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "left_impur": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "current": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23], "child": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "refer": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "pass": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 29], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "whether": [8, 9, 10, 11, 12, 13, 16, 17, 18, 19], "out": [8, 9, 10, 11, 12, 13, 22], "bag": [8, 9, 10, 11, 12, 13], "job": [8, 9, 10, 11], "parallel": [8, 9, 10, 11, 12, 13], "decision_path": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "appli": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "unless": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "joblib": [8, 9, 10, 11, 12, 13, 21], "parallel_backend": [8, 9, 10, 11], "context": [8, 9, 10, 11], "processor": [8, 9, 10, 11], "glossari": [8, 9, 10, 11, 14, 15, 16, 17], "both": [8, 9, 10, 11, 23], "reus": [8, 9, 10, 11], "solut": [8, 9, 10, 11], "previou": [8, 9, 10, 11, 12, 13], "add": [8, 9, 10, 11, 21, 29], "balanc": [8, 10, 14, 16], "balanced_subsampl": [8, 10], "dict": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "list": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 29], "associ": [8, 10, 13, 14, 16, 23], "class_label": [8, 10, 14, 16], "given": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24], "suppos": [8, 10, 14, 16], "multi": [8, 10, 14, 16, 26], "output": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26], "multioutput": [8, 9, 10, 11, 14, 15, 16, 17], "includ": [8, 10, 14, 16, 29], "multilabel": [8, 10, 14, 16], "everi": [8, 10, 11, 14, 16, 17, 23], "its": [8, 9, 10, 11, 12, 13, 14, 16, 23], "own": [8, 10, 14, 16], "four": [8, 10, 14, 16], "instead": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "mode": [8, 10, 14, 16, 21], "automat": [8, 10, 14, 16], "adjust": [8, 10, 14, 16], "invers": [8, 10, 14, 16], "proport": [8, 10, 14, 16], "frequenc": [8, 10, 14, 16], "bincount": [8, 10, 14, 16], "except": [8, 9, 10, 11, 15, 17, 22], "grown": [8, 9, 10, 11, 14, 15], "multipli": [8, 10, 14, 16], "through": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "thu": [8, 9, 10, 11, 12, 13, 14, 15, 22, 24], "interv": [8, 9, 10, 11, 12, 13], "equival": [8, 9, 14, 15, 23], "tradit": [8, 9, 14, 15], "give": [8, 9, 10, 11, 12, 13, 14, 15], "expect": [8, 9, 11, 14, 15, 16, 17, 22], "must": [8, 9, 14, 15, 18, 19], "alwai": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 21, 23], "etc": [8, 9, 10, 11, 14, 15], "lead": [8, 9, 10, 11, 14, 15, 22], "fulli": [8, 9, 10, 11, 14, 15], "unprun": [8, 9, 10, 11, 14, 15], "potenti": [8, 9, 10, 11, 14, 15, 17], "veri": [8, 9, 10, 11, 14, 15], "reduc": [8, 9, 10, 11, 14, 15, 22], "consumpt": [8, 9, 10, 11, 14, 15], "complex": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 26], "randomli": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19], "permut": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22], "vari": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19], "ident": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19], "sever": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 22], "obtain": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "determinist": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19], "behaviour": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19], "fix": [8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 27, 28, 29], "breiman": [8, 9, 14, 15, 22, 23], "machin": [8, 9, 22, 23], "45": [8, 9, 22, 23, 29], "32": [8, 9, 22, 23], "2001": [8, 9, 22, 23], "make_classif": 8, "n_inform": [8, 9, 11], "n_redund": 8, "attribut": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "base_estimator_": [8, 9, 10, 11, 12, 13], "estimators_": [8, 9, 10, 11, 12, 13], "collect": [8, 9, 10, 11, 12, 13], "classes_": [8, 10, 14, 16], "ndarrai": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "n_classes_": [8, 10, 14, 16], "n_features_": [8, 9, 10, 11], "n_features_in_": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "seen": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "feature_names_in_": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "string": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "n_outputs_": [8, 9, 10, 11, 14, 15, 16, 17], "feature_importances_": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "oob_score_": [8, 9, 10, 11, 12, 13], "exist": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "oob_decision_function_": [8, 9, 10, 12, 13], "n_output": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "small": [8, 9, 10, 12, 13], "might": [8, 9, 10, 12, 13, 23], "never": [8, 9, 10, 12, 13], "case": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "nan": [8, 9, 10, 12, 13], "array_lik": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "convert": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "csr_matrix": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "x_leav": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "datapoint": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "index": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23], "up": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "compute_similarity_matrix": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "sim_matrix": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "among": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "path": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "18": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "n_node": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "element": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "goe": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "csr": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "format": [8, 9, 10, 11, 12, 13, 18, 19], "n_nodes_ptr": [8, 9, 10, 11, 12, 13], "csc_matrix": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "real": [8, 9, 10, 11, 15, 17], "would": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 23], "net": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "either": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "self": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "get_metadata_rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "get": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "metadata": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "pleas": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "check": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "work": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "metadatarequest": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "encapsul": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "get_param": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "deep": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "subobject": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "map": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "That": [8, 10, 12, 13, 14, 15, 16, 17, 18, 19], "highest": [8, 10, 12, 13, 14], "predict_log_proba": [8, 10, 14, 16], "log": [8, 10, 14, 16, 23, 24], "subset": [8, 10, 14, 16, 23], "harsh": [8, 10, 14, 16], "metric": [8, 10, 12, 13, 14, 16, 24], "sinc": [8, 10, 14, 16, 29], "correctli": [8, 10, 14, 16], "w": [8, 9, 10, 11, 14, 15, 16, 17], "t": [8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 23], "set_fit_request": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "unchang": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "request": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "enable_metadata_rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "set_config": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "option": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21], "rais": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "error": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "str": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "alia": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "origin": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "metadata_rout": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "retain": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "chang": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29], "insid": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29], "pipelin": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "updat": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "set_param": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "well": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "nest": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "compon": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "__": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "so": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23], "set_score_request": [8, 9, 10, 11, 14, 15, 16, 17], "properti": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "higher": [8, 9, 10, 11, 12, 13, 22, 23], "normal": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 29], "brought": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "known": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "mislead": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "cardin": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "mani": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "permutation_import": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "altern": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22], "root": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "squared_error": [9, 11, 15, 17], "regressor": [9, 11, 15, 17], "absolute_error": [9, 11, 15, 17], "friedman_ms": [9, 11, 15, 17], "poisson": [9, 11, 15, 17], "select": [9, 11, 14, 15, 16, 17, 18, 19, 22], "minim": [9, 11, 14, 15, 16, 17, 18, 19, 23, 24], "l2": [9, 11, 15, 17], "loss": [9, 11, 15, 17, 23], "termin": [9, 11, 15, 17], "friedman": [9, 11, 14, 15, 17, 23], "absolut": [9, 11, 15, 17], "l1": [9, 11, 15, 17], "median": [9, 11, 15, 17], "devianc": [9, 11, 15, 17], "find": [9, 11, 14, 15, 16, 17, 18, 19, 24], "significantli": [9, 11], "slower": [9, 11], "obliquedecisiontreeregressor": [9, 11, 29], "randomforestregressor": [9, 11], "tomita": [9, 10, 11, 16, 17, 22], "journal": 9, "research": [9, 20], "21": [9, 29], "104": 9, "39": 9, "2020": [9, 13], "make_regress": [9, 11], "regr": 9, "86327109": 9, "coeffici": [9, 11, 15, 17], "determin": [9, 11, 15, 17], "frac": [9, 11, 15, 17, 24], "u": [9, 11, 15, 17, 21, 22], "v": [9, 11, 15, 17, 22, 23], "residu": [9, 11, 15, 17], "y_true": [9, 11, 15, 17], "y_pred": [9, 11, 15, 17], "becaus": [9, 11, 15, 17, 23], "wors": [9, 11, 15, 17], "constant": [9, 11, 15, 17], "disregard": [9, 11, 15, 17], "precomput": [9, 11, 15, 17], "kernel": [9, 11, 15, 17, 29], "n_samples_fit": [9, 11, 15, 17], "uniform_averag": [9, 11, 15, 17], "23": [9, 11, 15, 17, 21], "keep": [9, 11, 15, 17], "r2_score": [9, 11, 15, 17], "influenc": [9, 11, 15, 17], "multioutputregressor": [9, 11, 15, 17], "patch": [10, 11, 16, 17, 29], "along": [10, 11, 16, 17, 23], "presum": [10, 11, 16, 17], "un": [10, 11, 16, 17], "vector": [10, 11, 16, 17, 23, 24], "1d": [10, 11, 16, 17], "wrap": [10, 11, 16, 17], "condit": [10, 11, 16, 17], "scipi": [10, 11, 16, 17, 21], "adam": [10, 11, 16, 17, 22, 29], "li": [10, 11, 13, 16, 17, 22, 29], "ronan": [10, 11, 16, 17, 29], "perri": [10, 11, 16, 17, 29], "chester": [10, 11, 16, 17], "huynh": [10, 11, 16, 17], "tyler": [10, 11, 16, 17, 22], "m": [10, 11, 16, 17, 22, 23], "ronak": [10, 11, 16, 17], "mehta": [10, 11, 16, 17], "jesu": [10, 11, 16, 17], "arroyo": [10, 11, 16, 17], "jess": [10, 11, 16, 17], "patsol": [10, 11, 16, 17], "benjamin": [10, 11, 16, 17], "falk": [10, 11, 16, 17], "joshua": [10, 11, 13, 16, 17], "vogelstein": [10, 11, 13, 16, 17], "toward": [10, 11, 16, 17, 22], "close": [10, 11, 16, 17, 22], "gap": [10, 11, 14, 15, 16, 17, 18, 19, 22], "convolut": [10, 11, 16, 17, 22], "network": [10, 11, 16, 17, 22], "arxiv": [10, 11, 16, 17, 22], "preprint": [10, 11, 16, 17, 22], "1909": [10, 11, 16, 17, 22], "11799": [10, 11, 16, 17, 22], "2019": [10, 11, 16, 17, 22], "82818509": 11, "patchobliquedecisiontreeregressor": [11, 29], "oob_prediction_": 11, "twomean": [12, 13, 18, 19], "clustering_func": [12, 13, 18, 19], "clustering_func_arg": [12, 13, 18, 19], "unsupervis": [12, 13, 18, 19, 20, 26, 29], "inher": [12, 13], "simultan": [12, 13], "adapt": [12, 13, 24], "affin": [12, 13, 18, 19], "distanc": [12, 13, 14, 15, 16, 17, 18, 19, 24], "do": [12, 13, 14, 15, 16, 17, 18, 19, 22, 23], "fall": [12, 13], "fastbic": [12, 13, 18, 19, 29], "maxim": [12, 13], "bayesian": [12, 13, 24], "mathemat": [12, 13, 26], "formul": [12, 13, 26], "recommend": [12, 13, 14, 15, 16, 17, 20, 23], "max": [12, 13, 18, 19, 23], "callabl": [12, 13, 18, 19], "By": [12, 13, 18, 19, 22], "calinski_harabasz_scor": [12, 13], "signatur": [12, 13], "predicted_label": [12, 13], "silhouette_scor": [12, 13], "davies_bouldin_scor": [12, 13], "cpu": [12, 13], "construct": [12, 13, 22, 23], "continu": [12, 13], "instant": [12, 13], "agglomerativeclust": [12, 13, 18, 19], "keyword": [12, 13, 18, 19], "argument": [12, 13, 18, 19], "estimator_": [12, 13], "unsuperviseddecisiontre": [12, 13], "templat": [12, 13], "labels_": [12, 13], "similarity_matrix_": [12, 13], "oob": [12, 13], "dissimilarity_matrix_": [12, 13], "dissimilar": [12, 13, 29], "effici": [12, 13, 15, 17, 27, 28, 29], "Not": [12, 13, 18, 19], "present": [12, 13, 18, 19, 23], "convent": [12, 13, 18, 19], "fit_predict": [12, 13, 18, 19], "int64": [12, 13, 18, 19], "fit_transform": [12, 13, 18, 19], "fit_param": [12, 13, 18, 19], "transform": [12, 13, 18, 19], "addit": [12, 13, 18, 19, 23], "x_new": [12, 13, 18, 19], "n_features_new": [12, 13, 18, 19], "set_output": [12, 13, 18, 19], "introduc": [12, 13, 18, 19], "configur": [12, 13, 18, 19], "typic": [12, 13, 18, 19, 23], "dens": [12, 13, 18, 19, 23], "meghana": 13, "madhyastha": 13, "perci": 13, "jame": 13, "brown": 13, "veronika": 13, "strnadova": 13, "neelei": 13, "carei": 13, "prieb": 13, "randal": 13, "burn": 13, "geodes": 13, "proceed": 13, "26th": 13, "acm": 13, "sigkdd": 13, "confer": 13, "knowledg": [13, 23], "discoveri": 13, "mine": 13, "kdd": 13, "523": 13, "york": 13, "ny": 13, "usa": 13, "machineri": 13, "url": 13, "1145": 13, "3394486": 13, "3403094": 13, "splitter": [14, 15, 16, 17, 18, 19], "strategi": [14, 15, 16, 17, 18, 19], "choos": [14, 15, 16, 17, 18, 19], "befor": [14, 15, 16, 17, 18, 19], "them": [14, 15, 16, 17, 18, 19, 22], "But": [14, 15, 16, 17, 18, 19], "differ": [14, 15, 16, 17, 18, 19, 26], "integ": [14, 15, 16, 17, 18, 19], "fact": [14, 15], "better": [14, 15, 22], "caveat": [14, 15], "increas": [14, 15, 22], "willing": [14, 15, 23], "spend": [14, 15, 23], "resourc": [14, 15, 23], "oper": [14, 16, 17], "argmax": 14, "ti": 14, "lowest": 14, "en": [14, 15, 23], "wikipedia": [14, 15, 23], "wiki": [14, 15, 23], "decision_tree_learn": [14, 15, 23], "j": [14, 15, 21, 23], "olshen": [14, 15], "stone": [14, 15], "wadsworth": [14, 15], "belmont": [14, 15], "ca": [14, 15], "1984": [14, 15], "hasti": [14, 15, 23], "tibshirani": [14, 15, 23], "statist": [14, 15, 22, 23], "springer": [14, 15, 23], "2009": [14, 15, 23], "cutler": [14, 15], "stat": [14, 15], "berkelei": [14, 15], "edu": [14, 15], "randomforest": [14, 15], "cc_home": [14, 15], "htm": [14, 15], "cross_val_scor": [14, 15, 17], "93": 14, "86": 14, "max_features_": [14, 15, 16, 17], "tree_": [14, 15, 16, 17, 18, 19], "help": [14, 15, 16, 17], "_tree": [14, 15, 16, 17], "feature_combinations_": [14, 15], "taken": [14, 15, 22], "check_input": [14, 15, 16, 17, 18, 19], "bypass": [14, 15, 16, 17, 18, 19], "don": [14, 15, 16, 17, 18, 19], "know": [14, 15, 16, 17, 18, 19], "re": [14, 15, 16, 17, 18, 19], "node_count": [14, 15, 16, 17, 18, 19], "possibli": [14, 15, 16, 17, 18, 19, 23], "cost_complexity_pruning_path": [14, 15, 16, 17, 18, 19], "prune": [14, 15, 16, 17, 18, 19, 23], "cost": [14, 15, 16, 17, 18, 19, 22, 23], "process": [14, 15, 16, 17, 18, 19], "ccp_path": [14, 15, 16, 17, 18, 19], "bunch": [14, 15, 16, 17, 18, 19], "dictionari": [14, 15, 16, 17, 18, 19], "ccp_alpha": [14, 15, 16, 17, 18, 19], "subtre": [14, 15, 16, 17, 18, 19], "get_depth": [14, 15, 16, 17, 18, 19], "get_n_leav": [14, 15, 16, 17, 18, 19], "n_leav": [14, 15, 16, 17, 18, 19], "proba": [14, 16], "set_predict_proba_request": [14, 16], "set_predict_request": [14, 15, 16, 17, 18, 19], "decisiontreeregressor": 15, "load_diabet": [15, 17], "return_x_i": [15, 17], "68908909": 15, "35854406": 15, "35223873": 15, "03616902": 15, "56008907": 15, "32235221": 15, "06945264": 15, "1465216": 15, "34597007": 15, "15308512": 15, "morf": [16, 17, 29], "discontigu": [16, 17], "sensor": [16, 17], "2d": [16, 17], "mask": [16, 17], "onto": [16, 17], "data_width": [16, 17], "data_height": [16, 17], "tt": [16, 17], "last": [16, 17], "height": [16, 17], "width": [16, 17], "exactli": [16, 17, 22], "albeit": [16, 17], "efficienc": [16, 17], "optim": [16, 17, 23], "your": [16, 17, 20], "min_patch_dims_": [16, 17], "max_patch_dims_": [16, 17], "data_dims_": [16, 17], "rg": 17, "10163671": 17, "78786738": 17, "01490768": 17, "32737289": 17, "24816698": 17, "41881754": 17, "0588273": 17, "48722913": 17, "07927208": 17, "15600762": 17, "unsupervisedcriterion": [18, 19], "abid": [18, 19], "unsupervisedsplitt": [18, 19], "assign": [18, 19, 24], "modern": 20, "supervis": [20, 24, 26], "extend": [20, 23], "achiev": [20, 22], "strong": 20, "encourag": 20, "top": [20, 22], "pull": 20, "walk": 20, "contribut": [20, 22, 29], "licens": 20, "under": 20, "bsd": 20, "document": [20, 22], "evalu": [20, 26], "releas": 20, "histori": 20, "instal": 20, "depend": 20, "pip": 20, "meson": 20, "conda": 20, "pypi": 21, "poetri": 21, "clone": 21, "repositori": 21, "neurodata": 21, "git": 21, "github": 21, "com": 21, "cd": 21, "ideal": 21, "virtual": 21, "environ": 21, "dev": 21, "Then": 21, "build_requir": 21, "txt": 21, "spin": 21, "cli": 21, "local": 21, "abl": [21, 25], "edit": 21, "pend": 21, "isol": 21, "repo": 21, "zipbal": 21, "master": 21, "necessari": 21, "forg": 21, "threadpoolctl": 21, "pytest": 21, "compil": 21, "llvm": 21, "openmp": 21, "next": 21, "directori": 21, "dodiscov": 21, "purpos": 21, "main": 21, "obliquepr": 21, "need": [21, 23, 25], "develop": [21, 29], "pr": 21, "22754": 21, "checkout": 21, "page": [21, 27], "instruct": 21, "obliquerandomforestregressor": [22, 29], "drawn": 22, "replac": 22, "divers": 22, "sometim": 22, "slight": 22, "bia": 22, "aim": 22, "motiv": 22, "therebi": [22, 23], "practic": [22, 26], "often": [22, 24], "signific": 22, "henc": 22, "yield": 22, "overal": 22, "contrast": 22, "b2001": 22, "candid": [22, 23], "intuit": [22, 23], "geurt": 22, "d": 22, "ernst": 22, "wehenkel": 22, "extrem": 22, "63": [22, 29], "2006": 22, "rank": 22, "assess": 22, "respect": [22, 24], "variabl": [22, 23], "final": [22, 23], "larger": 22, "essenti": 22, "abil": 22, "mdi": 22, "l2014": 22, "approach": 22, "li2019": 22, "tomita2015": 22, "suffer": 22, "flaw": 22, "conclus": 22, "deriv": 22, "most": [22, 23], "good": 22, "held": 22, "secondli": 22, "favor": 22, "explor": 22, "whose": 22, "match": 22, "loupp": 22, "understand": 22, "theori": 22, "phd": 22, "thesi": 22, "lieg": 22, "2014": 22, "et": 22, "al": 22, "1506": 22, "03410": 22, "2015": 22, "ground": 23, "denot": 23, "describ": 23, "beyond": 23, "dt": 23, "ot": 23, "ref": 23, "rc": 23, "landmark": 23, "paper": 23, "empir": 23, "varieti": [23, 24], "lambda": 23, "tradeoff": 23, "wherea": 23, "curv": 23, "similarli": 23, "anoth": 23, "major": [23, 27, 28, 29], "definit": 23, "n_": 23, "x_i": [23, 24], "recurs": 23, "group": [23, 24], "manner": 23, "orthogon": 23, "a_i": 23, "inner": 23, "product": 23, "langl": 23, "rangl": 23, "entri": 23, "rest": 23, "being": 23, "let": 23, "repres": 23, "q_m": 23, "n_m": 23, "theta": 23, "t_m": 23, "x_j": 23, "leq": 23, "setminu": 23, "e_i": 23, "basi": 23, "elsewher": 23, "h": 23, "exact": 23, "handl": 23, "ad": 23, "_featur": 23, "term": [23, 24], "come": 23, "sparsiti": 23, "consider": 23, "pickl": 23, "disc": 23, "special": 23, "earlier": 23, "runtim": 23, "sai": 23, "desir": 23, "analysi": 23, "much": 23, "storag": 23, "ask": 23, "question": 23, "try": 23, "cross": 23, "procedur": 23, "gridsearchcv": 23, "prior": [23, 24], "There": 23, "moreov": 23, "miss": 23, "imput": 23, "1023": 23, "1010933404324": 23, "predictive_analyt": 23, "quinlan": 23, "c4": 23, "program": 23, "morgan": 23, "kaufmann": 23, "1993": 23, "goal": 24, "identifi": 24, "pattern": 24, "without": 24, "common": 24, "techniqu": 24, "wai": 24, "overview": 24, "cutpoint": 24, "dimension": [24, 29], "cutoff": 24, "min_": 24, "sum_": 24, "hat": 24, "mu": 24, "_1": 24, "_2": 24, "sample_indic": 24, "popular": 24, "seleciton": 24, "speed": 24, "kmean": 24, "flexibl": 24, "mclust": 24, "tri": 24, "mle": 24, "hard": 24, "rather": 24, "soft": 24, "gmm": 24, "simpler": 24, "pi": 24, "mathcal": 24, "x_n": 24, "sigma": 24, "quad": 24, "le": 24, "mu_j": 24, "natur": 24, "notion": 24, "efficaci": 24, "scheme": 24, "adjusted_rand_scor": 24, "tip": [26, 27], "fast": 26, "enhanc": [27, 28, 29], "link": 27, "subscrib": 27, "librari": [27, 29], "io": 27, "notifi": 27, "11": 29, "jong": 29, "shin": 29, "bug": 29, "outsid": 29, "arbitrari": 29, "discontinu": 29, "sambit": 29, "64": 29, "per": 29, "67": 29, "70": 29, "patchobliquerandomforestregressor": 29, "suki": 29, "72": 29, "honesttreeclassifi": 29, "haoyin": 29, "xu": 29, "57": 29, "thank": 29, "everyon": 29, "who": 29, "mainten": 29, "incept": 29}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[8, 1, 1, "", "ObliqueRandomForestClassifier"], [9, 1, 1, "", "ObliqueRandomForestRegressor"], [10, 1, 1, "", "PatchObliqueRandomForestClassifier"], [11, 1, 1, "", "PatchObliqueRandomForestRegressor"], [12, 1, 1, "", "UnsupervisedObliqueRandomForest"], [13, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ObliqueRandomForestClassifier": [[8, 2, 1, "", "apply"], [8, 3, 1, "", "base_estimator_"], [8, 2, 1, "", "compute_similarity_matrix"], [8, 2, 1, "", "decision_path"], [8, 3, 1, "", "feature_importances_"], [8, 2, 1, "", "fit"], [8, 2, 1, "", "get_metadata_routing"], [8, 2, 1, "", "get_params"], [8, 2, 1, "", "predict"], [8, 2, 1, "", "predict_log_proba"], [8, 2, 1, "", "predict_proba"], [8, 2, 1, "", "score"], [8, 2, 1, "", "set_fit_request"], [8, 2, 1, "", "set_params"], [8, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[9, 2, 1, "", "apply"], [9, 3, 1, "", "base_estimator_"], [9, 2, 1, "", "compute_similarity_matrix"], [9, 2, 1, "", "decision_path"], [9, 3, 1, "", "feature_importances_"], [9, 2, 1, "", "fit"], [9, 2, 1, "", "get_metadata_routing"], [9, 2, 1, "", "get_params"], [9, 2, 1, "", "predict"], [9, 2, 1, "", "score"], [9, 2, 1, "", "set_fit_request"], [9, 2, 1, "", "set_params"], [9, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[10, 2, 1, "", "apply"], [10, 3, 1, "", "base_estimator_"], [10, 2, 1, "", "compute_similarity_matrix"], [10, 2, 1, "", "decision_path"], [10, 3, 1, "", "feature_importances_"], [10, 2, 1, "", "fit"], [10, 2, 1, "", "get_metadata_routing"], [10, 2, 1, "", "get_params"], [10, 2, 1, "", "predict"], [10, 2, 1, "", "predict_log_proba"], [10, 2, 1, "", "predict_proba"], [10, 2, 1, "", "score"], [10, 2, 1, "", "set_fit_request"], [10, 2, 1, "", "set_params"], [10, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[11, 2, 1, "", "apply"], [11, 3, 1, "", "base_estimator_"], [11, 2, 1, "", "compute_similarity_matrix"], [11, 2, 1, "", "decision_path"], [11, 3, 1, "", "feature_importances_"], [11, 2, 1, "", "fit"], [11, 2, 1, "", "get_metadata_routing"], [11, 2, 1, "", "get_params"], [11, 2, 1, "", "predict"], [11, 2, 1, "", "score"], [11, 2, 1, "", "set_fit_request"], [11, 2, 1, "", "set_params"], [11, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[12, 2, 1, "", "apply"], [12, 3, 1, "", "base_estimator_"], [12, 2, 1, "", "compute_similarity_matrix"], [12, 2, 1, "", "decision_path"], [12, 3, 1, "", "feature_importances_"], [12, 2, 1, "", "fit"], [12, 2, 1, "", "fit_predict"], [12, 2, 1, "", "fit_transform"], [12, 2, 1, "", "get_metadata_routing"], [12, 2, 1, "", "get_params"], [12, 2, 1, "", "predict"], [12, 2, 1, "", "set_fit_request"], [12, 2, 1, "", "set_output"], [12, 2, 1, "", "set_params"], [12, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[13, 2, 1, "", "apply"], [13, 3, 1, "", "base_estimator_"], [13, 2, 1, "", "compute_similarity_matrix"], [13, 2, 1, "", "decision_path"], [13, 3, 1, "", "feature_importances_"], [13, 2, 1, "", "fit"], [13, 2, 1, "", "fit_predict"], [13, 2, 1, "", "fit_transform"], [13, 2, 1, "", "get_metadata_routing"], [13, 2, 1, "", "get_params"], [13, 2, 1, "", "predict"], [13, 2, 1, "", "set_fit_request"], [13, 2, 1, "", "set_output"], [13, 2, 1, "", "set_params"], [13, 2, 1, "", "transform"]], "sktree.tree": [[14, 1, 1, "", "ObliqueDecisionTreeClassifier"], [15, 1, 1, "", "ObliqueDecisionTreeRegressor"], [16, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [17, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [18, 1, 1, "", "UnsupervisedDecisionTree"], [19, 1, 1, "", "UnsupervisedObliqueDecisionTree"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[14, 2, 1, "", "apply"], [14, 2, 1, "", "compute_similarity_matrix"], [14, 2, 1, "", "cost_complexity_pruning_path"], [14, 2, 1, "", "decision_path"], [14, 3, 1, "", "feature_importances_"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "get_depth"], [14, 2, 1, "", "get_metadata_routing"], [14, 2, 1, "", "get_n_leaves"], [14, 2, 1, "", "get_params"], [14, 2, 1, "", "predict"], [14, 2, 1, "", "predict_log_proba"], [14, 2, 1, "", "predict_proba"], [14, 2, 1, "", "score"], [14, 2, 1, "", "set_fit_request"], [14, 2, 1, "", "set_params"], [14, 2, 1, "", "set_predict_proba_request"], [14, 2, 1, "", "set_predict_request"], [14, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[15, 2, 1, "", "apply"], [15, 2, 1, "", "compute_similarity_matrix"], [15, 2, 1, "", "cost_complexity_pruning_path"], [15, 2, 1, "", "decision_path"], [15, 3, 1, "", "feature_importances_"], [15, 2, 1, "", "fit"], [15, 2, 1, "", "get_depth"], [15, 2, 1, "", "get_metadata_routing"], [15, 2, 1, "", "get_n_leaves"], [15, 2, 1, "", "get_params"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "score"], [15, 2, 1, "", "set_fit_request"], [15, 2, 1, "", "set_params"], [15, 2, 1, "", "set_predict_request"], [15, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[16, 2, 1, "", "apply"], [16, 2, 1, "", "compute_similarity_matrix"], [16, 2, 1, "", "cost_complexity_pruning_path"], [16, 2, 1, "", "decision_path"], [16, 3, 1, "", "feature_importances_"], [16, 2, 1, "", "fit"], [16, 2, 1, "", "get_depth"], [16, 2, 1, "", "get_metadata_routing"], [16, 2, 1, "", "get_n_leaves"], [16, 2, 1, "", "get_params"], [16, 2, 1, "", "predict"], [16, 2, 1, "", "predict_log_proba"], [16, 2, 1, "", "predict_proba"], [16, 2, 1, "", "score"], [16, 2, 1, "", "set_fit_request"], [16, 2, 1, "", "set_params"], [16, 2, 1, "", "set_predict_proba_request"], [16, 2, 1, "", "set_predict_request"], [16, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[17, 2, 1, "", "apply"], [17, 2, 1, "", "compute_similarity_matrix"], [17, 2, 1, "", "cost_complexity_pruning_path"], [17, 2, 1, "", "decision_path"], [17, 3, 1, "", "feature_importances_"], [17, 2, 1, "", "fit"], [17, 2, 1, "", "get_depth"], [17, 2, 1, "", "get_metadata_routing"], [17, 2, 1, "", "get_n_leaves"], [17, 2, 1, "", "get_params"], [17, 2, 1, "", "predict"], [17, 2, 1, "", "score"], [17, 2, 1, "", "set_fit_request"], [17, 2, 1, "", "set_params"], [17, 2, 1, "", "set_predict_request"], [17, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[18, 2, 1, "", "apply"], [18, 2, 1, "", "compute_similarity_matrix"], [18, 2, 1, "", "cost_complexity_pruning_path"], [18, 2, 1, "", "decision_path"], [18, 3, 1, "", "feature_importances_"], [18, 2, 1, "", "fit_predict"], [18, 2, 1, "", "fit_transform"], [18, 2, 1, "", "get_depth"], [18, 2, 1, "", "get_metadata_routing"], [18, 2, 1, "", "get_n_leaves"], [18, 2, 1, "", "get_params"], [18, 2, 1, "", "predict"], [18, 2, 1, "", "set_fit_request"], [18, 2, 1, "", "set_output"], [18, 2, 1, "", "set_params"], [18, 2, 1, "", "set_predict_request"], [18, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[19, 2, 1, "", "apply"], [19, 2, 1, "", "compute_similarity_matrix"], [19, 2, 1, "", "cost_complexity_pruning_path"], [19, 2, 1, "", "decision_path"], [19, 3, 1, "", "feature_importances_"], [19, 2, 1, "", "fit_predict"], [19, 2, 1, "", "fit_transform"], [19, 2, 1, "", "get_depth"], [19, 2, 1, "", "get_metadata_routing"], [19, 2, 1, "", "get_n_leaves"], [19, 2, 1, "", "get_params"], [19, 2, 1, "", "predict"], [19, 2, 1, "", "set_fit_request"], [19, 2, 1, "", "set_output"], [19, 2, 1, "", "set_params"], [19, 2, 1, "", "set_predict_request"], [19, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"]}, "titleterms": {"api": 0, "document": [0, 29], "supervis": [0, 23], "unsupervis": [0, 24], "exampl": [1, 8, 14, 16, 22, 25], "plot": [2, 3, 4, 5, 6], "decis": [2, 23, 24], "surfac": 2, "tree": [2, 6, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25], "train": 2, "iri": 2, "dataset": [2, 4], "obliqu": [3, 4, 6, 22, 23], "forest": [3, 4, 5, 22], "axi": [3, 4], "align": [3, 4], "random": [3, 4, 22], "predict": [3, 4], "spars": 3, "pariti": 3, "simul": [3, 5], "cc18": 4, "honest": 5, "calibr": 5, "overlap": 5, "gaussian": 5, "project": 6, "matric": 6, "an": 6, "initi": 6, "patch": 6, "splitter": 6, "gener": 6, "1d": 6, "2d": 6, "3d": 6, "discontigu": 6, "comput": 7, "time": 7, "sktree": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "obliquerandomforestclassifi": 8, "us": [8, 14, 16, 23, 25], "obliquerandomforestregressor": 9, "patchobliquerandomforestclassifi": 10, "patchobliquerandomforestregressor": 11, "unsupervisedobliquerandomforest": 12, "unsupervisedrandomforest": 13, "obliquedecisiontreeclassifi": 14, "obliquedecisiontreeregressor": 15, "patchobliquedecisiontreeclassifi": 16, "patchobliquedecisiontreeregressor": 17, "unsuperviseddecisiontre": 18, "unsupervisedobliquedecisiontre": 19, "scikit": [20, 25], "content": 20, "get": 20, "start": 20, "indic": 20, "tabl": 20, "instal": 21, "depend": 21, "pip": 21, "from": 21, "sourc": 21, "meson": 21, "conda": 21, "recommend": 21, "refer": [22, 23], "featur": 22, "import": 22, "evalu": [22, 24], "differ": 23, "compar": 23, "mathemat": 23, "formul": 23, "classif": 23, "regress": 23, "multi": 23, "output": 23, "problem": 23, "complex": 23, "tip": 23, "practic": 23, "limit": 23, "criterion": 24, "two": 24, "mean": 24, "fast": 24, "bic": 24, "user": 26, "guid": 26, "releas": 27, "histori": 27, "what": 29, "": 29, "new": 29, "version": 29, "0": 29, "1": 29, "changelog": 29, "code": 29, "contributor": 29}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Examples": [[1, "examples"], [25, "examples"]], "Plot the decision surface of decision trees trained on the iris dataset": [[2, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[3, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[4, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[5, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "Plot the projection matrices of an oblique tree": [[6, "plot-the-projection-matrices-of-an-oblique-tree"]], "Initialize patch splitter": [[6, "initialize-patch-splitter"]], "Generate 1D patches": [[6, "generate-1d-patches"]], "Generate 2D patches": [[6, "generate-2d-patches"]], "Generate 3D patches": [[6, "generate-3d-patches"]], "Discontiguous Patches": [[6, "discontiguous-patches"]], "Computation times": [[7, "computation-times"]], "sktree.ObliqueRandomForestClassifier": [[8, "sktree-obliquerandomforestclassifier"]], "Examples using sktree.ObliqueRandomForestClassifier": [[8, "examples-using-sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[9, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[10, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[11, "sktree-patchobliquerandomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[12, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[13, "sktree-unsupervisedrandomforest"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[14, "sktree-tree-obliquedecisiontreeclassifier"]], "Examples using sktree.tree.ObliqueDecisionTreeClassifier": [[14, "examples-using-sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[15, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[16, "sktree-tree-patchobliquedecisiontreeclassifier"]], "Examples using sktree.tree.PatchObliqueDecisionTreeClassifier": [[16, "examples-using-sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[17, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[18, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[19, "sktree-tree-unsupervisedobliquedecisiontree"]], "scikit-tree": [[20, "scikit-tree"]], "Contents": [[20, "contents"]], "Getting started:": [[20, null]], "Indices and tables": [[20, "indices-and-tables"]], "Installation": [[21, "installation"]], "Dependencies": [[21, "dependencies"]], "Installing with pip": [[21, "installing-with-pip"]], "Installing from source with Meson": [[21, "installing-from-source-with-meson"]], "Conda (Recommended)": [[21, "conda-recommended"]], "Oblique Random Forests": [[22, "oblique-random-forests"]], "Examples:": [[22, null]], "References": [[22, null], [22, null]], "Feature importance evaluation": [[22, "feature-importance-evaluation"]], "Supervised Decision Trees": [[23, "supervised-decision-trees"]], "Oblique Trees": [[23, "oblique-trees"]], "Differences compared to decision trees": [[23, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[23, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[23, "classification-regression-and-multi-output-problems"]], "Complexity": [[23, "complexity"]], "Tips on practical use": [[23, "tips-on-practical-use"]], "Limitations compared to decision trees": [[23, "limitations-compared-to-decision-trees"]], "References:": [[23, null]], "Unsupervised Decision Trees": [[24, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[24, "unsupervised-criterion"]], "Two-Means": [[24, "two-means"]], "Fast-BIC": [[24, "fast-bic"]], "Evaluating Unsupervised Trees": [[24, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[25, "examples-using-scikit-tree"]], "User Guide": [[26, "user-guide"]], "Release History": [[27, "release-history"]], "What\u2019s new?": [[29, "what-s-new"]], "Version 0.1": [[29, "version-0-1"]], "Changelog": [[29, "changelog"]], "Code and Documentation Contributors": [[29, "code-and-documentation-contributors"]]}, "indexentries": {"module": [[0, "module-sktree"]], "sktree": [[0, "module-sktree"]], "obliquerandomforestclassifier (class in sktree)": [[8, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.obliquerandomforestclassifier property)": [[8, "sktree.ObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[8, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.fit"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.get_params"]], "predict() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "score() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[8, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[9, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.obliquerandomforestregressor property)": [[9, "sktree.ObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[9, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.fit"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.get_params"]], "predict() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.predict"]], "score() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[9, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[10, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.patchobliquerandomforestclassifier property)": [[10, "sktree.PatchObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[10, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[10, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[11, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.patchobliquerandomforestregressor property)": [[11, "sktree.PatchObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[11, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.predict"]], "score() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[11, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[12, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedobliquerandomforest property)": [[12, "sktree.UnsupervisedObliqueRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[12, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.predict"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[12, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[13, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedrandomforest property)": [[13, "sktree.UnsupervisedRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.decision_path"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[13, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.predict"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[13, "sktree.UnsupervisedRandomForest.transform"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[14, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[15, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[16, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[17, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[18, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[18, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.predict"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[18, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[19, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]]}})