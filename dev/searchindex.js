Search.setIndex({"docnames": ["api", "auto_examples/calibration/index", "auto_examples/calibration/plot_overlapping_gaussians", "auto_examples/calibration/sg_execution_times", "auto_examples/hypothesis_testing/index", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing", "auto_examples/hypothesis_testing/plot_co_MIGHT_alternative", "auto_examples/hypothesis_testing/plot_co_MIGHT_null", "auto_examples/hypothesis_testing/plot_might_auc", "auto_examples/hypothesis_testing/plot_might_mv_auc", "auto_examples/hypothesis_testing/sg_execution_times", "auto_examples/index", "auto_examples/multiview/index", "auto_examples/multiview/plot_multiview_dtc", "auto_examples/multiview/sg_execution_times", "auto_examples/outlier_detection/index", "auto_examples/outlier_detection/plot_extended_isolation_forest", "auto_examples/outlier_detection/sg_execution_times", "auto_examples/quantile_predictions/index", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest", "auto_examples/quantile_predictions/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/sklearn_vs_sktree/index", "auto_examples/sklearn_vs_sktree/plot_iris_dtc", "auto_examples/sklearn_vs_sktree/sg_execution_times", "auto_examples/sparse_oblique_trees/index", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest", "auto_examples/sparse_oblique_trees/sg_execution_times", "auto_examples/splitters/index", "auto_examples/splitters/plot_multiview_axis_aligned_splitter", "auto_examples/splitters/plot_projection_matrices", "auto_examples/splitters/plot_sparse_projection_matrix", "auto_examples/splitters/sg_execution_times", "auto_examples/treeple/index", "auto_examples/treeple/sg_execution_times", "auto_examples/treeple/treeple_tutorial_CMI", "auto_examples/treeple/treeple_tutorial_GMM", "auto_examples/treeple/treeple_tutorial_MI", "auto_examples/treeple/treeple_tutorial_SA98", "auto_examples/treeple/treeple_tutorial_SA98_multiview", "auto_examples/treeple/treeple_tutorial_pAUC", "auto_examples/treeple/treeple_tutorial_pvalue", "auto_examples/treeple/treeple_tutorial_pvalue_multiview", "generated/sktree.ExtendedIsolationForest", "generated/sktree.ExtraTreesClassifier", "generated/sktree.ExtraTreesRegressor", "generated/sktree.HonestForestClassifier", "generated/sktree.MultiViewRandomForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.RandomForestClassifier", "generated/sktree.RandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.datasets.approximate_clf_mutual_information", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "generated/sktree.datasets.make_gaussian_mixture", "generated/sktree.datasets.make_joint_factor_model", "generated/sktree.datasets.make_marron_wand_classification", "generated/sktree.datasets.make_quadratic_classification", "generated/sktree.datasets.make_trunk_classification", "generated/sktree.datasets.make_trunk_mixture_classification", "generated/sktree.experimental.conditional_resample", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.stats.FeatureImportanceForestClassifier", "generated/sktree.stats.FeatureImportanceForestRegressor", "generated/sktree.stats.PermutationForestClassifier", "generated/sktree.stats.PermutationForestRegressor", "generated/sktree.stats.PermutationHonestForestClassifier", "generated/sktree.stats.build_coleman_forest", "generated/sktree.stats.build_hyppo_cv_forest", "generated/sktree.stats.build_hyppo_oob_forest", "generated/sktree.stats.build_permutation_forest", "generated/sktree.tree.DecisionTreeClassifier", "generated/sktree.tree.DecisionTreeRegressor", "generated/sktree.tree.ExtraTreeClassifier", "generated/sktree.tree.ExtraTreeRegressor", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.MultiViewDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "sg_execution_times", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4", "whats_new/v0.5", "whats_new/v0.6", "whats_new/v0.7", "whats_new/v0.8"], "filenames": ["api.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_overlapping_gaussians.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/hypothesis_testing/index.rst", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest.rst", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing.rst", "auto_examples/hypothesis_testing/plot_co_MIGHT_alternative.rst", "auto_examples/hypothesis_testing/plot_co_MIGHT_null.rst", "auto_examples/hypothesis_testing/plot_might_auc.rst", "auto_examples/hypothesis_testing/plot_might_mv_auc.rst", "auto_examples/hypothesis_testing/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/multiview/index.rst", "auto_examples/multiview/plot_multiview_dtc.rst", "auto_examples/multiview/sg_execution_times.rst", "auto_examples/outlier_detection/index.rst", "auto_examples/outlier_detection/plot_extended_isolation_forest.rst", "auto_examples/outlier_detection/sg_execution_times.rst", "auto_examples/quantile_predictions/index.rst", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest.rst", "auto_examples/quantile_predictions/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/sklearn_vs_sktree/index.rst", "auto_examples/sklearn_vs_sktree/plot_iris_dtc.rst", "auto_examples/sklearn_vs_sktree/sg_execution_times.rst", "auto_examples/sparse_oblique_trees/index.rst", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size.rst", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris.rst", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/sg_execution_times.rst", "auto_examples/splitters/index.rst", "auto_examples/splitters/plot_multiview_axis_aligned_splitter.rst", "auto_examples/splitters/plot_projection_matrices.rst", "auto_examples/splitters/plot_sparse_projection_matrix.rst", "auto_examples/splitters/sg_execution_times.rst", "auto_examples/treeple/index.rst", "auto_examples/treeple/sg_execution_times.rst", "auto_examples/treeple/treeple_tutorial_CMI.rst", "auto_examples/treeple/treeple_tutorial_GMM.rst", "auto_examples/treeple/treeple_tutorial_MI.rst", "auto_examples/treeple/treeple_tutorial_SA98.rst", "auto_examples/treeple/treeple_tutorial_SA98_multiview.rst", "auto_examples/treeple/treeple_tutorial_pAUC.rst", "auto_examples/treeple/treeple_tutorial_pvalue.rst", "auto_examples/treeple/treeple_tutorial_pvalue_multiview.rst", "generated/sktree.ExtendedIsolationForest.rst", "generated/sktree.ExtraTreesClassifier.rst", "generated/sktree.ExtraTreesRegressor.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.MultiViewRandomForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.RandomForestClassifier.rst", "generated/sktree.RandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.datasets.approximate_clf_mutual_information.rst", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo.rst", "generated/sktree.datasets.make_gaussian_mixture.rst", "generated/sktree.datasets.make_joint_factor_model.rst", "generated/sktree.datasets.make_marron_wand_classification.rst", "generated/sktree.datasets.make_quadratic_classification.rst", "generated/sktree.datasets.make_trunk_classification.rst", "generated/sktree.datasets.make_trunk_mixture_classification.rst", "generated/sktree.experimental.conditional_resample.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.stats.FeatureImportanceForestClassifier.rst", "generated/sktree.stats.FeatureImportanceForestRegressor.rst", "generated/sktree.stats.PermutationForestClassifier.rst", "generated/sktree.stats.PermutationForestRegressor.rst", "generated/sktree.stats.PermutationHonestForestClassifier.rst", "generated/sktree.stats.build_coleman_forest.rst", "generated/sktree.stats.build_hyppo_cv_forest.rst", "generated/sktree.stats.build_hyppo_oob_forest.rst", "generated/sktree.stats.build_permutation_forest.rst", "generated/sktree.tree.DecisionTreeClassifier.rst", "generated/sktree.tree.DecisionTreeRegressor.rst", "generated/sktree.tree.ExtraTreeClassifier.rst", "generated/sktree.tree.ExtraTreeRegressor.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.MultiViewDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "sg_execution_times.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst", "whats_new/v0.5.rst", "whats_new/v0.6.rst", "whats_new/v0.7.rst", "whats_new/v0.8.rst"], "titles": ["API Documentation", "Calibrated decision trees via honesty", "Plot honest forest calibrations on overlapping gaussian simulations", "Computation times", "Hypothesis testing with decision trees", "Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data", "Demonstrate Conditional Mutual Information for Genuine Hypothesis Testing (Co-MIGHT)", "Co-MIGHT when Data Exhibits Conditional Independence", "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Compute partial AUC using multi-view MIGHT (MV-MIGHT)", "Computation times", "Examples", "Multi-view learning with Decision-trees", "Analyze a multi-view dataset with a multi-view random forest", "Computation times", "Outlier-detection", "ExtendedIsolationForest example", "Computation times", "Quantile Predictions with Random Forest", "Predicting with different quantile interpolation methods", "Quantile prediction intervals with Random Forest Regressor", "Quantile prediction with Random Forest Regressor class", "Quantile regression with oblique regression forest", "Computation times", "Computation times", "Comparing sklearn and sktree decision trees", "Plot the decision surface of decision trees trained on the iris dataset", "Computation times", "Sparse oblique projections with oblique decision-trees", "Compare extra oblique forest and oblique random forest predictions on cc18 datasets", "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Compare the decision surfaces of oblique extra-trees with standard oblique trees", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Computation times", "Decision-tree splitters", "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree", "Plot the projection matrices of an oblique tree for sampling images, or time-series", "Plot the sparse projection matrices of an oblique tree", "Computation times", "Treeple for Hypothesis Testing", "Computation times", "Treeple tutorial for calculating CMI", "Treeple tutorial for estimating true posteriors &amp; statistics", "Treeple tutorial for calculating MI", "Treeple tutorial for calculating S&#64;98", "Treeple tutorial for calculating S&#64;98 with multiview data", "Treeple tutorial for calculating pAUC", "Treeple tutorial for calculating p-value", "Treeple tutorial for calculating p-value with multiview data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtendedIsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.MultiViewRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.datasets.approximate_clf_mutual_information", "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "sktree.datasets.make_gaussian_mixture", "sktree.datasets.make_joint_factor_model", "sktree.datasets.make_marron_wand_classification", "sktree.datasets.make_quadratic_classification", "sktree.datasets.make_trunk_classification", "sktree.datasets.make_trunk_mixture_classification", "sktree.experimental.conditional_resample", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationHonestForestClassifier", "sktree.stats.build_coleman_forest", "sktree.stats.build_hyppo_cv_forest", "sktree.stats.build_hyppo_oob_forest", "sktree.stats.build_permutation_forest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.MultiViewDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Computation times", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "Version 0.1", "Version 0.2", "Version 0.3", "Version 0.4", "Version 0.5", "Version 0.6", "Version 0.7", "Version 0.8"], "terms": {"sktree": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 103, 104, 106, 116, 117, 118, 119], "manifold": [0, 38, 59, 60, 98, 99, 103, 105, 113], "obliqu": [0, 19, 24, 27, 35, 36, 40, 55, 57, 58, 59, 60, 63, 95, 96, 97, 98, 99, 101, 103, 104, 108, 110, 113, 114], "random": [0, 2, 5, 6, 7, 8, 9, 10, 13, 15, 17, 23, 24, 29, 33, 35, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 108, 110, 113, 115, 119], "forest": [0, 1, 3, 5, 6, 7, 8, 13, 15, 20, 24, 29, 33, 35, 37, 38, 39, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 77, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 113, 114, 115, 116, 119], "we": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 23, 27, 33, 37, 38, 39, 44, 49, 50, 51, 54, 73, 74, 78, 103, 104, 105, 106, 107, 114, 115, 119], "provid": [0, 27, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "drop": [0, 20, 21, 22, 23, 30, 31, 32, 34, 106], "replac": [0, 51, 54, 73, 105], "featur": [0, 5, 6, 7, 8, 10, 14, 20, 23, 27, 30, 31, 32, 33, 34, 38, 39, 47, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "have": [0, 2, 7, 8, 14, 33, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 114, 115, 118], "develop": [0, 104, 120], "These": [0, 33, 38, 54, 85, 94, 105], "ar": [0, 2, 5, 6, 7, 14, 17, 20, 21, 22, 23, 30, 31, 32, 33, 34, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 78, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 111, 116, 119], "still": [0, 6, 7, 8, 38, 54], "compat": [0, 38, 63, 64, 100, 101], "all": [0, 6, 7, 12, 14, 27, 31, 34, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 71, 72, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 108, 109, 111, 113, 114, 119], "capabl": [0, 114], "bin": [0, 2, 23, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 61, 62], "which": [0, 2, 5, 6, 7, 8, 9, 10, 17, 21, 30, 32, 37, 38, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 72, 73, 78, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 115, 116, 117, 118, 119], "theoret": [0, 2, 103], "improv": [0, 2, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 113, 114, 115, 116, 117, 118, 119, 120], "runtim": [0, 51, 106, 119], "significantli": [0, 6, 53, 58, 60, 62], "high": [0, 6, 7, 8, 14, 17, 30, 32, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 114], "dimension": [0, 6, 7, 8, 14, 30, 51, 69, 71, 72, 79, 107, 113, 114], "sampl": [0, 2, 5, 6, 7, 9, 10, 12, 14, 17, 20, 21, 23, 27, 30, 31, 32, 34, 36, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 113, 115, 116, 118, 119], "size": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 21, 22, 29, 30, 35, 38, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 90, 91, 92, 93, 94, 96, 97, 98, 99, 106, 108, 109, 116], "data": [0, 2, 4, 11, 12, 21, 22, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 113, 115], "us": [0, 2, 4, 7, 8, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 37, 38, 39, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 73, 77, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 114, 115, 118, 119], "your": [0, 98, 99, 103], "own": [0, 52, 54, 55, 56, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "risk": 0, "extens": 0, "compar": [0, 2, 5, 6, 7, 8, 17, 21, 22, 29, 34, 35, 39, 49, 50, 61, 62, 81, 82, 83, 84, 86, 89, 95, 96, 97, 98, 99, 103, 108, 110, 119], "decis": [0, 6, 7, 8, 16, 28, 30, 35, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 108, 110, 114, 115], "model": [0, 6, 7, 8, 14, 20, 27, 30, 31, 32, 33, 34, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 113, 118, 119], "tradition": 0, "implement": [0, 7, 37, 38, 39, 51, 52, 53, 54, 67, 69, 71, 72, 73, 81, 82, 83, 84, 96, 97, 103, 105, 106, 113, 114], "axi": [0, 2, 5, 6, 9, 10, 12, 14, 17, 20, 21, 27, 29, 31, 33, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 55, 57, 58, 59, 60, 95, 96, 97, 98, 99, 105, 106, 108, 109, 113, 115], "align": [0, 12, 14, 27, 29, 35, 36, 39, 40, 55, 57, 58, 59, 60, 95, 96, 97, 98, 99, 105, 106, 108, 109, 115], "split": [0, 2, 6, 12, 17, 21, 30, 33, 36, 38, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 73, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 109, 116, 117, 118], "store": [0, 33, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 95, 96, 97, 98, 99, 105, 106], "mean": [0, 2, 5, 7, 9, 10, 17, 21, 23, 30, 31, 32, 33, 34, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 79, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 105, 110, 113, 114, 116], "outcom": 0, "i": [0, 2, 5, 6, 7, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118], "e": [0, 5, 6, 7, 17, 21, 23, 37, 38, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 77, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107], "label": [0, 2, 6, 7, 8, 9, 10, 17, 21, 22, 23, 27, 32, 37, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 71, 72, 73, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107], "vote": [0, 52, 54, 55, 57, 59, 61, 63, 64, 85, 94], "leaf": [0, 17, 20, 21, 22, 23, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "node": [0, 12, 17, 20, 21, 22, 23, 30, 36, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 109], "howev": [0, 7, 30, 33, 37, 81, 82, 106], "more": [0, 2, 5, 6, 17, 20, 27, 30, 31, 37, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 105, 106, 116], "exot": 0, "possibl": [0, 30, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107], "call": [0, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 73, 77, 78, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 116], "some": [0, 14, 17, 30, 37, 38, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 109, 116], "multipl": [0, 14, 37, 38, 51, 56, 73, 95, 106, 115], "column": [0, 5, 6, 7, 30, 31, 32, 33, 34, 37, 38, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 85, 90, 92, 94, 95, 96, 97, 98, 99, 106, 113], "creat": [0, 6, 14, 17, 20, 21, 22, 23, 33, 37, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105], "new": [0, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 111, 114, 118, 119], "valu": [0, 12, 17, 20, 21, 23, 30, 31, 37, 38, 39, 41, 42, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 72, 77, 78, 80, 81, 82, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 108, 109, 117, 119], "thi": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 30, 31, 32, 33, 37, 38, 39, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 71, 72, 73, 77, 78, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 111, 114, 115, 116, 117, 118, 119], "can": [0, 7, 9, 10, 14, 17, 20, 33, 37, 38, 39, 43, 44, 45, 47, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 71, 72, 73, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 113], "take": [0, 21, 27, 33, 63, 64, 73, 77, 81, 82, 86, 89, 100, 101, 114], "form": [0, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "spars": [0, 30, 34, 35, 36, 40, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108], "linear": [0, 7, 20, 27, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "combin": [0, 5, 6, 7, 8, 9, 10, 27, 39, 44, 51, 55, 57, 58, 63, 95, 96, 97, 101, 105, 106, 107], "even": [0, 8, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "advantag": [0, 114], "structur": [0, 6, 14, 27, 37, 38, 54, 73, 85, 90, 91, 92, 93, 94, 98, 99, 107, 113], "g": [0, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106], "an": [0, 5, 6, 7, 9, 10, 12, 14, 17, 20, 21, 22, 23, 30, 33, 34, 36, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 71, 72, 73, 75, 77, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119], "imag": [0, 12, 36, 40, 98, 99, 108, 109], "indic": [0, 5, 20, 21, 22, 23, 33, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 74, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 115, 118], "awar": [0, 6, 37, 98, 99], "fashion": [0, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 73, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "class": [0, 2, 5, 9, 10, 12, 17, 19, 21, 24, 32, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 107, 108, 109, 116, 119], "gener": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 19, 21, 22, 27, 30, 31, 32, 33, 34, 37, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 91, 93, 94, 97, 98, 99, 105, 106, 107, 109, 113, 116, 118, 119], "while": [0, 2, 6, 14, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 72, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 119], "everyth": [0, 109], "els": [0, 17, 33, 34, 44, 46, 47, 48, 49, 50, 69, 71, 72], "consist": [0, 17, 30, 34, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 85, 91, 93, 97, 99, 100, 101, 106, 115], "how": [0, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 19, 21, 22, 30, 33, 37, 38, 39, 41, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 109, 119], "build": [0, 33, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 104, 114, 115], "classif": [0, 14, 32, 33, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 110, 116], "regress": [0, 2, 12, 19, 24, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 108, 109, 110, 116], "thei": [0, 17, 30, 38, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 119], "also": [0, 2, 27, 37, 38, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 115, 116, 119], "power": [0, 6, 7, 105], "non": [0, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "parametr": [0, 106], "embed": 0, "cluster": [0, 2, 17, 33, 63, 64, 100, 101, 107], "The": [0, 2, 5, 6, 7, 9, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 115], "randomtreesembed": [0, 92], "exampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 108, 115], "other": [0, 2, 6, 7, 14, 17, 21, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "state": [0, 49, 50], "art": 0, "explicitli": [0, 119], "base": [0, 8, 17, 21, 30, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 116, 118, 119], "criterion": [0, 37, 38, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 110, 113], "varianc": [0, 21, 30, 53, 54, 58, 60, 62, 63, 64, 67, 85, 91, 93, 94, 97, 99, 100, 101, 105, 107], "bic": [0, 63, 64, 100, 101, 110], "compris": [0, 98, 99], "those": [0, 21, 22, 30, 52, 53, 54, 57, 58, 59, 60, 61, 62, 79, 90, 91, 92, 93, 94, 96, 97, 105, 106], "avail": [0, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 104, 114], "standalon": 0, "isol": [0, 17, 51, 103, 104, 114], "ensembl": [0, 2, 17, 20, 21, 22, 23, 32, 33, 34, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 92, 93, 105], "extrem": [0, 30, 31, 49, 52, 53, 61, 62, 92, 93], "extend": [0, 14, 17, 51, 103, 106, 114], "allow": [0, 7, 21, 30, 38, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 114, 115, 116, 118, 119], "flexibl": [0, 107], "inher": [0, 63, 64], "produc": [0, 17], "like": [0, 17, 37, 38, 39, 44, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 107], "extract": [0, 9, 10, 30, 31, 34], "pairwis": 0, "from": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 78, 79, 80, 81, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 105, 106, 107, 108, 115, 119], "includ": [0, 2, 12, 41, 52, 54, 55, 56, 57, 59, 61, 77, 85, 90, 92, 94, 95, 96, 98, 103, 109, 113, 114, 115, 116, 117, 118, 119, 120], "correct": 0, "turn": [0, 119], "proper": 0, "In": [0, 7, 8, 14, 17, 23, 30, 31, 33, 37, 38, 39, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 119, 120], "addit": [0, 8, 52, 53, 61, 62, 63, 64, 67, 81, 82, 86, 88, 89, 100, 101, 106, 119], "leav": [0, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "natur": [0, 65, 66, 78, 107], "wai": [0, 7, 17, 30, 51, 73, 92, 93, 107], "comput": [0, 4, 5, 6, 7, 12, 30, 34, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 74, 75, 76, 77, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 109, 113, 119], "neighbor": [0, 2, 51, 56, 73, 77, 103, 116], "nearest": [0, 2, 20, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 116, 117, 118], "interfac": [0, 37, 38, 39], "similar": [0, 30, 33, 55, 57, 58, 59, 60, 63, 64, 69, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 113], "nearestneighbor": [0, 56, 73, 77], "perform": [0, 8, 9, 10, 30, 31, 32, 33, 34, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 119], "conveni": 0, "simul": [0, 1, 3, 12, 29, 35, 37, 66, 69, 70, 71, 72, 105, 108, 109, 119], "beyond": [0, 106], "offer": 0, "work": [0, 14, 23, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "progress": 0, "help": [0, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "evalu": [0, 5, 6, 7, 9, 17, 30, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 110], "mutual": [0, 4, 8, 11, 12, 43, 45, 49, 50, 65, 66, 67, 74, 75, 76, 77, 78, 80, 100, 108, 109, 113, 118], "inform": [0, 2, 4, 8, 10, 11, 12, 14, 27, 31, 32, 43, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 76, 77, 78, 80, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107, 108, 109, 113, 118], "mi": [0, 5, 6, 7, 8, 12, 41, 42, 43, 50, 65, 66, 71, 77, 79, 81, 82, 88, 108, 109, 116], "condit": [0, 4, 11, 12, 21, 22, 43, 44, 45, 49, 50, 59, 60, 65, 66, 67, 73, 74, 77, 98, 99, 108, 109, 113, 116], "cmi": [0, 7, 8, 12, 41, 42, 71, 74, 77, 79, 88, 108, 109], "specif": [0, 7, 8, 9, 10, 37, 38, 39, 44, 46, 47, 48, 52, 54, 55, 57, 59, 61, 69, 71, 72, 85, 86, 89, 106, 115], "multivari": [0, 5, 9, 10, 32, 38, 65, 66, 69, 72, 74, 75, 76, 79, 98, 99, 114], "gaussian": [0, 1, 3, 12, 17, 51, 65, 66, 67, 69, 71, 72, 74, 75, 76, 79, 107, 108, 109], "analyt": [0, 74, 75, 76, 77, 79], "solut": [0, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 74, 75, 76, 77, 85], "entropi": [0, 43, 44, 45, 49, 50, 52, 54, 55, 57, 59, 61, 65, 66, 74, 75, 76, 79, 85, 90, 92, 94, 95, 96, 98], "distribut": [0, 5, 6, 7, 17, 21, 23, 32, 49, 51, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 89, 106, 107, 117, 118], "demonstr": [1, 4, 6, 8, 11, 12, 13, 14, 19, 20, 22, 26, 29, 30, 33, 36, 38, 39, 40, 67, 108, 109], "usag": [1, 2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 90, 91, 92, 93, 94, 109, 115], "honest": [1, 3, 6, 12, 54, 81, 82, 85, 94, 103, 108, 109, 110, 118, 119], "obtain": [1, 12, 14, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 105, 109], "predict": [1, 2, 5, 9, 24, 27, 29, 33, 35, 37, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 108, 119], "plot": [1, 3, 6, 7, 8, 12, 14, 26, 28, 29, 30, 31, 33, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 105, 108, 109], "overlap": [1, 3, 12, 71, 108, 109], "go": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 69, 71, 72], "end": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "download": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 109], "full": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 69, 71, 72, 86], "code": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 100, 101, 104, 109], "result": [2, 9, 10, 17, 31, 33, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 73, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 116], "variou": [2, 52, 53, 55, 57, 58, 59, 60, 61, 62, 119], "method": [2, 12, 19, 23, 24, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 77, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 108, 109, 115, 119], "tree": [2, 5, 6, 7, 8, 9, 10, 14, 16, 20, 21, 22, 23, 28, 30, 31, 34, 35, 40, 43, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 86, 87, 104, 105, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119], "achiev": [2, 33, 53, 62, 103, 105], "see": [2, 6, 7, 8, 14, 20, 21, 22, 23, 27, 30, 31, 33, 34, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 73, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 107], "user": [2, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 113, 115], "guid": [2, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 107, 113], "isoton": 2, "irf": 2, "sigmoid": 2, "sigrf": 2, "regular": [2, 6, 7, 14, 23, 27, 30, 69, 71, 72, 83, 84], "without": [2, 51, 54, 90, 91, 92, 93, 107, 118], "rf": [2, 6, 7, 8, 14, 21, 22, 32, 34, 106], "show": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50], "curv": [2, 44, 46, 47, 48, 106], "differ": [2, 5, 6, 7, 8, 9, 12, 14, 19, 24, 26, 29, 30, 33, 35, 36, 37, 43, 45, 51, 56, 68, 69, 71, 72, 81, 82, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 108, 109, 110, 117, 118], "dataset": [2, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 21, 23, 26, 28, 29, 32, 33, 35, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 77, 81, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 116, 118, 119], "two": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 27, 30, 31, 33, 34, 37, 63, 64, 67, 69, 71, 72, 81, 82, 86, 89, 92, 93, 105, 106, 110, 113, 116], "red": [2, 43, 44, 45, 46, 47, 48, 49, 50], "line": [2, 21, 22], "closest": 2, "ideal": [2, 90, 91, 92, 93, 104], "figur": [2, 17, 27, 30, 38], "reproduc": [2, 51, 67, 68, 73, 118], "1": [2, 3, 5, 6, 7, 8, 9, 10, 14, 15, 17, 18, 20, 21, 22, 23, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 78, 80, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 114], "ronan": [2, 59, 60, 98, 99, 103, 105, 113], "perri": [2, 59, 60, 98, 99, 103, 105, 113], "ronak": [2, 59, 60, 98, 99, 105], "mehta": [2, 59, 60, 98, 99, 105], "richard": 2, "guo": 2, "eva": 2, "yezeret": 2, "jes\u00fa": 2, "arroyo": [2, 59, 60, 98, 99, 105], "mike": 2, "powel": 2, "hayden": 2, "helm": 2, "cencheng": [2, 70, 105], "shen": [2, 70, 105], "joshua": [2, 59, 60, 64, 70, 98, 99, 105, 107], "t": [2, 6, 14, 17, 22, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 68, 70, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107], "vogelstein": [2, 59, 60, 64, 70, 98, 99, 105, 107], "adapt": [2, 63, 64, 75, 103, 107], "estim": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 75, 77, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 113, 119], "quantiti": [2, 103], "arxiv": [2, 70, 103], "2021": [2, 103], "1907": [2, 103], "00325": [2, 103], "import": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 110, 114], "necessari": [2, 104], "modul": [2, 37, 38, 39, 103], "librari": [2, 111, 113], "matplotlib": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 104], "pyplot": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50], "plt": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50], "numpi": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 31, 32, 33, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 79, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104], "np": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 31, 32, 33, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "cm": [2, 27, 33, 37, 39], "sklearn": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 77, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 107, 115], "calibratedclassifiercv": 2, "randomforestclassifi": [2, 14, 32, 34, 52, 53, 55, 57, 59, 83, 92], "model_select": [2, 14, 17, 21, 22, 23, 30, 31, 32, 34, 53, 90, 91, 92, 93, 94, 96, 97, 99], "train_test_split": [2, 17, 22, 23, 53, 81, 82, 92, 93], "honestforestclassifi": [2, 5, 6, 7, 8, 9, 10, 43, 45, 46, 47, 48, 49, 50, 113, 115, 118, 119], "defin": [2, 32, 37, 38, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 77, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 116], "classifi": [2, 8, 33, 51, 52, 53, 54, 55, 57, 59, 61, 83, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 119], "color_dict": 2, "honestrf": 2, "f41711": 2, "1b9e77": 2, "377eb8": 2, "fdae61": 2, "n_estim": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 23, 30, 31, 32, 33, 34, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 85, 86, 87, 88, 89, 119], "100": [2, 5, 6, 7, 8, 14, 17, 21, 30, 32, 34, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 85], "n_job": [2, 5, 6, 7, 8, 9, 10, 14, 30, 31, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 77, 85, 86, 89], "2": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 24, 27, 32, 33, 34, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 77, 79, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111], "clf_cv": 2, "5": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 78, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 111, 114], "max_featur": [2, 5, 6, 7, 8, 9, 10, 14, 21, 30, 31, 32, 34, 37, 38, 39, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 116, 117, 118], "0": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 77, 78, 80, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 108, 111], "rep": 2, "clf": [2, 17, 27, 30, 31, 32, 34, 51, 52, 54, 57, 61, 90, 94, 96, 106], "honest_fract": [2, 5, 6, 7, 8, 9, 10, 54, 85, 94], "cv": [2, 14, 30, 31, 32, 34, 87, 90, 91, 94, 96, 97, 99], "def": [2, 6, 14, 21, 22, 30, 31, 32, 34, 43, 44, 45, 46, 47, 48, 49, 50], "likelihood": [2, 107], "x": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107], "lik1": 2, "prod": 2, "exp": [2, 22, 43, 44, 45, 49, 50, 65, 66], "asarrai": 2, "lik0": 2, "return": [2, 5, 6, 9, 10, 14, 17, 21, 22, 30, 31, 32, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "n_sampl": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 32, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 119], "60000": 2, "n_bin": 2, "3": [2, 6, 7, 8, 11, 14, 17, 18, 21, 22, 24, 27, 30, 31, 32, 33, 35, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 72, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 108, 111, 114], "calibration_curv": 2, "here": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 37, 38, 39, 54, 106, 109], "blob": 2, "where": [2, 5, 6, 7, 14, 27, 34, 38, 44, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 72, 74, 77, 78, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 113, 115, 116, 117, 118], "second": [2, 5, 6, 7, 8, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 55, 67, 69, 71, 72, 95, 106], "contain": [2, 14, 17, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "half": [2, 54, 85], "posit": [2, 9, 10, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 61, 90, 92, 94, 105, 107], "neg": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "probabl": [2, 43, 45, 46, 47, 48, 49, 50, 52, 54, 55, 57, 59, 61, 63, 64, 65, 66, 67, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 98, 106, 119], "therefor": [2, 54, 57, 58, 59, 60, 61, 62, 98, 99, 105, 106], "center": [2, 6, 7, 14, 17, 21, 23, 63, 64, 67, 100, 101], "y": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 74, 75, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "make_blob": [2, 6, 14], "shuffl": [2, 5, 6, 7, 8, 33, 49, 50, 54, 57, 58, 60, 61, 62, 67, 73, 81, 82, 83, 84, 85, 86, 89, 115], "fals": [2, 7, 8, 17, 38, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 117, 118], "random_st": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 73, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 115], "42": [2, 17, 30, 31, 52, 53, 62, 67, 92, 93], "sample_weight": [2, 37, 38, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "randomst": [2, 17, 22, 37, 38, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 68, 73, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "rand": [2, 17], "shape": [2, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 30, 31, 33, 34, 37, 38, 39, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105], "train": [2, 5, 6, 7, 12, 20, 21, 23, 26, 28, 30, 31, 33, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 108, 109, 115], "test": [2, 8, 11, 21, 22, 30, 31, 32, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 67, 69, 71, 72, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 103, 104, 108, 114, 115, 116, 119], "x_train": [2, 17, 21, 22, 23, 53, 92, 93], "x_test": [2, 17, 20, 21, 22, 23, 53, 92, 93], "y_train": [2, 17, 20, 21, 22, 23, 53, 90, 91, 92, 93], "y_test": [2, 17, 21, 22, 23, 53, 92, 93], "sw_train": 2, "sw_test": 2, "test_siz": [2, 5, 6, 7, 8, 9, 10, 23, 81, 82, 83, 84, 87], "9": [2, 8, 11, 17, 20, 21, 23, 24, 27, 28, 30, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 104, 108, 113], "class_one_prob": 2, "name": [2, 17, 23, 30, 31, 33, 34, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "fit": [2, 17, 20, 21, 23, 27, 33, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 118, 119], "predict_proba": [2, 52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "fig": [2, 6, 7, 8, 14, 17, 21, 27, 30, 31, 32, 34, 37, 38, 39], "ax": [2, 6, 7, 8, 14, 17, 27, 30, 31, 32, 34, 37, 38, 39, 106], "subplot": [2, 6, 7, 8, 14, 17, 21, 27, 30, 31, 32, 33, 34, 37, 38, 39], "figsiz": [2, 6, 7, 8, 17, 21, 32, 37, 38, 39], "10": [2, 3, 5, 6, 9, 10, 14, 17, 20, 21, 22, 23, 24, 30, 31, 32, 33, 37, 39, 52, 53, 55, 59, 60, 61, 62, 64, 67, 68, 69, 71, 72, 90, 91, 94, 95, 96, 97, 98, 99, 105, 106, 107, 108], "y_uniqu": 2, "uniqu": [2, 30, 31, 34, 43, 44, 45, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "color": [2, 6, 7, 8, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50], "rainbow": 2, "linspac": [2, 14, 17, 22, 31], "this_i": 2, "zip": [2, 12, 14, 17, 20, 21, 27, 33, 44, 46, 47, 109], "this_x": 2, "this_sw": 2, "scatter": [2, 17, 20, 27, 33, 38, 43, 44, 45, 46, 47, 48, 49, 50], "": [2, 6, 7, 8, 12, 17, 27, 30, 32, 33, 37, 41, 42, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 70, 71, 72, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 107, 108, 109], "50": [2, 8, 23, 30, 31, 33, 34, 42, 50, 91, 108], "c": [2, 17, 21, 22, 27, 33, 75, 76, 90, 91, 93, 94, 96, 97, 98, 99, 104, 119], "newaxi": 2, "alpha": [2, 6, 7, 8, 17, 21, 33, 38, 43, 44, 45, 46, 47, 48, 49, 50, 78, 80, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "edgecolor": [2, 17, 27, 33], "k": [2, 6, 7, 8, 17, 20, 33, 52, 53, 56, 77, 100], "legend": [2, 6, 7, 8, 17, 20, 22, 23, 27, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50], "loc": [2, 5, 9, 10, 20, 22, 23, 27, 32], "best": [2, 30, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "set_xtick": [2, 37, 39], "set_ytick": [2, 37, 39], "clf_name": 2, "prob": 2, "item": [2, 20, 21, 22, 23, 31], "order": [2, 21, 30, 31, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "lexsort": 2, "51": 2, "reshap": [2, 17, 23, 33, 37, 38, 39, 44, 47], "25": [2, 5, 9, 20, 22, 33, 37, 38, 44], "x_test_prob": 2, "linewidth": [2, 37], "l": [2, 21, 30, 31, 52, 53, 62, 90, 91, 92, 93, 94, 96, 97, 105, 106, 107], "r": [2, 17, 33, 44, 46, 47, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 77, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 106], "truth": [2, 17, 22, 106], "set_ylim": [2, 21], "05": [2, 5, 6, 7, 8, 42, 49, 50, 108], "set_xlabel": [2, 14, 21, 30, 34], "instanc": [2, 23, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 71, 72, 73, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114], "sort": [2, 17, 21, 30, 31, 34, 54, 56, 100, 107], "true": [2, 5, 6, 7, 9, 10, 12, 17, 27, 30, 31, 32, 34, 38, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 73, 74, 75, 76, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 108, 109, 116], "p": [2, 5, 9, 10, 12, 21, 30, 31, 32, 41, 42, 44, 52, 53, 54, 55, 57, 59, 61, 62, 69, 71, 78, 81, 82, 85, 86, 88, 89, 92, 93, 108, 109, 119], "set_ylabel": [2, 14, 21, 30, 34], "upper": [2, 21, 22], "left": [2, 21, 22, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 73, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "tight_layout": [2, 6, 7, 8, 17, 21, 27, 33], "savefig": [2, 32], "overlapping_gaussian": 2, "png": 2, "discuss": [2, 33], "well": [2, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "closer": [2, 69, 71, 72], "shown": [2, 74], "below": [2, 48], "total": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 108], "run": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 69, 81, 82, 85, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 115, 116], "time": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 36, 37, 39, 43, 44, 45, 46, 47, 48, 49, 50, 62, 63, 64, 78, 81, 82, 83, 84, 86, 89, 96, 97, 98, 99, 100, 102, 106, 109], "script": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50], "minut": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50], "748": [2, 3, 108], "memori": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97], "57": [2, 3, 6, 11, 108, 113], "mb": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 108], "jupyt": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 109], "notebook": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 109], "plot_overlapping_gaussian": [2, 3, 108], "ipynb": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50], "python": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 104, 109], "sourc": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109], "py": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 108], "galleri": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 108, 109], "sphinx": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 109], "00": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42, 91, 108], "execut": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42, 108], "file": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42, 104, 108], "auto_exampl": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42], "calibr": [3, 103, 106, 108], "mem": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42, 108], "statist": [4, 5, 6, 7, 12, 23, 41, 42, 54, 68, 69, 71, 72, 81, 82, 83, 84, 86, 89, 90, 91, 94, 96, 97, 103, 105, 106, 108, 109, 116], "co": [4, 11, 12, 67, 78, 108, 109], "might": [4, 11, 12, 52, 54, 55, 57, 58, 59, 61, 63, 64, 67, 85, 106, 108, 109], "when": [4, 6, 7, 11, 12, 14, 17, 20, 30, 39, 46, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 78, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 108, 109, 111, 114, 115, 116, 117, 118, 119], "exhibit": [4, 11, 12, 108, 109], "independ": [4, 7, 11, 12, 78, 81, 82, 86, 106, 108, 109], "partial": [4, 6, 11, 12, 48, 108, 109], "auc": [4, 6, 11, 12, 108, 109, 116], "genuin": [4, 8, 11, 12, 67, 108, 109], "multi": [4, 6, 7, 8, 11, 15, 36, 40, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 92, 94, 95, 96, 98, 103, 108, 110, 113, 115, 116], "view": [4, 6, 7, 8, 11, 15, 36, 40, 55, 67, 68, 95, 103, 108, 115, 116, 117, 118], "mv": [4, 6, 7, 8, 11, 12, 108, 109], "imbalanc": [4, 11, 12, 108, 109], "featureimportanceforestclassifi": [5, 6, 7, 8, 9, 10, 83, 84, 115, 117, 118], "nonparametr": [5, 9, 10], "present": [5, 9, 10, 17, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 100, 101, 106], "set": [5, 6, 7, 8, 10, 14, 17, 30, 31, 33, 38, 39, 44, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 115, 116, 119], "target": [5, 6, 7, 8, 9, 10, 14, 21, 23, 27, 33, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 70, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106], "framework": [5, 6, 7], "1000": [5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 31, 32, 43, 45, 46, 47, 48, 49, 50, 54, 57, 61, 78, 79, 80, 81, 82, 83, 84], "500": [5, 9, 10, 14, 43, 45, 46, 47, 48, 49, 50, 89], "binari": [5, 9, 10, 17, 32, 43, 45, 46, 47, 48, 49, 50, 65, 66, 69, 71, 72, 86, 87, 88, 89], "variabl": [5, 6, 7, 8, 9, 10, 14, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 74, 78, 81, 82, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106], "within": [5, 38, 54, 56, 63, 64, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104], "each": [5, 6, 7, 9, 14, 20, 21, 22, 23, 27, 30, 31, 33, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 116, 117, 118], "associ": [5, 9, 52, 54, 55, 57, 59, 61, 64, 72, 85, 90, 92, 94, 95, 96, 98, 106, 107], "one": [5, 6, 7, 9, 14, 17, 20, 21, 22, 23, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 72, 73, 77, 78, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 116, 117, 118], "anoth": [5, 9, 49, 50, 106, 117, 118], "One": [5, 6, 7, 9, 17, 81, 82, 90, 91, 92, 93], "could": [5, 9, 77, 90, 91, 92, 93], "think": [5, 9], "collect": [5, 9, 14, 17, 20, 21, 22, 23, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 73, 85, 94], "same": [5, 6, 7, 8, 9, 20, 21, 22, 23, 27, 37, 38, 39, 50, 52, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 71, 72, 85, 90, 92, 94, 95, 96, 98, 99, 102, 105, 106, 116], "patient": [5, 9], "biomed": [5, 9], "first": [5, 6, 7, 8, 9, 10, 14, 27, 32, 33, 37, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 71, 72, 73, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 116], "strongli": [5, 9, 10], "correl": [5, 9, 10, 14], "w": [5, 9, 10, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 69, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "weakli": [5, 9, 10], "null": [5, 6, 7, 50, 81, 82, 83, 84, 86, 89, 117, 118], "h0": 5, "ha": [5, 7, 8, 9, 10, 14, 33, 34, 38, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 113, 114, 115, 116, 117, 118, 119, 120], "respect": [5, 33, 37, 71, 72, 81, 82, 95, 105, 107], "For": [5, 6, 14, 17, 20, 27, 30, 31, 34, 37, 38, 39, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 77, 82, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 107, 114], "follow": [5, 6, 7, 8, 20, 21, 30, 31, 34, 37, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 71, 72, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107], "our": [5, 6, 8, 30, 37, 38, 39, 103, 106], "uninform": 5, "complet": [5, 6], "disconnect": 5, "d": [5, 17, 20, 21, 22, 23, 30, 31, 37, 39, 52, 53, 62, 67, 69, 71, 72, 74, 75, 76, 79, 92, 93], "separ": [5, 30, 54, 92, 93, 119], "given": [5, 17, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 74, 75, 76, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107, 119], "scipi": [5, 9, 10, 23, 43, 44, 45, 49, 50, 59, 60, 73, 98, 99, 104], "special": [5, 9, 10, 106], "expit": [5, 9, 10], "stat": [5, 6, 7, 8, 9, 10, 23, 43, 44, 45, 46, 47, 48, 49, 50, 90, 91, 94, 96, 97, 117, 118, 119], "decisiontreeclassifi": [5, 6, 7, 8, 9, 10, 27, 33, 37, 39, 52, 54, 61, 85, 91, 92, 94, 95, 96, 97, 98, 119], "seed": [5, 6, 7, 8, 9, 10, 14, 22, 32, 33, 43, 44, 45, 46, 47, 48, 49, 50, 63, 64, 65, 66, 69, 70, 71, 72, 77, 78, 79, 80, 83, 84, 86, 87, 89, 119], "12345": [5, 6, 7, 8, 9, 10, 14], "rng": [5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23], "default_rng": [5, 6, 7, 8, 9, 10, 14, 79], "them": [5, 6, 7, 8, 9, 10, 17, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 105], "singl": [5, 6, 7, 8, 9, 10, 27, 33, 47, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "2000": [5, 30], "n_features_set": [5, 9, 10], "20": [5, 7, 8, 17, 32, 33, 51, 55, 64, 69, 95, 107], "sigma": [5, 9, 10, 22, 107], "beta": [5, 9, 10], "unimportant_mean": [5, 9, 10], "unimportant_sigma": [5, 9, 10], "4": [5, 6, 7, 9, 10, 17, 21, 24, 27, 32, 35, 37, 38, 45, 46, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 103, 108, 111], "uniform": [5, 9, 10, 17, 22, 32, 54, 67, 77, 78, 80, 85, 94], "x_import": [5, 9, 10], "normal": [5, 6, 9, 10, 17, 23, 30, 31, 37, 39, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 79, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 113], "scale": [5, 9, 10, 21, 23, 68, 69, 71, 72, 116], "hstack": [5, 6, 7, 8, 9, 10, 14, 43, 44, 50], "x_unimport": [5, 9, 10], "binomi": [5, 9, 10], "n": [5, 6, 7, 8, 9, 10, 17, 25, 30, 31, 34, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 107, 113], "sum": [5, 9, 10, 14, 32, 37, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "metric": [5, 6, 7, 8, 9, 10, 44, 46, 47, 48, 52, 53, 54, 55, 56, 57, 59, 61, 62, 63, 64, 77, 81, 82, 83, 84, 85, 86, 89, 90, 92, 94, 95, 96, 98, 103, 107, 116, 117, 118], "between": [5, 6, 7, 8, 12, 14, 20, 21, 26, 30, 31, 32, 34, 37, 43, 45, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 109], "origin": [5, 6, 7, 30, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 73, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 119], "permut": [5, 6, 7, 21, 54, 57, 58, 59, 60, 61, 62, 73, 81, 82, 83, 84, 85, 86, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 105, 114, 116, 119], "row": [5, 6, 7, 33, 38, 81, 98, 99, 116], "covariate_index": [5, 6, 7, 8, 81, 82, 83, 84, 85, 86, 89, 116], "randomli": [5, 6, 7, 17, 30, 37, 39, 51, 54, 57, 58, 59, 60, 61, 62, 81, 82, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "effici": [5, 6, 7, 51, 56, 63, 64, 81, 82, 83, 84, 86, 91, 93, 97, 99, 100, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "manner": [5, 6, 7, 106], "posterior": [5, 6, 7, 12, 41, 42, 43, 45, 46, 47, 48, 54, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 108, 109], "n_repeat": [5, 6, 7, 8, 30, 31, 32, 34, 81, 82, 83, 84, 86, 89], "pvalu": [5, 6, 7, 8, 49, 50, 83, 84, 86, 89], "proport": [5, 6, 7, 51, 52, 54, 55, 57, 59, 61, 81, 82, 83, 84, 85, 87, 90, 92, 94, 95, 96, 98], "less": [5, 6, 7, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "than": [5, 6, 7, 23, 30, 31, 32, 33, 37, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 73, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 116, 118, 119], "observ": [5, 6, 7, 9, 10, 17, 21, 22, 51, 75, 83, 84], "sqrt": [5, 6, 9, 10, 14, 30, 31, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114, 116], "est": [5, 6, 7, 8, 9, 10, 20, 43, 45, 46, 47, 48, 49, 50, 86, 87, 88, 89], "tree_estim": [5, 6, 7, 8, 9, 10, 43, 47, 50, 54, 85, 94, 119], "thu": [5, 6, 9, 10, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 71, 72, 81, 82, 83, 84, 85, 96, 97, 105, 106, 107], "should": [5, 6, 7, 9, 10, 30, 31, 37, 38, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 73, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104], "arang": [5, 6, 7, 8, 20, 21, 33, 37, 38, 39], "dtype": [5, 6, 7, 8, 17, 34, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "int": [5, 6, 7, 8, 14, 17, 21, 30, 31, 34, 37, 39, 44, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "print": [5, 6, 7, 8, 9, 10, 30, 32, 33, 34, 37, 38, 39, 43, 44, 45, 49, 50, 54, 57, 58, 60, 61, 62, 67], "f": [5, 6, 7, 8, 9, 10, 17, 22, 27, 30, 32, 34, 38, 44, 46, 47, 48], "unimport": [5, 6], "015040594336712287": 5, "002997002997002997": 5, "0026866694904621735": 5, "7782217782217782": 5, "tim": [5, 6, 7, 81, 82, 86], "coleman": [5, 6, 7, 69, 71, 72, 81, 82, 86], "wei": [5, 6, 7, 81, 82, 86], "peng": [5, 6, 7, 81, 82, 86], "luca": [5, 6, 7, 81, 82, 86], "mentch": [5, 6, 7, 81, 82, 86], "scalabl": [5, 6, 7, 81, 82, 86], "journal": [5, 6, 7, 58, 59, 60, 81, 82, 86, 98, 99, 103, 105], "machin": [5, 6, 7, 30, 31, 52, 53, 54, 57, 58, 61, 62, 81, 82, 86, 92, 93, 103, 105, 106], "learn": [5, 6, 7, 27, 29, 30, 31, 33, 52, 53, 54, 57, 58, 61, 62, 63, 64, 70, 81, 82, 85, 86, 90, 91, 92, 93, 94, 96, 97, 100, 101, 103, 104, 105, 106, 107], "research": [5, 6, 7, 58, 81, 82, 86, 103, 105], "23": [5, 6, 7, 34, 53, 58, 60, 62, 81, 82, 86, 91, 93, 97, 99, 104], "7679": [5, 6, 7, 81, 82, 86], "7713": [5, 6, 7, 81, 82, 86], "2022": [5, 6, 7, 81, 82, 86, 100, 103], "21": [5, 11, 51, 58, 103, 105, 108, 113], "517": [5, 11, 108], "18": [5, 40, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "plot_mi_genuine_hypothesis_testing_forest": [5, 11, 108], "do": [6, 7, 12, 16, 33, 37, 38, 39, 63, 64, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 109], "highli": [6, 17, 114], "term": [6, 77, 78, 106, 107, 119], "smaller": [6, 9, 10, 52, 53, 54, 61, 62, 85, 90, 91, 92, 93, 94], "instead": [6, 14, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "leverag": 6, "knowledg": [6, 17, 51, 64, 106, 107], "analyz": [6, 12, 13, 15, 37, 38, 108, 109], "multiviewdecisiontreeclassifi": [6, 7, 8, 10, 37, 43, 47, 50, 116, 117, 118], "graphic": [6, 7, 8, 78], "x_1": [6, 7, 8, 48, 67], "rightarrow": [6, 7, 8, 78], "x_2": [6, 7, 8], "signal": [6, 8, 14, 68, 71, 72], "nois": [6, 7, 14, 17, 22, 67, 68, 69, 70, 71, 72, 78, 80], "low": [6, 7, 8, 14, 17, 21, 30, 31, 68], "make_multiview_classif": [6, 14], "n_features_1": [6, 8, 14], "n_features_2": [6, 7, 8, 14], "cluster_std": [6, 14], "none": [6, 14, 32, 33, 34, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "multiview": [6, 12, 14, 15, 41, 42, 43, 67, 71, 88, 108, 109], "subspac": [6, 14, 77], "x0_first": [6, 14], "y0": [6, 14], "n_featur": [6, 7, 8, 14, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 70, 73, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106], "integ": [6, 14, 51, 52, 54, 55, 57, 59, 61, 67, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 117, 118], "10000": [6, 14, 21, 31, 44, 49, 50, 86, 89], "center_box": 6, "x1_first": [6, 14], "y1": [6, 14, 80], "add": [6, 14, 33, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 67, 70, 78, 80, 85, 113, 115, 116, 119], "x0": [6, 14], "concaten": [6, 14, 17, 20, 21, 95], "standard_norm": [6, 7, 8, 14], "x1": [6, 14], "vstack": [6, 14, 49, 50], "10_000": [6, 61, 62], "n_features_view": [6, 14], "200": [6, 7, 8, 17, 118], "10010": 6, "feature_set_end": [6, 7, 8, 10, 14, 37, 55, 95], "apply_max_features_per_feature_set": [6, 7, 8, 37, 55, 95, 117, 118], "mv_result": [6, 7, 8], "dict": [6, 7, 8, 33, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "overal": [6, 105], "v": [6, 12, 14, 29, 30, 35, 53, 54, 58, 60, 62, 69, 70, 71, 72, 91, 93, 97, 99, 105, 106, 108, 109], "feature_stat": 6, "feature_pvalu": 6, "important_feature_stat": 6, "important_feature_pvalu": 6, "unimportant_feature_stat": 6, "unimportant_feature_pvalu": 6, "007719008004977823": 6, "000999000999000999": [6, 7], "007713833056419039": 6, "00010913275452317794": 6, "5944055944055944": 6, "let": [6, 7, 8, 106], "investig": [6, 7, 8], "what": [6, 7, 8, 33, 37, 38, 39, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "happen": [6, 7, 8], "paramet": [6, 7, 8, 14, 21, 27, 30, 31, 32, 33, 37, 38, 39, 44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 114, 118, 119], "kept": [6, 7, 14], "ensur": 6, "max": [6, 17, 21, 33, 44, 46, 47, 51, 52, 53, 61, 62, 63, 64, 90, 91, 92, 93, 100, 101, 106], "across": [6, 32, 37, 39, 51, 52, 54, 55, 57, 59, 61, 63, 64, 67, 68, 73, 82, 85, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "rf_result": [6, 7, 8], "nanalyz": 6, "bar": [6, 7, 8, 37, 39], "axhlin": [6, 7, 8, 44, 46, 47], "linestyl": [6, 7, 8, 44, 46, 47, 48], "ylabel": [6, 7, 8, 20, 22, 23, 27, 37, 39], "log10": [6, 7, 8], "xlim": [6, 7, 8, 17, 20, 38], "yscale": [6, 7, 8], "log": [6, 7, 8, 52, 54, 55, 57, 59, 61, 75, 76, 85, 90, 92, 95, 96, 98, 106, 107], "00021117234595469103": 6, "7": [6, 9, 11, 17, 32, 103, 108, 111], "50656276637951e": 6, "06": [6, 42, 91, 108], "999000999000999": 6, "00025189663881775015": 6, "abl": [6, 7, 104, 109, 116], "detect": [6, 17, 51, 103], "becaus": [6, 14, 37, 53, 54, 56, 58, 60, 62, 91, 93, 97, 99, 106], "challeng": 6, "rare": 6, "unabl": [6, 17, 116], "its": [6, 9, 10, 33, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 85, 90, 92, 94, 95, 96, 98, 106], "note": [6, 30, 33, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 111], "both": [6, 7, 8, 14, 51, 52, 54, 55, 57, 58, 59, 60, 61, 62, 67, 81, 82, 83, 84, 85, 86, 90, 92, 106], "approach": [6, 30, 69, 86, 89, 105], "fail": [6, 8], "reject": [6, 7, 8, 49, 50], "higher": [6, 7, 8, 9, 10, 20, 31, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 105, 106, 118], "36": [6, 11, 108], "512": [6, 11, 108], "plot_mi_imbalanced_hyppo_test": [6, 11, 108], "To": [7, 8, 20, 30, 37, 38, 39, 52, 53, 54, 57, 58, 59, 60, 61, 62, 81, 82, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 109], "h_0": [7, 8, 49, 50], "h_1": [7, 8], "process": [7, 30, 51, 54, 78, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114], "had": 7, "perfect": 7, "properli": 7, "standard": [7, 8, 12, 17, 29, 30, 31, 32, 34, 35, 39, 43, 45, 46, 47, 48, 49, 50, 56, 67, 77, 79, 89, 98, 99, 106, 108, 109], "explor": [7, 105], "case": [7, 14, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 106, 115, 117, 118], "altern": [7, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "determin": [7, 30, 51, 53, 58, 60, 62, 73, 91, 93, 97, 99, 106], "correctli": [7, 52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98, 117, 118, 119], "doe": [7, 8, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 77, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 105, 106], "exactli": [7, 98, 99, 105], "yet": 7, "sinc": [7, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 113, 114, 115, 116, 117, 118, 119, 120], "make_spd_matrix": 7, "make_gaussian_mixtur": 7, "noise_dim": [7, 8, 67], "80": [7, 8], "class_prob": [7, 65, 66, 67], "6": [7, 11, 15, 17, 30, 31, 32, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 68, 103, 108, 111], "fixed_cent": 7, "covari": [7, 17, 51, 65, 66, 67, 69, 71, 72, 74, 75, 76, 77, 79, 81, 82, 83, 84, 86, 89, 115, 118, 119], "n_dim": [7, 43, 44, 45, 46, 47, 48, 49, 50, 65, 66, 69, 71, 72], "123": [7, 30, 31, 33], "transform": [7, 63, 64, 67, 68, 77, 100, 101], "second_x": 7, "first_x": 7, "n_features_end": [7, 8], "1100": [7, 8], "sample_dataset_per_tre": [7, 8, 9, 10, 81, 82], "lower": [7, 8, 20, 21, 27, 51, 54, 78, 80, 85, 90, 91, 92, 93, 94, 106], "low_dim_feature_stat": [7, 8], "low_dim_feature_pvalu": [7, 8], "analysi": [7, 106], "high_dim_feature_stat": [7, 8], "high_dim_feature_pvalu": [7, 8], "009982498466282963": 7, "0008142171799750964": 7, "6463536463536463": 7, "nanalys": 7, "now": [7, 8, 14, 30, 31, 32, 33, 34, 38, 104, 113, 116, 117, 118, 119], "dim": [7, 8, 30, 31, 38], "analys": 7, "004356557107899395": 7, "04595404595404595": 7, "0013859613186406605": 7, "7242757242757243": 7, "answer": 7, "neither": 7, "nor": 7, "u": [7, 21, 53, 58, 60, 62, 68, 91, 93, 97, 99, 104, 105], "level": [7, 33, 73], "24": [7, 11, 34, 35, 51, 52, 53, 61, 62, 90, 91, 92, 93, 108], "317": [7, 11, 108], "15": [7, 11, 17, 20, 21, 27, 33, 43, 44, 45, 46, 47, 48, 49, 50, 108], "plot_co_might_altern": [7, 11, 108], "perp": 8, "verifi": 8, "make_classif": [8, 52, 54, 57, 61], "signal_x": 8, "n_inform": [8, 43, 44, 45, 46, 47, 48, 49, 50, 54, 57, 58, 60, 61, 62, 69, 71, 72], "n_redund": [8, 54, 57, 61], "n_class": [8, 27, 33, 43, 44, 45, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 119], "class_sep": 8, "flip_i": 8, "01": [8, 24, 33, 35, 38, 108], "either": [8, 33, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 81, 82, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 118], "procedur": [8, 73, 106], "abov": [8, 95], "make": [8, 14, 21, 30, 38, 105, 113, 115], "_x": 8, "copi": [8, 17, 27, 49, 50, 73], "rf_est": 8, "nimport": 8, "depend": [8, 30, 31, 43, 45, 49, 50, 78, 103], "0005043866821097254": 8, "27172827172827174": 8, "8": [8, 9, 10, 11, 17, 21, 30, 32, 34, 38, 42, 62, 78, 94, 103, 108, 111], "607395727067146e": 8, "913086913086913": 8, "ncompar": 8, "black": [8, 22, 27, 33, 37, 38], "grai": 8, "green": [8, 37, 39], "blue": [8, 21, 22, 43, 44, 45, 46, 47, 48, 49, 50], "titl": [8, 17, 27, 33, 37, 38, 39], "00040413552453044677": 8, "4305694305694306": 8, "00034490828020194986": 8, "5824175824175825": 8, "nset": 8, "90517887221598e": 8, "975024975024975": 8, "603475244135407e": 8, "8921078921078921": 8, "again": 8, "0005332704695734103": 8, "19480519480519481": 8, "00011515246297311155": 8, "9410589410589411": 8, "contrast": [8, 30, 33, 37, 39, 105, 106], "53": [8, 11, 108], "388": [8, 11, 108], "plot_co_might_nul": [8, 11, 108], "calcul": [9, 10, 12, 21, 38, 41, 42, 71, 88, 102, 107, 108, 109], "you": [9, 10, 34, 37, 39, 47, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 109, 119], "specifi": [9, 10, 37, 38, 52, 54, 55, 57, 59, 61, 67, 68, 69, 72, 85, 90, 92, 94, 95, 96, 98, 106, 118], "maximum": [9, 10, 21, 33, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107], "modifi": [9, 10], "max_fpr": [9, 10, 44, 46, 47, 48], "125": [9, 10, 38, 114], "permute_forest_fract": [9, 10, 81, 82], "posterior_arr": [9, 10], "return_posterior": [9, 10, 81, 82, 83, 84, 86, 89], "ash": [9, 10], "90": [9, 10, 48, 51], "5470205935322214": 9, "expect": [9, 10, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 77, 81, 82, 83, 84, 85, 91, 93, 96, 97, 98, 99, 105], "due": [9, 10, 30, 34, 75, 119], "weak": [9, 52, 53, 61, 62], "5164002324345042": 9, "anytim": [9, 10], "pickl": [9, 10, 106], "observe_stat_": [9, 10, 81, 82, 86, 89], "observe_samples_": [9, 10], "observe_posteriors_": [9, 10, 81, 82], "n_tree": [9, 10], "n_samples_test": [9, 10, 81, 82], "y_true_final_": [9, 10, 81, 82], "289": [9, 11, 108], "plot_might_auc": [9, 11, 108], "hypothesi": [10, 11, 49, 50, 67, 69, 71, 72, 81, 82, 83, 84, 86, 87, 88, 89, 103, 108, 114, 115, 116, 119], "mutli": 10, "auroc": 10, "510": 10, "est_mv": 10, "5845168476747424": 10, "lack": 10, "5299359509885826": 10, "035": [10, 11, 108], "22": [10, 52, 53, 56, 61, 62, 90, 91, 92, 93], "plot_might_mv_auc": [10, 11, 108], "02": [11, 27, 42, 44, 46, 47, 91], "32": [11, 54, 57, 58, 61, 62, 105, 106], "058": 11, "hypothesis_test": [11, 108], "19": [11, 17, 18, 52, 53, 61, 62, 90, 91, 92, 93, 108], "17": [11, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 108], "08": [11, 35, 42, 51, 108], "scikit": [12, 27, 37, 63, 64, 100, 101, 104, 105, 106, 111, 119], "algorithm": [12, 17, 30, 51, 56, 63, 64, 77, 81, 82, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 109], "variant": [12, 13, 14, 19, 109], "concern": [12, 16, 41, 109], "extendedisolationforest": [12, 16, 18, 108, 109], "interpol": [12, 19, 24, 37, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 108, 109], "interv": [12, 19, 20, 22, 24, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 106, 108, 109], "regressor": [12, 19, 23, 24, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 84, 85, 90, 91, 92, 93, 97, 99, 108, 109], "surfac": [12, 26, 28, 29, 35, 38, 39, 108, 109], "iri": [12, 26, 28, 33, 90, 94, 96, 106, 108, 109], "extra": [12, 29, 34, 35, 39, 52, 53, 92, 93, 108, 109, 114, 119], "cc18": [12, 29, 35, 39, 105, 108, 109], "pariti": [12, 29, 35, 105, 108, 109], "speed": [12, 29, 30, 35, 62, 107, 108, 109, 114], "strategi": [12, 36, 54, 61, 62, 73, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 109], "visual": [12, 36, 38, 39, 40, 108, 109], "matrix": [12, 14, 36, 38, 40, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 74, 75, 76, 79, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109], "matric": [12, 36, 37, 40, 51, 63, 64, 68, 69, 71, 72, 73, 106, 108, 109, 113], "seri": [12, 36, 40, 98, 99, 108, 109], "tool": [12, 41, 109], "tutori": [12, 41, 42, 71, 72, 88, 108, 109], "functionss": [12, 41, 109], "98": [12, 33, 41, 42, 71, 86, 88, 89, 108, 109], "pauc": [12, 41, 42, 71, 88, 108, 109], "auto_examples_python": [12, 109], "auto_examples_jupyt": [12, 109], "multiviewrandomforestclassifi": 14, "uniformli": [14, 32, 37, 38], "vastli": 14, "number": [14, 17, 32, 33, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 115, 116, 117, 118], "If": [14, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 73, 77, 78, 79, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "known": [14, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 79, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "pass": [14, 31, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 113, 117, 118, 119], "via": [14, 27, 70, 96, 97, 100, 103, 104, 105, 113, 115, 116, 118], "splitter": [14, 40, 54, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 108, 115], "project": [14, 17, 27, 34, 36, 40, 55, 57, 58, 96, 97, 103, 105, 106, 108, 113, 114, 115, 116, 117, 118, 119, 120], "defaultdict": [14, 20, 21, 22, 23], "panda": [14, 30, 31, 32, 33, 34, 63, 64, 70, 100, 101, 113, 114, 115, 119], "pd": [14, 30, 31, 32, 33, 34, 79], "seaborn": [14, 30, 31, 32, 34], "sn": [14, 30, 31, 32, 34], "cross_val_scor": [14, 90, 91, 94, 96, 97, 99], "cluster_std_first": 14, "cluster_std_second": 14, "five": 14, "dimens": [14, 30, 31, 32, 37, 38, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 70, 71, 72, 73, 78, 85, 98, 99, 100, 101, 106], "vari": [14, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "thousand": 14, "fix": [14, 54, 57, 58, 59, 60, 61, 62, 77, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "so": [14, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 71, 72, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "20000": 14, "astyp": [14, 30, 31, 32, 34, 37, 38, 39], "portion": 14, "increasingli": 14, "idx": [14, 20, 21, 22, 23, 27, 33, 38], "enumer": [14, 20, 21, 22, 23, 27, 30, 31, 32, 34, 38, 54, 57, 58, 59, 60, 61, 62], "append": [14, 17, 20, 21, 22, 23, 30, 31, 32, 34, 49, 50], "over": [14, 17, 37, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 67, 85, 90, 92, 94, 95, 98, 99, 105, 116], "list": [14, 20, 21, 22, 23, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "arrai": [14, 17, 20, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 79, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 117, 118], "mvrf": 14, "cross": [14, 87, 106], "valid": [14, 21, 23, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "rf_score": 14, "mvrf_score": 14, "len": [14, 17, 20, 21, 22, 23, 33, 37, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "experi": 14, "df": [14, 30, 31, 32, 34], "datafram": [14, 30, 31, 32, 33, 34, 63, 64, 73, 100, 101], "melt": 14, "easier": [14, 115], "id_var": 14, "var_nam": 14, "value_nam": 14, "lineplot": [14, 31], "marker": [14, 21, 38], "o": [14, 17, 20, 30, 38, 69, 71, 72, 100, 106, 113, 114], "hue": [14, 31], "set_titl": [14, 17, 30, 31, 32, 34], "As": [14, 34, 37, 39, 44, 69, 71, 72, 83, 84, 102, 106], "outperform": [14, 34, 106], "increas": [14, 21, 30, 31, 52, 53, 56, 61, 62, 68, 69, 71, 72, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 105], "kei": [14, 37, 90, 91, 92, 93], "35": [14, 15, 20, 108], "059": [14, 15, 108], "716": 14, "plot_multiview_dtc": [14, 15, 108], "715": [15, 108], "anomali": [17, 51], "isolationforest": [17, 51], "demo": 17, "toi": 17, "randn": [17, 23], "spheric": 17, "slightli": 17, "deform": 17, "notat": 17, "inlier": [17, 51], "assign": [17, 100, 101, 107], "ground": [17, 22, 106], "wherea": [17, 62, 78, 106], "outlier": [17, 51, 69, 103], "inspect": [17, 27, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "decisionboundarydisplai": [17, 27], "n_outlier": 17, "120": 17, "40": [17, 32], "cluster_1": 17, "cluster_2": 17, "ones": [17, 37, 38, 39], "stratifi": [17, 43, 45, 46, 47, 48, 49, 50, 54, 73, 81, 85, 94, 115], "handl": [17, 106, 117, 118], "legend_el": 17, "squar": [17, 38, 53, 58, 60, 62, 69, 91, 93, 97, 99, 116], "nuniformli": 17, "extended_clf": 17, "max_sampl": [17, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 118], "feature_combin": [17, 37, 38, 39, 51, 55, 57, 58, 63, 95, 96, 97, 101, 105, 106], "environ": [17, 104], "pleas": [17, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "rerun": 17, "cell": 17, "html": [17, 105], "represent": 17, "trust": 17, "On": [17, 81, 82], "github": [17, 104], "render": 17, "try": [17, 106], "load": [17, 21, 27, 33, 34, 68], "page": [17, 104, 111, 115], "nbviewer": 17, "org": [17, 30, 31, 32, 34, 64, 68, 69, 71, 72, 90, 91, 94, 96, 97, 105, 106, 107], "nbsp": 17, "document": [17, 103, 105], "isolationforestifittedisolationforest": 17, "background": 17, "repres": [17, 49, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "whether": [17, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 70, 71, 72, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "area": [17, 22, 48], "displai": [17, 27], "isoforest": 17, "extendedisoforest": 17, "disp": 17, "from_estim": [17, 27], "response_method": [17, 27], "ax_": 17, "nof": 17, "By": [17, 49, 50, 52, 53, 54, 61, 62, 63, 64, 69, 71, 72, 78, 79, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 100, 101, 105, 118], "decision_funct": [17, 51], "measur": [17, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107], "Such": 17, "score": [17, 30, 31, 32, 33, 34, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "averag": [17, 30, 39, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 77, 95, 96, 97, 101, 105], "itself": [17, 32, 52, 54, 55, 57, 59, 61, 63, 64, 77, 85], "depth": [17, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "equival": [17, 49, 51, 53, 55, 57, 58, 61, 62, 96, 97, 106], "requir": [17, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "short": 17, "particular": [17, 51, 106], "close": [17, 51, 59, 60, 98, 99, 103, 105], "similarli": [17, 106], "larg": [17, 30, 31, 34, 52, 53, 54, 57, 58, 59, 60, 61, 62, 69, 71, 72, 90, 91, 92, 93, 94, 96, 97], "correspond": [17, 20, 21, 22, 23, 27, 33, 44, 52, 54, 55, 57, 59, 60, 61, 68, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "colorbar": [17, 37, 39], "sinusoid": 17, "ad": [17, 51, 52, 53, 61, 62, 63, 64, 67, 78, 90, 91, 92, 93, 100, 101, 106, 113, 114, 115, 119], "top": [17, 21, 33, 103, 105], "pi": [17, 76, 78, 107], "sin": [17, 22, 67, 78], "add_subplot": [17, 38], "111": 17, "30": [17, 30, 31, 35, 43, 45, 46, 47, 48, 49, 50, 55, 91, 95, 108], "ylim": [17, 38], "circl": 17, "locat": 17, "bottom": 17, "right": [17, 21, 23, 27, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "corner": 17, "inlier_sampl": 17, "outlier_sampl": 17, "theta": [17, 106], "estimators_": [17, 33, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "max_tree_depth": 17, "get_depth": [17, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "rang": [17, 20, 21, 22, 23, 27, 30, 32, 33, 38, 49, 50, 51, 56, 98, 99], "polar": [17, 63, 64, 100, 101], "radii_in": 17, "radii_out": 17, "get": [17, 20, 21, 22, 23, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "radii": 17, "lw": [17, 21, 22], "b": [17, 33, 68], "max_depth_tre": 17, "leaf_index": 17, "appli": [17, 20, 21, 22, 23, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 116, 117, 118], "_decision_path_length": 17, "squeez": [17, 38, 44, 46, 47, 48], "j": [17, 20, 54, 69, 71, 72, 90, 91, 94, 96, 97, 104, 106], "nnomin": 17, "round": [17, 21, 32, 43, 44, 45, 46, 47, 48, 49, 50, 54, 55, 57, 58, 59, 60, 61, 62, 85, 117, 118], "var": 17, "xlabel": [17, 20, 22, 23, 27, 37, 39], "set_xticklabel": [17, 37, 39], "get_xaxi": 17, "set_vis": 17, "get_yaxi": 17, "sahand": 17, "hariri": 17, "matia": 17, "carrasco": 17, "kind": 17, "robert": [17, 68], "brunner": 17, "ieee": [17, 51, 69, 71, 72, 75], "transact": [17, 51], "engin": 17, "33": [17, 93], "1479": 17, "1489": 17, "2019": [17, 54, 94], "798": [17, 18, 108], "plot_extended_isolation_forest": [17, 18, 108], "07": [18, 108], "outlier_detect": [18, 108], "comparison": [20, 30, 31, 32, 34, 61, 62], "dure": [20, 30, 38, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 119], "desir": [20, 23, 82, 106], "li": [20, 21, 22, 23, 59, 60, 64, 98, 99, 103, 105, 107, 113, 114, 115, 116, 117, 118, 119, 120], "point": [20, 21, 27, 32, 33, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 78, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107], "wa": [20, 21, 22, 23, 52, 53, 54, 55, 57, 58, 59, 61, 62, 63, 64, 82, 83, 84, 85, 100, 101, 106, 116, 119], "heavili": [20, 21, 22, 23], "inspir": [20, 21, 22, 23], "packag": [20, 21, 22, 23, 103, 104], "randomforestregressor": [20, 21, 22, 52, 53, 58, 60, 81, 82, 84, 92], "four": [20, 30, 52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "simpl": [20, 27, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "illustr": 20, "midpoint": 20, "detail": [20, 30, 31, 32, 34, 37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 69, 71, 72, 81, 82, 83, 84, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "006aff": [20, 21, 22], "ffd237": 20, "0d4599": 20, "f2a619": [20, 21, 22], "a6e5ff": [20, 23], "025": [20, 21, 22], "975": [20, 21, 22], "y_median": 20, "y_err": 20, "fell": [20, 21, 22, 23], "leaf_id": [20, 21, 22, 23], "dictionari": [20, 21, 22, 23, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "map": [20, 21, 22, 23, 33, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "node_to_indic": [20, 21, 22, 23], "id": [20, 21, 22, 23, 30, 31, 34], "fall": [20, 21, 22, 23, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "leaf_ids_test": [20, 21, 22, 23], "y_pred_quantil": [20, 21, 23], "merg": [20, 21, 22, 23], "sublist": [20, 21, 22, 23], "quatil": [20, 21, 22, 23], "predit": [20, 21, 22, 23], "y_pred": [20, 21, 22, 52, 53, 58, 60, 61, 62, 91, 93, 97, 99], "sc": 20, "zorder": 20, "eb": 20, "median": [20, 21, 22, 23, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "errorbar": 20, "yerr": 20, "ecolor": 20, "fmt": 20, "75": [20, 37, 44, 114], "xtick": 20, "tolist": 20, "actual": [20, 23, 37, 38, 39, 51], "plot_quantile_interpolation_with_rf": [20, 24, 108], "california": 21, "hous": 21, "being": [21, 56, 67, 106], "95": [21, 22], "bound": [21, 38, 78, 80, 119], "ticker": 21, "funcformatt": 21, "kfold": 21, "util": [21, 23, 34, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "check_random_st": [21, 23], "argument": [21, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 115, 116, 117, 118], "ani": [21, 38, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 113, 119], "variat": [21, 32], "get_quantile_predict": 21, "dollar_formatt": 21, "lambda": [21, 106], "format": [21, 33, 37, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 100, 101], "price": 21, "fetch_california_h": 21, "min": [21, 33, 51], "perm": 21, "kf": 21, "n_split": [21, 30, 31, 32, 34], "get_n_split": 21, "y_true": [21, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 58, 60, 61, 62, 91, 93, 97, 99], "y_pred_low": [21, 22], "y_pred_upp": [21, 22], "train_index": 21, "test_index": 21, "set_param": [21, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "y_pred_i": 21, "dollar": 21, "1e5": 21, "confid": [21, 22, 54, 106], "against": 21, "segment": [21, 100], "halfwai": 21, "ax1": 21, "ax2": 21, "nrow": [21, 38], "ncol": [21, 38], "y_pred_interv": 21, "sort_idx": 21, "argsort": 21, "y_min": [21, 33], "minimum": [21, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "y_max": [21, 33], "float": [21, 30, 31, 32, 34, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "mid": [21, 44, 45, 49], "upp": 21, "e0f2ff": [21, 22], "m": [21, 22, 59, 60, 68, 98, 99, 103, 105, 106], "_": [21, 27, 43, 44, 45, 46, 47, 48, 49, 50], "grei": 21, "grid": [21, 32, 33, 38], "xaxi": 21, "set_major_formatt": 21, "yaxi": 21, "set_xlim": 21, "fill_between": [21, 22, 44, 48], "subplots_adjust": 21, "pad": [21, 27, 33], "704": [21, 24, 108], "plot_quantile_regression_intervals_with_rf": [21, 24, 108], "function": [22, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 73, 77, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 106, 117, 118], "noisi": [22, 32, 67, 68], "make_toy_dataset": 22, "lognorm": 22, "atleast_2d": 22, "xx": [22, 33], "max_depth": [22, 30, 31, 32, 33, 34, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "y_pred_quatil": 22, "y_pred_m": 22, "shade": 22, "dot": [22, 67], "ravel": [22, 33], "196": [22, 24, 108], "112": [22, 24, 42, 108], "plot_quantile_toy_example_with_rf": [22, 24, 108], "synthet": 23, "skew": 23, "sp": 23, "obliquerandomforestregressor": [23, 105, 113], "5000": [23, 44], "skewnorm_rv": 23, "skewnorm": 23, "rv": 23, "regr_orf": 23, "y_pred_orf": 23, "idea": 23, "better": [23, 96, 97, 105, 106], "off": [23, 32, 78, 119], "c0c0c0": 23, "e7a4f5": 23, "qrf": 23, "orf": [23, 30, 31], "hist": [23, 43, 44, 45, 46, 47, 48, 49, 50], "count": [23, 43, 44, 45, 49, 50, 102], "530": [23, 24, 108], "plot_quantile_vs_standard_oblique_forest": [23, 24, 108], "351": 24, "quantile_predict": [24, 108], "quantil": [24, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 108], "04": [24, 28, 40, 42, 108], "03": [24, 35, 40, 108, 119], "920": [24, 108], "000": 25, "A": [25, 30, 31, 32, 34, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 113], "pair": [27, 33, 102, 106], "boundari": [27, 33, 38, 56, 59, 60, 98, 99, 113], "made": [27, 119], "threshold": [27, 30, 44, 46, 47, 48, 51, 106], "rule": 27, "infer": [27, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "built": [27, 30, 33, 92, 93, 105, 106], "load_iri": [27, 33, 90, 92, 94, 96, 106], "_lib": [27, 37, 38, 39], "plot_tre": 27, "obliquedecisiontreeclassifi": [27, 39, 54, 55, 57, 59, 97, 106], "ship": 27, "plot_color": 27, "ryb": 27, "plot_step": [27, 33], "clf_label": 27, "123456": [27, 32, 34], "flatten": [27, 38], "pairidx": 27, "onli": [27, 33, 38, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "h_pad": [27, 33], "w_pad": [27, 33], "cmap": [27, 33, 37, 38, 39], "rdylbu": 27, "feature_nam": [27, 33], "target_nam": 27, "suptitl": [27, 33, 38], "borderpad": 27, "handletextpad": 27, "tight": [27, 33], "home": 27, "circleci": 27, "sklearn_vs_sktre": [27, 28, 108], "plot_iris_dtc": [27, 28, 108], "73": [27, 91], "userwarn": 27, "No": 27, "colormap": 27, "ignor": [27, 44, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "togeth": [27, 33, 106, 107], "fill": [27, 33], "217": [27, 28, 108], "openml": [30, 31, 34], "benchmark": [30, 31, 34, 103], "suit": [30, 31, 34], "classic": [30, 92, 93], "look": [30, 37, 38, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 109], "group": [30, 37, 92, 93, 106, 107], "drawn": [30, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 79, 81, 82, 83, 84, 85, 92, 93, 105], "select": [30, 37, 51, 53, 58, 60, 62, 68, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "among": [30, 55, 57, 58, 59, 60, 63, 64, 69, 71, 72, 78, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "chosen": [30, 52, 53, 54, 61, 62, 85, 90, 91, 92, 93, 94], "greedi": [30, 54], "phish": [30, 31, 34], "websit": [30, 31, 34], "http": [30, 31, 32, 34, 64, 68, 69, 71, 72, 90, 91, 94, 96, 97, 104, 105, 106, 107], "www": [30, 31, 34, 68, 90, 91, 94, 96, 97], "search": [30, 31, 32, 34, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "type": [30, 31, 33, 34, 54, 69, 71, 72, 81, 82, 83, 84, 85, 86, 87, 88, 89, 94, 106, 113], "4534": [30, 31, 34], "wdbc": [30, 34], "1510": [30, 34], "lsvt": 30, "1484": 30, "har": [30, 31], "1478": [30, 31], "cnae": [30, 34], "1468": [30, 34], "subsampl": [30, 31, 34, 51, 54, 85, 94, 106], "constraint": [30, 34, 52, 53, 61, 62, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "veri": [30, 33, 52, 53, 54, 57, 58, 59, 60, 61, 62, 90, 91, 92, 93, 94, 96, 97], "856": 30, "mostli": [30, 39], "zero": [30, 32, 39, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "datatyp": [30, 31], "nomin": [30, 31], "455": 30, "numer": [30, 31, 34, 118], "310": 30, "561": 30, "864": 30, "deliber": [30, 31], "ci": [30, 31], "appropri": [30, 31], "bia": [30, 105], "tradeoff": [30, 106], "substanti": 30, "faster": [30, 31, 100, 119], "omit": [30, 52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "computation": [30, 83, 84], "expens": [30, 83, 84], "main": [30, 51, 104], "stem": [30, 86, 89], "omiss": 30, "ascend": 30, "henc": [30, 105], "complex": [30, 52, 53, 54, 57, 58, 59, 60, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 110], "nlog": 30, "draw": [30, 31, 32, 34, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "suitabl": 30, "affect": 30, "geurt": [30, 31, 52, 53, 62, 92, 93], "ernst": [30, 31, 52, 53, 62, 92, 93], "wehenkel": [30, 31, 52, 53, 62, 92, 93], "63": [30, 31, 52, 53, 62, 92, 93, 113], "2006": [30, 31, 52, 53, 62, 92, 93, 100], "n_cv": [30, 31, 32, 34], "time_taken": [30, 31], "phishingwebsit": [30, 34], "eorf": [30, 31], "348328": 30, "275013": 30, "331699": 30, "330550": 30, "286521": 30, "943425": 30, "023028": 30, "056434": 30, "988644": 30, "005241": 30, "datetim": [30, 31, 32, 34], "fetch_openml": [30, 31, 34], "repeatedkfold": [30, 31, 32, 34], "cross_valid": [30, 31, 32, 34], "extraobliquerandomforestclassifi": [30, 31, 33], "obliquerandomforestclassifi": [30, 31, 32, 33, 34, 105], "max_sample_s": [30, 31], "phishing_websit": [30, 31], "cnae_9": 30, "data_id": [30, 31, 34], "load_cc18": [30, 31, 34], "as_fram": [30, 31, 34], "parser": [30, 31, 34], "d_name": [30, 31, 34], "frame": [30, 31, 34], "iloc": [30, 31, 32, 34], "get_scor": [30, 31, 32, 34], "kwarg": [30, 31, 32, 34, 51, 63, 64, 100, 101, 117, 118], "tmp": [30, 31, 32, 34], "t0": [30, 31, 32, 34], "test_scor": [30, 31, 32, 34], "accuraci": [30, 31, 32, 34, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85, 90, 92, 94, 95, 96, 98], "convert": [30, 31, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 79, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "taken": [30, 31, 67, 69, 95, 96, 97, 105], "total_second": [30, 31], "explod": [30, 31, 32, 34], "reset_index": [30, 31, 32, 34], "inplac": [30, 31, 32, 34], "param": [30, 31, 32, 34, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "concat": [30, 31, 34], "from_dict": 30, "orient": 30, "index": [30, 37, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 119], "groupbi": [30, 31], "set_size_inch": [30, 31, 34], "stripplot": [30, 32, 34], "queri": [30, 32, 34, 56], "dodg": [30, 32, 34], "boxplot": [30, 32, 34], "white": [30, 32, 34, 37, 39], "032": [30, 35, 108], "181": [30, 35, 108], "plot_extra_oblique_random_forest": [30, 35, 108], "purpos": [31, 33, 104], "chang": [31, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "11055": 31, "10299": 31, "562": 31, "section": [31, 33, 68], "focu": 31, "notabl": [31, 34, 117], "grow": [31, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "linearli": [31, 39, 68], "signific": [31, 105], "sample_s": 31, "n_row": [31, 33, 38], "df_tmp": 31, "41": [31, 35, 108], "694": [31, 35, 108], "175": [31, 35, 108], "plot_extra_orf_sample_s": [31, 35, 108], "problem": [32, 52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98, 103, 110], "xor": 32, "task": [32, 33, 103], "limit": [32, 56, 110, 115], "carri": [32, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "about": [32, 106], "odd": 32, "greater": [32, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "otherwis": [32, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 67, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "further": 32, "public": [32, 37, 38, 39, 105], "epub": 32, "siam": [32, 59, 60, 98, 99, 100, 103, 105], "doi": [32, 59, 60, 64, 69, 71, 72, 98, 99, 105, 106, 107], "epdf": 32, "1137": [32, 59, 60, 98, 99, 105], "9781611974973": 32, "56": 32, "It": [32, 34, 43, 45, 49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 79, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 106, 107], "took": [32, 34], "sparse_par": 32, "p_star": 32, "random_se": [32, 33, 77, 78, 80], "OF": [32, 34], "hyper": 32, "t_d": 32, "rff": 32, "plot_sim_": 32, "jpg": 32, "349": [32, 35, 108], "plot_oblique_axis_aligned_forests_sparse_par": [32, 35, 108], "sepal": 33, "width": [33, 98, 99], "length": [33, 38, 51, 54, 55, 56, 57, 59, 68, 73, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "petal": 33, "third": [33, 34, 37], "extraobliquerandomforest": 33, "92": 33, "obliquerandomforest": 33, "9866666666666667": 33, "9933333333333333": 33, "listedcolormap": [33, 37, 39], "1234": [33, 79], "spectral": 33, "fine": 33, "step": [33, 51, 73], "contour": 33, "plot_step_coars": 33, "coars": 33, "guess": 33, "plot_idx": 33, "n_model": 33, "sec": 33, "std": 33, "consol": 33, "str": [33, 44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 77, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "slice": [33, 73, 81, 82], "awai": 33, "useless": 33, "part": [33, 37, 38, 39], "string": [33, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "model_titl": 33, "model_detail": 33, "hasattr": 33, "fontsiz": 33, "mesh": 33, "input": [33, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106], "x_min": 33, "x_max": 33, "yy": 33, "meshgrid": 33, "blend": 33, "isinst": 33, "z": [33, 38, 74, 77, 78, 80], "c_": 33, "contourf": 33, "choos": [33, 54, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "adaboost": 33, "fewer": 33, "good": [33, 105], "enough": 33, "earli": 33, "estimator_alpha": 33, "coarser": 33, "regularli": 33, "space": [33, 34, 55, 56, 63, 64, 75, 77, 95, 100, 101, 106], "outlin": 33, "xx_coarser": 33, "yy_coars": 33, "z_points_coars": 33, "cs_point": 33, "move": 33, "next": [33, 55, 69, 71, 72, 95, 104], "sequenc": [33, 73, 100], "subset": [33, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 92, 94, 95, 96, 98, 106], "12": [33, 38], "obliquedecisiontre": 33, "extraobliquedecisiontre": 33, "basic": [33, 90, 91, 92, 93, 94], "decisiontre": 33, "three": [33, 34, 37], "distinct": [33, 67], "29": [33, 35, 108], "964": [33, 35, 108], "2318": [33, 35, 108], "plot_oblique_forests_iri": [33, 35, 108], "31": 34, "former": [34, 62], "entir": [34, 55, 59, 60, 95, 98, 99], "latter": [34, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "normin": 34, "dub": 34, "statu": 34, "activ": [34, 104], "857": 34, "notic": [34, 90, 91, 92, 93], "mechan": [34, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "practic": [34, 37, 38, 39, 105, 110], "object": [34, 37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107], "926": [34, 35, 108], "plot_oblique_random_forest": [34, 35, 108], "14": [35, 45], "965": 35, "sparse_oblique_tre": [35, 108], "oper": [37, 90, 94, 96, 98, 99], "under": [37, 48, 103], "assumpt": 37, "hyperparamet": [37, 38, 39, 106, 116], "relat": [37, 38, 39, 51, 115, 119], "privat": [37, 38, 39], "cython": [37, 38, 39, 100, 101, 104, 114, 119], "patch": [37, 59, 60, 98, 99, 113, 116, 119], "api": [37, 38, 39, 51, 56, 63, 64, 85, 98, 99, 100, 101, 103, 104, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "just": [37, 38, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 78, 81, 82, 85, 104], "wrapper": [37, 38, 39], "underli": [37, 38, 39, 54, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 119], "relev": [37, 38, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "scalarmapp": [37, 39], "_criterion": [37, 38, 39], "gini": [37, 38, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "_oblique_splitt": [37, 39], "multiviewsplittertest": 37, "min_samples_leaf": [37, 38, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "min_weight_leaf": [37, 38, 39], "intp": [37, 69, 71, 72], "n_feature_set": [37, 55, 95], "max_features_per_set_": [37, 95], "monotonic_cst": [37, 38, 39, 52, 53, 61, 62, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 114], "missing_value_feature_mask": [37, 38, 39], "dummi": [37, 38, 39], "repeat": [37, 38, 69, 71, 72, 78], "float32": [37, 38, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "float64": [37, 38, 39, 69, 71, 72, 91, 93, 97, 99], "intern": [37, 39, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107], "expos": [37, 39], "tester": 37, "directli": [37, 38, 39, 119], "init_test": [37, 38, 39], "though": 37, "contigu": [37, 38, 59, 60, 98, 99], "projection_matrix": [37, 39], "sample_projection_matrix_pi": [37, 38, 39], "heatmap": [37, 39], "imshow": [37, 38, 39], "aspect": [37, 39], "axvlin": [37, 44, 46, 47], "iend": 37, "vector": [37, 39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 69, 71, 72, 79, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 106, 107], "set_yticklabel": [37, 39], "mappabl": [37, 39], "sm": [37, 39], "set_arrai": [37, 39], "empti": [37, 39, 54, 85, 94], "tick": [37, 39], "set_label": [37, 39], "weight": [37, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 113, 119], "previou": [37, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 85, 119], "setup": [37, 69], "max_features_per_set": 37, "factor": [37, 51, 68, 69, 71, 72], "want": 37, "onc": [37, 81, 82, 86], "control": [37, 39, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 68, 69, 71, 72, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 116, 118], "503": [37, 40, 108], "plot_multiview_axis_aligned_splitt": [37, 40, 108], "patchobliquedecisiontreeclassifi": [38, 59], "done": [38, 73, 98, 99, 105, 116], "data_dim": [38, 59, 60, 98, 99], "n_col": 38, "n_depth": 38, "robust": [38, 103], "hyperrectangl": 38, "start": [38, 71, 72, 81, 82, 104], "min_patch_dim": [38, 59, 60, 98, 99], "max_patch_dim": [38, 59, 60, 98, 99], "constrain": [38, 106], "arbitrarili": [38, 53, 58, 60, 62, 91, 93, 97, 99], "_morf_splitt": 38, "bestpatchsplittertest": 38, "sake": [38, 39], "feature_weight": [38, 59, 60, 98, 99], "th": [38, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "appear": [38, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "dim_contigu": [38, 59, 60, 98, 99], "proj_mat": 38, "sharex": 38, "sharei": 38, "viridi": 38, "nonzero": 38, "custom": [38, 52, 53, 61, 62, 63, 64], "set_zlim": 38, "necessarili": [38, 56, 105], "certain": 38, "n_channel": 38, "n_time": 38, "channel": 38, "877": [38, 40, 108], "plot_projection_matric": [38, 40, 108], "small": [39, 52, 54, 55, 57, 58, 59, 61, 63, 64, 85], "element": [39, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "candid": [39, 105, 106, 116], "bestobliquesplittertest": 39, "orang": 39, "683": [39, 40, 108], "plot_sparse_projection_matrix": [39, 40, 108], "062": 40, "09": [40, 44, 108], "treepl": [42, 71, 72, 88, 103, 108], "treeple_tutorial_pvalue_multiview": [42, 50, 108], "311": [42, 50, 108], "treeple_tutorial_pvalu": [42, 49, 108], "47": [42, 43, 49, 108], "642": [42, 49, 108], "treeple_tutorial_cmi": [42, 43, 108], "656": [42, 43, 108], "treeple_tutorial_gmm": [42, 44, 108], "884": [42, 44, 108], "treeple_tutorial_sa98_multiview": [42, 47, 108], "624": [42, 47, 108], "treeple_tutorial_pauc": [42, 48, 108], "598": [42, 48, 108], "treeple_tutorial_mi": [42, 45, 108], "267": [42, 45, 108], "treeple_tutorial_sa98": [42, 46, 108], "130": [42, 46, 108], "make_trunk_classif": [43, 45, 46, 47, 48, 49, 50, 69, 118, 119], "build_hyppo_oob_forest": [43, 45, 46, 47, 48, 49, 50], "joint": [43, 50, 68, 81, 82], "With": [43, 45, 46, 47, 48, 49, 50], "mu_0": [43, 44, 45, 46, 47, 48, 49, 50, 71, 72], "mu_1": [43, 44, 45, 46, 47, 48, 49, 50, 71, 72], "initi": [43, 45, 46, 47, 48, 49, 50, 81, 82], "bootstrap": [43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 73, 81, 82, 83, 84, 85, 86, 87, 88, 89, 105, 118], "observe_proba": [43, 45, 46, 47, 48, 49, 50], "nanmean": [43, 45, 46, 47, 48, 49, 50], "single_proba": [43, 50], "calculate_mi": [43, 44, 45, 49, 50], "y_pred_proba": [43, 44, 45, 46, 47, 48, 49, 50], "h_yx": [43, 44, 45, 49, 50], "empir": [43, 44, 45, 49, 50, 54, 62, 85, 94, 106], "return_count": [43, 44, 45, 49, 50], "h_y": [43, 44, 45, 49, 50, 66], "joint_mi": [43, 50], "warn": [44, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "multivariate_norm": 44, "roccurvedisplai": [44, 46, 47, 48], "roc_auc_scor": [44, 48], "roc_curv": [44, 46, 47, 48], "make_trunk_mixture_classif": [44, 119], "filterwarn": 44, "know": [44, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "suffici": 44, "amount": [44, 51, 54, 92, 93], "mix": [44, 49, 50, 72], "f_": [44, 49, 50], "mathbb": [44, 48], "pdf_class0": 44, "compon": [44, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 68, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "pdf_class1_0": 44, "pdf_class1_1": 44, "pdf_class1": 44, "balanc": [44, 52, 54, 55, 57, 59, 61, 65, 66, 85, 90, 92, 94, 95, 96, 98], "p_x": 44, "frac": [44, 48, 53, 58, 60, 62, 75, 76, 91, 93, 97, 99, 107], "pos_class0": 44, "pos_class1": 44, "po": [44, 48], "calculate_sa": [44, 46, 47], "check": [44, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 119], "ndim": [44, 46, 47, 48], "rais": [44, 46, 47, 48, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "valueerror": [44, 46, 47, 48], "must": [44, 46, 47, 48, 52, 54, 55, 57, 58, 59, 61, 67, 69, 71, 72, 78, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 100, 101], "1d": [44, 46, 47, 48, 56, 59, 60, 67, 98, 99], "find": [44, 46, 47, 48, 53, 56, 58, 60, 62, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107, 115], "fpr": [44, 46, 47, 48], "tpr": [44, 46, 47, 48], "pos_label": [44, 46, 47, 48], "drop_intermedi": [44, 46, 47, 48], "sa98": [44, 46, 47], "roc": [44, 46, 47, 48], "spec": [44, 46, 47], "ymin": [44, 46, 47], "ymax": [44, 46, 47], "xmin": [44, 46, 47], "xmax": [44, 46, 47], "calculate_pauc": [44, 48], "h": [45, 49, 74, 75, 76, 106], "sensit": [46, 47, 86, 89], "rate": [46, 47, 48, 116], "out": [47, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 83, 84, 85, 86, 87, 88, 89, 105, 118, 119], "simpler": [47, 107], "x_z": 47, "integr": [48, 65, 69], "percentag": 48, "Then": [48, 81, 82, 89, 102, 104], "int_": 48, "t_r": 48, "infti": 48, "mathcal": [48, 67, 107], "eta": 48, "x_0": 48, "df_1": 48, "df_0": 48, "xy": 49, "f_x": 49, "f_y": 49, "h_a": [49, 50], "neq": [49, 50], "would": [49, 50, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 116, 119], "confirm": [49, 50], "x_null": [49, 50], "y_null": 49, "est_nul": [49, 50], "null_proba": [49, 50], "mi_nul": 49, "observed_diff": [49, 50], "mix_diff": [49, 50], "proba": [49, 50, 90, 92, 94, 95, 96, 98], "mi_mix_on": [49, 50], "mi_mix_two": [49, 50], "joint_mi_nul": 50, "cmi_nul": 50, "49": 50, "auto": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "contamin": 51, "verbos": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 86, 87, 88, 89, 104], "warm_start": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "read": [51, 52, 53, 57, 58, 61, 62, 90, 91, 92, 93, 94, 96, 97], "default": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 115], "256": [51, 69, 71, 72], "larger": [51, 54, 73, 85, 94, 105], "paper": [51, 69, 86, 105, 106], "n_features_in_": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "enabl": [51, 54, 86, 87, 88, 89, 100, 114], "lead": [51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 90, 91, 92, 93, 94, 96, 97, 105, 119], "longer": 51, "bool": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "individu": 51, "consid": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 69, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 115], "extraobliquedecisiontreeregressor": [51, 114], "job": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 77, 85], "parallel": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 77, 85, 86, 89], "unless": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "joblib": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 104], "parallel_backend": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85], "context": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85], "processor": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85], "glossari": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 73, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "pseudo": 51, "branch": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "reus": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85], "whole": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85], "version": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 106, 111], "ellipticenvelop": 51, "svm": 51, "oneclasssvm": 51, "unsupervis": [51, 63, 64, 100, 101, 103, 110, 113, 114], "support": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106, 113, 117, 118], "libsvm": 51, "localoutlierfactor": 51, "local": [51, 104], "lof": 51, "extratreeregressor": [51, 53, 92], "ceil": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "log_2": 51, "liu": 51, "et": [51, 86, 103], "al": [51, 86, 103], "2008": [51, 69, 71, 72], "refer": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 69, 70, 71, 72, 75, 81, 82, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "fei": 51, "toni": 51, "ting": 51, "kai": 51, "ming": 51, "zhou": 51, "zhi": 51, "hua": 51, "mine": [51, 64, 100, 107], "icdm": 51, "eighth": 51, "confer": [51, 64, 100, 107], "acm": [51, 64, 107], "discoveri": [51, 64, 107], "tkdd": 51, "2012": 51, "attribut": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 68, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 119], "estimator_": [51, 52, 53, 61, 62, 63, 64, 81, 82, 94], "child": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "templat": [51, 52, 53, 54, 61, 62, 63, 64, 85, 94], "sub": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 118], "estimators_features_": 51, "ndarrai": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 68, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "estimators_samples_": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "max_samples_": 51, "offset_": 51, "offset": 51, "raw": 51, "score_sampl": 51, "equal": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 116], "seen": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "feature_names_in_": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "sever": [51, 54, 57, 58, 59, 60, 61, 62, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "n_left": 51, "path": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "array_lik": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 70, 73, 74, 75, 76, 78, 79, 80, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "csr_matrix": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "abnorm": 51, "csc_matrix": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "Not": [51, 56, 63, 64, 95, 96, 97, 98, 99, 100, 101], "convent": [51, 56, 63, 64, 100, 101], "self": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "fit_predict": [51, 63, 64, 100, 101], "get_metadata_rout": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "metadata": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "rout": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "metadatarequest": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "encapsul": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "get_param": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "deep": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105], "subobject": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "is_inli": 51, "tell": 51, "accord": [51, 56, 86, 89], "opposit": 51, "set_fit_request": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "unchang": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "request": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "enable_metadata_rout": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "set_config": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "option": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 115], "meta": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "error": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "alia": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "metadata_rout": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "retain": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "exist": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "insid": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 113], "pipelin": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "effect": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 109], "updat": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "nest": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "__": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "properti": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 115, 118], "dynam": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85], "identifi": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 107], "member": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85], "bag": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 86, 87, 88, 89, 118, 119], "re": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "reduc": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 96, 97, 105], "footprint": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85], "fetch": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85], "mai": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107], "slower": [51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85], "min_samples_split": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114], "min_weight_fraction_leaf": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "max_leaf_nod": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "min_impurity_decreas": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "oob_scor": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "class_weight": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "ccp_alpha": [52, 53, 54, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "max_bin": [52, 53, 61, 62], "store_leaf_valu": [52, 53, 61, 62, 90, 91, 92, 93, 95, 96, 97, 98, 99], "log_loss": [52, 61, 90, 92], "qualiti": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107], "criteria": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 107], "impur": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106], "shannon": [52, 61, 90, 92], "gain": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "mathemat": [52, 59, 60, 61, 63, 64, 90, 92, 98, 99, 103, 105, 110], "formul": [52, 61, 63, 64, 90, 92, 110], "expand": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "until": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "pure": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "fraction": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "least": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 119], "smooth": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "especi": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "log2": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114], "stop": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "partit": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 75, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 106], "found": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 69, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "rel": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 107], "reduct": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "unlimit": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "induc": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "decreas": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 71, 72, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "equat": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "n_t": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "n_t_r": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "right_impur": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "n_t_l": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "left_impur": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "current": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106], "callabl": [52, 53, 61, 62, 63, 64, 67, 78, 80, 100, 101], "accuracy_scor": [52, 61], "signatur": [52, 53, 61, 62, 63, 64], "decision_path": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "learner": [52, 53, 61, 62], "balanced_subsampl": [52, 54, 55, 57, 59, 61, 85], "class_label": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "suppos": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "output": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 110, 113, 119], "multioutput": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "multilabel": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "everi": [52, 54, 55, 57, 59, 60, 61, 85, 90, 92, 94, 95, 96, 98, 99, 106], "mode": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98, 104], "automat": [52, 54, 55, 57, 59, 61, 73, 85, 90, 92, 94, 95, 96, 98], "adjust": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "invers": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "frequenc": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "bincount": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "except": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85, 91, 93, 97, 99, 105], "grown": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85, 90, 91, 92, 93, 94, 96, 97], "multipli": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "through": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "minim": [52, 53, 54, 58, 60, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106, 107], "cost": [52, 53, 54, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106], "prune": [52, 53, 54, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "subtre": [52, 53, 54, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "largest": [52, 53, 54, 61, 62, 78, 85, 90, 91, 92, 93, 94], "255": [52, 53, 61, 62], "miss": [52, 53, 61, 62, 90, 91, 92, 93, 94, 106], "experiment": [52, 53, 61, 62, 90, 91, 92, 93, 95, 103, 114, 115, 116], "get_leaf_node_sampl": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "monoton": [52, 53, 61, 62, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "enforc": [52, 53, 54, 61, 62, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "multiclass": [52, 61, 90, 92, 94], "n_outputs_": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "hold": [52, 61, 90, 92, 94], "extratreesregressor": [52, 62, 92, 93], "optim": [52, 53, 98, 99, 106, 119], "etc": [52, 53, 54, 57, 58, 59, 60, 61, 62, 77, 90, 91, 92, 93, 94, 96, 97], "fulli": [52, 53, 54, 57, 58, 59, 60, 61, 62, 81, 82, 90, 91, 92, 93, 94, 96, 97], "unprun": [52, 53, 54, 57, 58, 59, 60, 61, 62, 90, 91, 92, 93, 94, 96, 97], "potenti": [52, 53, 54, 57, 58, 59, 60, 61, 62, 90, 91, 92, 93, 94, 96, 97, 99], "consumpt": [52, 53, 54, 57, 58, 59, 60, 61, 62, 90, 91, 92, 93, 94, 96, 97], "extratreeclassifi": [52, 93], "base_estimator_": [52, 53, 61, 62], "renam": [52, 53, 61, 62], "classes_": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "n_classes_": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "feature_importances_": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 115], "oob_score_": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "oob_decision_function_": [52, 54, 55, 57, 58, 59, 61, 63, 64, 85], "n_output": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 73, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "never": [52, 54, 55, 57, 58, 59, 61, 63, 64, 85], "nan": [52, 54, 55, 57, 58, 59, 61, 63, 64, 82, 85, 94], "x_leav": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "datapoint": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "up": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 117, 118], "n_node": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "goe": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "csr": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "n_nodes_ptr": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "give": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 96, 97], "real": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85, 91, 93, 97, 99], "net": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "possibli": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 67, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 106], "leaf_node_sampl": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "reach": [52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "n_leaf_node_sampl": [52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "partial_fit": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98, 114], "subsequ": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "That": [52, 54, 55, 57, 59, 61, 63, 64, 85, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "highest": [52, 54, 55, 57, 59, 61, 63, 64, 85, 90, 94, 96], "predict_log_proba": [52, 54, 55, 57, 59, 61, 85, 90, 92, 95, 96, 98], "predict_quantil": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "keyword": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 114, 115, 118], "accept": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 77, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "n_quantil": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85], "harsh": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "set_partial_fit_request": [52, 54, 55, 57, 59, 61, 85, 90, 92, 94, 95, 96, 98], "set_score_request": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "brought": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "mislead": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "cardin": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105], "mani": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 105, 106, 114], "permutation_import": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "root": [52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 85, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 116], "squared_error": [53, 58, 60, 62, 91, 93, 97, 99], "absolute_error": [53, 58, 60, 62, 91, 93, 97, 99], "friedman_ms": [53, 58, 60, 62, 91, 93, 97, 99], "poisson": [53, 58, 60, 62, 91, 93, 97, 99], "l2": [53, 58, 60, 62, 91, 93, 97, 99], "loss": [53, 58, 60, 62, 91, 93, 97, 99, 106], "termin": [53, 58, 60, 62, 91, 93, 97, 99], "friedman": [53, 58, 60, 62, 90, 91, 93, 94, 96, 97, 99, 106], "absolut": [53, 58, 60, 62, 91, 93, 97, 99], "l1": [53, 58, 60, 62, 91, 93, 97, 99], "devianc": [53, 58, 60, 62, 91, 93, 97, 99], "mae": [53, 62, 91, 93], "r2_score": [53, 58, 60, 62, 91, 93, 97, 99], "extratreesclassifi": [53, 61, 92, 93], "load_diabet": [53, 91, 93, 97, 99], "return_x_i": [53, 91, 92, 93, 97, 99], "reg": [53, 93], "2727": 53, "decisiontreeregressor": [53, 61, 62, 90, 93, 97, 99], "oob_prediction_": [53, 60, 62], "coeffici": [53, 58, 60, 62, 91, 93, 97, 99], "residu": [53, 58, 60, 62, 91, 93, 97, 99], "wors": [53, 58, 60, 62, 91, 93, 97, 99], "constant": [53, 58, 60, 62, 91, 93, 97, 99], "alwai": [53, 54, 55, 57, 58, 59, 60, 61, 62, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 106], "disregard": [53, 58, 60, 62, 91, 93, 97, 99], "precomput": [53, 56, 58, 60, 62, 91, 93, 97, 99], "kernel": [53, 58, 60, 62, 70, 91, 93, 97, 99, 113], "n_samples_fit": [53, 58, 60, 62, 91, 93, 97, 99], "uniform_averag": [53, 58, 60, 62, 91, 93, 97, 99], "keep": [53, 58, 60, 62, 91, 93, 97, 99, 119], "influenc": [53, 58, 60, 62, 91, 93, 97, 99], "multioutputregressor": [53, 58, 60, 62, 91, 93, 97, 99], "honest_prior": [54, 85, 94], "tree_estimator_param": [54, 85, 94], "remain": [54, 85, 94], "deal": [54, 85, 94], "prior": [54, 67, 85, 94, 106, 107], "shallow": [54, 85, 94], "instanti": [54, 94], "basedecisiontre": [54, 56, 94, 102], "need": [54, 90, 91, 92, 93, 94, 104, 106, 109], "ident": [54, 57, 58, 59, 60, 61, 62, 69, 71, 72, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "determinist": [54, 57, 58, 59, 60, 61, 62, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "behaviour": [54, 57, 58, 59, 60, 61, 62, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "honesti": [54, 103, 106], "unbias": 54, "doubl": 54, "access": 54, "ineffici": 54, "recommend": [54, 63, 64, 96, 97, 98, 99, 103, 106], "propens": [54, 106], "causal": 54, "breiman": [54, 57, 58, 61, 62, 90, 91, 94, 96, 97, 105, 106], "45": [54, 57, 58, 61, 62, 68, 75, 105, 106, 113], "2001": [54, 57, 58, 61, 62, 105, 106], "athei": [54, 94], "tibshirani": [54, 68, 90, 91, 94, 96, 97, 106], "wager": [54, 94], "annal": [54, 68, 69, 71, 72, 94], "honest_forest": [54, 94], "honesttreeclassifi": [54, 85, 113, 119], "honest_decision_function_": [54, 85], "structure_indices_": [54, 85, 94], "n_structur": [54, 85, 94], "honest_indices_": [54, 85, 94], "n_honest": [54, 85, 94], "oob_samples_": [54, 55, 57, 58, 59, 60, 85, 118, 119], "n_samples_bootstrap": [54, 85], "fit_param": [54, 63, 64, 100, 101], "predict_proba_per_tre": [54, 55, 57, 59, 85, 119], "proba_per_tre": [54, 55, 57, 59, 85], "tradit": [55, 57, 58, 96, 97], "assum": [55, 95], "per": [55, 67, 81, 82, 85, 87, 95, 113, 116, 117, 118, 119], "n_features_": [55, 57, 58, 59, 60, 85], "compute_similarity_matrix": [55, 57, 58, 59, 60, 63, 64, 95, 96, 97, 98, 99, 100, 101], "sim_matrix": [55, 57, 58, 59, 60, 63, 64, 95, 96, 97, 98, 99, 100, 101], "n_neighbor": 56, "radiu": [56, 77, 78, 80], "distanc": [56, 63, 64, 77, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107], "baseforest": [56, 81, 82, 102], "kneighbor": 56, "radius_neighbor": 56, "return_dist": 56, "n_queri": 56, "n_index": 56, "constructor": 56, "neigh_dist": 56, "neigh_ind": 56, "popul": 56, "sort_result": 56, "ly": 56, "ball": 56, "around": [56, 114], "befor": [56, 67, 78, 81, 82, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "approxim": [56, 65, 66, 118], "lie": 56, "cannot": 56, "obliquedecisiontreeregressor": [58, 60, 113], "tomita": [58, 59, 60, 98, 99, 103, 105], "104": [58, 103, 105], "39": [58, 91, 103, 105], "2020": [58, 64, 103, 105, 107], "make_regress": [58, 60, 62], "regr": [58, 62], "86327109": 58, "along": [59, 60, 79, 81, 98, 99, 106], "presum": [59, 60, 98, 99], "un": [59, 60, 98, 99], "wrap": [59, 60, 98, 99], "adam": [59, 60, 98, 99, 103, 105, 113, 114, 115, 116, 117, 118, 119, 120], "chester": [59, 60, 98, 99, 105], "huynh": [59, 60, 98, 99, 105], "tyler": [59, 60, 98, 99, 103, 105], "jesu": [59, 60, 98, 99, 105], "jess": [59, 60, 98, 99, 105], "patsol": [59, 60, 98, 99, 105], "ben": [59, 60, 98, 99, 105], "falk": [59, 60, 98, 99, 105], "sridevi": [59, 60, 98, 99, 105], "sarma": [59, 60, 98, 99, 105], "toward": [59, 60, 98, 99, 103, 105], "gap": [59, 60, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105], "convolut": [59, 60, 98, 99, 103, 105], "network": [59, 60, 98, 99, 103, 105], "scienc": [59, 60, 98, 99, 103, 105], "77": [59, 60, 98, 99, 103, 105], "96": [59, 60, 98, 99, 103, 105], "2023": [59, 60, 68, 98, 99, 103, 105], "21m1449117": [59, 60, 98, 99, 105], "82818509": 60, "patchobliquedecisiontreeregressor": [60, 113], "histogram": [61, 62], "gradient": [61, 62], "boost": [61, 62], "histgradientboostingclassifi": 61, "fast": [61, 62, 100, 110], "big": [61, 62], "histgradientboostingregressor": 62, "rather": [62, 85, 107], "suggest": 62, "recent": 62, "justifi": 62, "32987858": 62, "twomean": [63, 64, 100, 101], "clustering_func": [63, 64, 100, 101], "clustering_func_arg": [63, 64, 100, 101], "simultan": [63, 64], "affin": [63, 64, 100, 101], "fastbic": [63, 64, 100, 101, 113], "maxim": [63, 64], "bayesian": [63, 64, 107], "calinski_harabasz_scor": [63, 64], "predicted_label": [63, 64], "silhouette_scor": [63, 64], "davies_bouldin_scor": [63, 64], "cpu": [63, 64], "construct": [63, 64, 86, 89, 105, 106], "continu": [63, 64, 82], "instant": [63, 64], "agglomerativeclust": [63, 64, 100, 101], "unsuperviseddecisiontre": [63, 64], "labels_": [63, 64], "int64": [63, 64, 100, 101], "fit_transform": [63, 64, 100, 101], "x_new": [63, 64, 100, 101], "n_features_new": [63, 64, 100, 101], "set_output": [63, 64, 100, 101], "introduc": [63, 64, 100, 101, 119], "configur": [63, 64, 100, 101], "typic": [63, 64, 100, 101, 106], "dens": [63, 64, 69, 71, 72, 100, 101, 106], "meghana": [64, 103, 107], "madhyastha": [64, 103, 107], "perci": [64, 107], "jame": [64, 105, 107], "brown": [64, 105, 107], "veronika": [64, 107], "strnadova": [64, 107], "neelei": [64, 107], "carei": [64, 105, 107], "prieb": [64, 105, 107], "randal": [64, 105, 107], "burn": [64, 105, 107], "geodes": [64, 77, 100, 103, 107], "proceed": [64, 100, 107], "26th": [64, 107], "sigkdd": [64, 107], "kdd": [64, 103, 107], "513": [64, 103, 107], "523": [64, 103, 107], "york": [64, 107], "ny": [64, 107], "usa": [64, 107], "machineri": [64, 107], "url": [64, 68, 69, 71, 72, 105, 107], "1145": [64, 107], "3394486": [64, 107], "3403094": [64, 107], "cov": [65, 66, 71, 72, 74, 75, 76, 79], "718281828459045": [65, 66], "arraylik": [65, 66, 71, 72, 77, 81, 82, 83, 84, 86, 87, 88, 89], "bit": [65, 66], "logarithm": [65, 66], "i_xi": [65, 66], "h_x": 65, "mixtur": [65, 67, 69, 72, 119], "h_xy": 65, "int_err": 65, "100000": 66, "h_y_on_x": 66, "return_lat": 67, "add_latent_nois": 67, "nonlinear": 67, "latent": 67, "2d": [67, 79, 90, 91, 92, 93, 98, 99], "match": [67, 105], "divid": 67, "poli": 67, "membership": 67, "p_i": 67, "mu_i": 67, "sigma_i": 67, "y_1": 67, "x_": 67, "np_i": 67, "y_": 67, "overset": 67, "sim": 67, "ey": 67, "shuffle_random_st": 67, "n_view": 68, "joint_rank": 68, "noise_std": 68, "return_decomp": 68, "rank": [68, 77, 105], "share": 68, "common": [68, 106, 107], "strength": 68, "orthonorm": 68, "view_load": 68, "n_features_i": [68, 77], "rotat": 68, "sval": 68, "singular": 68, "w_b": 68, "n_features_b": 68, "preserv": [68, 73, 81, 82], "inner": [68, 106], "product": [68, 106], "unitari": 68, "x_b": 68, "diag": 68, "e_b": 68, "yunjin": 68, "choi": 68, "jonathan": 68, "taylor": 68, "princip": 68, "2590": 68, "2617": 68, "2017": 68, "jstor": 68, "stabl": 68, "26362952": 68, "visit": 68, "26": 68, "4096": [69, 71, 72], "rho": [69, 71, 72], "band_typ": [69, 71, 72], "ma": [69, 71, 72], "return_param": [69, 71, 72], "scaling_factor": [69, 71, 72], "marron": [69, 119], "wand": [69, 119], "band": [69, 71, 72, 118], "skewed_unimod": 69, "strongly_skew": 69, "kurtotic_unimod": 69, "bimod": 69, "separated_bimod": 69, "skewed_bimod": 69, "trimod": 69, "claw": 69, "double_claw": 69, "asymmetric_claw": 69, "asymmetric_double_claw": 69, "smooth_comb": 69, "discrete_comb": 69, "trunk": [69, 71, 72, 118, 119], "becom": [69, 71, 72], "steve": 69, "matt": 69, "exact": [69, 106], "712": 69, "736": 69, "1992": [69, 119], "peter": [69, 71, 72], "bickel": [69, 71, 72], "elizaveta": [69, 71, 72], "levina": [69, 71, 72], "februari": [69, 71, 72], "dx": [69, 71, 72], "1214": [69, 71, 72], "009053607000000758": [69, 71, 72], "gerard": [69, 71, 72], "tran": [69, 71, 72, 75], "pattern": [69, 71, 72, 107], "anal": [69, 71, 72], "mach": [69, 71, 72], "intel": [69, 71, 72], "343": [69, 71, 72], "345": [69, 71, 72], "1982": [69, 71, 72], "1109": [69, 71, 72], "tpami": [69, 71, 72], "4767256": [69, 71, 72], "quadrat": 70, "sambit": [70, 113, 114, 115, 119], "interpret": 70, "characterist": 70, "preprint": [70, 103], "1812": 70, "00029": 70, "2018": 70, "ratio": [71, 72], "x_mixtur": 72, "conditional_arrai": 73, "nn_estim": 73, "replace_nbr": 73, "condition": [73, 78, 81, 82], "resampl": [73, 81, 82, 116], "modif": 73, "techniqu": [73, 107], "place": 73, "resampled_arrai": 73, "impact": 73, "x_index": 74, "y_index": 74, "z_index": 74, "true_mi": [74, 75, 76], "plug": 74, "entropy_gaussian": 74, "det": [75, 76], "georg": 75, "darbellai": 75, "igor": 75, "vajda": 75, "inf": 75, "theori": [75, 105], "1315": 75, "1321": 75, "1999": 75, "kd_tree": 77, "ksg": 77, "n_features_x": 77, "n_features_z": 77, "unsupervisedobliquerandomforest": 77, "knn": 77, "ball_tre": 77, "brute": 77, "preprocess": 77, "val": 77, "proce": 77, "kth": 77, "nbr": 77, "xyz": 77, "nn": [77, 100], "xz": 77, "yz": 77, "psi": 77, "n_x": 77, "n_y": 77, "n_": [77, 106], "digamma": 77, "n_i": 77, "denot": [77, 78, 106], "radius_a": 78, "radius_b": 78, "obs_noise_func": 78, "nature_noise_func": 78, "005": [78, 80], "return_mi_lb": [78, 80], "helix": 78, "smallest": 78, "defauult": 78, "func": 78, "lb": [78, 80], "approx": 78, "unif": 78, "afterward": 78, "epsilon_1": 78, "n_1": 78, "epsilon_2": 78, "n_2": 78, "epsilon_3": 78, "n_3": 78, "And": 78, "confound": 78, "impli": 78, "feed": 79, "noise_func": 80, "sphere": 80, "latitud": 80, "longitud": 80, "coordin": 80, "y2": 80, "y3": 80, "conditional_perm": [81, 82], "categor": 81, "describ": [81, 82, 100, 106], "metric_forest": [81, 82, 86], "metric_perm_forest": [81, 82, 86], "recomput": [81, 82], "rest": [81, 82, 106], "cach": [81, 82], "reset": [81, 82, 83, 84], "upon": [81, 82, 90, 91, 92, 93], "n_samples_test_": [81, 82], "final": [81, 82, 83, 84, 105, 106, 114], "indices_train_": [81, 82], "n_samples_train": [81, 82], "indices_test_": [81, 82], "samples_": [81, 82, 83, 84], "n_samples_fin": [81, 82, 83, 84], "null_dist_": [81, 82, 83, 84], "check_input": [81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "metric_kwarg": [81, 82, 83, 84, 86, 89], "n_covari": [81, 82, 83, 84, 86, 89], "mse": [81, 82, 83, 84, 106], "posterior_fin": [81, 82, 83, 84], "encount": [81, 82, 83, 84], "permute_stat_": [81, 82, 86, 89], "subtract": [81, 82, 86, 89], "pval": [81, 82], "train_test_samples_": [81, 82, 83, 84], "featureimportanceforestregressor": [83, 84, 115], "much": [83, 84, 106], "y_true_": [83, 84], "posterior_": [83, 84], "posterior_null_": [83, 84], "observe_stat": [83, 84, 86, 89], "permute_per_tre": 85, "namespac": 85, "permutation_indices_": 85, "were": [85, 115, 119], "covariate_index_": 85, "Will": 85, "perm_est": [86, 89], "most": [86, 87, 88, 89, 105, 106, 117], "orig_forest_proba": [86, 89], "perm_forest_proba": [86, 89], "oob": [87, 88], "fold": 87, "all_proba_list": 87, "est_kwarg": 88, "all_proba": 88, "permutaiton": 89, "permutationhonestforestclassifi": [89, 119], "But": [90, 91, 94, 95, 96, 97, 98, 99, 100, 101], "tree_": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "node_id": [90, 91, 92, 93], "xxx": [90, 91, 92, 93], "moreov": [90, 91, 92, 93, 106, 114, 115], "twice": [90, 91, 92, 93], "ram": [90, 91, 92, 93], "diskspac": [90, 91, 92, 93], "argmax": [90, 94, 96], "ti": [90, 94, 96], "lowest": [90, 94, 96], "en": [90, 91, 94, 96, 97, 106], "wikipedia": [90, 91, 94, 96, 97, 106], "wiki": [90, 91, 94, 96, 97, 106], "decision_tree_learn": [90, 91, 94, 96, 97, 106], "olshen": [90, 91, 94, 96, 97], "stone": [90, 91, 94, 96, 97], "wadsworth": [90, 91, 94, 96, 97], "belmont": [90, 91, 94, 96, 97], "ca": [90, 91, 94, 96, 97], "1984": [90, 91, 94, 96, 97], "hasti": [90, 91, 94, 96, 97, 106], "springer": [90, 91, 94, 96, 97, 106], "2009": [90, 91, 94, 96, 97, 106], "cutler": [90, 91, 94, 96, 97], "berkelei": [90, 91, 94, 96, 97], "edu": [90, 91, 94, 96, 97], "randomforest": [90, 91, 94, 96, 97], "cc_home": [90, 91, 94, 96, 97], "htm": [90, 91, 94, 96, 97], "93": [90, 96], "86": [90, 96, 113], "max_features_": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "_tree": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "understand": [90, 91, 92, 93, 94, 105], "min_samples_split_": [90, 91, 92, 93], "min_weight_leaf_": [90, 91, 92, 93], "min_samples_leaf_": [90, 91, 92, 93], "monotonic_cst_": [90, 91, 92, 93], "bypass": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "don": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "node_count": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "cost_complexity_pruning_path": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "ccp_path": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "bunch": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "leaf_nodes_sampl": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "get_n_leav": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "n_leav": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "set_predict_proba_request": [90, 92, 94, 95, 96, 98], "set_predict_request": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "46": 91, "16": 91, "11": [91, 113], "pick": [92, 93], "baggingclassifi": 92, "extra_tre": [92, 93], "cl": 92, "8947": 92, "baggingregressor": 93, "93333333": 94, "empirical_prior_": 94, "logic": 95, "feature_combinations_": [95, 96, 97], "feature_set_ends_": 95, "n_feature_sets_": 95, "fact": [96, 97], "caveat": [96, 97], "willing": [96, 97, 106], "spend": [96, 97, 106], "resourc": [96, 97, 106], "68908909": 97, "35854406": 97, "35223873": 97, "03616902": 97, "56008907": 97, "32235221": 97, "06945264": 97, "1465216": 97, "34597007": 97, "15308512": 97, "morf": [98, 99, 103, 113], "discontigu": [98, 99], "sensor": [98, 99], "mask": [98, 99], "onto": [98, 99], "data_width": [98, 99], "data_height": [98, 99], "tt": [98, 99], "last": [98, 99], "height": [98, 99], "albeit": [98, 99, 115], "efficienc": [98, 99], "min_patch_dims_": [98, 99], "max_patch_dims_": [98, 99], "data_dims_": [98, 99], "rg": 99, "10163671": 99, "78786738": 99, "01490768": 99, "32737289": 99, "24816698": 99, "41881754": 99, "0588273": 99, "48722913": 99, "07927208": 99, "15600762": 99, "unsupervisedcriterion": [100, 101], "abid": [100, 101], "unsupervisedsplitt": [100, 101], "enablescomput": 100, "alexand": 100, "marx": 100, "jona": 100, "fischer": 100, "sdm": 100, "415": 100, "423": 100, "evimaria": 100, "terzi": 100, "panayioti": 100, "tsapara": 100, "316": 100, "327": 100, "intermedi": 102, "aff_matrix": 102, "modern": 103, "supervis": [103, 107, 110], "strong": 103, "madhyastha2020": 103, "sporf": 103, "tomita2020": 103, "li2023": 103, "perry2021": 103, "futur": 103, "plan": 103, "stream": [103, 114], "xu2022": 103, "encourag": 103, "pull": 103, "walk": 103, "contribut": [103, 105, 113, 114, 115, 116, 117, 118, 119, 120], "licens": 103, "bsd": 103, "xu": [103, 113, 114, 118], "haoyin": [103, 113, 114, 118], "simplest": 103, "2110": 103, "08483": 103, "releas": [103, 114, 115, 117, 118, 119], "histori": 103, "unreleas": [103, 111], "instal": 103, "pip": 103, "meson": 103, "conda": 103, "pypi": 104, "clone": 104, "repositori": 104, "git": 104, "com": 104, "neurodata": 104, "cd": 104, "virtual": 104, "dev": 104, "build_requir": 104, "txt": 104, "spin": 104, "cli": 104, "edit": 104, "pend": 104, "repo": 104, "zipbal": 104, "master": 104, "forg": 104, "threadpoolctl": 104, "pytest": 104, "compil": [104, 119], "llvm": 104, "openmp": 104, "directori": 104, "obliquepr": 104, "pr": 104, "checkout": 104, "instruct": 104, "divers": 105, "sometim": 105, "slight": 105, "aim": 105, "motiv": 105, "therebi": [105, 106], "often": [105, 107], "yield": 105, "intuit": [105, 106], "leo": 105, "assess": 105, "essenti": 105, "abil": [105, 119], "mdi": 105, "l2014": 105, "suffer": 105, "flaw": 105, "conclus": 105, "deriv": 105, "held": 105, "secondli": 105, "favor": 105, "whose": 105, "jaewon": 105, "chung": 105, "benjamin": 105, "jason": 105, "yim": 105, "mauro": 105, "maggioni": 105, "jmlr": 105, "v21": 105, "664": 105, "loupp": 105, "phd": 105, "thesi": 105, "lieg": 105, "2014": 105, "dt": 106, "ot": 106, "ref": 106, "rc": 106, "landmark": 106, "varieti": [106, 107], "major": [106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "definit": 106, "x_i": [106, 107], "recurs": 106, "orthogon": 106, "a_i": 106, "langl": 106, "rangl": 106, "entri": 106, "q_m": 106, "n_m": 106, "t_m": 106, "x_j": 106, "leq": 106, "setminu": 106, "e_i": 106, "basi": 106, "elsewher": 106, "_featur": 106, "come": 106, "sparsiti": 106, "consider": 106, "disc": 106, "earlier": 106, "sai": 106, "storag": 106, "ask": 106, "question": 106, "gridsearchcv": 106, "There": 106, "imput": 106, "1023": 106, "1010933404324": 106, "predictive_analyt": 106, "quinlan": 106, "c4": 106, "program": 106, "morgan": 106, "kaufmann": 106, "1993": 106, "prevent": 106, "overfit": 106, "triplet": 106, "treatment": 106, "sacrific": 106, "goal": 107, "overview": 107, "cutpoint": 107, "cutoff": 107, "min_": 107, "sum_": 107, "hat": 107, "mu": 107, "_1": 107, "_2": 107, "sample_indic": 107, "popular": 107, "seleciton": 107, "kmean": 107, "mclust": 107, "tri": 107, "mle": 107, "hard": 107, "soft": 107, "gmm": 107, "x_n": 107, "quad": 107, "le": 107, "mu_j": 107, "notion": 107, "efficaci": 107, "scheme": 107, "adjusted_rand_scor": 107, "370": 108, "tip": [110, 111], "enhanc": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120], "link": 111, "subscrib": 111, "io": 111, "notifi": 111, "jong": 113, "shin": 113, "bug": [113, 115, 116, 117], "outsid": 113, "61": 113, "arbitrari": 113, "discontinu": 113, "dissimilar": 113, "64": 113, "67": 113, "70": 113, "patchobliquerandomforestregressor": 113, "suki": [113, 114], "72": 113, "nearestneighborsmetaestim": 113, "83": 113, "thank": [113, 114, 115, 116, 117, 118, 119, 120], "everyon": [113, 114, 115, 116, 117, 118, 119, 120], "who": [113, 114, 115, 116, 117, 118, 119, 120], "mainten": [113, 114, 115, 116, 117, 118, 119, 120], "incept": [113, 114, 115, 116, 117, 118, 119, 120], "analog": 114, "upgrad": 114, "reli": 114, "109": 114, "extraobliquedecisiontreeclassifi": 114, "2x": [114, 119], "114": 114, "101": 114, "streamdecisionforest": 114, "116": 114, "undergon": 115, "organiz": 115, "overhaul": 115, "135": 115, "140": 115, "129": 115, "featureimport": [115, 116], "yuxin": 115, "bai": 115, "143": 115, "156": 115, "158": 115, "issu": 116, "featureimportanceforest": 116, "permute_per_forest_fract": 116, "145": 116, "169": 116, "164": 116, "conditional_resampl": 116, "170": 116, "152": 116, "apply_max_features_per_set": 116, "incorrect": 116, "oversampl": 116, "after": 116, "172": 116, "mainli": [117, 118], "183": [117, 118], "exhaust": [117, 118], "approximate_clf_mutual_inform": 118, "approximate_clf_mutual_information_with_monte_carlo": 118, "mont": 118, "carlo": 118, "199": 118, "206": 118, "210": 118, "light": 119, "211": 119, "track": 119, "203": 119, "build_coleman_forest": 119, "build_permutation_forest": 119, "222": 119, "make_marron_wand_classif": 119, "227": 119, "overwrit": 119, "228": 119, "236": 119, "direct": 119, "degrad": 119, "242": 119}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[51, 1, 1, "", "ExtendedIsolationForest"], [52, 1, 1, "", "ExtraTreesClassifier"], [53, 1, 1, "", "ExtraTreesRegressor"], [54, 1, 1, "", "HonestForestClassifier"], [55, 1, 1, "", "MultiViewRandomForestClassifier"], [56, 1, 1, "", "NearestNeighborsMetaEstimator"], [57, 1, 1, "", "ObliqueRandomForestClassifier"], [58, 1, 1, "", "ObliqueRandomForestRegressor"], [59, 1, 1, "", "PatchObliqueRandomForestClassifier"], [60, 1, 1, "", "PatchObliqueRandomForestRegressor"], [61, 1, 1, "", "RandomForestClassifier"], [62, 1, 1, "", "RandomForestRegressor"], [63, 1, 1, "", "UnsupervisedObliqueRandomForest"], [64, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ExtendedIsolationForest": [[51, 2, 1, "", "decision_function"], [51, 3, 1, "", "estimators_samples_"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "fit_predict"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "score_samples"], [51, 2, 1, "", "set_fit_request"], [51, 2, 1, "", "set_params"]], "sktree.ExtraTreesClassifier": [[52, 2, 1, "", "apply"], [52, 2, 1, "", "decision_path"], [52, 3, 1, "", "estimators_samples_"], [52, 3, 1, "", "feature_importances_"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "get_leaf_node_samples"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "partial_fit"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "predict_log_proba"], [52, 2, 1, "", "predict_proba"], [52, 2, 1, "", "predict_quantiles"], [52, 2, 1, "", "score"], [52, 2, 1, "", "set_fit_request"], [52, 2, 1, "", "set_params"], [52, 2, 1, "", "set_partial_fit_request"], [52, 2, 1, "", "set_score_request"]], "sktree.ExtraTreesRegressor": [[53, 2, 1, "", "apply"], [53, 2, 1, "", "decision_path"], [53, 3, 1, "", "estimators_samples_"], [53, 3, 1, "", "feature_importances_"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "get_leaf_node_samples"], [53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_quantiles"], [53, 2, 1, "", "score"], [53, 2, 1, "", "set_fit_request"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "set_score_request"]], "sktree.HonestForestClassifier": [[54, 2, 1, "", "apply"], [54, 2, 1, "", "decision_path"], [54, 3, 1, "", "estimators_samples_"], [54, 3, 1, "", "feature_importances_"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "get_leaf_node_samples"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 3, 1, "", "honest_indices_"], [54, 3, 1, "", "oob_samples_"], [54, 2, 1, "", "partial_fit"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_log_proba"], [54, 2, 1, "", "predict_proba"], [54, 2, 1, "", "predict_proba_per_tree"], [54, 2, 1, "", "predict_quantiles"], [54, 2, 1, "", "score"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "set_partial_fit_request"], [54, 2, 1, "", "set_score_request"], [54, 3, 1, "", "structure_indices_"]], "sktree.MultiViewRandomForestClassifier": [[55, 2, 1, "", "apply"], [55, 2, 1, "", "compute_similarity_matrix"], [55, 2, 1, "", "decision_path"], [55, 3, 1, "", "estimators_samples_"], [55, 3, 1, "", "feature_importances_"], [55, 2, 1, "", "fit"], [55, 2, 1, "", "get_leaf_node_samples"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 3, 1, "", "oob_samples_"], [55, 2, 1, "", "partial_fit"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "predict_log_proba"], [55, 2, 1, "", "predict_proba"], [55, 2, 1, "", "predict_proba_per_tree"], [55, 2, 1, "", "predict_quantiles"], [55, 2, 1, "", "score"], [55, 2, 1, "", "set_fit_request"], [55, 2, 1, "", "set_params"], [55, 2, 1, "", "set_partial_fit_request"], [55, 2, 1, "", "set_score_request"]], "sktree.NearestNeighborsMetaEstimator": [[56, 2, 1, "", "fit"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "kneighbors"], [56, 2, 1, "", "radius_neighbors"], [56, 2, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[57, 2, 1, "", "apply"], [57, 2, 1, "", "compute_similarity_matrix"], [57, 2, 1, "", "decision_path"], [57, 3, 1, "", "estimators_samples_"], [57, 3, 1, "", "feature_importances_"], [57, 2, 1, "", "fit"], [57, 2, 1, "", "get_leaf_node_samples"], [57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 3, 1, "", "oob_samples_"], [57, 2, 1, "", "partial_fit"], [57, 2, 1, "", "predict"], [57, 2, 1, "", "predict_log_proba"], [57, 2, 1, "", "predict_proba"], [57, 2, 1, "", "predict_proba_per_tree"], [57, 2, 1, "", "predict_quantiles"], [57, 2, 1, "", "score"], [57, 2, 1, "", "set_fit_request"], [57, 2, 1, "", "set_params"], [57, 2, 1, "", "set_partial_fit_request"], [57, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[58, 2, 1, "", "apply"], [58, 2, 1, "", "compute_similarity_matrix"], [58, 2, 1, "", "decision_path"], [58, 3, 1, "", "estimators_samples_"], [58, 3, 1, "", "feature_importances_"], [58, 2, 1, "", "fit"], [58, 2, 1, "", "get_leaf_node_samples"], [58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 3, 1, "", "oob_samples_"], [58, 2, 1, "", "predict"], [58, 2, 1, "", "predict_quantiles"], [58, 2, 1, "", "score"], [58, 2, 1, "", "set_fit_request"], [58, 2, 1, "", "set_params"], [58, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[59, 2, 1, "", "apply"], [59, 2, 1, "", "compute_similarity_matrix"], [59, 2, 1, "", "decision_path"], [59, 3, 1, "", "estimators_samples_"], [59, 3, 1, "", "feature_importances_"], [59, 2, 1, "", "fit"], [59, 2, 1, "", "get_leaf_node_samples"], [59, 2, 1, "", "get_metadata_routing"], [59, 2, 1, "", "get_params"], [59, 3, 1, "", "oob_samples_"], [59, 2, 1, "", "partial_fit"], [59, 2, 1, "", "predict"], [59, 2, 1, "", "predict_log_proba"], [59, 2, 1, "", "predict_proba"], [59, 2, 1, "", "predict_proba_per_tree"], [59, 2, 1, "", "predict_quantiles"], [59, 2, 1, "", "score"], [59, 2, 1, "", "set_fit_request"], [59, 2, 1, "", "set_params"], [59, 2, 1, "", "set_partial_fit_request"], [59, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[60, 2, 1, "", "apply"], [60, 2, 1, "", "compute_similarity_matrix"], [60, 2, 1, "", "decision_path"], [60, 3, 1, "", "estimators_samples_"], [60, 3, 1, "", "feature_importances_"], [60, 2, 1, "", "fit"], [60, 2, 1, "", "get_leaf_node_samples"], [60, 2, 1, "", "get_metadata_routing"], [60, 2, 1, "", "get_params"], [60, 3, 1, "", "oob_samples_"], [60, 2, 1, "", "predict"], [60, 2, 1, "", "predict_quantiles"], [60, 2, 1, "", "score"], [60, 2, 1, "", "set_fit_request"], [60, 2, 1, "", "set_params"], [60, 2, 1, "", "set_score_request"]], "sktree.RandomForestClassifier": [[61, 2, 1, "", "apply"], [61, 2, 1, "", "decision_path"], [61, 3, 1, "", "estimators_samples_"], [61, 3, 1, "", "feature_importances_"], [61, 2, 1, "", "fit"], [61, 2, 1, "", "get_leaf_node_samples"], [61, 2, 1, "", "get_metadata_routing"], [61, 2, 1, "", "get_params"], [61, 2, 1, "", "partial_fit"], [61, 2, 1, "", "predict"], [61, 2, 1, "", "predict_log_proba"], [61, 2, 1, "", "predict_proba"], [61, 2, 1, "", "predict_quantiles"], [61, 2, 1, "", "score"], [61, 2, 1, "", "set_fit_request"], [61, 2, 1, "", "set_params"], [61, 2, 1, "", "set_partial_fit_request"], [61, 2, 1, "", "set_score_request"]], "sktree.RandomForestRegressor": [[62, 2, 1, "", "apply"], [62, 2, 1, "", "decision_path"], [62, 3, 1, "", "estimators_samples_"], [62, 3, 1, "", "feature_importances_"], [62, 2, 1, "", "fit"], [62, 2, 1, "", "get_leaf_node_samples"], [62, 2, 1, "", "get_metadata_routing"], [62, 2, 1, "", "get_params"], [62, 2, 1, "", "predict"], [62, 2, 1, "", "predict_quantiles"], [62, 2, 1, "", "score"], [62, 2, 1, "", "set_fit_request"], [62, 2, 1, "", "set_params"], [62, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[63, 2, 1, "", "apply"], [63, 2, 1, "", "compute_similarity_matrix"], [63, 2, 1, "", "decision_path"], [63, 3, 1, "", "estimators_samples_"], [63, 3, 1, "", "feature_importances_"], [63, 2, 1, "", "fit"], [63, 2, 1, "", "fit_predict"], [63, 2, 1, "", "fit_transform"], [63, 2, 1, "", "get_leaf_node_samples"], [63, 2, 1, "", "get_metadata_routing"], [63, 2, 1, "", "get_params"], [63, 2, 1, "", "predict"], [63, 2, 1, "", "predict_quantiles"], [63, 2, 1, "", "set_fit_request"], [63, 2, 1, "", "set_output"], [63, 2, 1, "", "set_params"], [63, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[64, 2, 1, "", "apply"], [64, 2, 1, "", "compute_similarity_matrix"], [64, 2, 1, "", "decision_path"], [64, 3, 1, "", "estimators_samples_"], [64, 3, 1, "", "feature_importances_"], [64, 2, 1, "", "fit"], [64, 2, 1, "", "fit_predict"], [64, 2, 1, "", "fit_transform"], [64, 2, 1, "", "get_leaf_node_samples"], [64, 2, 1, "", "get_metadata_routing"], [64, 2, 1, "", "get_params"], [64, 2, 1, "", "predict"], [64, 2, 1, "", "predict_quantiles"], [64, 2, 1, "", "set_fit_request"], [64, 2, 1, "", "set_output"], [64, 2, 1, "", "set_params"], [64, 2, 1, "", "transform"]], "sktree._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "sktree.datasets": [[65, 4, 1, "", "approximate_clf_mutual_information"], [66, 4, 1, "", "approximate_clf_mutual_information_with_monte_carlo"], [67, 4, 1, "", "make_gaussian_mixture"], [68, 4, 1, "", "make_joint_factor_model"], [69, 4, 1, "", "make_marron_wand_classification"], [70, 4, 1, "", "make_quadratic_classification"], [71, 4, 1, "", "make_trunk_classification"], [72, 4, 1, "", "make_trunk_mixture_classification"]], "sktree.experimental": [[73, 4, 1, "", "conditional_resample"], [77, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.mutual_info": [[74, 4, 1, "", "cmi_gaussian"], [75, 4, 1, "", "entropy_gaussian"], [76, 4, 1, "", "mi_gaussian"]], "sktree.experimental.simulate": [[78, 4, 1, "", "simulate_helix"], [79, 4, 1, "", "simulate_multivariate_gaussian"], [80, 4, 1, "", "simulate_sphere"]], "sktree.stats": [[81, 1, 1, "", "FeatureImportanceForestClassifier"], [82, 1, 1, "", "FeatureImportanceForestRegressor"], [83, 1, 1, "", "PermutationForestClassifier"], [84, 1, 1, "", "PermutationForestRegressor"], [85, 1, 1, "", "PermutationHonestForestClassifier"], [86, 4, 1, "", "build_coleman_forest"], [87, 4, 1, "", "build_hyppo_cv_forest"], [88, 4, 1, "", "build_hyppo_oob_forest"], [89, 4, 1, "", "build_permutation_forest"]], "sktree.stats.FeatureImportanceForestClassifier": [[81, 2, 1, "", "statistic"], [81, 2, 1, "", "test"], [81, 3, 1, "", "train_test_samples_"]], "sktree.stats.FeatureImportanceForestRegressor": [[82, 2, 1, "", "statistic"], [82, 2, 1, "", "test"], [82, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestClassifier": [[83, 2, 1, "", "statistic"], [83, 2, 1, "", "test"], [83, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestRegressor": [[84, 2, 1, "", "statistic"], [84, 2, 1, "", "test"], [84, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationHonestForestClassifier": [[85, 2, 1, "", "apply"], [85, 2, 1, "", "decision_path"], [85, 3, 1, "", "estimators_samples_"], [85, 3, 1, "", "feature_importances_"], [85, 2, 1, "", "fit"], [85, 2, 1, "", "get_leaf_node_samples"], [85, 2, 1, "", "get_metadata_routing"], [85, 2, 1, "", "get_params"], [85, 3, 1, "", "honest_indices_"], [85, 3, 1, "", "oob_samples_"], [85, 2, 1, "", "partial_fit"], [85, 2, 1, "", "predict"], [85, 2, 1, "", "predict_log_proba"], [85, 2, 1, "", "predict_proba"], [85, 2, 1, "", "predict_proba_per_tree"], [85, 2, 1, "", "predict_quantiles"], [85, 2, 1, "", "score"], [85, 2, 1, "", "set_fit_request"], [85, 2, 1, "", "set_params"], [85, 2, 1, "", "set_partial_fit_request"], [85, 2, 1, "", "set_score_request"], [85, 3, 1, "", "structure_indices_"]], "sktree.tree": [[90, 1, 1, "", "DecisionTreeClassifier"], [91, 1, 1, "", "DecisionTreeRegressor"], [92, 1, 1, "", "ExtraTreeClassifier"], [93, 1, 1, "", "ExtraTreeRegressor"], [94, 1, 1, "", "HonestTreeClassifier"], [95, 1, 1, "", "MultiViewDecisionTreeClassifier"], [96, 1, 1, "", "ObliqueDecisionTreeClassifier"], [97, 1, 1, "", "ObliqueDecisionTreeRegressor"], [98, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [99, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [100, 1, 1, "", "UnsupervisedDecisionTree"], [101, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [102, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.DecisionTreeClassifier": [[90, 2, 1, "", "apply"], [90, 2, 1, "", "cost_complexity_pruning_path"], [90, 2, 1, "", "decision_path"], [90, 3, 1, "", "feature_importances_"], [90, 2, 1, "", "fit"], [90, 2, 1, "", "get_depth"], [90, 2, 1, "", "get_leaf_node_samples"], [90, 2, 1, "", "get_metadata_routing"], [90, 2, 1, "", "get_n_leaves"], [90, 2, 1, "", "get_params"], [90, 2, 1, "", "partial_fit"], [90, 2, 1, "", "predict"], [90, 2, 1, "", "predict_log_proba"], [90, 2, 1, "", "predict_proba"], [90, 2, 1, "", "predict_quantiles"], [90, 2, 1, "", "score"], [90, 2, 1, "", "set_fit_request"], [90, 2, 1, "", "set_params"], [90, 2, 1, "", "set_partial_fit_request"], [90, 2, 1, "", "set_predict_proba_request"], [90, 2, 1, "", "set_predict_request"], [90, 2, 1, "", "set_score_request"]], "sktree.tree.DecisionTreeRegressor": [[91, 2, 1, "", "apply"], [91, 2, 1, "", "cost_complexity_pruning_path"], [91, 2, 1, "", "decision_path"], [91, 3, 1, "", "feature_importances_"], [91, 2, 1, "", "fit"], [91, 2, 1, "", "get_depth"], [91, 2, 1, "", "get_leaf_node_samples"], [91, 2, 1, "", "get_metadata_routing"], [91, 2, 1, "", "get_n_leaves"], [91, 2, 1, "", "get_params"], [91, 2, 1, "", "predict"], [91, 2, 1, "", "predict_quantiles"], [91, 2, 1, "", "score"], [91, 2, 1, "", "set_fit_request"], [91, 2, 1, "", "set_params"], [91, 2, 1, "", "set_predict_request"], [91, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeClassifier": [[92, 2, 1, "", "apply"], [92, 2, 1, "", "cost_complexity_pruning_path"], [92, 2, 1, "", "decision_path"], [92, 3, 1, "", "feature_importances_"], [92, 2, 1, "", "fit"], [92, 2, 1, "", "get_depth"], [92, 2, 1, "", "get_leaf_node_samples"], [92, 2, 1, "", "get_metadata_routing"], [92, 2, 1, "", "get_n_leaves"], [92, 2, 1, "", "get_params"], [92, 2, 1, "", "partial_fit"], [92, 2, 1, "", "predict"], [92, 2, 1, "", "predict_log_proba"], [92, 2, 1, "", "predict_proba"], [92, 2, 1, "", "predict_quantiles"], [92, 2, 1, "", "score"], [92, 2, 1, "", "set_fit_request"], [92, 2, 1, "", "set_params"], [92, 2, 1, "", "set_partial_fit_request"], [92, 2, 1, "", "set_predict_proba_request"], [92, 2, 1, "", "set_predict_request"], [92, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeRegressor": [[93, 2, 1, "", "apply"], [93, 2, 1, "", "cost_complexity_pruning_path"], [93, 2, 1, "", "decision_path"], [93, 3, 1, "", "feature_importances_"], [93, 2, 1, "", "fit"], [93, 2, 1, "", "get_depth"], [93, 2, 1, "", "get_leaf_node_samples"], [93, 2, 1, "", "get_metadata_routing"], [93, 2, 1, "", "get_n_leaves"], [93, 2, 1, "", "get_params"], [93, 2, 1, "", "predict"], [93, 2, 1, "", "predict_quantiles"], [93, 2, 1, "", "score"], [93, 2, 1, "", "set_fit_request"], [93, 2, 1, "", "set_params"], [93, 2, 1, "", "set_predict_request"], [93, 2, 1, "", "set_score_request"]], "sktree.tree.HonestTreeClassifier": [[94, 2, 1, "", "apply"], [94, 2, 1, "", "cost_complexity_pruning_path"], [94, 2, 1, "", "decision_path"], [94, 3, 1, "", "feature_importances_"], [94, 2, 1, "", "fit"], [94, 2, 1, "", "get_depth"], [94, 2, 1, "", "get_leaf_node_samples"], [94, 2, 1, "", "get_metadata_routing"], [94, 2, 1, "", "get_n_leaves"], [94, 2, 1, "", "get_params"], [94, 2, 1, "", "partial_fit"], [94, 2, 1, "", "predict"], [94, 2, 1, "", "predict_proba"], [94, 2, 1, "", "predict_quantiles"], [94, 2, 1, "", "score"], [94, 2, 1, "", "set_fit_request"], [94, 2, 1, "", "set_params"], [94, 2, 1, "", "set_partial_fit_request"], [94, 2, 1, "", "set_predict_proba_request"], [94, 2, 1, "", "set_predict_request"], [94, 2, 1, "", "set_score_request"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[95, 2, 1, "", "apply"], [95, 2, 1, "", "compute_similarity_matrix"], [95, 2, 1, "", "cost_complexity_pruning_path"], [95, 2, 1, "", "decision_path"], [95, 3, 1, "", "feature_importances_"], [95, 2, 1, "", "fit"], [95, 2, 1, "", "get_depth"], [95, 2, 1, "", "get_leaf_node_samples"], [95, 2, 1, "", "get_metadata_routing"], [95, 2, 1, "", "get_n_leaves"], [95, 2, 1, "", "get_params"], [95, 2, 1, "", "partial_fit"], [95, 2, 1, "", "predict"], [95, 2, 1, "", "predict_log_proba"], [95, 2, 1, "", "predict_proba"], [95, 2, 1, "", "predict_quantiles"], [95, 2, 1, "", "score"], [95, 2, 1, "", "set_fit_request"], [95, 2, 1, "", "set_params"], [95, 2, 1, "", "set_partial_fit_request"], [95, 2, 1, "", "set_predict_proba_request"], [95, 2, 1, "", "set_predict_request"], [95, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[96, 2, 1, "", "apply"], [96, 2, 1, "", "compute_similarity_matrix"], [96, 2, 1, "", "cost_complexity_pruning_path"], [96, 2, 1, "", "decision_path"], [96, 3, 1, "", "feature_importances_"], [96, 2, 1, "", "fit"], [96, 2, 1, "", "get_depth"], [96, 2, 1, "", "get_leaf_node_samples"], [96, 2, 1, "", "get_metadata_routing"], [96, 2, 1, "", "get_n_leaves"], [96, 2, 1, "", "get_params"], [96, 2, 1, "", "partial_fit"], [96, 2, 1, "", "predict"], [96, 2, 1, "", "predict_log_proba"], [96, 2, 1, "", "predict_proba"], [96, 2, 1, "", "predict_quantiles"], [96, 2, 1, "", "score"], [96, 2, 1, "", "set_fit_request"], [96, 2, 1, "", "set_params"], [96, 2, 1, "", "set_partial_fit_request"], [96, 2, 1, "", "set_predict_proba_request"], [96, 2, 1, "", "set_predict_request"], [96, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[97, 2, 1, "", "apply"], [97, 2, 1, "", "compute_similarity_matrix"], [97, 2, 1, "", "cost_complexity_pruning_path"], [97, 2, 1, "", "decision_path"], [97, 3, 1, "", "feature_importances_"], [97, 2, 1, "", "fit"], [97, 2, 1, "", "get_depth"], [97, 2, 1, "", "get_leaf_node_samples"], [97, 2, 1, "", "get_metadata_routing"], [97, 2, 1, "", "get_n_leaves"], [97, 2, 1, "", "get_params"], [97, 2, 1, "", "predict"], [97, 2, 1, "", "predict_quantiles"], [97, 2, 1, "", "score"], [97, 2, 1, "", "set_fit_request"], [97, 2, 1, "", "set_params"], [97, 2, 1, "", "set_predict_request"], [97, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[98, 2, 1, "", "apply"], [98, 2, 1, "", "compute_similarity_matrix"], [98, 2, 1, "", "cost_complexity_pruning_path"], [98, 2, 1, "", "decision_path"], [98, 3, 1, "", "feature_importances_"], [98, 2, 1, "", "fit"], [98, 2, 1, "", "get_depth"], [98, 2, 1, "", "get_leaf_node_samples"], [98, 2, 1, "", "get_metadata_routing"], [98, 2, 1, "", "get_n_leaves"], [98, 2, 1, "", "get_params"], [98, 2, 1, "", "partial_fit"], [98, 2, 1, "", "predict"], [98, 2, 1, "", "predict_log_proba"], [98, 2, 1, "", "predict_proba"], [98, 2, 1, "", "predict_quantiles"], [98, 2, 1, "", "score"], [98, 2, 1, "", "set_fit_request"], [98, 2, 1, "", "set_params"], [98, 2, 1, "", "set_partial_fit_request"], [98, 2, 1, "", "set_predict_proba_request"], [98, 2, 1, "", "set_predict_request"], [98, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[99, 2, 1, "", "apply"], [99, 2, 1, "", "compute_similarity_matrix"], [99, 2, 1, "", "cost_complexity_pruning_path"], [99, 2, 1, "", "decision_path"], [99, 3, 1, "", "feature_importances_"], [99, 2, 1, "", "fit"], [99, 2, 1, "", "get_depth"], [99, 2, 1, "", "get_leaf_node_samples"], [99, 2, 1, "", "get_metadata_routing"], [99, 2, 1, "", "get_n_leaves"], [99, 2, 1, "", "get_params"], [99, 2, 1, "", "predict"], [99, 2, 1, "", "predict_quantiles"], [99, 2, 1, "", "score"], [99, 2, 1, "", "set_fit_request"], [99, 2, 1, "", "set_params"], [99, 2, 1, "", "set_predict_request"], [99, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[100, 2, 1, "", "apply"], [100, 2, 1, "", "compute_similarity_matrix"], [100, 2, 1, "", "cost_complexity_pruning_path"], [100, 2, 1, "", "decision_path"], [100, 3, 1, "", "feature_importances_"], [100, 2, 1, "", "fit_predict"], [100, 2, 1, "", "fit_transform"], [100, 2, 1, "", "get_depth"], [100, 2, 1, "", "get_leaf_node_samples"], [100, 2, 1, "", "get_metadata_routing"], [100, 2, 1, "", "get_n_leaves"], [100, 2, 1, "", "get_params"], [100, 2, 1, "", "predict"], [100, 2, 1, "", "predict_quantiles"], [100, 2, 1, "", "set_fit_request"], [100, 2, 1, "", "set_output"], [100, 2, 1, "", "set_params"], [100, 2, 1, "", "set_predict_request"], [100, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[101, 2, 1, "", "apply"], [101, 2, 1, "", "compute_similarity_matrix"], [101, 2, 1, "", "cost_complexity_pruning_path"], [101, 2, 1, "", "decision_path"], [101, 3, 1, "", "feature_importances_"], [101, 2, 1, "", "fit_predict"], [101, 2, 1, "", "fit_transform"], [101, 2, 1, "", "get_depth"], [101, 2, 1, "", "get_leaf_node_samples"], [101, 2, 1, "", "get_metadata_routing"], [101, 2, 1, "", "get_n_leaves"], [101, 2, 1, "", "get_params"], [101, 2, 1, "", "predict"], [101, 2, 1, "", "predict_quantiles"], [101, 2, 1, "", "set_fit_request"], [101, 2, 1, "", "set_output"], [101, 2, 1, "", "set_params"], [101, 2, 1, "", "set_predict_request"], [101, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 113, 114, 115, 116, 117, 118, 119, 120], "scikit": [0, 103, 109], "learn": [0, 12, 13, 109], "tree": [0, 1, 4, 12, 13, 17, 26, 27, 29, 33, 36, 37, 38, 39, 49, 50, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109], "estim": [0, 44], "supervis": [0, 106], "unsupervis": [0, 107], "outlier": [0, 12, 16, 109], "detect": [0, 12, 16, 109], "distanc": 0, "metric": 0, "statist": [0, 9, 10, 43, 44, 45, 46, 47, 48, 49, 50], "hypothesi": [0, 4, 5, 6, 7, 8, 9, 12, 41, 109], "test": [0, 4, 5, 6, 7, 9, 10, 12, 41, 49, 50, 109], "dataset": [0, 14, 27, 30, 31, 34, 65, 66, 67, 68, 69, 70, 71, 72], "experiment": [0, 73, 74, 75, 76, 77, 78, 79, 80], "function": [0, 21], "calibr": [1, 2, 12, 109], "decis": [1, 4, 12, 13, 17, 26, 27, 29, 33, 36, 106, 107, 109], "via": [1, 12, 109], "honesti": [1, 12, 109], "plot": [2, 17, 21, 22, 23, 27, 32, 34, 38, 39], "honest": [2, 106], "forest": [2, 12, 14, 17, 19, 21, 22, 23, 30, 31, 32, 34, 105, 109], "overlap": 2, "gaussian": [2, 43, 44, 45, 46, 47, 48, 49, 50], "simul": [2, 5, 6, 7, 8, 9, 10, 14, 32, 43, 44, 45, 46, 47, 48, 49, 50, 78, 79, 80], "refer": [2, 5, 6, 7, 8, 17, 30, 31, 103, 105, 106, 107], "comput": [3, 9, 10, 11, 15, 18, 24, 25, 28, 35, 40, 42, 108], "time": [3, 11, 15, 18, 24, 25, 28, 35, 38, 40, 42, 108], "mutual": [5, 6, 7, 9], "inform": [5, 6, 7, 9], "genuin": [5, 6, 7, 9], "might": [5, 6, 7, 8, 9, 10], "data": [5, 6, 7, 8, 9, 10, 14, 17, 20, 23, 47, 50], "perform": [5, 6, 7, 14], "us": [5, 6, 9, 10, 67, 71, 72, 88, 106, 109], "imbalanc": 6, "discuss": [6, 7, 8, 30, 31, 37, 39], "demonstr": [7, 37], "condit": [7, 8], "co": [7, 8], "when": 8, "exhibit": 8, "independ": [8, 49, 50], "analysi": 8, "null": [8, 49], "i": 8, "true": [8, 44], "partial": [9, 10], "auc": [9, 10], "repeat": [9, 10], "second": 9, "featur": [9, 37, 105], "set": [9, 37], "all": [9, 10], "posterior": [9, 10, 44, 49, 50], "ar": [9, 10], "save": [9, 10], "within": [9, 10, 17], "model": [9, 10, 17, 22, 43, 45, 46, 47, 48], "multi": [10, 12, 13, 14, 37, 106, 109], "view": [10, 12, 13, 14, 37, 109], "mv": 10, "without": 10, "exampl": [12, 17, 67, 71, 72, 88, 105, 109], "quantil": [12, 19, 20, 21, 22, 23, 109], "predict": [12, 17, 19, 20, 21, 22, 23, 30, 32, 34, 109], "random": [12, 14, 19, 21, 22, 30, 31, 32, 34, 105, 109], "compar": [12, 14, 26, 30, 33, 106, 109], "sklearn": [12, 26, 109], "sktree": [12, 26, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 109], "spars": [12, 29, 32, 39, 109], "obliqu": [12, 23, 29, 30, 31, 32, 33, 34, 38, 39, 105, 106, 109], "project": [12, 29, 37, 38, 39, 109], "splitter": [12, 36, 37, 38, 39, 109], "treepl": [12, 41, 43, 44, 45, 46, 47, 48, 49, 50, 109], "analyz": 14, "fit": [14, 22, 43, 45, 46, 47, 48], "visual": [14, 17, 37], "score": 14, "extendedisolationforest": [17, 51], "gener": [17, 20, 23, 38, 39, 44, 49, 50], "train": [17, 22, 27], "discret": 17, "boundari": 17, "path": 17, "length": 17, "each": [17, 37], "differ": [20, 31, 49, 50, 106], "interpol": 20, "method": 20, "The": 20, "interv": 21, "regressor": [21, 22], "result": [21, 22, 23], "class": 22, "sampl": [22, 37, 38], "regress": [23, 106], "surfac": [27, 33], "iri": 27, "extra": [30, 31, 33], "cc18": [30, 34], "speed": 31, "v": 31, "size": 31, "axi": [32, 34, 37], "align": [32, 34, 37], "pariti": 32, "standard": 33, "matrix": [37, 39], "an": [37, 38, 39], "initi": [37, 38, 39], "split": 37, "candid": 37, "scale": 37, "dimension": [37, 47], "matric": [38, 39], "imag": 38, "seri": 38, "patch": [38, 39], "1d": 38, "2d": 38, "3d": 38, "discontigu": 38, "tutori": [43, 44, 45, 46, 47, 48, 49, 50], "calcul": [43, 44, 45, 46, 47, 48, 49, 50], "cmi": [43, 50], "creat": [43, 45, 46, 47, 48, 49, 50], "two": [43, 45, 46, 47, 48, 49, 50, 107], "x": [43, 44, 47, 50], "z": [43, 47, 50], "onli": 43, "mixtur": 44, "prior": 44, "pdf": 44, "": [44, 46, 47], "98": [44, 46, 47], "mi": [44, 45, 49], "pauc": [44, 48], "90": 44, "multiview": [47, 50], "r": 48, "p": [49, 50], "valu": [49, 50], "observ": [49, 50], "find": [49, 50], "permut": [49, 50], "extratreesclassifi": 52, "extratreesregressor": 53, "honestforestclassifi": 54, "multiviewrandomforestclassifi": 55, "nearestneighborsmetaestim": 56, "obliquerandomforestclassifi": 57, "obliquerandomforestregressor": 58, "patchobliquerandomforestclassifi": 59, "patchobliquerandomforestregressor": 60, "randomforestclassifi": 61, "randomforestregressor": 62, "unsupervisedobliquerandomforest": 63, "unsupervisedrandomforest": 64, "approximate_clf_mutual_inform": 65, "approximate_clf_mutual_information_with_monte_carlo": 66, "make_gaussian_mixtur": 67, "make_joint_factor_model": 68, "make_marron_wand_classif": 69, "make_quadratic_classif": 70, "make_trunk_classif": 71, "make_trunk_mixture_classif": 72, "conditional_resampl": 73, "mutual_info": [74, 75, 76], "cmi_gaussian": 74, "entropy_gaussian": 75, "mi_gaussian": 76, "mutual_info_ksg": 77, "simulate_helix": 78, "simulate_multivariate_gaussian": 79, "simulate_spher": 80, "stat": [81, 82, 83, 84, 85, 86, 87, 88, 89], "featureimportanceforestclassifi": 81, "featureimportanceforestregressor": 82, "permutationforestclassifi": 83, "permutationforestregressor": 84, "permutationhonestforestclassifi": 85, "build_coleman_forest": 86, "build_hyppo_cv_forest": 87, "build_hyppo_oob_forest": 88, "build_permutation_forest": 89, "decisiontreeclassifi": 90, "decisiontreeregressor": 91, "extratreeclassifi": 92, "extratreeregressor": 93, "honesttreeclassifi": 94, "multiviewdecisiontreeclassifi": 95, "obliquedecisiontreeclassifi": 96, "obliquedecisiontreeregressor": 97, "patchobliquedecisiontreeclassifi": 98, "patchobliquedecisiontreeregressor": 99, "unsuperviseddecisiontre": 100, "unsupervisedobliquedecisiontre": 101, "compute_forest_similarity_matrix": 102, "content": 103, "get": 103, "start": 103, "indic": 103, "tabl": 103, "instal": 104, "depend": 104, "pip": 104, "from": 104, "sourc": 104, "meson": 104, "conda": 104, "recommend": 104, "import": 105, "evalu": [105, 107], "mathemat": 106, "formul": 106, "classif": 106, "output": 106, "problem": 106, "complex": 106, "tip": 106, "practic": 106, "limit": 106, "criterion": 107, "mean": 107, "fast": 107, "bic": 107, "user": 110, "guid": 110, "releas": 111, "histori": 111, "version": [113, 114, 115, 116, 117, 118, 119, 120], "0": [113, 114, 115, 116, 117, 118, 119, 120], "1": 113, "changelog": [113, 114, 115, 116, 117, 118, 119, 120], "code": [113, 114, 115, 116, 117, 118, 119, 120], "contributor": [113, 114, 115, 116, 117, 118, 119, 120], "2": 114, "3": 115, "4": 116, "5": 117, "6": 118, "7": 119, "8": 120}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Outlier Detection": [[0, "outlier-detection"]], "Distance Metrics": [[0, "distance-metrics"]], "Statistical Hypothesis Testing": [[0, "statistical-hypothesis-testing"]], "Datasets": [[0, "datasets"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Calibrated decision trees via honesty": [[1, "calibrated-decision-trees-via-honesty"], [12, "calibrated-decision-trees-via-honesty"], [109, "calibrated-decision-trees-via-honesty"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[2, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[2, "references"], [5, "references"], [6, "references"], [7, "references"], [8, "references"], [17, "references"], [30, "references"], [31, "references"], [103, null], [105, null], [105, null], [107, null]], "Computation times": [[3, "computation-times"], [11, "computation-times"], [15, "computation-times"], [18, "computation-times"], [24, "computation-times"], [25, "computation-times"], [28, "computation-times"], [35, "computation-times"], [40, "computation-times"], [42, "computation-times"], [108, "computation-times"]], "Hypothesis testing with decision trees": [[4, "hypothesis-testing-with-decision-trees"], [12, "hypothesis-testing-with-decision-trees"], [109, "hypothesis-testing-with-decision-trees"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[5, "mutual-information-for-genuine-hypothesis-testing-might"]], "Simulate data": [[5, "simulate-data"], [6, "simulate-data"], [7, "simulate-data"], [8, "simulate-data"], [9, "simulate-data"], [10, "simulate-data"], [14, "simulate-data"]], "Perform hypothesis testing using Mutual Information": [[5, "perform-hypothesis-testing-using-mutual-information"], [6, "perform-hypothesis-testing-using-mutual-information"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data": [[6, "mutual-information-for-genuine-hypothesis-testing-might-with-imbalanced-data"]], "Discussion": [[6, "discussion"], [7, "discussion"], [8, "discussion"], [30, "discussion"], [31, "discussion"], [37, "discussion"], [39, "discussion"]], "Demonstrate Conditional Mutual Information for Genuine Hypothesis Testing (Co-MIGHT)": [[7, "demonstrate-conditional-mutual-information-for-genuine-hypothesis-testing-co-might"]], "Perform hypothesis testing": [[7, "perform-hypothesis-testing"]], "Co-MIGHT when Data Exhibits Conditional Independence": [[8, "co-might-when-data-exhibits-conditional-independence"]], "Analysis when the null hypothesis is true": [[8, "analysis-when-the-null-hypothesis-is-true"]], "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[9, "compute-partial-auc-using-mutual-information-for-genuine-hypothesis-testing-might"]], "Use partial AUC as test statistic": [[9, "use-partial-auc-as-test-statistic"], [10, "use-partial-auc-as-test-statistic"]], "Repeat for the second feature set": [[9, "repeat-for-the-second-feature-set"]], "All posteriors are saved within the model": [[9, "all-posteriors-are-saved-within-the-model"], [10, "all-posteriors-are-saved-within-the-model"]], "Compute partial AUC using multi-view MIGHT (MV-MIGHT)": [[10, "compute-partial-auc-using-multi-view-might-mv-might"]], "Repeat without multi-view": [[10, "repeat-without-multi-view"]], "Examples": [[12, "examples"], [109, "examples"]], "Multi-view learning with Decision-trees": [[12, "multi-view-learning-with-decision-trees"], [13, "multi-view-learning-with-decision-trees"], [109, "multi-view-learning-with-decision-trees"]], "Outlier-detection": [[12, "outlier-detection"], [16, "outlier-detection"], [109, "outlier-detection"]], "Quantile Predictions with Random Forest": [[12, "quantile-predictions-with-random-forest"], [19, "quantile-predictions-with-random-forest"], [109, "quantile-predictions-with-random-forest"]], "Comparing sklearn and sktree decision trees": [[12, "comparing-sklearn-and-sktree-decision-trees"], [26, "comparing-sklearn-and-sktree-decision-trees"], [109, "comparing-sklearn-and-sktree-decision-trees"]], "Sparse oblique projections with oblique decision-trees": [[12, "sparse-oblique-projections-with-oblique-decision-trees"], [29, "sparse-oblique-projections-with-oblique-decision-trees"], [109, "sparse-oblique-projections-with-oblique-decision-trees"]], "Decision-tree splitters": [[12, "decision-tree-splitters"], [36, "decision-tree-splitters"], [109, "decision-tree-splitters"]], "Treeple for Hypothesis Testing": [[12, "treeple-for-hypothesis-testing"], [41, "treeple-for-hypothesis-testing"], [109, "treeple-for-hypothesis-testing"]], "Analyze a multi-view dataset with a multi-view random forest": [[14, "analyze-a-multi-view-dataset-with-a-multi-view-random-forest"]], "Fit Random Forest and Multi-view Random Forest": [[14, "fit-random-forest-and-multi-view-random-forest"]], "Visualize scores and compare performance": [[14, "visualize-scores-and-compare-performance"]], "ExtendedIsolationForest example": [[17, "extendedisolationforest-example"]], "Data generation": [[17, "data-generation"]], "Training of the model": [[17, "training-of-the-model"]], "Plot discrete decision boundary": [[17, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[17, "plot-path-length-decision-boundary"]], "Visualize the prediction of each tree within the forest": [[17, "visualize-the-prediction-of-each-tree-within-the-forest"]], "Predicting with different quantile interpolation methods": [[20, "predicting-with-different-quantile-interpolation-methods"]], "Generate the data": [[20, "generate-the-data"], [23, "generate-the-data"]], "The interpolation methods": [[20, "the-interpolation-methods"]], "Quantile prediction intervals with Random Forest Regressor": [[21, "quantile-prediction-intervals-with-random-forest-regressor"]], "Quantile Prediction Function": [[21, "quantile-prediction-function"]], "Plot the results": [[21, "plot-the-results"], [22, "plot-the-results"], [23, "plot-the-results"]], "Quantile prediction with Random Forest Regressor class": [[22, "quantile-prediction-with-random-forest-regressor-class"]], "Fit the model to the training samples": [[22, "fit-the-model-to-the-training-samples"]], "Quantile regression with oblique regression forest": [[23, "quantile-regression-with-oblique-regression-forest"]], "Generate Quantile Predictions": [[23, "generate-quantile-predictions"]], "Plot the decision surface of decision trees trained on the iris dataset": [[27, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Compare extra oblique forest and oblique random forest predictions on cc18 datasets": [[30, "compare-extra-oblique-forest-and-oblique-random-forest-predictions-on-cc18-datasets"]], "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes": [[31, "speed-of-extra-oblique-random-forest-vs-oblique-random-forest-on-different-dataset-sizes"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[32, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Compare the decision surfaces of oblique extra-trees with standard oblique trees": [[33, "compare-the-decision-surfaces-of-oblique-extra-trees-with-standard-oblique-trees"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[34, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree": [[37, "demonstrate-and-visualize-a-multi-view-projection-matrix-for-an-axis-aligned-tree"]], "Initialize the multi-view splitter": [[37, "initialize-the-multi-view-splitter"]], "Sample the projection matrix": [[37, "sample-the-projection-matrix"]], "Sampling split candidates scaled to each feature-set dimensionality": [[37, "sampling-split-candidates-scaled-to-each-feature-set-dimensionality"]], "Plot the projection matrices of an oblique tree for sampling images, or time-series": [[38, "plot-the-projection-matrices-of-an-oblique-tree-for-sampling-images-or-time-series"]], "Initialize patch splitter": [[38, "initialize-patch-splitter"], [39, "initialize-patch-splitter"]], "Generate 1D patches": [[38, "generate-1d-patches"]], "Generate 2D patches": [[38, "generate-2d-patches"]], "Generate 3D patches": [[38, "generate-3d-patches"]], "Discontiguous Patches": [[38, "discontiguous-patches"]], "Plot the sparse projection matrices of an oblique tree": [[39, "plot-the-sparse-projection-matrices-of-an-oblique-tree"]], "Initialize the splitter": [[39, "initialize-the-splitter"]], "Generate projection matrix": [[39, "generate-projection-matrix"]], "Treeple tutorial for calculating CMI": [[43, "treeple-tutorial-for-calculating-cmi"]], "CMI": [[43, "cmi"], [50, "cmi"]], "Create a simulation with two gaussians": [[43, "create-a-simulation-with-two-gaussians"], [45, "create-a-simulation-with-two-gaussians"], [46, "create-a-simulation-with-two-gaussians"], [48, "create-a-simulation-with-two-gaussians"], [49, "create-a-simulation-with-two-gaussians"], [50, "create-a-simulation-with-two-gaussians"]], "Fit the model with X and Z": [[43, "fit-the-model-with-x-and-z"], [47, "fit-the-model-with-x-and-z"]], "Fit the model with Z only": [[43, "fit-the-model-with-z-only"]], "Calculate the statistic": [[43, "calculate-the-statistic"], [45, "calculate-the-statistic"], [46, "calculate-the-statistic"], [47, "calculate-the-statistic"], [48, "calculate-the-statistic"]], "Treeple tutorial for estimating true posteriors & statistics": [[44, "treeple-tutorial-for-estimating-true-posteriors-statistics"]], "True posterior estimation": [[44, "true-posterior-estimation"]], "Generate gaussian mixture simulations": [[44, "generate-gaussian-mixture-simulations"]], "Calculate X priors with true pdfs": [[44, "calculate-x-priors-with-true-pdfs"]], "Calculate true posteriors": [[44, "calculate-true-posteriors"]], "Generate true statistic estimates: S@98": [[44, "generate-true-statistic-estimates-s-98"]], "Generate true statistic estimates: MI": [[44, "generate-true-statistic-estimates-mi"]], "Generate true statistic estimates: pAUC@90": [[44, "generate-true-statistic-estimates-pauc-90"]], "Treeple tutorial for calculating MI": [[45, "treeple-tutorial-for-calculating-mi"]], "MI": [[45, "mi"], [49, "mi"]], "Fit the model": [[45, "fit-the-model"], [46, "fit-the-model"], [48, "fit-the-model"]], "Treeple tutorial for calculating S@98": [[46, "treeple-tutorial-for-calculating-s-98"]], "S@98": [[46, "s-98"]], "Treeple tutorial for calculating S@98 with multiview data": [[47, "treeple-tutorial-for-calculating-s-98-with-multiview-data"]], "S@98 with multiview data": [[47, "s-98-with-multiview-data"]], "Create a two-dimensional simulation with gaussians": [[47, "create-a-two-dimensional-simulation-with-gaussians"]], "Treeple tutorial for calculating pAUC": [[48, "treeple-tutorial-for-calculating-pauc"]], "pAUC@r": [[48, "pauc-r"]], "Treeple tutorial for calculating p-value": [[49, "treeple-tutorial-for-calculating-p-value"]], "Independence Testing": [[49, "independence-testing"], [50, "independence-testing"]], "Generate observed posteriors": [[49, "generate-observed-posteriors"]], "Generate null posteriors": [[49, "generate-null-posteriors"]], "Find the observed statistic difference": [[49, "find-the-observed-statistic-difference"], [50, "find-the-observed-statistic-difference"]], "Permute the trees": [[49, "permute-the-trees"], [50, "permute-the-trees"]], "Calculate the p-value": [[49, "calculate-the-p-value"], [50, "calculate-the-p-value"]], "Treeple tutorial for calculating p-value with multiview data": [[50, "treeple-tutorial-for-calculating-p-value-with-multiview-data"]], "Generate observed posteriors with X and Z": [[50, "generate-observed-posteriors-with-x-and-z"]], "sktree.ExtendedIsolationForest": [[51, "sktree-extendedisolationforest"]], "sktree.ExtraTreesClassifier": [[52, "sktree-extratreesclassifier"]], "sktree.ExtraTreesRegressor": [[53, "sktree-extratreesregressor"]], "sktree.HonestForestClassifier": [[54, "sktree-honestforestclassifier"]], "sktree.MultiViewRandomForestClassifier": [[55, "sktree-multiviewrandomforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[56, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[57, "sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[58, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[59, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[60, "sktree-patchobliquerandomforestregressor"]], "sktree.RandomForestClassifier": [[61, "sktree-randomforestclassifier"]], "sktree.RandomForestRegressor": [[62, "sktree-randomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[63, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[64, "sktree-unsupervisedrandomforest"]], "sktree.datasets.approximate_clf_mutual_information": [[65, "sktree-datasets-approximate-clf-mutual-information"]], "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo": [[66, "sktree-datasets-approximate-clf-mutual-information-with-monte-carlo"]], "sktree.datasets.make_gaussian_mixture": [[67, "sktree-datasets-make-gaussian-mixture"]], "Examples using sktree.datasets.make_gaussian_mixture": [[67, "examples-using-sktree-datasets-make-gaussian-mixture"]], "sktree.datasets.make_joint_factor_model": [[68, "sktree-datasets-make-joint-factor-model"]], "sktree.datasets.make_marron_wand_classification": [[69, "sktree-datasets-make-marron-wand-classification"]], "sktree.datasets.make_quadratic_classification": [[70, "sktree-datasets-make-quadratic-classification"]], "sktree.datasets.make_trunk_classification": [[71, "sktree-datasets-make-trunk-classification"]], "Examples using sktree.datasets.make_trunk_classification": [[71, "examples-using-sktree-datasets-make-trunk-classification"]], "sktree.datasets.make_trunk_mixture_classification": [[72, "sktree-datasets-make-trunk-mixture-classification"]], "Examples using sktree.datasets.make_trunk_mixture_classification": [[72, "examples-using-sktree-datasets-make-trunk-mixture-classification"]], "sktree.experimental.conditional_resample": [[73, "sktree-experimental-conditional-resample"]], "sktree.experimental.mutual_info.cmi_gaussian": [[74, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[75, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[76, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[77, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[78, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[79, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[80, "sktree-experimental-simulate-simulate-sphere"]], "sktree.stats.FeatureImportanceForestClassifier": [[81, "sktree-stats-featureimportanceforestclassifier"]], "sktree.stats.FeatureImportanceForestRegressor": [[82, "sktree-stats-featureimportanceforestregressor"]], "sktree.stats.PermutationForestClassifier": [[83, "sktree-stats-permutationforestclassifier"]], "sktree.stats.PermutationForestRegressor": [[84, "sktree-stats-permutationforestregressor"]], "sktree.stats.PermutationHonestForestClassifier": [[85, "sktree-stats-permutationhonestforestclassifier"]], "sktree.stats.build_coleman_forest": [[86, "sktree-stats-build-coleman-forest"]], "sktree.stats.build_hyppo_cv_forest": [[87, "sktree-stats-build-hyppo-cv-forest"]], "sktree.stats.build_hyppo_oob_forest": [[88, "sktree-stats-build-hyppo-oob-forest"]], "Examples using sktree.stats.build_hyppo_oob_forest": [[88, "examples-using-sktree-stats-build-hyppo-oob-forest"]], "sktree.stats.build_permutation_forest": [[89, "sktree-stats-build-permutation-forest"]], "sktree.tree.DecisionTreeClassifier": [[90, "sktree-tree-decisiontreeclassifier"]], "sktree.tree.DecisionTreeRegressor": [[91, "sktree-tree-decisiontreeregressor"]], "sktree.tree.ExtraTreeClassifier": [[92, "sktree-tree-extratreeclassifier"]], "sktree.tree.ExtraTreeRegressor": [[93, "sktree-tree-extratreeregressor"]], "sktree.tree.HonestTreeClassifier": [[94, "sktree-tree-honesttreeclassifier"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[95, "sktree-tree-multiviewdecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[96, "sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[97, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[98, "sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[99, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[100, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[101, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[102, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[103, "scikit-tree"]], "Contents": [[103, "contents"]], "Getting started:": [[103, null]], "Indices and tables": [[103, "indices-and-tables"]], "Installation": [[104, "installation"]], "Dependencies": [[104, "dependencies"]], "Installing with pip": [[104, "installing-with-pip"]], "Installing from source with Meson": [[104, "installing-from-source-with-meson"]], "Conda (Recommended)": [[104, "conda-recommended"]], "Oblique Random Forests": [[105, "oblique-random-forests"]], "Examples:": [[105, null]], "Feature importance evaluation": [[105, "feature-importance-evaluation"]], "Supervised Decision Trees": [[106, "supervised-decision-trees"]], "Oblique Trees": [[106, "oblique-trees"]], "Differences compared to decision trees": [[106, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[106, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[106, "classification-regression-and-multi-output-problems"]], "Complexity": [[106, "complexity"]], "Tips on practical use": [[106, "tips-on-practical-use"]], "Limitations compared to decision trees": [[106, "limitations-compared-to-decision-trees"]], "References:": [[106, null]], "Honest Trees": [[106, "honest-trees"]], "Unsupervised Decision Trees": [[107, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[107, "unsupervised-criterion"]], "Two-Means": [[107, "two-means"]], "Fast-BIC": [[107, "fast-bic"]], "Evaluating Unsupervised Trees": [[107, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[109, "examples-using-scikit-tree"]], "User Guide": [[110, "user-guide"]], "Release History": [[111, "release-history"]], "Version 0.1": [[113, "version-0-1"]], "Changelog": [[113, "changelog"], [114, "changelog"], [115, "changelog"], [116, "changelog"], [117, "changelog"], [118, "changelog"], [119, "changelog"], [120, "changelog"]], "Code and Documentation Contributors": [[113, "code-and-documentation-contributors"], [114, "code-and-documentation-contributors"], [115, "code-and-documentation-contributors"], [116, "code-and-documentation-contributors"], [117, "code-and-documentation-contributors"], [118, "code-and-documentation-contributors"], [119, "code-and-documentation-contributors"], [120, "code-and-documentation-contributors"]], "Version 0.2": [[114, "version-0-2"]], "Version 0.3": [[115, "version-0-3"]], "Version 0.4": [[116, "version-0-4"]], "Version 0.5": [[117, "version-0-5"]], "Version 0.6": [[118, "version-0-6"]], "Version 0.7": [[119, "version-0-7"]], "Version 0.8": [[120, "version-0-8"]]}, "indexentries": {"module": [[0, "module-sktree"], [0, "module-sktree._lib.sklearn.ensemble"]], "sktree": [[0, "module-sktree"]], "sktree._lib.sklearn.ensemble": [[0, "module-sktree._lib.sklearn.ensemble"]], "extendedisolationforest (class in sktree)": [[51, "sktree.ExtendedIsolationForest"]], "decision_function() (sktree.extendedisolationforest method)": [[51, "sktree.ExtendedIsolationForest.decision_function"]], "estimators_samples_ (sktree.extendedisolationforest property)": [[51, "sktree.ExtendedIsolationForest.estimators_samples_"]], "fit() (sktree.extendedisolationforest method)": [[51, "sktree.ExtendedIsolationForest.fit"]], "fit_predict() (sktree.extendedisolationforest method)": [[51, "sktree.ExtendedIsolationForest.fit_predict"]], "get_metadata_routing() (sktree.extendedisolationforest method)": [[51, "sktree.ExtendedIsolationForest.get_metadata_routing"]], "get_params() (sktree.extendedisolationforest method)": [[51, "sktree.ExtendedIsolationForest.get_params"]], "predict() (sktree.extendedisolationforest method)": [[51, "sktree.ExtendedIsolationForest.predict"]], "score_samples() (sktree.extendedisolationforest method)": [[51, "sktree.ExtendedIsolationForest.score_samples"]], "set_fit_request() (sktree.extendedisolationforest method)": [[51, "sktree.ExtendedIsolationForest.set_fit_request"]], "set_params() (sktree.extendedisolationforest method)": [[51, "sktree.ExtendedIsolationForest.set_params"]], "extratreesclassifier (class in sktree)": [[52, "sktree.ExtraTreesClassifier"]], "apply() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.apply"]], "decision_path() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sktree.extratreesclassifier property)": [[52, "sktree.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sktree.extratreesclassifier property)": [[52, "sktree.ExtraTreesClassifier.feature_importances_"]], "fit() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.get_params"]], "partial_fit() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.partial_fit"]], "predict() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.predict"]], "predict_log_proba() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.predict_quantiles"]], "score() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.score"]], "set_fit_request() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.set_fit_request"]], "set_params() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.set_params"]], "set_partial_fit_request() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.set_partial_fit_request"]], "set_score_request() (sktree.extratreesclassifier method)": [[52, "sktree.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sktree)": [[53, "sktree.ExtraTreesRegressor"]], "apply() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.apply"]], "decision_path() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sktree.extratreesregressor property)": [[53, "sktree.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sktree.extratreesregressor property)": [[53, "sktree.ExtraTreesRegressor.feature_importances_"]], "fit() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.get_params"]], "predict() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.predict"]], "predict_quantiles() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.predict_quantiles"]], "score() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.score"]], "set_fit_request() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.set_fit_request"]], "set_params() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.set_params"]], "set_score_request() (sktree.extratreesregressor method)": [[53, "sktree.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in sktree)": [[54, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.apply"]], "decision_path() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.decision_path"]], "estimators_samples_ (sktree.honestforestclassifier property)": [[54, "sktree.HonestForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.honestforestclassifier property)": [[54, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.get_params"]], "honest_indices_ (sktree.honestforestclassifier property)": [[54, "sktree.HonestForestClassifier.honest_indices_"]], "oob_samples_ (sktree.honestforestclassifier property)": [[54, "sktree.HonestForestClassifier.oob_samples_"]], "partial_fit() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.partial_fit"]], "predict() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.honestforestclassifier method)": [[54, "sktree.HonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.honestforestclassifier property)": [[54, "sktree.HonestForestClassifier.structure_indices_"]], "multiviewrandomforestclassifier (class in sktree)": [[55, "sktree.MultiViewRandomForestClassifier"]], "apply() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.multiviewrandomforestclassifier property)": [[55, "sktree.MultiViewRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.multiviewrandomforestclassifier property)": [[55, "sktree.MultiViewRandomForestClassifier.feature_importances_"]], "fit() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.get_params"]], "oob_samples_ (sktree.multiviewrandomforestclassifier property)": [[55, "sktree.MultiViewRandomForestClassifier.oob_samples_"]], "partial_fit() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.partial_fit"]], "predict() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.predict"]], "predict_log_proba() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.predict_quantiles"]], "score() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.score"]], "set_fit_request() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.set_fit_request"]], "set_params() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.multiviewrandomforestclassifier method)": [[55, "sktree.MultiViewRandomForestClassifier.set_score_request"]], "nearestneighborsmetaestimator (class in sktree)": [[56, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[56, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[56, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[56, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[56, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[56, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[56, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[57, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestclassifier property)": [[57, "sktree.ObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[57, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.get_params"]], "oob_samples_ (sktree.obliquerandomforestclassifier property)": [[57, "sktree.ObliqueRandomForestClassifier.oob_samples_"]], "partial_fit() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[57, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[58, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestregressor property)": [[58, "sktree.ObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[58, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.get_params"]], "oob_samples_ (sktree.obliquerandomforestregressor property)": [[58, "sktree.ObliqueRandomForestRegressor.oob_samples_"]], "predict() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[58, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[59, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestclassifier property)": [[59, "sktree.PatchObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[59, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "oob_samples_ (sktree.patchobliquerandomforestclassifier property)": [[59, "sktree.PatchObliqueRandomForestClassifier.oob_samples_"]], "partial_fit() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[59, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[60, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestregressor property)": [[60, "sktree.PatchObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[60, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "oob_samples_ (sktree.patchobliquerandomforestregressor property)": [[60, "sktree.PatchObliqueRandomForestRegressor.oob_samples_"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[60, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in sktree)": [[61, "sktree.RandomForestClassifier"]], "apply() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.apply"]], "decision_path() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.randomforestclassifier property)": [[61, "sktree.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.randomforestclassifier property)": [[61, "sktree.RandomForestClassifier.feature_importances_"]], "fit() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.get_params"]], "partial_fit() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.partial_fit"]], "predict() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.predict"]], "predict_log_proba() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.predict_quantiles"]], "score() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.score"]], "set_fit_request() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.set_fit_request"]], "set_params() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.randomforestclassifier method)": [[61, "sktree.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sktree)": [[62, "sktree.RandomForestRegressor"]], "apply() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.apply"]], "decision_path() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.randomforestregressor property)": [[62, "sktree.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.randomforestregressor property)": [[62, "sktree.RandomForestRegressor.feature_importances_"]], "fit() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.get_params"]], "predict() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.predict"]], "predict_quantiles() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.predict_quantiles"]], "score() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.score"]], "set_fit_request() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.set_fit_request"]], "set_params() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.set_params"]], "set_score_request() (sktree.randomforestregressor method)": [[62, "sktree.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[63, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedobliquerandomforest property)": [[63, "sktree.UnsupervisedObliqueRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[63, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[63, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[64, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedrandomforest property)": [[64, "sktree.UnsupervisedRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[64, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[64, "sktree.UnsupervisedRandomForest.transform"]], "approximate_clf_mutual_information() (in module sktree.datasets)": [[65, "sktree.datasets.approximate_clf_mutual_information"]], "approximate_clf_mutual_information_with_monte_carlo() (in module sktree.datasets)": [[66, "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo"]], "make_gaussian_mixture() (in module sktree.datasets)": [[67, "sktree.datasets.make_gaussian_mixture"]], "make_joint_factor_model() (in module sktree.datasets)": [[68, "sktree.datasets.make_joint_factor_model"]], "make_marron_wand_classification() (in module sktree.datasets)": [[69, "sktree.datasets.make_marron_wand_classification"]], "make_quadratic_classification() (in module sktree.datasets)": [[70, "sktree.datasets.make_quadratic_classification"]], "make_trunk_classification() (in module sktree.datasets)": [[71, "sktree.datasets.make_trunk_classification"]], "make_trunk_mixture_classification() (in module sktree.datasets)": [[72, "sktree.datasets.make_trunk_mixture_classification"]], "conditional_resample() (in module sktree.experimental)": [[73, "sktree.experimental.conditional_resample"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[74, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[75, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[76, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[77, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[78, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[79, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[80, "sktree.experimental.simulate.simulate_sphere"]], "featureimportanceforestclassifier (class in sktree.stats)": [[81, "sktree.stats.FeatureImportanceForestClassifier"]], "statistic() (sktree.stats.featureimportanceforestclassifier method)": [[81, "sktree.stats.FeatureImportanceForestClassifier.statistic"]], "test() (sktree.stats.featureimportanceforestclassifier method)": [[81, "sktree.stats.FeatureImportanceForestClassifier.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestclassifier property)": [[81, "sktree.stats.FeatureImportanceForestClassifier.train_test_samples_"]], "featureimportanceforestregressor (class in sktree.stats)": [[82, "sktree.stats.FeatureImportanceForestRegressor"]], "statistic() (sktree.stats.featureimportanceforestregressor method)": [[82, "sktree.stats.FeatureImportanceForestRegressor.statistic"]], "test() (sktree.stats.featureimportanceforestregressor method)": [[82, "sktree.stats.FeatureImportanceForestRegressor.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestregressor property)": [[82, "sktree.stats.FeatureImportanceForestRegressor.train_test_samples_"]], "permutationforestclassifier (class in sktree.stats)": [[83, "sktree.stats.PermutationForestClassifier"]], "statistic() (sktree.stats.permutationforestclassifier method)": [[83, "sktree.stats.PermutationForestClassifier.statistic"]], "test() (sktree.stats.permutationforestclassifier method)": [[83, "sktree.stats.PermutationForestClassifier.test"]], "train_test_samples_ (sktree.stats.permutationforestclassifier property)": [[83, "sktree.stats.PermutationForestClassifier.train_test_samples_"]], "permutationforestregressor (class in sktree.stats)": [[84, "sktree.stats.PermutationForestRegressor"]], "statistic() (sktree.stats.permutationforestregressor method)": [[84, "sktree.stats.PermutationForestRegressor.statistic"]], "test() (sktree.stats.permutationforestregressor method)": [[84, "sktree.stats.PermutationForestRegressor.test"]], "train_test_samples_ (sktree.stats.permutationforestregressor property)": [[84, "sktree.stats.PermutationForestRegressor.train_test_samples_"]], "permutationhonestforestclassifier (class in sktree.stats)": [[85, "sktree.stats.PermutationHonestForestClassifier"]], "apply() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.apply"]], "decision_path() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.decision_path"]], "estimators_samples_ (sktree.stats.permutationhonestforestclassifier property)": [[85, "sktree.stats.PermutationHonestForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.stats.permutationhonestforestclassifier property)": [[85, "sktree.stats.PermutationHonestForestClassifier.feature_importances_"]], "fit() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.get_params"]], "honest_indices_ (sktree.stats.permutationhonestforestclassifier property)": [[85, "sktree.stats.PermutationHonestForestClassifier.honest_indices_"]], "oob_samples_ (sktree.stats.permutationhonestforestclassifier property)": [[85, "sktree.stats.PermutationHonestForestClassifier.oob_samples_"]], "partial_fit() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.partial_fit"]], "predict() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.predict"]], "predict_log_proba() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.predict_quantiles"]], "score() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.score"]], "set_fit_request() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.set_fit_request"]], "set_params() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.stats.permutationhonestforestclassifier method)": [[85, "sktree.stats.PermutationHonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.stats.permutationhonestforestclassifier property)": [[85, "sktree.stats.PermutationHonestForestClassifier.structure_indices_"]], "build_coleman_forest() (in module sktree.stats)": [[86, "sktree.stats.build_coleman_forest"]], "build_hyppo_cv_forest() (in module sktree.stats)": [[87, "sktree.stats.build_hyppo_cv_forest"]], "build_hyppo_oob_forest() (in module sktree.stats)": [[88, "sktree.stats.build_hyppo_oob_forest"]], "build_permutation_forest() (in module sktree.stats)": [[89, "sktree.stats.build_permutation_forest"]], "decisiontreeclassifier (class in sktree.tree)": [[90, "sktree.tree.DecisionTreeClassifier"]], "apply() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeclassifier property)": [[90, "sktree.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeclassifier method)": [[90, "sktree.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sktree.tree)": [[91, "sktree.tree.DecisionTreeRegressor"]], "apply() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeregressor property)": [[91, "sktree.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.get_params"]], "predict() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeregressor method)": [[91, "sktree.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sktree.tree)": [[92, "sktree.tree.ExtraTreeClassifier"]], "apply() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.extratreeclassifier property)": [[92, "sktree.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.fit"]], "get_depth() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.get_params"]], "partial_fit() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.partial_fit"]], "predict() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.predict_quantiles"]], "score() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.extratreeclassifier method)": [[92, "sktree.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sktree.tree)": [[93, "sktree.tree.ExtraTreeRegressor"]], "apply() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.extratreeregressor property)": [[93, "sktree.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.fit"]], "get_depth() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.get_params"]], "predict() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.predict_quantiles"]], "score() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.extratreeregressor method)": [[93, "sktree.tree.ExtraTreeRegressor.set_score_request"]], "honesttreeclassifier (class in sktree.tree)": [[94, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[94, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.get_params"]], "partial_fit() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.partial_fit"]], "predict() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "score() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.score"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.honesttreeclassifier method)": [[94, "sktree.tree.HonestTreeClassifier.set_score_request"]], "multiviewdecisiontreeclassifier (class in sktree.tree)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier"]], "apply() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.multiviewdecisiontreeclassifier property)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[95, "sktree.tree.MultiViewDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[96, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[97, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[98, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[99, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[100, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[100, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[100, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[101, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[102, "sktree.tree.compute_forest_similarity_matrix"]]}})