Search.setIndex({"docnames": ["api", "auto_examples/calibration/index", "auto_examples/calibration/plot_overlapping_gaussians", "auto_examples/calibration/sg_execution_times", "auto_examples/hypothesis_testing/index", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing", "auto_examples/hypothesis_testing/plot_co_MIGHT_alternative", "auto_examples/hypothesis_testing/plot_co_MIGHT_null", "auto_examples/hypothesis_testing/plot_might_auc", "auto_examples/hypothesis_testing/plot_might_mv_auc", "auto_examples/hypothesis_testing/sg_execution_times", "auto_examples/index", "auto_examples/multiview/index", "auto_examples/multiview/plot_multiview_dtc", "auto_examples/multiview/sg_execution_times", "auto_examples/outlier_detection/index", "auto_examples/outlier_detection/plot_extended_isolation_forest", "auto_examples/outlier_detection/sg_execution_times", "auto_examples/quantile_predictions/index", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest", "auto_examples/quantile_predictions/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/sklearn_vs_sktree/index", "auto_examples/sklearn_vs_sktree/plot_iris_dtc", "auto_examples/sklearn_vs_sktree/sg_execution_times", "auto_examples/sparse_oblique_trees/index", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest", "auto_examples/sparse_oblique_trees/sg_execution_times", "auto_examples/splitters/index", "auto_examples/splitters/plot_multiview_axis_aligned_splitter", "auto_examples/splitters/plot_projection_matrices", "auto_examples/splitters/plot_sparse_projection_matrix", "auto_examples/splitters/sg_execution_times", "auto_examples/treeple/index", "auto_examples/treeple/sg_execution_times", "auto_examples/treeple/treeple_tutorial_0_GMM", "auto_examples/treeple/treeple_tutorial_1_1a_SA98", "auto_examples/treeple/treeple_tutorial_1_1b_MI", "auto_examples/treeple/treeple_tutorial_1_1c_pAUC", "auto_examples/treeple/treeple_tutorial_1_1d_HD", "auto_examples/treeple/treeple_tutorial_1_2_pvalue", "auto_examples/treeple/treeple_tutorial_2_1a_SA98_multiview", "auto_examples/treeple/treeple_tutorial_2_1b_CMI", "auto_examples/treeple/treeple_tutorial_2_2_pvalue_multiview", "generated/sktree.ExtendedIsolationForest", "generated/sktree.ExtraTreesClassifier", "generated/sktree.ExtraTreesRegressor", "generated/sktree.HonestForestClassifier", "generated/sktree.MultiViewRandomForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.RandomForestClassifier", "generated/sktree.RandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.datasets.approximate_clf_mutual_information", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "generated/sktree.datasets.make_gaussian_mixture", "generated/sktree.datasets.make_joint_factor_model", "generated/sktree.datasets.make_marron_wand_classification", "generated/sktree.datasets.make_quadratic_classification", "generated/sktree.datasets.make_trunk_classification", "generated/sktree.datasets.make_trunk_mixture_classification", "generated/sktree.experimental.conditional_resample", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.stats.FeatureImportanceForestClassifier", "generated/sktree.stats.FeatureImportanceForestRegressor", "generated/sktree.stats.PermutationForestClassifier", "generated/sktree.stats.PermutationForestRegressor", "generated/sktree.stats.PermutationHonestForestClassifier", "generated/sktree.stats.build_coleman_forest", "generated/sktree.stats.build_hyppo_cv_forest", "generated/sktree.stats.build_hyppo_oob_forest", "generated/sktree.stats.build_permutation_forest", "generated/sktree.tree.DecisionTreeClassifier", "generated/sktree.tree.DecisionTreeRegressor", "generated/sktree.tree.ExtraTreeClassifier", "generated/sktree.tree.ExtraTreeRegressor", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.MultiViewDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "sg_execution_times", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4", "whats_new/v0.5", "whats_new/v0.6", "whats_new/v0.7", "whats_new/v0.8"], "filenames": ["api.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_overlapping_gaussians.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/hypothesis_testing/index.rst", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest.rst", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing.rst", "auto_examples/hypothesis_testing/plot_co_MIGHT_alternative.rst", "auto_examples/hypothesis_testing/plot_co_MIGHT_null.rst", "auto_examples/hypothesis_testing/plot_might_auc.rst", "auto_examples/hypothesis_testing/plot_might_mv_auc.rst", "auto_examples/hypothesis_testing/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/multiview/index.rst", "auto_examples/multiview/plot_multiview_dtc.rst", "auto_examples/multiview/sg_execution_times.rst", "auto_examples/outlier_detection/index.rst", "auto_examples/outlier_detection/plot_extended_isolation_forest.rst", "auto_examples/outlier_detection/sg_execution_times.rst", "auto_examples/quantile_predictions/index.rst", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest.rst", "auto_examples/quantile_predictions/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/sklearn_vs_sktree/index.rst", "auto_examples/sklearn_vs_sktree/plot_iris_dtc.rst", "auto_examples/sklearn_vs_sktree/sg_execution_times.rst", "auto_examples/sparse_oblique_trees/index.rst", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size.rst", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris.rst", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/sg_execution_times.rst", "auto_examples/splitters/index.rst", "auto_examples/splitters/plot_multiview_axis_aligned_splitter.rst", "auto_examples/splitters/plot_projection_matrices.rst", "auto_examples/splitters/plot_sparse_projection_matrix.rst", "auto_examples/splitters/sg_execution_times.rst", "auto_examples/treeple/index.rst", "auto_examples/treeple/sg_execution_times.rst", "auto_examples/treeple/treeple_tutorial_0_GMM.rst", "auto_examples/treeple/treeple_tutorial_1_1a_SA98.rst", "auto_examples/treeple/treeple_tutorial_1_1b_MI.rst", "auto_examples/treeple/treeple_tutorial_1_1c_pAUC.rst", "auto_examples/treeple/treeple_tutorial_1_1d_HD.rst", "auto_examples/treeple/treeple_tutorial_1_2_pvalue.rst", "auto_examples/treeple/treeple_tutorial_2_1a_SA98_multiview.rst", "auto_examples/treeple/treeple_tutorial_2_1b_CMI.rst", "auto_examples/treeple/treeple_tutorial_2_2_pvalue_multiview.rst", "generated/sktree.ExtendedIsolationForest.rst", "generated/sktree.ExtraTreesClassifier.rst", "generated/sktree.ExtraTreesRegressor.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.MultiViewRandomForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.RandomForestClassifier.rst", "generated/sktree.RandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.datasets.approximate_clf_mutual_information.rst", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo.rst", "generated/sktree.datasets.make_gaussian_mixture.rst", "generated/sktree.datasets.make_joint_factor_model.rst", "generated/sktree.datasets.make_marron_wand_classification.rst", "generated/sktree.datasets.make_quadratic_classification.rst", "generated/sktree.datasets.make_trunk_classification.rst", "generated/sktree.datasets.make_trunk_mixture_classification.rst", "generated/sktree.experimental.conditional_resample.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.stats.FeatureImportanceForestClassifier.rst", "generated/sktree.stats.FeatureImportanceForestRegressor.rst", "generated/sktree.stats.PermutationForestClassifier.rst", "generated/sktree.stats.PermutationForestRegressor.rst", "generated/sktree.stats.PermutationHonestForestClassifier.rst", "generated/sktree.stats.build_coleman_forest.rst", "generated/sktree.stats.build_hyppo_cv_forest.rst", "generated/sktree.stats.build_hyppo_oob_forest.rst", "generated/sktree.stats.build_permutation_forest.rst", "generated/sktree.tree.DecisionTreeClassifier.rst", "generated/sktree.tree.DecisionTreeRegressor.rst", "generated/sktree.tree.ExtraTreeClassifier.rst", "generated/sktree.tree.ExtraTreeRegressor.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.MultiViewDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "sg_execution_times.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst", "whats_new/v0.5.rst", "whats_new/v0.6.rst", "whats_new/v0.7.rst", "whats_new/v0.8.rst"], "titles": ["API Documentation", "Calibrated decision trees via honesty", "Plot honest forest calibrations on overlapping gaussian simulations", "Computation times", "Hypothesis testing with decision trees", "Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data", "Demonstrate Conditional Mutual Information for Genuine Hypothesis Testing (Co-MIGHT)", "Co-MIGHT when Data Exhibits Conditional Independence", "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Compute partial AUC using multi-view MIGHT (MV-MIGHT)", "Computation times", "Examples", "Multi-view learning with Decision-trees", "Analyze a multi-view dataset with a multi-view random forest", "Computation times", "Outlier-detection", "ExtendedIsolationForest example", "Computation times", "Quantile Predictions with Random Forest", "Predicting with different quantile interpolation methods", "Quantile prediction intervals with Random Forest Regressor", "Quantile prediction with Random Forest Regressor class", "Quantile regression with oblique regression forest", "Computation times", "Computation times", "Comparing sklearn and sktree decision trees", "Plot the decision surface of decision trees trained on the iris dataset", "Computation times", "Sparse oblique projections with oblique decision-trees", "Compare extra oblique forest and oblique random forest predictions on cc18 datasets", "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Compare the decision surfaces of oblique extra-trees with standard oblique trees", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Computation times", "Decision-tree splitters", "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree", "Plot the projection matrices of an oblique tree for sampling images, or time-series", "Plot the sparse projection matrices of an oblique tree", "Computation times", "Treeple for Hypothesis Testing", "Computation times", "Estimating true posteriors &amp; statistics", "Calculating S&#64;98", "Calculating MI", "Calculating pAUC", "Calculating Hellinger Distance", "Calculating p-value (MIGHT)", "Calculating S&#64;98 with multiview data", "Calculating CMI", "Calculating p-value with multiview data (CoMIGHT)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtendedIsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.MultiViewRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.datasets.approximate_clf_mutual_information", "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "sktree.datasets.make_gaussian_mixture", "sktree.datasets.make_joint_factor_model", "sktree.datasets.make_marron_wand_classification", "sktree.datasets.make_quadratic_classification", "sktree.datasets.make_trunk_classification", "sktree.datasets.make_trunk_mixture_classification", "sktree.experimental.conditional_resample", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationHonestForestClassifier", "sktree.stats.build_coleman_forest", "sktree.stats.build_hyppo_cv_forest", "sktree.stats.build_hyppo_oob_forest", "sktree.stats.build_permutation_forest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.MultiViewDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Computation times", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "Version 0.1", "Version 0.2", "Version 0.3", "Version 0.4", "Version 0.5", "Version 0.6", "Version 0.7", "Version 0.8"], "terms": {"sktree": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 104, 105, 107, 117, 118, 119, 120, 121], "manifold": [0, 38, 60, 61, 99, 100, 104, 106, 114], "obliqu": [0, 19, 24, 27, 35, 36, 40, 56, 58, 59, 60, 61, 64, 96, 97, 98, 99, 100, 102, 104, 105, 109, 111, 114, 115], "random": [0, 2, 5, 6, 7, 8, 9, 10, 13, 15, 17, 23, 24, 29, 33, 35, 37, 38, 39, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 109, 111, 114, 116, 120], "forest": [0, 1, 3, 5, 6, 7, 8, 13, 15, 20, 24, 29, 33, 35, 37, 38, 39, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 78, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 111, 114, 115, 116, 117, 120], "we": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 23, 27, 33, 37, 38, 39, 43, 48, 51, 52, 55, 74, 75, 79, 104, 105, 106, 107, 108, 115, 116, 120], "provid": [0, 27, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "drop": [0, 20, 21, 22, 23, 30, 31, 32, 34, 107], "replac": [0, 49, 50, 51, 52, 55, 74, 106], "featur": [0, 5, 6, 7, 8, 10, 14, 20, 23, 27, 30, 31, 32, 33, 34, 38, 39, 49, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "have": [0, 2, 7, 8, 14, 33, 38, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 115, 116, 119], "develop": [0, 105, 121], "These": [0, 33, 38, 55, 86, 95, 106], "ar": [0, 2, 5, 6, 7, 14, 17, 20, 21, 22, 23, 30, 31, 32, 33, 34, 37, 38, 39, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 72, 73, 74, 75, 79, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 112, 117, 120, 121], "still": [0, 6, 7, 8, 38, 55], "compat": [0, 38, 64, 65, 101, 102], "all": [0, 6, 7, 12, 14, 27, 31, 34, 37, 38, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 72, 73, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108, 109, 110, 112, 114, 115, 120], "capabl": [0, 115], "bin": [0, 2, 23, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 62, 63], "which": [0, 2, 5, 6, 7, 8, 9, 10, 17, 21, 30, 32, 37, 38, 48, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 73, 74, 79, 81, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 116, 117, 118, 119, 120], "theoret": [0, 2, 104], "improv": [0, 2, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 114, 115, 116, 117, 118, 119, 120, 121], "runtim": [0, 52, 107, 120], "significantli": [0, 6, 54, 59, 61, 63], "high": [0, 6, 7, 8, 14, 17, 30, 32, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 115], "dimension": [0, 6, 7, 8, 14, 30, 52, 70, 72, 73, 80, 108, 114, 115], "sampl": [0, 2, 5, 6, 7, 9, 10, 12, 14, 17, 20, 21, 23, 27, 30, 31, 32, 34, 36, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 114, 116, 117, 119, 120, 121], "size": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 21, 22, 29, 30, 35, 38, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 91, 92, 93, 94, 95, 97, 98, 99, 100, 107, 109, 110, 117], "data": [0, 2, 4, 11, 12, 21, 22, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 114, 116], "us": [0, 2, 4, 7, 8, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 37, 38, 39, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 74, 78, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 115, 116, 119, 120], "your": [0, 99, 100, 104], "own": [0, 53, 55, 56, 57, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "risk": 0, "extens": 0, "compar": [0, 2, 5, 6, 7, 8, 17, 21, 22, 29, 34, 35, 39, 48, 51, 62, 63, 82, 83, 84, 85, 87, 90, 96, 97, 98, 99, 100, 104, 109, 111, 120], "decis": [0, 6, 7, 8, 16, 28, 30, 35, 37, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 109, 111, 115, 116], "model": [0, 6, 7, 8, 14, 20, 27, 30, 31, 32, 33, 34, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 71, 79, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 114, 119, 120], "tradition": 0, "implement": [0, 7, 37, 38, 39, 52, 53, 54, 55, 68, 70, 72, 73, 74, 82, 83, 84, 85, 97, 98, 104, 106, 107, 114, 115], "axi": [0, 2, 5, 6, 9, 10, 12, 14, 17, 20, 21, 27, 29, 31, 33, 35, 36, 38, 39, 40, 43, 44, 45, 46, 47, 49, 50, 56, 58, 59, 60, 61, 96, 97, 98, 99, 100, 106, 107, 109, 110, 114, 116], "align": [0, 12, 14, 27, 29, 35, 36, 39, 40, 56, 58, 59, 60, 61, 96, 97, 98, 99, 100, 106, 107, 109, 110, 116], "split": [0, 2, 6, 12, 17, 21, 30, 33, 36, 38, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 74, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 110, 117, 118, 119], "store": [0, 33, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 96, 97, 98, 99, 100, 106, 107], "mean": [0, 2, 5, 7, 9, 10, 17, 21, 23, 30, 31, 32, 33, 34, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 80, 83, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 106, 111, 114, 115, 117], "outcom": 0, "i": [0, 2, 5, 6, 7, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 114, 115, 116, 117, 118, 119, 121], "e": [0, 5, 6, 7, 17, 21, 23, 37, 38, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 78, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108], "label": [0, 2, 6, 7, 8, 9, 10, 17, 21, 22, 23, 27, 32, 37, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 74, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108], "vote": [0, 53, 55, 56, 58, 60, 62, 64, 65, 86, 95], "leaf": [0, 17, 20, 21, 22, 23, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107], "node": [0, 12, 17, 20, 21, 22, 23, 30, 36, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 110], "howev": [0, 7, 30, 33, 37, 82, 83, 107], "more": [0, 2, 5, 6, 17, 20, 27, 30, 31, 37, 48, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 106, 107, 117], "exot": 0, "possibl": [0, 30, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108], "call": [0, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 74, 78, 79, 81, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 117], "some": [0, 14, 17, 30, 37, 38, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 110, 117], "multipl": [0, 14, 37, 38, 52, 57, 74, 96, 107, 116], "column": [0, 5, 6, 7, 30, 31, 32, 33, 34, 37, 38, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 86, 91, 93, 95, 96, 97, 98, 99, 100, 107, 114], "creat": [0, 6, 14, 17, 20, 21, 22, 23, 33, 37, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106], "new": [0, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108, 112, 115, 119, 120], "valu": [0, 12, 17, 20, 21, 23, 30, 31, 37, 38, 39, 41, 42, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 78, 79, 81, 82, 83, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 109, 110, 118, 120, 121], "thi": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 30, 31, 32, 33, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 71, 72, 73, 74, 78, 79, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 108, 112, 115, 116, 117, 118, 119, 120, 121], "can": [0, 7, 9, 10, 14, 17, 20, 33, 37, 38, 39, 43, 45, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 72, 73, 74, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 114], "take": [0, 21, 27, 33, 64, 65, 74, 78, 82, 83, 87, 90, 101, 102, 115], "form": [0, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 79, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "spars": [0, 30, 34, 35, 36, 40, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109], "linear": [0, 7, 20, 27, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "combin": [0, 5, 6, 7, 8, 9, 10, 27, 39, 43, 52, 56, 58, 59, 64, 96, 97, 98, 102, 106, 107, 108], "even": [0, 8, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "advantag": [0, 115], "structur": [0, 6, 14, 27, 37, 38, 55, 74, 86, 91, 92, 93, 94, 95, 99, 100, 108, 114], "g": [0, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107], "an": [0, 5, 6, 7, 9, 10, 12, 14, 17, 20, 21, 22, 23, 30, 33, 34, 36, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 72, 73, 74, 76, 78, 79, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121], "imag": [0, 12, 36, 40, 99, 100, 109, 110], "indic": [0, 5, 20, 21, 22, 23, 33, 37, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 75, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 116, 119], "awar": [0, 6, 37, 99, 100], "fashion": [0, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 74, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "class": [0, 2, 5, 9, 10, 12, 17, 19, 21, 24, 32, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 74, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 108, 109, 110, 117, 120], "gener": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 19, 21, 22, 27, 30, 31, 32, 33, 34, 37, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 92, 94, 95, 98, 99, 100, 106, 107, 108, 110, 114, 117, 119, 120], "while": [0, 2, 6, 14, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 82, 83, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 120], "everyth": [0, 110], "els": [0, 17, 33, 34, 43, 44, 46, 48, 49, 51, 70, 72, 73], "consist": [0, 17, 30, 34, 37, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 86, 92, 94, 98, 100, 101, 102, 107, 116], "how": [0, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 19, 21, 22, 30, 33, 37, 38, 39, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 110, 120], "build": [0, 33, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 115, 116], "classif": [0, 14, 32, 33, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 111, 117], "regress": [0, 2, 12, 19, 24, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 109, 110, 111, 117], "thei": [0, 17, 30, 38, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 120], "also": [0, 2, 27, 37, 38, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 116, 117, 120], "power": [0, 6, 7, 106], "non": [0, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "parametr": [0, 107], "embed": 0, "cluster": [0, 2, 17, 33, 64, 65, 101, 102, 108], "The": [0, 2, 5, 6, 7, 9, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 116], "randomtreesembed": [0, 93], "exampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 108, 109, 116], "other": [0, 2, 6, 7, 14, 17, 21, 48, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 82, 83, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "state": [0, 48, 51], "art": 0, "explicitli": [0, 120], "base": [0, 8, 17, 21, 30, 43, 45, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 117, 119, 120], "criterion": [0, 37, 38, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 111, 114], "varianc": [0, 21, 30, 54, 55, 59, 61, 63, 64, 65, 68, 86, 92, 94, 95, 98, 100, 101, 102, 106, 108], "bic": [0, 64, 65, 101, 102, 111], "compris": [0, 99, 100], "those": [0, 21, 22, 30, 53, 54, 55, 58, 59, 60, 61, 62, 63, 80, 91, 92, 93, 94, 95, 97, 98, 106, 107], "avail": [0, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 105, 115], "standalon": 0, "isol": [0, 17, 52, 104, 105, 115], "ensembl": [0, 2, 17, 20, 21, 22, 23, 32, 33, 34, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 93, 94, 106], "extrem": [0, 30, 31, 48, 53, 54, 62, 63, 93, 94], "extend": [0, 14, 17, 52, 104, 107, 115], "allow": [0, 7, 21, 30, 38, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 115, 116, 117, 119, 120], "flexibl": [0, 108], "inher": [0, 64, 65], "produc": [0, 17], "like": [0, 17, 37, 38, 39, 43, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108], "extract": [0, 9, 10, 30, 31, 34], "pairwis": 0, "from": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 106, 107, 108, 109, 116, 120], "includ": [0, 2, 12, 41, 53, 55, 56, 57, 58, 60, 62, 78, 86, 91, 93, 95, 96, 97, 99, 104, 110, 114, 115, 116, 117, 118, 119, 120, 121], "correct": 0, "turn": [0, 120], "proper": 0, "In": [0, 7, 8, 14, 17, 23, 30, 31, 33, 37, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 120, 121], "addit": [0, 8, 53, 54, 62, 63, 64, 65, 68, 82, 83, 87, 89, 90, 101, 102, 107, 120], "leav": [0, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "natur": [0, 66, 67, 79, 108], "wai": [0, 7, 17, 30, 52, 74, 93, 94, 108], "comput": [0, 4, 5, 6, 7, 12, 30, 34, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 110, 114, 120], "neighbor": [0, 2, 52, 57, 74, 78, 104, 117], "nearest": [0, 2, 20, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 117, 118, 119], "interfac": [0, 37, 38, 39], "similar": [0, 30, 33, 47, 56, 58, 59, 60, 61, 64, 65, 70, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 114], "nearestneighbor": [0, 57, 74, 78], "perform": [0, 8, 9, 10, 30, 31, 32, 33, 34, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 108, 120], "conveni": 0, "simul": [0, 1, 3, 12, 29, 35, 37, 67, 70, 71, 72, 73, 106, 109, 110, 120, 121], "beyond": [0, 107], "offer": 0, "work": [0, 14, 23, 37, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "progress": 0, "help": [0, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "evalu": [0, 5, 6, 7, 9, 17, 30, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 111], "mutual": [0, 4, 8, 11, 12, 45, 48, 50, 51, 66, 67, 68, 75, 76, 77, 78, 79, 81, 101, 109, 110, 114, 119], "inform": [0, 2, 4, 8, 10, 11, 12, 14, 27, 31, 32, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 75, 76, 77, 78, 79, 81, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108, 109, 110, 114, 119], "mi": [0, 5, 6, 7, 8, 12, 41, 42, 50, 51, 66, 67, 72, 78, 80, 82, 83, 89, 109, 110, 117], "condit": [0, 4, 11, 12, 21, 22, 43, 45, 48, 50, 51, 60, 61, 66, 67, 68, 74, 75, 78, 99, 100, 109, 110, 114, 117], "cmi": [0, 7, 8, 12, 41, 42, 72, 75, 78, 80, 89, 109, 110], "specif": [0, 7, 8, 9, 10, 37, 38, 39, 43, 44, 46, 49, 53, 55, 56, 58, 60, 62, 70, 72, 73, 86, 87, 90, 107, 116], "multivari": [0, 5, 9, 10, 32, 38, 66, 67, 70, 73, 75, 76, 77, 80, 99, 100, 115], "gaussian": [0, 1, 3, 12, 17, 52, 66, 67, 68, 70, 72, 73, 75, 76, 77, 80, 108, 109, 110], "analyt": [0, 75, 76, 77, 78, 80], "solut": [0, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 75, 76, 77, 78, 86], "entropi": [0, 43, 45, 48, 50, 53, 55, 56, 58, 60, 62, 66, 67, 75, 76, 77, 80, 86, 91, 93, 95, 96, 97, 99], "distribut": [0, 5, 6, 7, 17, 21, 23, 32, 47, 52, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 87, 90, 107, 108, 118, 119], "demonstr": [1, 4, 6, 8, 11, 12, 13, 14, 19, 20, 22, 26, 29, 30, 33, 36, 38, 39, 40, 68, 109, 110], "usag": [1, 2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 91, 92, 93, 94, 95, 110, 116], "honest": [1, 3, 6, 12, 55, 82, 83, 86, 95, 104, 109, 110, 111, 119, 120], "obtain": [1, 12, 14, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 106, 110], "predict": [1, 2, 5, 9, 24, 27, 29, 33, 35, 37, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109, 120], "plot": [1, 3, 6, 7, 8, 12, 14, 26, 28, 29, 30, 31, 33, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 106, 109, 110], "overlap": [1, 3, 12, 72, 109, 110], "go": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 70, 72, 73], "end": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "download": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 110], "full": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 70, 72, 73, 87], "code": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 101, 102, 105, 110], "result": [2, 9, 10, 17, 31, 33, 37, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 74, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108, 117], "variou": [2, 53, 54, 56, 58, 59, 60, 61, 62, 63, 120], "method": [2, 12, 19, 23, 24, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 109, 110, 116, 120], "tree": [2, 5, 6, 7, 8, 9, 10, 14, 16, 20, 21, 22, 23, 28, 30, 31, 34, 35, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 87, 88, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120], "achiev": [2, 33, 54, 63, 104, 106], "see": [2, 6, 7, 8, 14, 20, 21, 22, 23, 27, 30, 31, 33, 34, 37, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 74, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 108], "user": [2, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 114, 116], "guid": [2, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 108, 114], "isoton": 2, "irf": 2, "sigmoid": 2, "sigrf": 2, "regular": [2, 6, 7, 14, 23, 27, 30, 70, 72, 73, 84, 85], "without": [2, 52, 55, 91, 92, 93, 94, 108, 119], "rf": [2, 6, 7, 8, 14, 21, 22, 32, 34, 107], "show": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "curv": [2, 43, 44, 46, 49, 107], "differ": [2, 5, 6, 7, 8, 9, 12, 14, 19, 24, 26, 29, 30, 33, 35, 36, 37, 45, 48, 50, 51, 52, 57, 69, 70, 72, 73, 82, 83, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 109, 110, 111, 118, 119], "dataset": [2, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 21, 23, 26, 28, 29, 32, 33, 35, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 82, 83, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 117, 119, 120, 121], "two": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 27, 30, 31, 33, 34, 37, 64, 65, 68, 70, 72, 73, 82, 83, 87, 90, 93, 94, 106, 107, 111, 114, 117], "red": 2, "line": [2, 21, 22], "closest": 2, "ideal": [2, 91, 92, 93, 94, 105], "figur": [2, 17, 27, 30, 38], "reproduc": [2, 52, 68, 69, 74, 119], "1": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 112, 115], "ronan": [2, 60, 61, 99, 100, 104, 106, 114], "perri": [2, 60, 61, 99, 100, 104, 106, 114], "ronak": [2, 60, 61, 99, 100, 106], "mehta": [2, 60, 61, 99, 100, 106], "richard": 2, "guo": 2, "eva": 2, "yezeret": 2, "jes\u00fa": 2, "arroyo": [2, 60, 61, 99, 100, 106], "mike": 2, "powel": 2, "hayden": 2, "helm": 2, "cencheng": [2, 71, 106], "shen": [2, 71, 106], "joshua": [2, 60, 61, 65, 71, 99, 100, 106, 108], "t": [2, 6, 14, 17, 22, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 65, 69, 71, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108], "vogelstein": [2, 60, 61, 65, 71, 99, 100, 106, 108], "adapt": [2, 64, 65, 76, 104, 108], "estim": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 72, 73, 74, 76, 78, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 114, 120, 121], "quantiti": [2, 104], "arxiv": [2, 71, 104], "2021": [2, 104], "1907": [2, 104], "00325": [2, 104], "import": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 111, 115], "necessari": [2, 105], "modul": [2, 37, 38, 39, 104], "librari": [2, 112, 114], "matplotlib": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 105], "pyplot": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "plt": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "numpi": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 31, 32, 33, 37, 38, 39, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 80, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105], "np": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 31, 32, 33, 37, 38, 39, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "cm": [2, 27, 33, 37, 39], "sklearn": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 46, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 78, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 116], "calibratedclassifiercv": 2, "randomforestclassifi": [2, 14, 32, 34, 53, 54, 56, 58, 60, 84, 93], "model_select": [2, 14, 17, 21, 22, 23, 30, 31, 32, 34, 54, 91, 92, 93, 94, 95, 97, 98, 100], "train_test_split": [2, 17, 22, 23, 54, 82, 83, 93, 94], "honestforestclassifi": [2, 5, 6, 7, 8, 9, 10, 44, 45, 46, 47, 48, 49, 50, 51, 114, 116, 119, 120], "defin": [2, 32, 37, 38, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 78, 79, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108, 117], "classifi": [2, 8, 33, 52, 53, 54, 55, 56, 58, 60, 62, 84, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 120], "color_dict": 2, "honestrf": 2, "f41711": 2, "1b9e77": 2, "377eb8": 2, "fdae61": 2, "n_estim": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 23, 30, 31, 32, 33, 34, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 86, 87, 88, 89, 90, 120], "100": [2, 5, 6, 7, 8, 11, 14, 17, 21, 30, 32, 34, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 86, 109], "n_job": [2, 5, 6, 7, 8, 9, 10, 14, 30, 31, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 86, 87, 90], "2": [2, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 21, 22, 23, 27, 32, 33, 34, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 80, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 112], "clf_cv": 2, "5": [2, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 79, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 109, 112, 115], "max_featur": [2, 5, 6, 7, 8, 9, 10, 14, 21, 30, 31, 32, 34, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 117, 118, 119], "0": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 25, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 78, 79, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 112], "rep": 2, "clf": [2, 17, 27, 30, 31, 32, 34, 52, 53, 55, 58, 62, 91, 95, 97, 107], "honest_fract": [2, 5, 6, 7, 8, 9, 10, 55, 86, 95], "cv": [2, 14, 30, 31, 32, 34, 88, 91, 92, 95, 97, 98, 100], "def": [2, 6, 14, 21, 22, 30, 31, 32, 34, 43, 44, 45, 46, 47, 49, 50], "likelihood": [2, 43, 44, 45, 46, 47, 48, 108], "x": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 108, 121], "lik1": 2, "prod": 2, "exp": [2, 22, 43, 45, 50, 66, 67], "asarrai": 2, "lik0": 2, "return": [2, 5, 6, 9, 10, 14, 17, 21, 22, 30, 31, 32, 34, 43, 44, 45, 46, 47, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "n_sampl": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 32, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 120], "60000": 2, "n_bin": 2, "3": [2, 6, 7, 8, 11, 14, 17, 21, 22, 27, 30, 31, 32, 33, 35, 37, 38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 79, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 112, 115], "calibration_curv": 2, "here": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 37, 38, 39, 55, 107, 110], "blob": 2, "where": [2, 5, 6, 7, 14, 27, 34, 38, 43, 46, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 75, 78, 79, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108, 114, 116, 117, 118, 119], "second": [2, 5, 6, 7, 8, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 68, 70, 72, 73, 96, 107], "contain": [2, 14, 17, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "half": [2, 55, 86], "posit": [2, 9, 10, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 62, 91, 93, 95, 106, 108], "neg": [2, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "probabl": [2, 44, 45, 46, 47, 48, 49, 50, 53, 55, 56, 58, 60, 62, 64, 65, 66, 67, 68, 73, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 99, 107, 120], "therefor": [2, 55, 58, 59, 60, 61, 62, 63, 99, 100, 106, 107], "center": [2, 6, 7, 14, 17, 21, 23, 64, 65, 68, 101, 102], "y": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "make_blob": [2, 6, 14], "shuffl": [2, 5, 6, 7, 8, 33, 51, 55, 58, 59, 61, 62, 63, 68, 74, 82, 83, 84, 85, 86, 87, 90, 116], "fals": [2, 7, 8, 17, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 118, 119], "random_st": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 74, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 116], "42": [2, 8, 11, 17, 30, 31, 53, 54, 63, 68, 93, 94, 109], "sample_weight": [2, 37, 38, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "randomst": [2, 17, 22, 37, 38, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 69, 74, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "rand": [2, 17], "shape": [2, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 30, 31, 33, 34, 37, 38, 39, 43, 44, 46, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106], "train": [2, 5, 6, 7, 12, 20, 21, 23, 26, 28, 30, 31, 33, 38, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 116], "test": [2, 8, 11, 21, 22, 30, 31, 32, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 68, 70, 72, 73, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 104, 105, 109, 115, 116, 117, 120], "x_train": [2, 17, 21, 22, 23, 54, 93, 94], "x_test": [2, 17, 20, 21, 22, 23, 54, 93, 94], "y_train": [2, 17, 20, 21, 22, 23, 54, 91, 92, 93, 94], "y_test": [2, 17, 21, 22, 23, 54, 93, 94], "sw_train": 2, "sw_test": 2, "test_siz": [2, 5, 6, 7, 8, 9, 10, 23, 82, 83, 84, 85, 88], "9": [2, 3, 8, 9, 10, 11, 17, 20, 21, 23, 24, 27, 28, 30, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 105, 109, 114], "class_one_prob": 2, "name": [2, 17, 23, 30, 31, 33, 34, 44, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "fit": [2, 17, 20, 21, 23, 27, 33, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 119, 120], "predict_proba": [2, 53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "fig": [2, 6, 7, 8, 14, 17, 21, 27, 30, 31, 32, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "ax": [2, 6, 7, 8, 14, 17, 27, 30, 31, 32, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 107], "subplot": [2, 6, 7, 8, 14, 17, 21, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "figsiz": [2, 6, 7, 8, 17, 21, 32, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "10": [2, 5, 6, 8, 9, 10, 11, 14, 17, 20, 21, 22, 23, 30, 31, 32, 33, 37, 39, 42, 49, 53, 54, 56, 60, 61, 62, 63, 65, 68, 69, 70, 72, 73, 91, 92, 95, 96, 97, 98, 99, 100, 106, 107, 108, 109], "y_uniqu": 2, "uniqu": [2, 30, 31, 34, 43, 45, 50, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "color": [2, 6, 7, 8, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "rainbow": 2, "linspac": [2, 14, 17, 22, 31], "this_i": 2, "zip": [2, 12, 14, 17, 20, 21, 27, 33, 43, 44, 49, 110], "this_x": 2, "this_sw": 2, "scatter": [2, 17, 20, 27, 33, 38], "": [2, 6, 7, 8, 12, 17, 27, 30, 32, 33, 37, 41, 42, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 109, 110], "50": [2, 8, 23, 30, 31, 33, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 92], "c": [2, 17, 21, 22, 27, 33, 76, 77, 91, 92, 94, 95, 97, 98, 99, 100, 105, 120], "newaxi": 2, "alpha": [2, 6, 7, 8, 17, 21, 33, 38, 43, 44, 45, 46, 47, 48, 49, 50, 51, 79, 81, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "edgecolor": [2, 17, 27, 33, 43, 44, 45, 46, 47, 48, 49, 50, 51], "k": [2, 6, 7, 8, 17, 20, 33, 53, 54, 57, 78, 101], "legend": [2, 6, 7, 8, 17, 20, 22, 23, 27, 32, 37, 43, 44, 45, 46, 47, 48, 49, 50, 51], "loc": [2, 5, 9, 10, 20, 22, 23, 27, 32], "best": [2, 30, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "set_xtick": [2, 37, 39], "set_ytick": [2, 37, 39], "clf_name": 2, "prob": 2, "item": [2, 20, 21, 22, 23, 31], "order": [2, 21, 30, 31, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "lexsort": 2, "51": 2, "reshap": [2, 17, 23, 33, 37, 38, 39, 43, 49, 50, 51], "25": [2, 5, 20, 22, 33, 37, 38, 43], "x_test_prob": 2, "linewidth": [2, 37], "l": [2, 21, 30, 31, 53, 54, 63, 91, 92, 93, 94, 95, 97, 98, 106, 107, 108], "r": [2, 17, 33, 43, 44, 49, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 78, 79, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 107], "truth": [2, 17, 22, 107], "set_ylim": [2, 21, 43, 44, 46, 49], "05": [2, 5, 6, 7, 8, 35, 42, 48, 51, 109], "set_xlabel": [2, 14, 21, 30, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51], "instanc": [2, 23, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 72, 73, 74, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 115], "sort": [2, 17, 21, 30, 31, 34, 55, 57, 101, 108], "true": [2, 5, 6, 7, 9, 10, 12, 17, 27, 30, 31, 32, 34, 38, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108, 109, 110, 117], "p": [2, 5, 9, 10, 12, 21, 30, 31, 32, 41, 42, 43, 44, 49, 53, 54, 55, 56, 58, 60, 62, 63, 70, 72, 79, 82, 83, 86, 87, 90, 93, 94, 109, 110, 120], "set_ylabel": [2, 14, 21, 30, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51], "upper": [2, 21, 22], "left": [2, 21, 22, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 74, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "tight_layout": [2, 6, 7, 8, 17, 21, 27, 33, 43, 44, 45, 46, 47, 48, 49, 50, 51], "savefig": [2, 32], "overlapping_gaussian": 2, "png": 2, "discuss": [2, 33], "well": [2, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "closer": [2, 70, 72, 73], "shown": [2, 75], "below": [2, 46], "total": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108, 109], "run": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 82, 83, 86, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 116, 117], "time": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 36, 37, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 79, 82, 83, 84, 85, 87, 90, 97, 98, 99, 100, 101, 103, 107, 110], "script": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "minut": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "8": [2, 8, 15, 17, 21, 30, 32, 34, 38, 47, 63, 79, 95, 104, 109, 112], "790": [2, 3, 109], "memori": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 97, 98], "61": [2, 6, 114], "mb": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 109], "jupyt": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 110], "notebook": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 110], "plot_overlapping_gaussian": [2, 3, 109], "ipynb": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "python": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 105, 110], "sourc": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110], "py": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 109], "galleri": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 109, 110], "sphinx": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 110], "00": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42, 92, 109], "08": [3, 35, 52, 109], "execut": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42, 109], "file": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42, 105, 109], "auto_exampl": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42], "calibr": [3, 104, 107, 109], "mem": [3, 11, 15, 18, 24, 25, 28, 35, 40, 42, 109], "60": [3, 11, 109], "statist": [4, 5, 6, 7, 12, 23, 41, 42, 48, 51, 55, 69, 70, 72, 73, 82, 83, 84, 85, 87, 90, 91, 92, 95, 97, 98, 104, 106, 107, 109, 110, 117], "genuin": [4, 8, 11, 12, 68, 109, 110], "might": [4, 11, 12, 41, 42, 53, 55, 56, 58, 59, 60, 62, 64, 65, 68, 72, 86, 87, 107, 109, 110], "imbalanc": [4, 11, 12, 109, 110], "co": [4, 11, 12, 68, 79, 109, 110], "when": [4, 6, 7, 11, 12, 14, 17, 20, 30, 39, 44, 46, 49, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 79, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 109, 110, 112, 115, 116, 117, 118, 119, 120, 121], "exhibit": [4, 11, 12, 109, 110], "independ": [4, 7, 11, 12, 79, 82, 83, 87, 107, 109, 110], "partial": [4, 6, 11, 12, 46, 109, 110], "auc": [4, 6, 11, 12, 109, 110, 117], "multi": [4, 6, 7, 8, 11, 15, 36, 40, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 93, 95, 96, 97, 99, 104, 109, 111, 114, 116, 117], "view": [4, 6, 7, 8, 11, 15, 36, 40, 56, 68, 69, 96, 104, 109, 116, 117, 118, 119], "mv": [4, 6, 7, 8, 11, 12, 109, 110], "featureimportanceforestclassifi": [5, 6, 7, 8, 9, 10, 84, 85, 116, 118, 119], "nonparametr": [5, 9, 10], "present": [5, 9, 10, 17, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 101, 102, 107], "set": [5, 6, 7, 8, 10, 14, 17, 30, 31, 33, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 116, 117, 120], "target": [5, 6, 7, 8, 9, 10, 14, 21, 23, 27, 33, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107], "framework": [5, 6, 7], "1000": [5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 31, 32, 44, 45, 46, 47, 48, 49, 50, 51, 55, 58, 62, 79, 80, 81, 82, 83, 84, 85], "500": [5, 9, 10, 14, 44, 45, 46, 47, 48, 49, 50, 51, 90], "binari": [5, 9, 10, 17, 32, 44, 45, 46, 47, 48, 49, 50, 51, 66, 67, 70, 72, 73, 87, 88, 89, 90], "variabl": [5, 6, 7, 8, 9, 10, 14, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 75, 79, 82, 83, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107], "within": [5, 38, 55, 57, 64, 65, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105], "each": [5, 6, 7, 9, 14, 20, 21, 22, 23, 27, 30, 31, 33, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 117, 118, 119], "associ": [5, 9, 53, 55, 56, 58, 60, 62, 65, 73, 86, 91, 93, 95, 96, 97, 99, 107, 108], "one": [5, 6, 7, 9, 14, 17, 20, 21, 22, 23, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 74, 78, 79, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 117, 118, 119], "anoth": [5, 9, 48, 51, 107, 118, 119], "One": [5, 6, 7, 9, 17, 43, 44, 45, 46, 47, 48, 49, 50, 51, 82, 83, 91, 92, 93, 94], "could": [5, 9, 78, 91, 92, 93, 94], "think": [5, 9], "collect": [5, 9, 14, 17, 20, 21, 22, 23, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 74, 86, 95], "same": [5, 6, 7, 8, 9, 20, 21, 22, 23, 27, 37, 38, 39, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 86, 91, 93, 95, 96, 97, 99, 100, 103, 106, 107, 117], "patient": [5, 9], "biomed": [5, 9], "first": [5, 6, 7, 8, 9, 10, 14, 27, 32, 33, 37, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 72, 73, 74, 79, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 117], "strongli": [5, 9, 10], "correl": [5, 9, 10, 14], "w": [5, 9, 10, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 70, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "weakli": [5, 9, 10], "null": [5, 6, 7, 48, 51, 82, 83, 84, 85, 87, 90, 118, 119], "h0": 5, "ha": [5, 7, 8, 9, 10, 14, 33, 34, 38, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 114, 115, 116, 117, 118, 119, 120, 121], "respect": [5, 33, 37, 72, 73, 82, 83, 96, 106, 108], "For": [5, 6, 14, 17, 20, 27, 30, 31, 34, 37, 38, 39, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 72, 73, 78, 83, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 108, 115], "follow": [5, 6, 7, 8, 20, 21, 30, 31, 34, 37, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 79, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108], "our": [5, 6, 8, 30, 37, 38, 39, 104, 107], "uninform": 5, "complet": [5, 6], "disconnect": 5, "d": [5, 17, 20, 21, 22, 23, 30, 31, 37, 39, 53, 54, 63, 68, 70, 72, 73, 75, 76, 77, 80, 93, 94], "separ": [5, 30, 55, 93, 94, 120], "given": [5, 17, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 76, 77, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108, 120], "scipi": [5, 9, 10, 23, 43, 45, 50, 60, 61, 74, 99, 100, 105], "special": [5, 9, 10, 107], "expit": [5, 9, 10], "stat": [5, 6, 7, 8, 9, 10, 23, 43, 44, 45, 46, 47, 48, 49, 50, 51, 91, 92, 95, 97, 98, 118, 119, 120], "decisiontreeclassifi": [5, 6, 7, 8, 9, 10, 27, 33, 37, 39, 53, 55, 62, 86, 92, 93, 95, 96, 97, 98, 99, 120], "seed": [5, 6, 7, 8, 9, 10, 14, 22, 32, 33, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 65, 66, 67, 70, 71, 72, 73, 78, 79, 80, 81, 84, 85, 87, 88, 90, 120], "12345": [5, 6, 7, 8, 9, 10, 14], "rng": [5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23], "default_rng": [5, 6, 7, 8, 9, 10, 14, 80], "them": [5, 6, 7, 8, 9, 10, 17, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 106], "singl": [5, 6, 7, 8, 9, 10, 27, 33, 49, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "2000": [5, 30], "n_features_set": [5, 9, 10], "20": [5, 7, 8, 17, 32, 33, 52, 56, 65, 70, 96, 108], "sigma": [5, 9, 10, 22, 108], "beta": [5, 9, 10], "unimportant_mean": [5, 9, 10], "unimportant_sigma": [5, 9, 10], "4": [5, 6, 7, 9, 10, 11, 17, 18, 21, 24, 32, 37, 38, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 109, 112], "uniform": [5, 9, 10, 17, 22, 32, 55, 68, 78, 79, 81, 86, 95], "x_import": [5, 9, 10], "normal": [5, 6, 9, 10, 17, 23, 30, 31, 37, 39, 46, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 73, 80, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 114], "scale": [5, 9, 10, 21, 23, 69, 70, 72, 73, 117], "hstack": [5, 6, 7, 8, 9, 10, 14, 43, 49, 50, 51], "x_unimport": [5, 9, 10], "binomi": [5, 9, 10], "n": [5, 6, 7, 8, 9, 10, 17, 25, 30, 31, 34, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 108, 114], "sum": [5, 9, 10, 14, 32, 37, 47, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "metric": [5, 6, 7, 8, 9, 10, 43, 44, 46, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 78, 82, 83, 84, 85, 86, 87, 90, 91, 93, 95, 96, 97, 99, 104, 108, 117, 118, 119], "between": [5, 6, 7, 8, 12, 14, 20, 21, 26, 30, 31, 32, 34, 37, 45, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 110], "origin": [5, 6, 7, 30, 48, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 74, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 120], "permut": [5, 6, 7, 21, 48, 55, 58, 59, 60, 61, 62, 63, 74, 82, 83, 84, 85, 86, 87, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 106, 115, 117, 120], "row": [5, 6, 7, 33, 38, 82, 99, 100, 117], "covariate_index": [5, 6, 7, 8, 51, 82, 83, 84, 85, 86, 87, 90, 117], "randomli": [5, 6, 7, 17, 30, 37, 39, 48, 51, 52, 55, 58, 59, 60, 61, 62, 63, 82, 83, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "effici": [5, 6, 7, 52, 57, 64, 65, 82, 83, 84, 85, 87, 92, 94, 98, 100, 101, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "manner": [5, 6, 7, 107], "posterior": [5, 6, 7, 12, 41, 42, 44, 45, 46, 47, 49, 50, 55, 73, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 109, 110], "n_repeat": [5, 6, 7, 8, 30, 31, 32, 34, 48, 51, 82, 83, 84, 85, 87, 90], "pvalu": [5, 6, 7, 8, 48, 51, 84, 85, 87, 90], "proport": [5, 6, 7, 52, 53, 55, 56, 58, 60, 62, 82, 83, 84, 85, 86, 88, 91, 93, 95, 96, 97, 99], "less": [5, 6, 7, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 121], "than": [5, 6, 7, 23, 30, 31, 32, 33, 37, 48, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 74, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108, 117, 119, 120, 121], "observ": [5, 6, 7, 9, 10, 17, 21, 22, 48, 51, 52, 76, 84, 85], "sqrt": [5, 6, 9, 10, 14, 30, 31, 47, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 115, 117], "est": [5, 6, 7, 8, 9, 10, 20, 44, 45, 46, 47, 48, 49, 50, 51, 87, 88, 89, 90], "tree_estim": [5, 6, 7, 8, 9, 10, 49, 50, 51, 55, 86, 95, 120], "thu": [5, 6, 9, 10, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 82, 83, 84, 85, 86, 97, 98, 106, 107, 108], "should": [5, 6, 7, 9, 10, 30, 31, 37, 38, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 74, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105], "arang": [5, 6, 7, 8, 20, 21, 33, 37, 38, 39], "dtype": [5, 6, 7, 8, 17, 34, 37, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "int": [5, 6, 7, 8, 14, 17, 21, 30, 31, 34, 37, 39, 43, 44, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "print": [5, 6, 7, 8, 9, 10, 30, 32, 33, 34, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 58, 59, 61, 62, 63, 68], "f": [5, 6, 7, 8, 9, 10, 17, 22, 27, 30, 32, 34, 38, 43, 44, 46, 49], "unimport": [5, 6], "015040594336712287": 5, "002997002997002997": 5, "0026866694904621735": 5, "7782217782217782": 5, "tim": [5, 6, 7, 82, 83, 87], "coleman": [5, 6, 7, 70, 72, 73, 82, 83, 87], "wei": [5, 6, 7, 82, 83, 87], "peng": [5, 6, 7, 82, 83, 87], "luca": [5, 6, 7, 82, 83, 87], "mentch": [5, 6, 7, 82, 83, 87], "scalabl": [5, 6, 7, 82, 83, 87], "journal": [5, 6, 7, 59, 60, 61, 82, 83, 87, 99, 100, 104, 106], "machin": [5, 6, 7, 30, 31, 53, 54, 55, 58, 59, 62, 63, 82, 83, 87, 93, 94, 104, 106, 107], "learn": [5, 6, 7, 27, 29, 30, 31, 33, 53, 54, 55, 58, 59, 62, 63, 64, 65, 71, 82, 83, 86, 87, 91, 92, 93, 94, 95, 97, 98, 101, 102, 104, 105, 106, 107, 108], "research": [5, 6, 7, 59, 82, 83, 87, 104, 106], "23": [5, 6, 7, 50, 54, 59, 61, 63, 82, 83, 87, 92, 94, 98, 100, 105], "7679": [5, 6, 7, 82, 83, 87], "7713": [5, 6, 7, 82, 83, 87], "2022": [5, 6, 7, 82, 83, 87, 101, 104], "19": [5, 11, 17, 18, 53, 54, 62, 63, 91, 92, 93, 94, 109], "747": [5, 11, 109], "22": [5, 7, 11, 53, 54, 57, 62, 63, 91, 92, 93, 94, 109], "plot_mi_genuine_hypothesis_testing_forest": [5, 11, 109], "do": [6, 7, 12, 16, 33, 37, 38, 39, 64, 65, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 110], "highli": [6, 17, 115], "term": [6, 78, 79, 107, 108, 120], "smaller": [6, 9, 10, 53, 54, 55, 62, 63, 86, 91, 92, 93, 94, 95], "instead": [6, 14, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 121], "leverag": 6, "knowledg": [6, 17, 52, 65, 107, 108], "analyz": [6, 12, 13, 15, 37, 38, 109, 110], "multiviewdecisiontreeclassifi": [6, 7, 8, 10, 37, 49, 50, 51, 117, 118, 119], "graphic": [6, 7, 8, 79], "x_1": [6, 7, 8, 46, 68], "rightarrow": [6, 7, 8, 79], "x_2": [6, 7, 8], "signal": [6, 8, 14, 69, 72, 73], "nois": [6, 7, 14, 17, 22, 68, 69, 70, 71, 72, 73, 79, 81], "low": [6, 7, 8, 14, 17, 21, 30, 31, 69], "make_multiview_classif": [6, 14], "n_features_1": [6, 8, 14], "n_features_2": [6, 7, 8, 14], "cluster_std": [6, 14], "none": [6, 14, 32, 33, 34, 37, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "multiview": [6, 12, 14, 15, 41, 42, 50, 68, 72, 87, 89, 109, 110], "subspac": [6, 14, 78], "x0_first": [6, 14], "y0": [6, 14], "n_featur": [6, 7, 8, 14, 37, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 71, 74, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107], "integ": [6, 14, 52, 53, 55, 56, 58, 60, 62, 68, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 118, 119], "10000": [6, 14, 21, 31, 43, 48, 51, 87, 90], "center_box": 6, "x1_first": [6, 14], "y1": [6, 14, 81], "add": [6, 14, 33, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 68, 71, 79, 81, 86, 114, 116, 117, 120], "x0": [6, 14], "concaten": [6, 14, 17, 20, 21, 96], "standard_norm": [6, 7, 8, 14], "x1": [6, 14], "vstack": [6, 14], "10_000": [6, 62, 63], "n_features_view": [6, 14], "200": [6, 7, 8, 17, 119], "10010": 6, "feature_set_end": [6, 7, 8, 10, 14, 37, 56, 96], "apply_max_features_per_feature_set": [6, 7, 8, 37, 56, 96, 118, 119], "mv_result": [6, 7, 8], "dict": [6, 7, 8, 33, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "overal": [6, 106], "v": [6, 12, 14, 29, 30, 35, 54, 55, 59, 61, 63, 70, 71, 72, 73, 92, 94, 98, 100, 106, 107, 109, 110], "feature_stat": 6, "feature_pvalu": 6, "important_feature_stat": 6, "important_feature_pvalu": 6, "unimportant_feature_stat": 6, "unimportant_feature_pvalu": 6, "007719008004977823": 6, "000999000999000999": [6, 7], "007713833056419039": 6, "00010913275452317794": 6, "5944055944055944": 6, "let": [6, 7, 8, 107], "investig": [6, 7, 8], "what": [6, 7, 8, 33, 37, 38, 39, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "happen": [6, 7, 8], "paramet": [6, 7, 8, 14, 21, 27, 30, 31, 32, 33, 37, 38, 39, 43, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 115, 119, 120], "kept": [6, 7, 14], "ensur": 6, "max": [6, 17, 21, 33, 43, 44, 49, 52, 53, 54, 62, 63, 64, 65, 91, 92, 93, 94, 101, 102, 107], "across": [6, 32, 37, 39, 52, 53, 55, 56, 58, 60, 62, 64, 65, 68, 69, 74, 83, 86, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "rf_result": [6, 7, 8], "nanalyz": 6, "bar": [6, 7, 8, 37, 39], "axhlin": [6, 7, 8, 43, 44, 49], "linestyl": [6, 7, 8, 43, 44, 46, 48, 49, 51], "ylabel": [6, 7, 8, 20, 22, 23, 27, 37, 39], "log10": [6, 7, 8], "xlim": [6, 7, 8, 17, 20, 38], "yscale": [6, 7, 8], "log": [6, 7, 8, 53, 55, 56, 58, 60, 62, 76, 77, 86, 91, 93, 96, 97, 99, 107, 108], "00021117234595469103": 6, "7": [6, 9, 11, 17, 32, 50, 104, 109, 112], "50656276637951e": 6, "06": [6, 11, 35, 42, 92, 109], "999000999000999": 6, "00025189663881775015": 6, "abl": [6, 7, 105, 110, 117], "detect": [6, 17, 52, 104], "becaus": [6, 14, 37, 54, 55, 57, 59, 61, 63, 92, 94, 98, 100, 107], "challeng": 6, "rare": 6, "unabl": [6, 17, 117], "its": [6, 9, 10, 33, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 86, 91, 93, 95, 96, 97, 99, 107], "note": [6, 30, 33, 37, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 112], "both": [6, 7, 8, 14, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 68, 82, 83, 84, 85, 86, 87, 91, 93, 107], "approach": [6, 30, 70, 87, 90, 106], "fail": [6, 8], "reject": [6, 7, 8, 48, 51], "higher": [6, 7, 8, 9, 10, 20, 31, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 106, 107, 119], "33": [6, 11, 14, 15, 17, 34, 35, 94, 109], "plot_mi_imbalanced_hyppo_test": [6, 11, 109], "To": [7, 8, 20, 30, 37, 38, 39, 53, 54, 55, 58, 59, 60, 61, 62, 63, 82, 83, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 110], "h_0": [7, 8, 48, 51], "h_1": [7, 8], "process": [7, 30, 52, 55, 79, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 115], "had": 7, "perfect": 7, "properli": 7, "standard": [7, 8, 12, 17, 29, 30, 31, 32, 34, 35, 39, 44, 45, 46, 47, 48, 49, 50, 51, 57, 68, 78, 80, 90, 99, 100, 107, 109, 110], "explor": [7, 106], "case": [7, 14, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 107, 116, 118, 119], "altern": [7, 48, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "determin": [7, 30, 52, 54, 59, 61, 63, 74, 92, 94, 98, 100, 107], "correctli": [7, 53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99, 118, 119, 120], "doe": [7, 8, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 78, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 106, 107], "exactli": [7, 99, 100, 106], "yet": 7, "sinc": [7, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 115, 116, 117, 118, 119, 120, 121], "make_spd_matrix": 7, "make_gaussian_mixtur": 7, "noise_dim": [7, 8, 68], "80": [7, 8], "class_prob": [7, 66, 67, 68], "6": [7, 10, 11, 17, 30, 31, 32, 34, 35, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 69, 104, 109, 112], "fixed_cent": 7, "covari": [7, 17, 52, 66, 67, 68, 70, 72, 73, 75, 76, 77, 78, 80, 82, 83, 84, 85, 87, 90, 116, 119, 120], "n_dim": [7, 43, 44, 45, 46, 47, 48, 49, 50, 51, 66, 67, 70, 72, 73], "123": [7, 30, 31, 33], "transform": [7, 64, 65, 68, 69, 78, 101, 102], "second_x": 7, "first_x": 7, "n_features_end": [7, 8], "1100": [7, 8], "sample_dataset_per_tre": [7, 8, 9, 10, 82, 83], "lower": [7, 8, 20, 21, 27, 52, 55, 79, 81, 86, 91, 92, 93, 94, 95, 107], "low_dim_feature_stat": [7, 8], "low_dim_feature_pvalu": [7, 8], "analysi": [7, 107], "high_dim_feature_stat": [7, 8], "high_dim_feature_pvalu": [7, 8], "009982498466282963": 7, "0008142171799750964": 7, "6463536463536463": 7, "nanalys": 7, "now": [7, 8, 14, 30, 31, 32, 33, 34, 38, 105, 114, 117, 118, 119, 120, 121], "dim": [7, 8, 30, 31, 38], "analys": 7, "004356557107899395": 7, "04595404595404595": 7, "0013859613186406605": 7, "7242757242757243": 7, "answer": 7, "neither": 7, "nor": 7, "u": [7, 21, 54, 59, 61, 63, 69, 92, 94, 98, 100, 105, 106], "level": [7, 33, 74], "198": [7, 11, 109], "12": [7, 11, 33, 38, 109], "plot_co_might_altern": [7, 11, 109], "perp": 8, "verifi": 8, "make_classif": [8, 53, 55, 58, 62], "signal_x": 8, "n_inform": [8, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 58, 59, 61, 62, 63, 70, 72, 73], "n_redund": [8, 55, 58, 62], "n_class": [8, 27, 33, 43, 45, 50, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 82, 83, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 120], "class_sep": 8, "flip_i": 8, "01": [8, 24, 33, 35, 38, 109], "either": [8, 33, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 82, 83, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 119], "procedur": [8, 74, 107], "abov": [8, 96], "make": [8, 14, 21, 30, 38, 106, 114, 116], "_x": 8, "copi": [8, 17, 27, 51, 74], "rf_est": 8, "nimport": 8, "depend": [8, 30, 31, 45, 48, 50, 51, 79, 104], "0005043866821097254": 8, "27172827172827174": 8, "607395727067146e": 8, "913086913086913": 8, "ncompar": 8, "black": [8, 22, 27, 33, 37, 38], "grai": 8, "green": [8, 37, 39], "blue": [8, 21, 22], "titl": [8, 17, 27, 33, 37, 38, 39], "00040413552453044677": 8, "4305694305694306": 8, "00034490828020194986": 8, "5824175824175825": 8, "nset": 8, "90517887221598e": 8, "975024975024975": 8, "603475244135407e": 8, "8921078921078921": 8, "again": 8, "0005332704695734103": 8, "19480519480519481": 8, "00011515246297311155": 8, "9410589410589411": 8, "contrast": [8, 30, 33, 37, 39, 106, 107], "437": [8, 11, 109], "plot_co_might_nul": [8, 11, 109], "calcul": [9, 10, 12, 21, 38, 41, 42, 72, 87, 89, 103, 108, 109, 110], "you": [9, 10, 34, 37, 39, 49, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 110, 120], "specifi": [9, 10, 37, 38, 48, 51, 53, 55, 56, 58, 60, 62, 68, 69, 70, 73, 86, 91, 93, 95, 96, 97, 99, 107, 119], "maximum": [9, 10, 21, 33, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108], "modifi": [9, 10], "max_fpr": [9, 10, 43, 44, 46, 49], "125": [9, 10, 38, 115], "permute_forest_fract": [9, 10, 82, 83], "posterior_arr": [9, 10], "return_posterior": [9, 10, 48, 51, 82, 83, 84, 85, 87, 90], "ash": [9, 10], "90": [9, 10, 46, 52], "5470205935322214": 9, "expect": [9, 10, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 78, 82, 83, 84, 85, 86, 92, 94, 97, 98, 99, 100, 106], "due": [9, 10, 30, 34, 76, 120], "weak": [9, 53, 54, 62, 63], "5164002324345042": 9, "anytim": [9, 10], "pickl": [9, 10, 107], "observe_stat_": [9, 10, 82, 83, 87, 90], "observe_samples_": [9, 10], "observe_posteriors_": [9, 10, 82, 83], "n_tree": [9, 10], "n_samples_test": [9, 10, 82, 83], "y_true_final_": [9, 10, 82, 83], "364": [9, 11, 109], "plot_might_auc": [9, 11, 109], "hypothesi": [10, 11, 48, 51, 68, 70, 72, 73, 82, 83, 84, 85, 87, 88, 89, 90, 104, 109, 115, 116, 117, 120], "mutli": 10, "auroc": 10, "510": 10, "est_mv": 10, "5105440368598263": 10, "lack": 10, "5235057340320498": 10, "854": [10, 11, 109], "plot_might_mv_auc": [10, 11, 109], "02": [11, 27, 43, 44, 49, 92], "11": [11, 30, 35, 42, 51, 92, 109, 114], "699": 11, "hypothesis_test": [11, 109], "07": [11, 18, 42, 109], "scikit": [12, 27, 37, 64, 65, 101, 102, 105, 106, 107, 112, 120], "algorithm": [12, 17, 30, 52, 57, 64, 65, 78, 82, 83, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 110], "variant": [12, 13, 14, 19, 110], "concern": [12, 16, 41, 110], "extendedisolationforest": [12, 16, 18, 109, 110], "interpol": [12, 19, 24, 37, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 109, 110], "interv": [12, 19, 20, 22, 24, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 107, 109, 110], "regressor": [12, 19, 23, 24, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 85, 86, 91, 92, 93, 94, 98, 100, 109, 110], "surfac": [12, 26, 28, 29, 35, 38, 39, 109, 110], "iri": [12, 26, 28, 33, 91, 95, 97, 107, 109, 110], "extra": [12, 29, 34, 35, 39, 53, 54, 93, 94, 109, 110, 115, 120], "cc18": [12, 29, 35, 39, 106, 109, 110], "speed": [12, 29, 30, 35, 63, 108, 109, 110, 115], "pariti": [12, 29, 35, 106, 109, 110], "strategi": [12, 36, 55, 62, 63, 74, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 110], "visual": [12, 36, 38, 39, 40, 109, 110], "matrix": [12, 14, 36, 38, 40, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 72, 73, 75, 76, 77, 80, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 109, 110], "matric": [12, 36, 37, 40, 52, 64, 65, 69, 70, 72, 73, 74, 107, 109, 110, 114], "seri": [12, 36, 40, 99, 100, 109, 110], "tool": [12, 41, 110], "tutori": [12, 41, 44, 45, 46, 47, 48, 49, 50, 51, 110], "functionss": [12, 41, 110], "98": [12, 33, 41, 42, 72, 87, 89, 90, 109, 110], "pauc": [12, 41, 42, 72, 89, 109, 110], "helling": [12, 41, 42, 72, 89, 109, 110], "distanc": [12, 41, 42, 57, 64, 65, 72, 78, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110], "comight": [12, 41, 42, 72, 87, 109, 110], "auto_examples_python": [12, 110], "auto_examples_jupyt": [12, 110], "multiviewrandomforestclassifi": 14, "uniformli": [14, 32, 37, 38], "vastli": 14, "number": [14, 17, 32, 33, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 108, 116, 117, 118, 119, 121], "If": [14, 38, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 74, 78, 79, 80, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "known": [14, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 80, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "pass": [14, 31, 38, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 114, 118, 119, 120], "via": [14, 27, 71, 97, 98, 101, 104, 105, 106, 114, 116, 117, 119], "splitter": [14, 40, 55, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 109, 116], "project": [14, 17, 27, 34, 36, 40, 56, 58, 59, 97, 98, 104, 106, 107, 109, 114, 115, 116, 117, 118, 119, 120, 121], "defaultdict": [14, 20, 21, 22, 23], "panda": [14, 30, 31, 32, 33, 34, 49, 50, 51, 64, 65, 71, 101, 102, 114, 115, 116, 120, 121], "pd": [14, 30, 31, 32, 33, 34, 49, 50, 51, 80], "seaborn": [14, 30, 31, 32, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51], "sn": [14, 30, 31, 32, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51], "cross_val_scor": [14, 91, 92, 95, 97, 98, 100], "cluster_std_first": 14, "cluster_std_second": 14, "five": 14, "dimens": [14, 30, 31, 32, 37, 38, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 79, 86, 99, 100, 101, 102, 107, 121], "vari": [14, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "thousand": 14, "fix": [14, 55, 58, 59, 60, 61, 62, 63, 78, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "so": [14, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 72, 73, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "20000": 14, "astyp": [14, 30, 31, 32, 34, 37, 38, 39], "portion": 14, "increasingli": 14, "idx": [14, 20, 21, 22, 23, 27, 33, 38], "enumer": [14, 20, 21, 22, 23, 27, 30, 31, 32, 34, 38, 55, 58, 59, 60, 61, 62, 63], "append": [14, 17, 20, 21, 22, 23, 30, 31, 32, 34], "over": [14, 17, 37, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 68, 86, 91, 93, 95, 96, 99, 100, 106, 117], "list": [14, 20, 21, 22, 23, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "arrai": [14, 17, 20, 37, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 80, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 118, 119, 121], "mvrf": 14, "cross": [14, 88, 107], "valid": [14, 21, 23, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "rf_score": 14, "mvrf_score": 14, "len": [14, 17, 20, 21, 22, 23, 33, 37, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "experi": 14, "df": [14, 30, 31, 32, 34], "datafram": [14, 30, 31, 32, 33, 34, 49, 50, 51, 64, 65, 74, 101, 102], "melt": 14, "easier": [14, 116], "id_var": 14, "var_nam": 14, "value_nam": 14, "lineplot": [14, 31], "marker": [14, 21, 38], "o": [14, 17, 20, 30, 38, 70, 72, 73, 101, 107, 114, 115], "hue": [14, 31, 49, 50, 51], "set_titl": [14, 17, 30, 31, 32, 34], "As": [14, 34, 37, 39, 43, 70, 72, 73, 84, 85, 103, 107], "outperform": [14, 34, 107], "increas": [14, 21, 30, 31, 53, 54, 57, 62, 63, 69, 70, 72, 73, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 106], "kei": [14, 37, 91, 92, 93, 94], "133": [14, 15, 109], "717": 14, "plot_multiview_dtc": [14, 15, 109], "716": [15, 109], "anomali": [17, 52], "isolationforest": [17, 52], "demo": 17, "toi": 17, "randn": [17, 23], "spheric": 17, "slightli": 17, "deform": 17, "notat": 17, "inlier": [17, 52], "assign": [17, 101, 102, 108], "ground": [17, 22, 107], "wherea": [17, 63, 79, 107], "outlier": [17, 52, 70, 104], "inspect": [17, 27, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "decisionboundarydisplai": [17, 27], "n_outlier": 17, "120": 17, "40": [17, 32], "cluster_1": 17, "cluster_2": 17, "ones": [17, 37, 38, 39], "stratifi": [17, 44, 45, 46, 47, 48, 49, 50, 51, 55, 74, 82, 86, 95, 116], "handl": [17, 107, 118, 119], "legend_el": 17, "squar": [17, 38, 54, 59, 61, 63, 70, 92, 94, 98, 100, 117], "nuniformli": 17, "extended_clf": 17, "max_sampl": [17, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 119], "feature_combin": [17, 37, 38, 39, 52, 56, 58, 59, 64, 96, 97, 98, 102, 106, 107], "environ": [17, 105], "pleas": [17, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "rerun": 17, "cell": 17, "html": [17, 106], "represent": 17, "trust": 17, "On": [17, 82, 83], "github": [17, 105], "render": 17, "try": [17, 107], "load": [17, 21, 27, 33, 34, 69], "page": [17, 105, 112, 116], "nbviewer": 17, "org": [17, 30, 31, 32, 34, 65, 69, 70, 72, 73, 91, 92, 95, 97, 98, 106, 107, 108], "nbsp": 17, "document": [17, 104, 106], "isolationforestifittedisolationforest": 17, "background": 17, "repres": [17, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "whether": [17, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 79, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "area": [17, 22, 46], "displai": [17, 27], "isoforest": 17, "extendedisoforest": 17, "disp": 17, "from_estim": [17, 27], "response_method": [17, 27], "ax_": 17, "nof": 17, "By": [17, 48, 51, 53, 54, 55, 62, 63, 64, 65, 70, 72, 73, 79, 80, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 101, 102, 106, 119, 121], "decision_funct": [17, 52], "measur": [17, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108], "Such": 17, "score": [17, 30, 31, 32, 33, 34, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "averag": [17, 30, 39, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 78, 96, 97, 98, 102, 106], "itself": [17, 32, 53, 55, 56, 58, 60, 62, 64, 65, 78, 86], "depth": [17, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "equival": [17, 52, 54, 56, 58, 59, 62, 63, 97, 98, 107], "requir": [17, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "short": 17, "particular": [17, 52, 107], "close": [17, 52, 60, 61, 99, 100, 104, 106], "similarli": [17, 107], "larg": [17, 30, 31, 34, 53, 54, 55, 58, 59, 60, 61, 62, 63, 70, 72, 73, 91, 92, 93, 94, 95, 97, 98], "correspond": [17, 20, 21, 22, 23, 27, 33, 43, 53, 55, 56, 58, 60, 61, 62, 69, 82, 83, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "colorbar": [17, 37, 39], "sinusoid": 17, "ad": [17, 52, 53, 54, 62, 63, 64, 65, 68, 79, 91, 92, 93, 94, 101, 102, 107, 114, 115, 116, 120], "top": [17, 21, 33, 104, 106], "pi": [17, 77, 79, 108], "sin": [17, 22, 68, 79], "add_subplot": [17, 38], "111": 17, "30": [17, 30, 31, 56, 92, 96], "ylim": [17, 38], "15": [17, 20, 21, 27, 33, 43, 44, 45, 46, 47, 48, 49, 50, 51], "circl": 17, "locat": 17, "bottom": 17, "right": [17, 21, 23, 27, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "corner": 17, "inlier_sampl": 17, "outlier_sampl": 17, "theta": [17, 107], "estimators_": [17, 33, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "max_tree_depth": 17, "get_depth": [17, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "rang": [17, 20, 21, 22, 23, 27, 30, 32, 33, 38, 52, 57, 99, 100], "polar": [17, 64, 65, 101, 102], "radii_in": 17, "radii_out": 17, "get": [17, 20, 21, 22, 23, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "radii": 17, "lw": [17, 21, 22], "b": [17, 33, 69], "max_depth_tre": 17, "leaf_index": 17, "appli": [17, 20, 21, 22, 23, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 117, 118, 119], "_decision_path_length": 17, "squeez": [17, 38, 43, 44, 46, 49], "j": [17, 20, 55, 70, 72, 73, 91, 92, 95, 97, 98, 105, 107], "nnomin": 17, "round": [17, 21, 32, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 56, 58, 59, 60, 61, 62, 63, 86, 118, 119], "var": 17, "xlabel": [17, 20, 22, 23, 27, 37, 39], "set_xticklabel": [17, 37, 39], "get_xaxi": 17, "set_vis": 17, "get_yaxi": 17, "sahand": 17, "hariri": 17, "matia": 17, "carrasco": 17, "kind": 17, "robert": [17, 69], "brunner": 17, "ieee": [17, 52, 70, 72, 73, 76], "transact": [17, 52], "engin": 17, "1479": 17, "1489": 17, "2019": [17, 55, 95], "578": [17, 18, 109], "plot_extended_isolation_forest": [17, 18, 109], "outlier_detect": [18, 109], "comparison": [20, 30, 31, 32, 34, 62, 63], "dure": [20, 30, 38, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 120], "desir": [20, 23, 83, 107], "li": [20, 21, 22, 23, 60, 61, 65, 99, 100, 104, 106, 108, 114, 115, 116, 117, 118, 119, 120, 121], "point": [20, 21, 27, 32, 33, 38, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 79, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108], "wa": [20, 21, 22, 23, 53, 54, 55, 56, 58, 59, 60, 62, 63, 64, 65, 83, 84, 85, 86, 101, 102, 107, 117, 120], "heavili": [20, 21, 22, 23], "inspir": [20, 21, 22, 23], "packag": [20, 21, 22, 23, 104, 105], "randomforestregressor": [20, 21, 22, 53, 54, 59, 61, 82, 83, 85, 93], "four": [20, 30, 53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "simpl": [20, 27, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "illustr": 20, "midpoint": 20, "detail": [20, 30, 31, 32, 34, 37, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 70, 72, 73, 82, 83, 84, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "006aff": [20, 21, 22], "ffd237": 20, "0d4599": 20, "f2a619": [20, 21, 22], "a6e5ff": [20, 23], "025": [20, 21, 22], "975": [20, 21, 22], "y_median": 20, "y_err": 20, "fell": [20, 21, 22, 23], "leaf_id": [20, 21, 22, 23], "dictionari": [20, 21, 22, 23, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "map": [20, 21, 22, 23, 33, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "node_to_indic": [20, 21, 22, 23], "id": [20, 21, 22, 23, 30, 31, 34], "fall": [20, 21, 22, 23, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "leaf_ids_test": [20, 21, 22, 23], "y_pred_quantil": [20, 21, 23], "merg": [20, 21, 22, 23], "sublist": [20, 21, 22, 23], "quatil": [20, 21, 22, 23], "predit": [20, 21, 22, 23], "y_pred": [20, 21, 22, 53, 54, 59, 61, 62, 63, 92, 94, 98, 100], "sc": 20, "35": 20, "zorder": 20, "eb": 20, "median": [20, 21, 22, 23, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "errorbar": 20, "yerr": 20, "ecolor": 20, "fmt": 20, "75": [20, 37, 43, 115], "xtick": 20, "tolist": 20, "actual": [20, 23, 37, 38, 39, 52], "plot_quantile_interpolation_with_rf": [20, 24, 109], "california": 21, "hous": 21, "being": [21, 57, 68, 107], "95": [21, 22], "bound": [21, 38, 79, 81, 120], "ticker": 21, "funcformatt": 21, "kfold": 21, "util": [21, 23, 34, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "check_random_st": [21, 23], "argument": [21, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 116, 117, 118, 119], "ani": [21, 38, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114, 120], "variat": [21, 32], "get_quantile_predict": 21, "dollar_formatt": 21, "lambda": [21, 107], "format": [21, 33, 37, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 101, 102], "price": 21, "fetch_california_h": 21, "min": [21, 33, 52], "perm": 21, "kf": 21, "n_split": [21, 30, 31, 32, 34], "get_n_split": 21, "y_true": [21, 43, 44, 45, 46, 49, 50, 53, 54, 59, 61, 62, 63, 92, 94, 98, 100], "y_pred_low": [21, 22], "y_pred_upp": [21, 22], "train_index": 21, "test_index": 21, "set_param": [21, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "y_pred_i": 21, "dollar": 21, "1e5": 21, "confid": [21, 22, 55, 107], "against": 21, "segment": [21, 101], "halfwai": 21, "ax1": 21, "ax2": 21, "nrow": [21, 38], "ncol": [21, 38], "y_pred_interv": 21, "sort_idx": 21, "argsort": 21, "y_min": [21, 33], "minimum": [21, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "y_max": [21, 33], "float": [21, 30, 31, 32, 34, 43, 44, 46, 47, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "mid": [21, 43, 44, 45, 48, 49], "upp": 21, "e0f2ff": [21, 22], "m": [21, 22, 60, 61, 69, 99, 100, 104, 106, 107], "_": [21, 27, 43, 44, 45, 46, 47, 48, 49, 50, 51], "grei": 21, "grid": [21, 32, 33, 38], "xaxi": 21, "set_major_formatt": 21, "yaxi": 21, "set_xlim": [21, 43, 44, 46, 49], "fill_between": [21, 22, 43, 46], "subplots_adjust": 21, "pad": [21, 27, 33], "547": [21, 24, 109], "plot_quantile_regression_intervals_with_rf": [21, 24, 109], "function": [22, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 74, 78, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 118, 119], "noisi": [22, 32, 68, 69], "make_toy_dataset": 22, "lognorm": 22, "atleast_2d": 22, "xx": [22, 33], "max_depth": [22, 30, 31, 32, 33, 34, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "y_pred_quatil": 22, "y_pred_m": 22, "shade": 22, "dot": [22, 68], "ravel": [22, 33], "018": [22, 24, 109], "110": 22, "plot_quantile_toy_example_with_rf": [22, 24, 109], "synthet": 23, "skew": 23, "sp": 23, "obliquerandomforestregressor": [23, 106, 114], "5000": [23, 43], "skewnorm_rv": 23, "skewnorm": 23, "rv": 23, "regr_orf": 23, "y_pred_orf": 23, "idea": 23, "better": [23, 97, 98, 106, 107], "off": [23, 32, 79, 120], "c0c0c0": 23, "e7a4f5": 23, "qrf": 23, "orf": [23, 30, 31], "hist": [23, 43, 44, 45, 46, 47, 48, 49, 50, 51], "count": [23, 43, 45, 50, 103], "322": [23, 24, 109], "plot_quantile_vs_standard_oblique_forest": [23, 24, 109], "09": [24, 40, 43, 109], "700": 24, "quantile_predict": [24, 109], "quantil": [24, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 109], "04": [24, 40, 109], "03": [24, 28, 35, 40, 42, 109, 120], "109": [24, 109, 115], "813": [24, 109], "000": 25, "A": [25, 30, 31, 32, 34, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 76, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 114], "pair": [27, 33, 48, 51, 103, 107], "boundari": [27, 33, 38, 57, 60, 61, 99, 100, 114], "made": [27, 120], "threshold": [27, 30, 43, 44, 46, 49, 52, 107], "rule": 27, "infer": [27, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "built": [27, 30, 33, 93, 94, 106, 107], "load_iri": [27, 33, 91, 93, 95, 97, 107], "_lib": [27, 37, 38, 39], "plot_tre": 27, "obliquedecisiontreeclassifi": [27, 39, 55, 56, 58, 60, 98, 107], "ship": 27, "plot_color": 27, "ryb": 27, "plot_step": [27, 33], "clf_label": 27, "123456": [27, 32, 34], "flatten": [27, 38], "pairidx": 27, "onli": [27, 33, 38, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "h_pad": [27, 33], "w_pad": [27, 33], "cmap": [27, 33, 37, 38, 39], "rdylbu": 27, "feature_nam": [27, 33], "target_nam": 27, "suptitl": [27, 33, 38], "borderpad": 27, "handletextpad": 27, "tight": [27, 33], "home": 27, "circleci": 27, "sklearn_vs_sktre": [27, 28, 109], "plot_iris_dtc": [27, 28, 109], "73": [27, 92], "userwarn": 27, "No": 27, "colormap": 27, "ignor": [27, 43, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "togeth": [27, 33, 107, 108], "fill": [27, 33], "636": [27, 28, 109], "openml": [30, 31, 34], "benchmark": [30, 31, 34, 104], "suit": [30, 31, 34], "classic": [30, 93, 94], "look": [30, 37, 38, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 110], "group": [30, 37, 93, 94, 107, 108], "drawn": [30, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 80, 82, 83, 84, 85, 86, 93, 94, 106], "select": [30, 37, 52, 54, 59, 61, 63, 69, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "among": [30, 56, 58, 59, 60, 61, 64, 65, 70, 72, 73, 79, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "chosen": [30, 53, 54, 55, 62, 63, 86, 91, 92, 93, 94, 95], "greedi": [30, 55], "phish": [30, 31, 34], "websit": [30, 31, 34], "http": [30, 31, 32, 34, 65, 69, 70, 72, 73, 91, 92, 95, 97, 98, 105, 106, 107, 108], "www": [30, 31, 34, 69, 91, 92, 95, 97, 98], "search": [30, 31, 32, 34, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "type": [30, 31, 33, 34, 55, 70, 72, 73, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 107, 114], "4534": [30, 31, 34], "wdbc": [30, 34], "1510": [30, 34], "lsvt": 30, "1484": 30, "har": [30, 31], "1478": [30, 31], "cnae": [30, 34], "1468": [30, 34], "subsampl": [30, 31, 34, 52, 55, 86, 95, 107], "constraint": [30, 34, 53, 54, 62, 63, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "veri": [30, 33, 53, 54, 55, 58, 59, 60, 61, 62, 63, 91, 92, 93, 94, 95, 97, 98], "856": 30, "mostli": [30, 39], "zero": [30, 32, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "datatyp": [30, 31], "nomin": [30, 31], "455": 30, "numer": [30, 31, 34, 119], "310": 30, "561": 30, "864": 30, "deliber": [30, 31], "ci": [30, 31], "appropri": [30, 31], "bia": [30, 106], "tradeoff": [30, 107], "substanti": 30, "faster": [30, 31, 101, 120], "omit": [30, 53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "computation": [30, 84, 85], "expens": [30, 84, 85], "main": [30, 52, 105], "stem": [30, 87, 90], "omiss": 30, "ascend": 30, "henc": [30, 106], "complex": [30, 53, 54, 55, 58, 59, 60, 61, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 111], "nlog": 30, "draw": [30, 31, 32, 34, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "suitabl": 30, "affect": 30, "geurt": [30, 31, 53, 54, 63, 93, 94], "ernst": [30, 31, 53, 54, 63, 93, 94], "wehenkel": [30, 31, 53, 54, 63, 93, 94], "63": [30, 31, 43, 53, 54, 63, 93, 94, 114], "2006": [30, 31, 53, 54, 63, 93, 94, 101], "n_cv": [30, 31, 32, 34], "time_taken": [30, 31], "phishingwebsit": [30, 34], "eorf": [30, 31], "147788": 30, "125296": 30, "161905": 30, "267676": 30, "240129": 30, "950759": 30, "067830": 30, "020105": 30, "029011": 30, "023350": 30, "datetim": [30, 31, 32, 34], "fetch_openml": [30, 31, 34], "repeatedkfold": [30, 31, 32, 34], "cross_valid": [30, 31, 32, 34], "extraobliquerandomforestclassifi": [30, 31, 33], "obliquerandomforestclassifi": [30, 31, 32, 33, 34, 106], "max_sample_s": [30, 31], "phishing_websit": [30, 31], "cnae_9": 30, "data_id": [30, 31, 34], "load_cc18": [30, 31, 34], "as_fram": [30, 31, 34], "parser": [30, 31, 34], "d_name": [30, 31, 34], "frame": [30, 31, 34], "iloc": [30, 31, 32, 34], "get_scor": [30, 31, 32, 34], "kwarg": [30, 31, 32, 34, 52, 64, 65, 101, 102, 118, 119], "tmp": [30, 31, 32, 34], "t0": [30, 31, 32, 34], "test_scor": [30, 31, 32, 34], "accuraci": [30, 31, 32, 34, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86, 91, 93, 95, 96, 97, 99], "convert": [30, 31, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 80, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "taken": [30, 31, 68, 70, 96, 97, 98, 106], "total_second": [30, 31], "explod": [30, 31, 32, 34], "reset_index": [30, 31, 32, 34], "inplac": [30, 31, 32, 34], "param": [30, 31, 32, 34, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "concat": [30, 31, 34], "from_dict": 30, "orient": 30, "index": [30, 37, 39, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 120], "groupbi": [30, 31], "set_size_inch": [30, 31, 34], "stripplot": [30, 32, 34], "queri": [30, 32, 34, 57], "dodg": [30, 32, 34], "boxplot": [30, 32, 34], "white": [30, 32, 34, 37, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51], "262": [30, 35, 109], "230": [30, 35, 109], "plot_extra_oblique_random_forest": [30, 35, 109], "purpos": [31, 33, 105], "chang": [31, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "11055": 31, "10299": 31, "562": 31, "section": [31, 33, 69], "focu": 31, "notabl": [31, 34, 118], "grow": [31, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "linearli": [31, 39, 69], "signific": [31, 106], "sample_s": 31, "n_row": [31, 33, 38], "df_tmp": 31, "44": [31, 35, 109], "346": [31, 35, 109], "217": 31, "plot_extra_orf_sample_s": [31, 35, 109], "problem": [32, 53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99, 104, 111], "xor": 32, "task": [32, 33, 104], "limit": [32, 57, 111, 116], "carri": [32, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "about": [32, 107], "odd": 32, "greater": [32, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "otherwis": [32, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "further": 32, "public": [32, 37, 38, 39, 106], "epub": 32, "siam": [32, 60, 61, 99, 100, 101, 104, 106], "doi": [32, 60, 61, 65, 70, 72, 73, 99, 100, 106, 107, 108], "epdf": 32, "1137": [32, 60, 61, 99, 100, 106], "9781611974973": 32, "56": 32, "It": [32, 34, 45, 48, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 80, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 108], "took": [32, 34], "sparse_par": 32, "p_star": 32, "random_se": [32, 33, 78, 79, 81], "OF": [32, 34], "hyper": 32, "t_d": 32, "rff": 32, "plot_sim_": 32, "jpg": 32, "418": [32, 35, 109], "plot_oblique_axis_aligned_forests_sparse_par": [32, 35, 109], "sepal": 33, "width": [33, 99, 100], "length": [33, 38, 52, 55, 56, 57, 58, 60, 69, 74, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "petal": 33, "third": [33, 34, 37], "extraobliquerandomforest": 33, "92": 33, "obliquerandomforest": 33, "9866666666666667": 33, "9933333333333333": 33, "listedcolormap": [33, 37, 39], "1234": [33, 80], "spectral": 33, "fine": 33, "step": [33, 52, 74], "contour": 33, "plot_step_coars": 33, "coars": 33, "guess": 33, "plot_idx": 33, "n_model": 33, "sec": 33, "std": 33, "consol": 33, "str": [33, 43, 44, 46, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 78, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "slice": [33, 74, 82, 83], "awai": 33, "useless": 33, "part": [33, 37, 38, 39], "string": [33, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "model_titl": 33, "model_detail": 33, "hasattr": 33, "fontsiz": [33, 43, 44, 45, 46, 47, 48, 49, 50, 51], "mesh": 33, "input": [33, 37, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106, 107, 121], "x_min": 33, "x_max": 33, "yy": 33, "meshgrid": 33, "blend": 33, "isinst": 33, "z": [33, 38, 51, 75, 78, 79, 81], "c_": 33, "contourf": 33, "choos": [33, 55, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "adaboost": 33, "fewer": 33, "good": [33, 106], "enough": 33, "earli": 33, "estimator_alpha": 33, "coarser": 33, "regularli": 33, "space": [33, 34, 56, 57, 64, 65, 76, 78, 96, 101, 102, 107], "outlin": 33, "xx_coarser": 33, "yy_coars": 33, "z_points_coars": 33, "cs_point": 33, "move": 33, "next": [33, 56, 70, 72, 73, 96, 105], "sequenc": [33, 74, 101], "subset": [33, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 93, 95, 96, 97, 99, 107], "obliquedecisiontre": 33, "extraobliquedecisiontre": 33, "basic": [33, 91, 92, 93, 94, 95], "decisiontre": 33, "three": [33, 34, 37], "distinct": [33, 68], "28": [33, 35, 109], "685": [33, 35, 109], "2282": 33, "plot_oblique_forests_iri": [33, 35, 109], "31": [34, 109], "former": [34, 63], "entir": [34, 56, 60, 61, 96, 99, 100], "latter": [34, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "normin": 34, "dub": 34, "statu": 34, "activ": [34, 105], "857": 34, "notic": [34, 91, 92, 93, 94], "mechan": [34, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "practic": [34, 37, 38, 39, 106, 111], "object": [34, 37, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108], "225": [34, 35, 37, 40, 109], "plot_oblique_random_forest": [34, 35, 109], "936": 35, "sparse_oblique_tre": [35, 109], "216": [35, 39, 40, 109], "2281": [35, 109], "oper": [37, 91, 95, 97, 99, 100], "under": [37, 46, 104], "assumpt": 37, "hyperparamet": [37, 38, 39, 107, 117], "relat": [37, 38, 39, 52, 116, 120], "privat": [37, 38, 39], "cython": [37, 38, 39, 101, 102, 105, 115, 120], "patch": [37, 60, 61, 99, 100, 114, 117, 120], "api": [37, 38, 39, 52, 57, 64, 65, 86, 99, 100, 101, 102, 104, 105, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "just": [37, 38, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 79, 82, 83, 86, 105], "wrapper": [37, 38, 39], "underli": [37, 38, 39, 55, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 120], "relev": [37, 38, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104], "scalarmapp": [37, 39], "_criterion": [37, 38, 39], "gini": [37, 38, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "_oblique_splitt": [37, 39], "multiviewsplittertest": 37, "min_samples_leaf": [37, 38, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "min_weight_leaf": [37, 38, 39], "intp": [37, 70, 72, 73], "n_feature_set": [37, 56, 96], "max_features_per_set_": [37, 96], "monotonic_cst": [37, 38, 39, 53, 54, 62, 63, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 115], "missing_value_feature_mask": [37, 38, 39], "dummi": [37, 38, 39], "repeat": [37, 38, 70, 72, 73, 79], "float32": [37, 38, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "float64": [37, 38, 39, 70, 72, 73, 92, 94, 98, 100], "intern": [37, 39, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108], "expos": [37, 39], "tester": 37, "directli": [37, 38, 39, 120], "init_test": [37, 38, 39], "though": 37, "contigu": [37, 38, 60, 61, 99, 100], "projection_matrix": [37, 39], "sample_projection_matrix_pi": [37, 38, 39], "heatmap": [37, 39], "imshow": [37, 38, 39], "aspect": [37, 39], "axvlin": [37, 43, 44, 48, 49, 51], "iend": 37, "vector": [37, 39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 70, 72, 73, 80, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107, 108], "set_yticklabel": [37, 39], "mappabl": [37, 39], "sm": [37, 39], "set_arrai": [37, 39], "empti": [37, 39, 55, 86, 95], "tick": [37, 39], "set_label": [37, 39], "weight": [37, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 114, 120], "previou": [37, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 86, 120], "setup": [37, 70], "max_features_per_set": 37, "factor": [37, 52, 69, 70, 72, 73], "want": 37, "onc": [37, 82, 83, 87], "control": [37, 39, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 69, 70, 72, 73, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 117, 119], "plot_multiview_axis_aligned_splitt": [37, 40, 109], "patchobliquedecisiontreeclassifi": [38, 60], "done": [38, 74, 99, 100, 106, 117], "data_dim": [38, 60, 61, 99, 100], "n_col": 38, "n_depth": 38, "robust": [38, 104], "hyperrectangl": 38, "start": [38, 72, 73, 82, 83, 105], "min_patch_dim": [38, 60, 61, 99, 100], "max_patch_dim": [38, 60, 61, 99, 100], "constrain": [38, 107], "arbitrarili": [38, 54, 59, 61, 63, 92, 94, 98, 100], "_morf_splitt": 38, "bestpatchsplittertest": 38, "sake": [38, 39], "feature_weight": [38, 60, 61, 99, 100], "th": [38, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "appear": [38, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "dim_contigu": [38, 60, 61, 99, 100], "proj_mat": 38, "sharex": 38, "sharei": 38, "viridi": 38, "nonzero": 38, "custom": [38, 53, 54, 62, 63, 64, 65], "set_zlim": 38, "necessarili": [38, 57, 106], "certain": 38, "n_channel": 38, "n_time": 38, "channel": 38, "366": [38, 40, 109], "plot_projection_matric": [38, 40, 109], "small": [39, 53, 55, 56, 58, 59, 60, 62, 64, 65, 86], "element": [39, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "candid": [39, 106, 107, 117], "bestobliquesplittertest": 39, "orang": 39, "plot_sparse_projection_matrix": [39, 40, 109], "16": [40, 42, 48, 92, 109], "807": 40, "529": 42, "treepl": [42, 44, 45, 46, 47, 48, 49, 50, 51, 104, 109], "treeple_tutorial_1_2_pvalu": [42, 48, 109], "281": [42, 48, 109], "treeple_tutorial_2_2_pvalue_multiview": [42, 51, 109], "713": [42, 51, 109], "treeple_tutorial_2_1b_cmi": [42, 50, 109], "518": [42, 50, 109], "treeple_tutorial_0_gmm": [42, 43, 109], "967": [42, 43, 109], "treeple_tutorial_2_1a_sa98_multiview": [42, 49, 109], "152": [42, 49, 109, 117], "treeple_tutorial_1_1c_pauc": [42, 46, 109], "103": [42, 46, 109], "treeple_tutorial_1_1a_sa98": [42, 44, 109], "986": [42, 44, 109], "treeple_tutorial_1_1d_hd": [42, 47, 109], "450": [42, 47, 109], "treeple_tutorial_1_1b_mi": [42, 45, 109], "360": [42, 45, 109], "warn": [43, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 121], "multivariate_norm": 43, "roc_auc_scor": [43, 46], "roc_curv": [43, 44, 46, 49], "make_trunk_mixture_classif": [43, 120], "color_cod": [43, 44, 45, 46, 47, 48, 49, 50, 51], "style": [43, 44, 45, 46, 47, 48, 49, 50, 51], "context": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86], "talk": [43, 44, 45, 46, 47, 48, 49, 50, 51], "font_scal": [43, 44, 45, 46, 47, 48, 49, 50, 51], "palett": [43, 44, 45, 46, 47, 48, 49, 50, 51], "color_palett": [43, 44, 45, 46, 47, 48, 49, 50, 51], "set1": [43, 44, 45, 46, 47, 48, 49, 50, 51], "set_palett": [43, 44, 45, 46, 47, 48, 49, 50, 51], "n_color": [43, 44, 45, 46, 47, 48, 49, 50, 51], "set_styl": [43, 44, 45, 46, 47, 48, 49, 50, 51], "dddddd": [43, 44, 45, 46, 47, 48, 49, 50, 51], "filterwarn": 43, "know": [43, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "suffici": 43, "amount": [43, 52, 55, 93, 94], "mu_0": [43, 44, 45, 46, 47, 48, 49, 50, 51, 72, 73], "mu_1": [43, 44, 45, 46, 47, 48, 49, 50, 51, 72, 73], "mix": [43, 73], "tick_param": [43, 44, 45, 46, 47, 48, 49, 50, 51], "labels": [43, 44, 45, 46, 47, 48, 49, 50, 51], "histogram": [43, 44, 45, 46, 47, 48, 49, 50, 51, 62, 63], "frameon": [43, 44, 45, 46, 47, 48, 49, 50, 51], "f_": [43, 48, 51], "mathbb": [43, 44, 46, 49], "pdf_class0": 43, "compon": [43, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "pdf_class1_0": 43, "pdf_class1_1": 43, "pdf_class1": 43, "balanc": [43, 53, 55, 56, 58, 60, 62, 66, 67, 86, 91, 93, 95, 96, 97, 99], "p_x": 43, "frac": [43, 46, 47, 54, 59, 61, 63, 76, 77, 92, 94, 98, 100, 108], "pos_class0": 43, "pos_class1": 43, "po": [43, 46], "calculate_sa": [43, 44, 49], "y_pred_proba": [43, 44, 45, 46, 47, 49, 50], "sensit": [43, 44, 49, 87, 90], "check": [43, 44, 46, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 120], "ndim": [43, 44, 46, 49], "rais": [43, 44, 46, 49, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 121], "valueerror": [43, 44, 46, 49, 121], "must": [43, 44, 46, 49, 53, 55, 56, 58, 59, 60, 62, 68, 70, 72, 73, 79, 86, 87, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 101, 102], "1d": [43, 44, 46, 49, 57, 60, 61, 68, 99, 100], "find": [43, 44, 46, 49, 54, 57, 59, 61, 63, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108, 116], "fpr": [43, 44, 46, 49], "tpr": [43, 44, 46, 49], "pos_label": [43, 44, 46, 49], "drop_intermedi": [43, 44, 46, 49], "sa98": [43, 44, 49], "005": [43, 44, 46, 49, 79, 81], "rate": [43, 44, 46, 49, 117], "roc": [43, 44, 46, 49], "spec": [43, 44, 49], "ymin": [43, 44, 49], "ymax": [43, 44, 49], "xmin": [43, 44, 49], "xmax": [43, 44, 49], "27": 43, "calculate_mi": [43, 45, 50], "h_yx": [43, 45, 50], "empir": [43, 45, 50, 55, 63, 86, 95, 107], "return_count": [43, 45, 50], "h_y": [43, 45, 50, 67], "calculate_pauc": [43, 46], "make_trunk_classif": [44, 45, 46, 47, 48, 49, 50, 51, 70, 119, 120], "build_hyppo_oob_forest": [44, 45, 46, 47, 49, 50], "eta": [44, 46, 47, 49], "t_r": [44, 46, 49], "With": [44, 45, 46, 47, 48, 49, 50, 51], "initi": [44, 45, 46, 47, 48, 49, 50, 51, 82, 83], "bootstrap": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 74, 82, 83, 84, 85, 86, 87, 88, 89, 90, 106, 119], "observe_proba": [44, 45, 46, 47, 49, 50], "nanmean": [44, 45, 46, 47, 49, 50], "14": [44, 45], "h": [45, 47, 48, 75, 76, 77, 107], "integr": [46, 66, 70], "percentag": 46, "Then": [46, 82, 83, 90, 103, 105], "int_": 46, "infti": 46, "mathcal": [46, 68, 108], "x_0": 46, "df_1": 46, "df_0": 46, "59": 46, "quantifi": 47, "bigl": 47, "bigr": 47, "_2": [47, 108], "calculate_hd": 47, "hd": 47, "67": [47, 114], "build_coleman_forest": [48, 51, 120], "xy": 48, "f_x": 48, "f_y": 48, "h_a": [48, 51], "neq": [48, 51], "would": [48, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 117, 120], "confirm": [48, 51], "construct": [48, 51, 64, 65, 87, 90, 106, 107], "output": [48, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 111, 114, 120], "vale": [48, 51], "est_nul": [48, 51], "conduct": [48, 51], "observed_diff": [48, 51], "mix_diff": [48, 51], "diff": [48, 51], "out": [49, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 84, 85, 86, 87, 88, 89, 90, 106, 119, 120], "simpler": [49, 108], "z_x": [49, 50, 51], "z_x_y": [49, 50, 51], "scatterplot": [49, 50, 51], "kdeplot": [49, 50, 51], "49": 49, "joint": [50, 51, 69, 82, 83], "single_proba": 50, "joint_mi": 50, "x_null": 51, "insert": 51, "auto": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "contamin": 52, "verbos": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 87, 88, 89, 90, 105], "warm_start": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "read": [52, 53, 54, 58, 59, 62, 63, 91, 92, 93, 94, 95, 97, 98], "default": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 116], "256": [52, 70, 72, 73], "larger": [52, 55, 74, 86, 95, 106], "paper": [52, 70, 87, 106, 107], "n_features_in_": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "enabl": [52, 55, 87, 88, 89, 90, 101, 115], "lead": [52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 91, 92, 93, 94, 95, 97, 98, 106, 120], "longer": 52, "bool": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "individu": 52, "consid": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 116], "extraobliquedecisiontreeregressor": [52, 115], "job": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 78, 86], "parallel": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 78, 86, 87, 90], "unless": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "joblib": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 105], "parallel_backend": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86], "processor": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86], "glossari": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 74, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "pseudo": 52, "branch": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "reus": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86], "whole": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86], "version": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 112], "21": [52, 59, 104, 106, 114], "ellipticenvelop": 52, "svm": 52, "oneclasssvm": 52, "unsupervis": [52, 64, 65, 101, 102, 104, 111, 114, 115], "support": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107, 114, 118, 119], "libsvm": 52, "localoutlierfactor": 52, "local": [52, 105], "lof": 52, "extratreeregressor": [52, 54, 93], "ceil": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "log_2": 52, "liu": 52, "et": [52, 87, 104], "al": [52, 87, 104], "2008": [52, 70, 72, 73], "refer": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 70, 71, 72, 73, 76, 82, 83, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "fei": 52, "toni": 52, "ting": 52, "kai": 52, "ming": 52, "zhou": 52, "zhi": 52, "hua": 52, "mine": [52, 65, 101, 108], "icdm": 52, "eighth": 52, "confer": [52, 65, 101, 108], "acm": [52, 65, 108], "discoveri": [52, 65, 108], "tkdd": 52, "2012": 52, "attribut": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 69, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 120], "estimator_": [52, 53, 54, 62, 63, 64, 65, 82, 83, 95], "child": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "templat": [52, 53, 54, 55, 62, 63, 64, 65, 86, 95], "sub": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 119], "estimators_features_": 52, "ndarrai": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "estimators_samples_": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "max_samples_": 52, "offset_": 52, "offset": 52, "raw": 52, "score_sampl": 52, "equal": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 117], "seen": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "24": [52, 53, 54, 62, 63, 91, 92, 93, 94], "feature_names_in_": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "sever": [52, 55, 58, 59, 60, 61, 62, 63, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "n_left": 52, "path": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "array_lik": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 71, 74, 75, 76, 77, 79, 80, 81, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "csr_matrix": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "abnorm": 52, "csc_matrix": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "Not": [52, 57, 64, 65, 96, 97, 98, 99, 100, 101, 102], "convent": [52, 57, 64, 65, 101, 102], "self": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "fit_predict": [52, 64, 65, 101, 102], "get_metadata_rout": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "metadata": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "rout": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "metadatarout": 52, "encapsul": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "get_param": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "deep": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106], "subobject": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "is_inli": 52, "tell": 52, "accord": [52, 57, 87, 90], "opposit": 52, "set_fit_request": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "unchang": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "request": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104], "enable_metadata_rout": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "set_config": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "option": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 116], "meta": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "error": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 121], "alia": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "metadata_rout": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "retain": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "exist": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "insid": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 114], "pipelin": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "effect": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 110], "updat": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "nest": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "__": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "properti": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 116, 119], "dynam": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86], "identifi": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 108], "member": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86], "bag": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 87, 88, 89, 90, 119, 120], "re": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "reduc": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 97, 98, 106], "footprint": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86], "fetch": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86], "mai": [52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108], "slower": [52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86], "min_samples_split": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 115], "min_weight_fraction_leaf": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "max_leaf_nod": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "min_impurity_decreas": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "oob_scor": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "class_weight": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "ccp_alpha": [53, 54, 55, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "max_bin": [53, 54, 62, 63], "store_leaf_valu": [53, 54, 62, 63, 91, 92, 93, 94, 96, 97, 98, 99, 100], "log_loss": [53, 62, 91, 93], "qualiti": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108], "criteria": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 108], "impur": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107], "shannon": [53, 62, 91, 93], "gain": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "mathemat": [53, 60, 61, 62, 64, 65, 91, 93, 99, 100, 104, 106, 111], "formul": [53, 62, 64, 65, 91, 93, 111], "expand": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "until": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "pure": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "fraction": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "18": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "least": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 120], "smooth": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "especi": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "log2": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 115], "stop": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "partit": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 76, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107], "found": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "rel": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 108], "reduct": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "unlimit": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "induc": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "decreas": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 72, 73, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "equat": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "n_t": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "n_t_r": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "right_impur": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "n_t_l": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "left_impur": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "current": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107], "callabl": [53, 54, 62, 63, 64, 65, 68, 79, 81, 101, 102], "accuracy_scor": [53, 62], "signatur": [53, 54, 62, 63, 64, 65], "decision_path": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "learner": [53, 54, 62, 63], "balanced_subsampl": [53, 55, 56, 58, 60, 62, 86], "class_label": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "suppos": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "multioutput": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "multilabel": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "everi": [53, 55, 56, 58, 60, 61, 62, 86, 91, 93, 95, 96, 97, 99, 100, 107], "mode": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99, 105], "automat": [53, 55, 56, 58, 60, 62, 74, 86, 91, 93, 95, 96, 97, 99], "adjust": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "invers": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "frequenc": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "bincount": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "except": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86, 92, 94, 98, 100, 106], "grown": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86, 91, 92, 93, 94, 95, 97, 98], "multipli": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "through": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104], "minim": [53, 54, 55, 59, 61, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 108], "cost": [53, 54, 55, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107], "prune": [53, 54, 55, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "subtre": [53, 54, 55, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "largest": [53, 54, 55, 62, 63, 79, 86, 91, 92, 93, 94, 95], "255": [53, 54, 62, 63], "miss": [53, 54, 62, 63, 91, 92, 93, 94, 95, 107, 121], "experiment": [53, 54, 62, 63, 91, 92, 93, 94, 96, 104, 115, 116, 117], "get_leaf_node_sampl": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "monoton": [53, 54, 62, 63, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "enforc": [53, 54, 55, 62, 63, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "multiclass": [53, 62, 91, 93, 95], "n_outputs_": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "hold": [53, 62, 91, 93, 95], "extratreesregressor": [53, 63, 93, 94], "optim": [53, 54, 99, 100, 107, 120], "etc": [53, 54, 55, 58, 59, 60, 61, 62, 63, 78, 91, 92, 93, 94, 95, 97, 98], "fulli": [53, 54, 55, 58, 59, 60, 61, 62, 63, 82, 83, 91, 92, 93, 94, 95, 97, 98], "unprun": [53, 54, 55, 58, 59, 60, 61, 62, 63, 91, 92, 93, 94, 95, 97, 98], "potenti": [53, 54, 55, 58, 59, 60, 61, 62, 63, 91, 92, 93, 94, 95, 97, 98, 100], "consumpt": [53, 54, 55, 58, 59, 60, 61, 62, 63, 91, 92, 93, 94, 95, 97, 98], "extratreeclassifi": [53, 94], "base_estimator_": [53, 54, 62, 63], "renam": [53, 54, 62, 63], "classes_": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "n_classes_": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "feature_importances_": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 116], "oob_score_": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "oob_decision_function_": [53, 55, 56, 58, 59, 60, 62, 64, 65, 86], "n_output": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "never": [53, 55, 56, 58, 59, 60, 62, 64, 65, 86], "nan": [53, 55, 56, 58, 59, 60, 62, 64, 65, 83, 86, 95], "x_leav": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "datapoint": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "up": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 107, 118, 119], "n_node": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "goe": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "csr": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "n_nodes_ptr": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "give": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 97, 98], "real": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86, 92, 94, 98, 100], "net": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "possibli": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 68, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107], "leaf_node_sampl": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "reach": [53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "n_leaf_node_sampl": [53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "metadatarequest": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "partial_fit": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99, 115], "subsequ": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "That": [53, 55, 56, 58, 60, 62, 64, 65, 86, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "highest": [53, 55, 56, 58, 60, 62, 64, 65, 86, 91, 95, 97], "predict_log_proba": [53, 55, 56, 58, 60, 62, 86, 91, 93, 96, 97, 99], "predict_quantil": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "keyword": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 115, 116, 119], "accept": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 78, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "n_quantil": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86], "harsh": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "set_partial_fit_request": [53, 55, 56, 58, 60, 62, 86, 91, 93, 95, 96, 97, 99], "set_score_request": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "brought": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "mislead": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "cardin": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106], "mani": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 115], "permutation_import": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "root": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 117], "squared_error": [54, 59, 61, 63, 92, 94, 98, 100], "absolute_error": [54, 59, 61, 63, 92, 94, 98, 100], "friedman_ms": [54, 59, 61, 63, 92, 94, 98, 100], "poisson": [54, 59, 61, 63, 92, 94, 98, 100], "l2": [54, 59, 61, 63, 92, 94, 98, 100], "loss": [54, 59, 61, 63, 92, 94, 98, 100, 107], "termin": [54, 59, 61, 63, 92, 94, 98, 100], "friedman": [54, 59, 61, 63, 91, 92, 94, 95, 97, 98, 100, 107], "absolut": [54, 59, 61, 63, 92, 94, 98, 100], "l1": [54, 59, 61, 63, 92, 94, 98, 100], "devianc": [54, 59, 61, 63, 92, 94, 98, 100], "mae": [54, 63, 92, 94], "r2_score": [54, 59, 61, 63, 92, 94, 98, 100], "extratreesclassifi": [54, 62, 93, 94], "load_diabet": [54, 92, 94, 98, 100], "return_x_i": [54, 92, 93, 94, 98, 100], "reg": [54, 94], "2727": 54, "decisiontreeregressor": [54, 62, 63, 91, 94, 98, 100], "oob_prediction_": [54, 61, 63], "coeffici": [54, 59, 61, 63, 92, 94, 98, 100], "residu": [54, 59, 61, 63, 92, 94, 98, 100], "wors": [54, 59, 61, 63, 92, 94, 98, 100], "constant": [54, 59, 61, 63, 92, 94, 98, 100], "alwai": [54, 55, 56, 58, 59, 60, 61, 62, 63, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 107], "disregard": [54, 59, 61, 63, 92, 94, 98, 100], "precomput": [54, 57, 59, 61, 63, 92, 94, 98, 100], "kernel": [54, 59, 61, 63, 71, 92, 94, 98, 100, 114], "n_samples_fit": [54, 59, 61, 63, 92, 94, 98, 100], "uniform_averag": [54, 59, 61, 63, 92, 94, 98, 100], "keep": [54, 59, 61, 63, 92, 94, 98, 100, 120], "influenc": [54, 59, 61, 63, 92, 94, 98, 100], "multioutputregressor": [54, 59, 61, 63, 92, 94, 98, 100], "honest_prior": [55, 86, 95], "tree_estimator_param": [55, 86, 95], "remain": [55, 86, 95], "deal": [55, 86, 95], "prior": [55, 68, 86, 95, 107, 108], "shallow": [55, 86, 95], "instanti": [55, 95], "basedecisiontre": [55, 57, 95, 103], "need": [55, 91, 92, 93, 94, 95, 105, 107, 110], "ident": [55, 58, 59, 60, 61, 62, 63, 70, 72, 73, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "determinist": [55, 58, 59, 60, 61, 62, 63, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "behaviour": [55, 58, 59, 60, 61, 62, 63, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "honesti": [55, 104, 107], "unbias": 55, "doubl": 55, "access": 55, "ineffici": 55, "recommend": [55, 64, 65, 97, 98, 99, 100, 104, 107], "propens": [55, 107], "causal": 55, "breiman": [55, 58, 59, 62, 63, 91, 92, 95, 97, 98, 106, 107], "45": [55, 58, 59, 62, 63, 69, 76, 106, 107, 114], "32": [55, 58, 59, 62, 63, 106, 107], "2001": [55, 58, 59, 62, 63, 106, 107], "athei": [55, 95], "tibshirani": [55, 69, 91, 92, 95, 97, 98, 107], "wager": [55, 95], "annal": [55, 69, 70, 72, 73, 95], "honest_forest": [55, 95], "honesttreeclassifi": [55, 86, 114, 120], "honest_decision_function_": [55, 86], "structure_indices_": [55, 86, 95], "n_structur": [55, 86, 95], "honest_indices_": [55, 86, 95], "n_honest": [55, 86, 95], "oob_samples_": [55, 56, 58, 59, 60, 61, 86, 119, 120], "n_samples_bootstrap": [55, 86], "fit_param": [55, 64, 65, 101, 102], "predict_proba_per_tre": [55, 56, 58, 60, 86, 120], "proba_per_tre": [55, 56, 58, 60, 86], "tradit": [56, 58, 59, 97, 98], "assum": [56, 96, 121], "per": [56, 68, 82, 83, 86, 88, 96, 114, 117, 118, 119, 120], "n_features_": [56, 58, 59, 60, 61, 86], "compute_similarity_matrix": [56, 58, 59, 60, 61, 64, 65, 96, 97, 98, 99, 100, 101, 102], "sim_matrix": [56, 58, 59, 60, 61, 64, 65, 96, 97, 98, 99, 100, 101, 102], "n_neighbor": 57, "radiu": [57, 78, 79, 81], "baseforest": [57, 82, 83, 103], "kneighbor": 57, "radius_neighbor": 57, "return_dist": 57, "n_queri": 57, "n_index": 57, "constructor": 57, "neigh_dist": 57, "neigh_ind": 57, "popul": 57, "sort_result": 57, "ly": 57, "ball": 57, "around": [57, 115], "befor": [57, 68, 79, 82, 83, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "approxim": [57, 66, 67, 119], "lie": 57, "cannot": 57, "obliquedecisiontreeregressor": [59, 61, 114], "tomita": [59, 60, 61, 99, 100, 104, 106], "104": [59, 104, 106], "39": [59, 92, 104, 106], "2020": [59, 65, 104, 106, 108], "make_regress": [59, 61, 63], "regr": [59, 63], "86327109": 59, "along": [60, 61, 80, 82, 99, 100, 107], "presum": [60, 61, 99, 100], "un": [60, 61, 99, 100], "wrap": [60, 61, 99, 100], "adam": [60, 61, 99, 100, 104, 106, 114, 115, 116, 117, 118, 119, 120, 121], "chester": [60, 61, 99, 100, 106], "huynh": [60, 61, 99, 100, 106], "tyler": [60, 61, 99, 100, 104, 106], "jesu": [60, 61, 99, 100, 106], "jess": [60, 61, 99, 100, 106], "patsol": [60, 61, 99, 100, 106], "ben": [60, 61, 99, 100, 106], "falk": [60, 61, 99, 100, 106], "sridevi": [60, 61, 99, 100, 106], "sarma": [60, 61, 99, 100, 106], "toward": [60, 61, 99, 100, 104, 106], "gap": [60, 61, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106], "convolut": [60, 61, 99, 100, 104, 106], "network": [60, 61, 99, 100, 104, 106], "scienc": [60, 61, 99, 100, 104, 106], "77": [60, 61, 99, 100, 104, 106], "96": [60, 61, 99, 100, 104, 106], "2023": [60, 61, 69, 99, 100, 104, 106], "21m1449117": [60, 61, 99, 100, 106], "82818509": 61, "patchobliquedecisiontreeregressor": [61, 114], "gradient": [62, 63], "boost": [62, 63], "histgradientboostingclassifi": 62, "fast": [62, 63, 101, 111], "big": [62, 63], "histgradientboostingregressor": 63, "rather": [63, 86, 108], "suggest": 63, "recent": 63, "justifi": 63, "32987858": 63, "twomean": [64, 65, 101, 102], "clustering_func": [64, 65, 101, 102], "clustering_func_arg": [64, 65, 101, 102], "simultan": [64, 65], "affin": [64, 65, 101, 102], "fastbic": [64, 65, 101, 102, 114], "maxim": [64, 65], "bayesian": [64, 65, 108], "calinski_harabasz_scor": [64, 65], "predicted_label": [64, 65], "silhouette_scor": [64, 65], "davies_bouldin_scor": [64, 65], "cpu": [64, 65], "continu": [64, 65, 83], "instant": [64, 65], "agglomerativeclust": [64, 65, 101, 102], "unsuperviseddecisiontre": [64, 65], "labels_": [64, 65], "int64": [64, 65, 101, 102], "fit_transform": [64, 65, 101, 102], "x_new": [64, 65, 101, 102], "n_features_new": [64, 65, 101, 102], "set_output": [64, 65, 101, 102], "introduc": [64, 65, 101, 102, 120], "configur": [64, 65, 101, 102], "typic": [64, 65, 101, 102, 107], "dens": [64, 65, 70, 72, 73, 101, 102, 107], "meghana": [65, 104, 108], "madhyastha": [65, 104, 108], "perci": [65, 108], "jame": [65, 106, 108], "brown": [65, 106, 108], "veronika": [65, 108], "strnadova": [65, 108], "neelei": [65, 108], "carei": [65, 106, 108], "prieb": [65, 106, 108], "randal": [65, 106, 108], "burn": [65, 106, 108], "geodes": [65, 78, 101, 104, 108], "proceed": [65, 101, 108], "26th": [65, 108], "sigkdd": [65, 108], "kdd": [65, 104, 108], "513": [65, 104, 108], "523": [65, 104, 108], "york": [65, 108], "ny": [65, 108], "usa": [65, 108], "machineri": [65, 108], "url": [65, 69, 70, 72, 73, 106, 108], "1145": [65, 108], "3394486": [65, 108], "3403094": [65, 108], "cov": [66, 67, 72, 73, 75, 76, 77, 80], "718281828459045": [66, 67], "arraylik": [66, 67, 72, 73, 78, 82, 83, 84, 85, 87, 88, 89, 90], "bit": [66, 67], "logarithm": [66, 67], "i_xi": [66, 67], "h_x": 66, "mixtur": [66, 68, 70, 73, 120], "h_xy": 66, "int_err": 66, "100000": 67, "h_y_on_x": 67, "return_lat": 68, "add_latent_nois": 68, "nonlinear": 68, "latent": 68, "2d": [68, 80, 91, 92, 93, 94, 99, 100], "match": [68, 106], "divid": 68, "poli": 68, "membership": 68, "p_i": 68, "mu_i": 68, "sigma_i": 68, "y_1": 68, "x_": 68, "np_i": 68, "y_": 68, "overset": 68, "sim": 68, "ey": 68, "shuffle_random_st": 68, "n_view": 69, "joint_rank": 69, "noise_std": 69, "return_decomp": 69, "rank": [69, 78, 106], "share": 69, "common": [69, 107, 108], "strength": 69, "orthonorm": 69, "view_load": 69, "n_features_i": [69, 78], "rotat": 69, "sval": 69, "singular": 69, "w_b": 69, "n_features_b": 69, "preserv": [69, 74, 82, 83], "inner": [69, 107], "product": [69, 107], "unitari": 69, "x_b": 69, "diag": 69, "e_b": 69, "yunjin": 69, "choi": 69, "jonathan": 69, "taylor": 69, "princip": 69, "2590": 69, "2617": 69, "2017": 69, "jstor": 69, "stabl": 69, "26362952": 69, "visit": 69, "26": 69, "4096": [70, 72, 73], "rho": [70, 72, 73], "band_typ": [70, 72, 73], "ma": [70, 72, 73], "return_param": [70, 72, 73], "scaling_factor": [70, 72, 73], "marron": [70, 120], "wand": [70, 120], "band": [70, 72, 73, 119], "skewed_unimod": 70, "strongly_skew": 70, "kurtotic_unimod": 70, "bimod": 70, "separated_bimod": 70, "skewed_bimod": 70, "trimod": 70, "claw": 70, "double_claw": 70, "asymmetric_claw": 70, "asymmetric_double_claw": 70, "smooth_comb": 70, "discrete_comb": 70, "trunk": [70, 72, 73, 119, 120], "becom": [70, 72, 73], "steve": 70, "matt": 70, "exact": [70, 107], "712": 70, "736": 70, "1992": [70, 120], "peter": [70, 72, 73], "bickel": [70, 72, 73], "elizaveta": [70, 72, 73], "levina": [70, 72, 73], "februari": [70, 72, 73], "dx": [70, 72, 73], "1214": [70, 72, 73], "009053607000000758": [70, 72, 73], "gerard": [70, 72, 73], "tran": [70, 72, 73, 76], "pattern": [70, 72, 73, 108], "anal": [70, 72, 73], "mach": [70, 72, 73], "intel": [70, 72, 73], "343": [70, 72, 73], "345": [70, 72, 73], "1982": [70, 72, 73], "1109": [70, 72, 73], "tpami": [70, 72, 73], "4767256": [70, 72, 73], "quadrat": 71, "sambit": [71, 114, 115, 116, 120, 121], "interpret": 71, "characterist": 71, "preprint": [71, 104], "1812": 71, "00029": 71, "2018": 71, "ratio": [72, 73], "x_mixtur": 73, "conditional_arrai": 74, "nn_estim": 74, "replace_nbr": 74, "condition": [74, 79, 82, 83], "resampl": [74, 82, 83, 117], "modif": 74, "techniqu": [74, 108], "place": 74, "resampled_arrai": 74, "impact": 74, "x_index": 75, "y_index": 75, "z_index": 75, "true_mi": [75, 76, 77], "plug": 75, "entropy_gaussian": 75, "det": [76, 77], "georg": 76, "darbellai": 76, "igor": 76, "vajda": 76, "inf": 76, "theori": [76, 106], "1315": 76, "1321": 76, "1999": 76, "kd_tree": 78, "ksg": 78, "n_features_x": 78, "n_features_z": 78, "unsupervisedobliquerandomforest": 78, "knn": 78, "ball_tre": 78, "brute": 78, "preprocess": 78, "val": 78, "proce": 78, "kth": 78, "nbr": 78, "xyz": 78, "nn": [78, 101], "xz": 78, "yz": 78, "psi": 78, "n_x": 78, "n_y": 78, "n_": [78, 107], "digamma": 78, "n_i": 78, "denot": [78, 79, 107], "radius_a": 79, "radius_b": 79, "obs_noise_func": 79, "nature_noise_func": 79, "return_mi_lb": [79, 81], "helix": 79, "smallest": 79, "defauult": 79, "func": 79, "lb": [79, 81], "approx": 79, "unif": 79, "afterward": 79, "epsilon_1": 79, "n_1": 79, "epsilon_2": 79, "n_2": 79, "epsilon_3": 79, "n_3": 79, "And": 79, "confound": 79, "impli": 79, "feed": 80, "noise_func": 81, "sphere": 81, "latitud": 81, "longitud": 81, "coordin": 81, "y2": 81, "y3": 81, "conditional_perm": [82, 83], "categor": 82, "describ": [82, 83, 101, 107], "metric_forest": [82, 83, 87], "metric_perm_forest": [82, 83, 87], "recomput": [82, 83], "rest": [82, 83, 107], "cach": [82, 83], "reset": [82, 83, 84, 85], "upon": [82, 83, 91, 92, 93, 94], "n_samples_test_": [82, 83], "final": [82, 83, 84, 85, 106, 107, 115], "indices_train_": [82, 83], "n_samples_train": [82, 83], "indices_test_": [82, 83], "samples_": [82, 83, 84, 85], "n_samples_fin": [82, 83, 84, 85], "null_dist_": [82, 83, 84, 85], "check_input": [82, 83, 84, 85, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "metric_kwarg": [82, 83, 84, 85, 87, 90], "n_covari": [82, 83, 84, 85, 87, 90], "mse": [82, 83, 84, 85, 107], "posterior_fin": [82, 83, 84, 85], "encount": [82, 83, 84, 85, 121], "permute_stat_": [82, 83, 87, 90], "subtract": [82, 83, 87, 90], "pval": [82, 83], "train_test_samples_": [82, 83, 84, 85], "featureimportanceforestregressor": [84, 85, 116], "much": [84, 85, 107], "y_true_": [84, 85], "posterior_": [84, 85], "posterior_null_": [84, 85], "observe_stat": [84, 85, 87, 90], "permute_per_tre": 86, "namespac": 86, "permutation_indices_": 86, "were": [86, 116, 120, 121], "covariate_index_": 86, "Will": 86, "perm_est": [87, 90], "most": [87, 88, 89, 90, 106, 107, 118], "orig_forest_proba": [87, 90], "perm_forest_proba": [87, 90], "null_dist": 87, "oob": [88, 89], "fold": 88, "all_proba_list": 88, "est_kwarg": 89, "all_proba": 89, "permutaiton": 90, "permutationhonestforestclassifi": [90, 120], "But": [91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "tree_": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "node_id": [91, 92, 93, 94], "xxx": [91, 92, 93, 94], "moreov": [91, 92, 93, 94, 107, 115, 116], "twice": [91, 92, 93, 94], "ram": [91, 92, 93, 94], "diskspac": [91, 92, 93, 94], "argmax": [91, 95, 97], "ti": [91, 95, 97], "lowest": [91, 95, 97], "en": [91, 92, 95, 97, 98, 107], "wikipedia": [91, 92, 95, 97, 98, 107], "wiki": [91, 92, 95, 97, 98, 107], "decision_tree_learn": [91, 92, 95, 97, 98, 107], "olshen": [91, 92, 95, 97, 98], "stone": [91, 92, 95, 97, 98], "wadsworth": [91, 92, 95, 97, 98], "belmont": [91, 92, 95, 97, 98], "ca": [91, 92, 95, 97, 98], "1984": [91, 92, 95, 97, 98], "hasti": [91, 92, 95, 97, 98, 107], "springer": [91, 92, 95, 97, 98, 107], "2009": [91, 92, 95, 97, 98, 107], "cutler": [91, 92, 95, 97, 98], "berkelei": [91, 92, 95, 97, 98], "edu": [91, 92, 95, 97, 98], "randomforest": [91, 92, 95, 97, 98], "cc_home": [91, 92, 95, 97, 98], "htm": [91, 92, 95, 97, 98], "93": [91, 97], "86": [91, 97, 114], "max_features_": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "_tree": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "understand": [91, 92, 93, 94, 95, 106], "min_samples_split_": [91, 92, 93, 94], "min_weight_leaf_": [91, 92, 93, 94], "min_samples_leaf_": [91, 92, 93, 94], "monotonic_cst_": [91, 92, 93, 94], "17": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "bypass": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "don": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "node_count": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "cost_complexity_pruning_path": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "ccp_path": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "bunch": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "leaf_nodes_sampl": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "get_n_leav": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "n_leav": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "proba": [91, 93, 95, 96, 97, 99], "set_predict_proba_request": [91, 93, 95, 96, 97, 99], "set_predict_request": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "46": 92, "pick": [93, 94], "baggingclassifi": 93, "extra_tre": [93, 94], "cl": 93, "8947": 93, "baggingregressor": 94, "93333333": 95, "empirical_prior_": 95, "logic": 96, "feature_combinations_": [96, 97, 98], "feature_set_ends_": 96, "n_feature_sets_": 96, "fact": [97, 98], "caveat": [97, 98], "willing": [97, 98, 107], "spend": [97, 98, 107], "resourc": [97, 98, 107], "68908909": 98, "35854406": 98, "35223873": 98, "03616902": 98, "56008907": 98, "32235221": 98, "06945264": 98, "1465216": 98, "34597007": 98, "15308512": 98, "morf": [99, 100, 104, 114], "discontigu": [99, 100], "sensor": [99, 100], "mask": [99, 100], "onto": [99, 100], "data_width": [99, 100], "data_height": [99, 100], "tt": [99, 100], "last": [99, 100], "height": [99, 100], "albeit": [99, 100, 116], "efficienc": [99, 100], "min_patch_dims_": [99, 100], "max_patch_dims_": [99, 100], "data_dims_": [99, 100], "rg": 100, "10163671": 100, "78786738": 100, "01490768": 100, "32737289": 100, "24816698": 100, "41881754": 100, "0588273": 100, "48722913": 100, "07927208": 100, "15600762": 100, "unsupervisedcriterion": [101, 102], "abid": [101, 102], "unsupervisedsplitt": [101, 102], "enablescomput": 101, "alexand": 101, "marx": 101, "jona": 101, "fischer": 101, "sdm": 101, "415": 101, "423": 101, "evimaria": 101, "terzi": 101, "panayioti": 101, "tsapara": 101, "316": 101, "327": 101, "intermedi": 103, "aff_matrix": 103, "modern": 104, "supervis": [104, 108, 111], "strong": 104, "madhyastha2020": 104, "sporf": 104, "tomita2020": 104, "li2023": 104, "perry2021": 104, "futur": 104, "plan": 104, "stream": [104, 115], "xu2022": 104, "encourag": 104, "pull": 104, "walk": 104, "contribut": [104, 106, 114, 115, 116, 117, 118, 119, 120, 121], "licens": 104, "bsd": 104, "xu": [104, 114, 115, 119], "haoyin": [104, 114, 115, 119], "simplest": 104, "2110": 104, "08483": 104, "releas": [104, 115, 116, 118, 119, 120], "histori": 104, "unreleas": [104, 112], "instal": 104, "pip": 104, "meson": 104, "conda": 104, "pypi": 105, "clone": 105, "repositori": 105, "git": 105, "com": 105, "neurodata": 105, "cd": 105, "virtual": 105, "dev": 105, "build_requir": 105, "txt": 105, "spin": 105, "cli": 105, "edit": 105, "pend": 105, "repo": 105, "zipbal": 105, "master": 105, "forg": 105, "threadpoolctl": 105, "pytest": 105, "compil": [105, 120], "llvm": 105, "openmp": 105, "directori": 105, "obliquepr": 105, "pr": 105, "checkout": 105, "instruct": 105, "divers": 106, "sometim": 106, "slight": 106, "aim": 106, "motiv": 106, "therebi": [106, 107], "often": [106, 108], "yield": 106, "intuit": [106, 107], "leo": 106, "assess": 106, "essenti": 106, "abil": [106, 120], "mdi": 106, "l2014": 106, "suffer": 106, "flaw": 106, "conclus": 106, "deriv": 106, "held": 106, "secondli": 106, "favor": 106, "whose": 106, "jaewon": 106, "chung": 106, "benjamin": 106, "jason": 106, "yim": 106, "mauro": 106, "maggioni": 106, "jmlr": 106, "v21": 106, "664": 106, "loupp": 106, "phd": 106, "thesi": 106, "lieg": 106, "2014": 106, "dt": 107, "ot": 107, "ref": 107, "rc": 107, "landmark": 107, "varieti": [107, 108], "major": [107, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "definit": 107, "x_i": [107, 108], "recurs": 107, "orthogon": 107, "a_i": 107, "langl": 107, "rangl": 107, "entri": 107, "q_m": 107, "n_m": 107, "t_m": 107, "x_j": 107, "leq": 107, "setminu": 107, "e_i": 107, "basi": 107, "elsewher": 107, "_featur": 107, "come": 107, "sparsiti": 107, "consider": 107, "disc": 107, "earlier": 107, "sai": 107, "storag": 107, "ask": 107, "question": 107, "gridsearchcv": 107, "There": 107, "imput": 107, "1023": 107, "1010933404324": 107, "predictive_analyt": 107, "quinlan": 107, "c4": 107, "program": 107, "morgan": 107, "kaufmann": 107, "1993": 107, "prevent": 107, "overfit": 107, "triplet": 107, "treatment": 107, "sacrific": 107, "goal": 108, "overview": 108, "cutpoint": 108, "cutoff": 108, "min_": 108, "sum_": 108, "hat": 108, "mu": 108, "_1": 108, "sample_indic": 108, "popular": 108, "seleciton": 108, "kmean": 108, "mclust": 108, "tri": 108, "mle": 108, "hard": 108, "soft": 108, "gmm": 108, "x_n": 108, "quad": 108, "le": 108, "mu_j": 108, "notion": 108, "efficaci": 108, "scheme": 108, "adjusted_rand_scor": 108, "48": 109, "810": 109, "tip": [111, 112], "enhanc": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "link": 112, "subscrib": 112, "io": 112, "notifi": 112, "jong": 114, "shin": 114, "bug": [114, 116, 117, 118], "outsid": 114, "arbitrari": 114, "discontinu": 114, "dissimilar": 114, "64": 114, "70": 114, "patchobliquerandomforestregressor": 114, "suki": [114, 115], "72": 114, "57": 114, "nearestneighborsmetaestim": 114, "83": 114, "thank": [114, 115, 116, 117, 118, 119, 120, 121], "everyon": [114, 115, 116, 117, 118, 119, 120, 121], "who": [114, 115, 116, 117, 118, 119, 120, 121], "mainten": [114, 115, 116, 117, 118, 119, 120, 121], "incept": [114, 115, 116, 117, 118, 119, 120, 121], "analog": 115, "upgrad": 115, "reli": 115, "extraobliquedecisiontreeclassifi": 115, "2x": [115, 120], "114": 115, "101": 115, "streamdecisionforest": 115, "116": 115, "undergon": 116, "organiz": 116, "overhaul": 116, "135": 116, "140": 116, "129": 116, "featureimport": [116, 117], "yuxin": 116, "bai": 116, "143": 116, "156": 116, "158": 116, "issu": 117, "featureimportanceforest": 117, "permute_per_forest_fract": 117, "145": 117, "169": 117, "164": 117, "conditional_resampl": 117, "170": 117, "apply_max_features_per_set": 117, "incorrect": 117, "oversampl": 117, "after": 117, "172": 117, "mainli": [118, 119], "183": [118, 119], "exhaust": [118, 119], "approximate_clf_mutual_inform": 119, "approximate_clf_mutual_information_with_monte_carlo": 119, "mont": 119, "carlo": 119, "199": 119, "206": 119, "210": 119, "light": 120, "211": 120, "track": 120, "203": 120, "build_permutation_forest": 120, "222": 120, "make_marron_wand_classif": 120, "227": 120, "overwrit": 120, "228": 120, "236": 120, "direct": 120, "degrad": 120, "242": 120, "previous": 121, "did": 121, "silent": 121, "ran": 121, "encod": 121, "infin": 121, "264": 121, "hyppo": 121, "throw": 121, "279": 121}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[52, 1, 1, "", "ExtendedIsolationForest"], [53, 1, 1, "", "ExtraTreesClassifier"], [54, 1, 1, "", "ExtraTreesRegressor"], [55, 1, 1, "", "HonestForestClassifier"], [56, 1, 1, "", "MultiViewRandomForestClassifier"], [57, 1, 1, "", "NearestNeighborsMetaEstimator"], [58, 1, 1, "", "ObliqueRandomForestClassifier"], [59, 1, 1, "", "ObliqueRandomForestRegressor"], [60, 1, 1, "", "PatchObliqueRandomForestClassifier"], [61, 1, 1, "", "PatchObliqueRandomForestRegressor"], [62, 1, 1, "", "RandomForestClassifier"], [63, 1, 1, "", "RandomForestRegressor"], [64, 1, 1, "", "UnsupervisedObliqueRandomForest"], [65, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ExtendedIsolationForest": [[52, 2, 1, "", "decision_function"], [52, 3, 1, "", "estimators_samples_"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "fit_predict"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "score_samples"], [52, 2, 1, "", "set_fit_request"], [52, 2, 1, "", "set_params"]], "sktree.ExtraTreesClassifier": [[53, 2, 1, "", "apply"], [53, 2, 1, "", "decision_path"], [53, 3, 1, "", "estimators_samples_"], [53, 3, 1, "", "feature_importances_"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "get_leaf_node_samples"], [53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "partial_fit"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_log_proba"], [53, 2, 1, "", "predict_proba"], [53, 2, 1, "", "predict_quantiles"], [53, 2, 1, "", "score"], [53, 2, 1, "", "set_fit_request"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "set_partial_fit_request"], [53, 2, 1, "", "set_score_request"]], "sktree.ExtraTreesRegressor": [[54, 2, 1, "", "apply"], [54, 2, 1, "", "decision_path"], [54, 3, 1, "", "estimators_samples_"], [54, 3, 1, "", "feature_importances_"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "get_leaf_node_samples"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_quantiles"], [54, 2, 1, "", "score"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "set_score_request"]], "sktree.HonestForestClassifier": [[55, 2, 1, "", "apply"], [55, 2, 1, "", "decision_path"], [55, 3, 1, "", "estimators_samples_"], [55, 3, 1, "", "feature_importances_"], [55, 2, 1, "", "fit"], [55, 2, 1, "", "get_leaf_node_samples"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 3, 1, "", "honest_indices_"], [55, 3, 1, "", "oob_samples_"], [55, 2, 1, "", "partial_fit"], [55, 2, 1, "", "predict"], [55, 2, 1, "", "predict_log_proba"], [55, 2, 1, "", "predict_proba"], [55, 2, 1, "", "predict_proba_per_tree"], [55, 2, 1, "", "predict_quantiles"], [55, 2, 1, "", "score"], [55, 2, 1, "", "set_fit_request"], [55, 2, 1, "", "set_params"], [55, 2, 1, "", "set_partial_fit_request"], [55, 2, 1, "", "set_score_request"], [55, 3, 1, "", "structure_indices_"]], "sktree.MultiViewRandomForestClassifier": [[56, 2, 1, "", "apply"], [56, 2, 1, "", "compute_similarity_matrix"], [56, 2, 1, "", "decision_path"], [56, 3, 1, "", "estimators_samples_"], [56, 3, 1, "", "feature_importances_"], [56, 2, 1, "", "fit"], [56, 2, 1, "", "get_leaf_node_samples"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 3, 1, "", "oob_samples_"], [56, 2, 1, "", "partial_fit"], [56, 2, 1, "", "predict"], [56, 2, 1, "", "predict_log_proba"], [56, 2, 1, "", "predict_proba"], [56, 2, 1, "", "predict_proba_per_tree"], [56, 2, 1, "", "predict_quantiles"], [56, 2, 1, "", "score"], [56, 2, 1, "", "set_fit_request"], [56, 2, 1, "", "set_params"], [56, 2, 1, "", "set_partial_fit_request"], [56, 2, 1, "", "set_score_request"]], "sktree.NearestNeighborsMetaEstimator": [[57, 2, 1, "", "fit"], [57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 2, 1, "", "kneighbors"], [57, 2, 1, "", "radius_neighbors"], [57, 2, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[58, 2, 1, "", "apply"], [58, 2, 1, "", "compute_similarity_matrix"], [58, 2, 1, "", "decision_path"], [58, 3, 1, "", "estimators_samples_"], [58, 3, 1, "", "feature_importances_"], [58, 2, 1, "", "fit"], [58, 2, 1, "", "get_leaf_node_samples"], [58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 3, 1, "", "oob_samples_"], [58, 2, 1, "", "partial_fit"], [58, 2, 1, "", "predict"], [58, 2, 1, "", "predict_log_proba"], [58, 2, 1, "", "predict_proba"], [58, 2, 1, "", "predict_proba_per_tree"], [58, 2, 1, "", "predict_quantiles"], [58, 2, 1, "", "score"], [58, 2, 1, "", "set_fit_request"], [58, 2, 1, "", "set_params"], [58, 2, 1, "", "set_partial_fit_request"], [58, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[59, 2, 1, "", "apply"], [59, 2, 1, "", "compute_similarity_matrix"], [59, 2, 1, "", "decision_path"], [59, 3, 1, "", "estimators_samples_"], [59, 3, 1, "", "feature_importances_"], [59, 2, 1, "", "fit"], [59, 2, 1, "", "get_leaf_node_samples"], [59, 2, 1, "", "get_metadata_routing"], [59, 2, 1, "", "get_params"], [59, 3, 1, "", "oob_samples_"], [59, 2, 1, "", "predict"], [59, 2, 1, "", "predict_quantiles"], [59, 2, 1, "", "score"], [59, 2, 1, "", "set_fit_request"], [59, 2, 1, "", "set_params"], [59, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[60, 2, 1, "", "apply"], [60, 2, 1, "", "compute_similarity_matrix"], [60, 2, 1, "", "decision_path"], [60, 3, 1, "", "estimators_samples_"], [60, 3, 1, "", "feature_importances_"], [60, 2, 1, "", "fit"], [60, 2, 1, "", "get_leaf_node_samples"], [60, 2, 1, "", "get_metadata_routing"], [60, 2, 1, "", "get_params"], [60, 3, 1, "", "oob_samples_"], [60, 2, 1, "", "partial_fit"], [60, 2, 1, "", "predict"], [60, 2, 1, "", "predict_log_proba"], [60, 2, 1, "", "predict_proba"], [60, 2, 1, "", "predict_proba_per_tree"], [60, 2, 1, "", "predict_quantiles"], [60, 2, 1, "", "score"], [60, 2, 1, "", "set_fit_request"], [60, 2, 1, "", "set_params"], [60, 2, 1, "", "set_partial_fit_request"], [60, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[61, 2, 1, "", "apply"], [61, 2, 1, "", "compute_similarity_matrix"], [61, 2, 1, "", "decision_path"], [61, 3, 1, "", "estimators_samples_"], [61, 3, 1, "", "feature_importances_"], [61, 2, 1, "", "fit"], [61, 2, 1, "", "get_leaf_node_samples"], [61, 2, 1, "", "get_metadata_routing"], [61, 2, 1, "", "get_params"], [61, 3, 1, "", "oob_samples_"], [61, 2, 1, "", "predict"], [61, 2, 1, "", "predict_quantiles"], [61, 2, 1, "", "score"], [61, 2, 1, "", "set_fit_request"], [61, 2, 1, "", "set_params"], [61, 2, 1, "", "set_score_request"]], "sktree.RandomForestClassifier": [[62, 2, 1, "", "apply"], [62, 2, 1, "", "decision_path"], [62, 3, 1, "", "estimators_samples_"], [62, 3, 1, "", "feature_importances_"], [62, 2, 1, "", "fit"], [62, 2, 1, "", "get_leaf_node_samples"], [62, 2, 1, "", "get_metadata_routing"], [62, 2, 1, "", "get_params"], [62, 2, 1, "", "partial_fit"], [62, 2, 1, "", "predict"], [62, 2, 1, "", "predict_log_proba"], [62, 2, 1, "", "predict_proba"], [62, 2, 1, "", "predict_quantiles"], [62, 2, 1, "", "score"], [62, 2, 1, "", "set_fit_request"], [62, 2, 1, "", "set_params"], [62, 2, 1, "", "set_partial_fit_request"], [62, 2, 1, "", "set_score_request"]], "sktree.RandomForestRegressor": [[63, 2, 1, "", "apply"], [63, 2, 1, "", "decision_path"], [63, 3, 1, "", "estimators_samples_"], [63, 3, 1, "", "feature_importances_"], [63, 2, 1, "", "fit"], [63, 2, 1, "", "get_leaf_node_samples"], [63, 2, 1, "", "get_metadata_routing"], [63, 2, 1, "", "get_params"], [63, 2, 1, "", "predict"], [63, 2, 1, "", "predict_quantiles"], [63, 2, 1, "", "score"], [63, 2, 1, "", "set_fit_request"], [63, 2, 1, "", "set_params"], [63, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[64, 2, 1, "", "apply"], [64, 2, 1, "", "compute_similarity_matrix"], [64, 2, 1, "", "decision_path"], [64, 3, 1, "", "estimators_samples_"], [64, 3, 1, "", "feature_importances_"], [64, 2, 1, "", "fit"], [64, 2, 1, "", "fit_predict"], [64, 2, 1, "", "fit_transform"], [64, 2, 1, "", "get_leaf_node_samples"], [64, 2, 1, "", "get_metadata_routing"], [64, 2, 1, "", "get_params"], [64, 2, 1, "", "predict"], [64, 2, 1, "", "predict_quantiles"], [64, 2, 1, "", "set_fit_request"], [64, 2, 1, "", "set_output"], [64, 2, 1, "", "set_params"], [64, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[65, 2, 1, "", "apply"], [65, 2, 1, "", "compute_similarity_matrix"], [65, 2, 1, "", "decision_path"], [65, 3, 1, "", "estimators_samples_"], [65, 3, 1, "", "feature_importances_"], [65, 2, 1, "", "fit"], [65, 2, 1, "", "fit_predict"], [65, 2, 1, "", "fit_transform"], [65, 2, 1, "", "get_leaf_node_samples"], [65, 2, 1, "", "get_metadata_routing"], [65, 2, 1, "", "get_params"], [65, 2, 1, "", "predict"], [65, 2, 1, "", "predict_quantiles"], [65, 2, 1, "", "set_fit_request"], [65, 2, 1, "", "set_output"], [65, 2, 1, "", "set_params"], [65, 2, 1, "", "transform"]], "sktree._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "sktree.datasets": [[66, 4, 1, "", "approximate_clf_mutual_information"], [67, 4, 1, "", "approximate_clf_mutual_information_with_monte_carlo"], [68, 4, 1, "", "make_gaussian_mixture"], [69, 4, 1, "", "make_joint_factor_model"], [70, 4, 1, "", "make_marron_wand_classification"], [71, 4, 1, "", "make_quadratic_classification"], [72, 4, 1, "", "make_trunk_classification"], [73, 4, 1, "", "make_trunk_mixture_classification"]], "sktree.experimental": [[74, 4, 1, "", "conditional_resample"], [78, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.mutual_info": [[75, 4, 1, "", "cmi_gaussian"], [76, 4, 1, "", "entropy_gaussian"], [77, 4, 1, "", "mi_gaussian"]], "sktree.experimental.simulate": [[79, 4, 1, "", "simulate_helix"], [80, 4, 1, "", "simulate_multivariate_gaussian"], [81, 4, 1, "", "simulate_sphere"]], "sktree.stats": [[82, 1, 1, "", "FeatureImportanceForestClassifier"], [83, 1, 1, "", "FeatureImportanceForestRegressor"], [84, 1, 1, "", "PermutationForestClassifier"], [85, 1, 1, "", "PermutationForestRegressor"], [86, 1, 1, "", "PermutationHonestForestClassifier"], [87, 4, 1, "", "build_coleman_forest"], [88, 4, 1, "", "build_hyppo_cv_forest"], [89, 4, 1, "", "build_hyppo_oob_forest"], [90, 4, 1, "", "build_permutation_forest"]], "sktree.stats.FeatureImportanceForestClassifier": [[82, 2, 1, "", "statistic"], [82, 2, 1, "", "test"], [82, 3, 1, "", "train_test_samples_"]], "sktree.stats.FeatureImportanceForestRegressor": [[83, 2, 1, "", "statistic"], [83, 2, 1, "", "test"], [83, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestClassifier": [[84, 2, 1, "", "statistic"], [84, 2, 1, "", "test"], [84, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestRegressor": [[85, 2, 1, "", "statistic"], [85, 2, 1, "", "test"], [85, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationHonestForestClassifier": [[86, 2, 1, "", "apply"], [86, 2, 1, "", "decision_path"], [86, 3, 1, "", "estimators_samples_"], [86, 3, 1, "", "feature_importances_"], [86, 2, 1, "", "fit"], [86, 2, 1, "", "get_leaf_node_samples"], [86, 2, 1, "", "get_metadata_routing"], [86, 2, 1, "", "get_params"], [86, 3, 1, "", "honest_indices_"], [86, 3, 1, "", "oob_samples_"], [86, 2, 1, "", "partial_fit"], [86, 2, 1, "", "predict"], [86, 2, 1, "", "predict_log_proba"], [86, 2, 1, "", "predict_proba"], [86, 2, 1, "", "predict_proba_per_tree"], [86, 2, 1, "", "predict_quantiles"], [86, 2, 1, "", "score"], [86, 2, 1, "", "set_fit_request"], [86, 2, 1, "", "set_params"], [86, 2, 1, "", "set_partial_fit_request"], [86, 2, 1, "", "set_score_request"], [86, 3, 1, "", "structure_indices_"]], "sktree.tree": [[91, 1, 1, "", "DecisionTreeClassifier"], [92, 1, 1, "", "DecisionTreeRegressor"], [93, 1, 1, "", "ExtraTreeClassifier"], [94, 1, 1, "", "ExtraTreeRegressor"], [95, 1, 1, "", "HonestTreeClassifier"], [96, 1, 1, "", "MultiViewDecisionTreeClassifier"], [97, 1, 1, "", "ObliqueDecisionTreeClassifier"], [98, 1, 1, "", "ObliqueDecisionTreeRegressor"], [99, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [100, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [101, 1, 1, "", "UnsupervisedDecisionTree"], [102, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [103, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.DecisionTreeClassifier": [[91, 2, 1, "", "apply"], [91, 2, 1, "", "cost_complexity_pruning_path"], [91, 2, 1, "", "decision_path"], [91, 3, 1, "", "feature_importances_"], [91, 2, 1, "", "fit"], [91, 2, 1, "", "get_depth"], [91, 2, 1, "", "get_leaf_node_samples"], [91, 2, 1, "", "get_metadata_routing"], [91, 2, 1, "", "get_n_leaves"], [91, 2, 1, "", "get_params"], [91, 2, 1, "", "partial_fit"], [91, 2, 1, "", "predict"], [91, 2, 1, "", "predict_log_proba"], [91, 2, 1, "", "predict_proba"], [91, 2, 1, "", "predict_quantiles"], [91, 2, 1, "", "score"], [91, 2, 1, "", "set_fit_request"], [91, 2, 1, "", "set_params"], [91, 2, 1, "", "set_partial_fit_request"], [91, 2, 1, "", "set_predict_proba_request"], [91, 2, 1, "", "set_predict_request"], [91, 2, 1, "", "set_score_request"]], "sktree.tree.DecisionTreeRegressor": [[92, 2, 1, "", "apply"], [92, 2, 1, "", "cost_complexity_pruning_path"], [92, 2, 1, "", "decision_path"], [92, 3, 1, "", "feature_importances_"], [92, 2, 1, "", "fit"], [92, 2, 1, "", "get_depth"], [92, 2, 1, "", "get_leaf_node_samples"], [92, 2, 1, "", "get_metadata_routing"], [92, 2, 1, "", "get_n_leaves"], [92, 2, 1, "", "get_params"], [92, 2, 1, "", "predict"], [92, 2, 1, "", "predict_quantiles"], [92, 2, 1, "", "score"], [92, 2, 1, "", "set_fit_request"], [92, 2, 1, "", "set_params"], [92, 2, 1, "", "set_predict_request"], [92, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeClassifier": [[93, 2, 1, "", "apply"], [93, 2, 1, "", "cost_complexity_pruning_path"], [93, 2, 1, "", "decision_path"], [93, 3, 1, "", "feature_importances_"], [93, 2, 1, "", "fit"], [93, 2, 1, "", "get_depth"], [93, 2, 1, "", "get_leaf_node_samples"], [93, 2, 1, "", "get_metadata_routing"], [93, 2, 1, "", "get_n_leaves"], [93, 2, 1, "", "get_params"], [93, 2, 1, "", "partial_fit"], [93, 2, 1, "", "predict"], [93, 2, 1, "", "predict_log_proba"], [93, 2, 1, "", "predict_proba"], [93, 2, 1, "", "predict_quantiles"], [93, 2, 1, "", "score"], [93, 2, 1, "", "set_fit_request"], [93, 2, 1, "", "set_params"], [93, 2, 1, "", "set_partial_fit_request"], [93, 2, 1, "", "set_predict_proba_request"], [93, 2, 1, "", "set_predict_request"], [93, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeRegressor": [[94, 2, 1, "", "apply"], [94, 2, 1, "", "cost_complexity_pruning_path"], [94, 2, 1, "", "decision_path"], [94, 3, 1, "", "feature_importances_"], [94, 2, 1, "", "fit"], [94, 2, 1, "", "get_depth"], [94, 2, 1, "", "get_leaf_node_samples"], [94, 2, 1, "", "get_metadata_routing"], [94, 2, 1, "", "get_n_leaves"], [94, 2, 1, "", "get_params"], [94, 2, 1, "", "predict"], [94, 2, 1, "", "predict_quantiles"], [94, 2, 1, "", "score"], [94, 2, 1, "", "set_fit_request"], [94, 2, 1, "", "set_params"], [94, 2, 1, "", "set_predict_request"], [94, 2, 1, "", "set_score_request"]], "sktree.tree.HonestTreeClassifier": [[95, 2, 1, "", "apply"], [95, 2, 1, "", "cost_complexity_pruning_path"], [95, 2, 1, "", "decision_path"], [95, 3, 1, "", "feature_importances_"], [95, 2, 1, "", "fit"], [95, 2, 1, "", "get_depth"], [95, 2, 1, "", "get_leaf_node_samples"], [95, 2, 1, "", "get_metadata_routing"], [95, 2, 1, "", "get_n_leaves"], [95, 2, 1, "", "get_params"], [95, 2, 1, "", "partial_fit"], [95, 2, 1, "", "predict"], [95, 2, 1, "", "predict_proba"], [95, 2, 1, "", "predict_quantiles"], [95, 2, 1, "", "score"], [95, 2, 1, "", "set_fit_request"], [95, 2, 1, "", "set_params"], [95, 2, 1, "", "set_partial_fit_request"], [95, 2, 1, "", "set_predict_proba_request"], [95, 2, 1, "", "set_predict_request"], [95, 2, 1, "", "set_score_request"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[96, 2, 1, "", "apply"], [96, 2, 1, "", "compute_similarity_matrix"], [96, 2, 1, "", "cost_complexity_pruning_path"], [96, 2, 1, "", "decision_path"], [96, 3, 1, "", "feature_importances_"], [96, 2, 1, "", "fit"], [96, 2, 1, "", "get_depth"], [96, 2, 1, "", "get_leaf_node_samples"], [96, 2, 1, "", "get_metadata_routing"], [96, 2, 1, "", "get_n_leaves"], [96, 2, 1, "", "get_params"], [96, 2, 1, "", "partial_fit"], [96, 2, 1, "", "predict"], [96, 2, 1, "", "predict_log_proba"], [96, 2, 1, "", "predict_proba"], [96, 2, 1, "", "predict_quantiles"], [96, 2, 1, "", "score"], [96, 2, 1, "", "set_fit_request"], [96, 2, 1, "", "set_params"], [96, 2, 1, "", "set_partial_fit_request"], [96, 2, 1, "", "set_predict_proba_request"], [96, 2, 1, "", "set_predict_request"], [96, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[97, 2, 1, "", "apply"], [97, 2, 1, "", "compute_similarity_matrix"], [97, 2, 1, "", "cost_complexity_pruning_path"], [97, 2, 1, "", "decision_path"], [97, 3, 1, "", "feature_importances_"], [97, 2, 1, "", "fit"], [97, 2, 1, "", "get_depth"], [97, 2, 1, "", "get_leaf_node_samples"], [97, 2, 1, "", "get_metadata_routing"], [97, 2, 1, "", "get_n_leaves"], [97, 2, 1, "", "get_params"], [97, 2, 1, "", "partial_fit"], [97, 2, 1, "", "predict"], [97, 2, 1, "", "predict_log_proba"], [97, 2, 1, "", "predict_proba"], [97, 2, 1, "", "predict_quantiles"], [97, 2, 1, "", "score"], [97, 2, 1, "", "set_fit_request"], [97, 2, 1, "", "set_params"], [97, 2, 1, "", "set_partial_fit_request"], [97, 2, 1, "", "set_predict_proba_request"], [97, 2, 1, "", "set_predict_request"], [97, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[98, 2, 1, "", "apply"], [98, 2, 1, "", "compute_similarity_matrix"], [98, 2, 1, "", "cost_complexity_pruning_path"], [98, 2, 1, "", "decision_path"], [98, 3, 1, "", "feature_importances_"], [98, 2, 1, "", "fit"], [98, 2, 1, "", "get_depth"], [98, 2, 1, "", "get_leaf_node_samples"], [98, 2, 1, "", "get_metadata_routing"], [98, 2, 1, "", "get_n_leaves"], [98, 2, 1, "", "get_params"], [98, 2, 1, "", "predict"], [98, 2, 1, "", "predict_quantiles"], [98, 2, 1, "", "score"], [98, 2, 1, "", "set_fit_request"], [98, 2, 1, "", "set_params"], [98, 2, 1, "", "set_predict_request"], [98, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[99, 2, 1, "", "apply"], [99, 2, 1, "", "compute_similarity_matrix"], [99, 2, 1, "", "cost_complexity_pruning_path"], [99, 2, 1, "", "decision_path"], [99, 3, 1, "", "feature_importances_"], [99, 2, 1, "", "fit"], [99, 2, 1, "", "get_depth"], [99, 2, 1, "", "get_leaf_node_samples"], [99, 2, 1, "", "get_metadata_routing"], [99, 2, 1, "", "get_n_leaves"], [99, 2, 1, "", "get_params"], [99, 2, 1, "", "partial_fit"], [99, 2, 1, "", "predict"], [99, 2, 1, "", "predict_log_proba"], [99, 2, 1, "", "predict_proba"], [99, 2, 1, "", "predict_quantiles"], [99, 2, 1, "", "score"], [99, 2, 1, "", "set_fit_request"], [99, 2, 1, "", "set_params"], [99, 2, 1, "", "set_partial_fit_request"], [99, 2, 1, "", "set_predict_proba_request"], [99, 2, 1, "", "set_predict_request"], [99, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[100, 2, 1, "", "apply"], [100, 2, 1, "", "compute_similarity_matrix"], [100, 2, 1, "", "cost_complexity_pruning_path"], [100, 2, 1, "", "decision_path"], [100, 3, 1, "", "feature_importances_"], [100, 2, 1, "", "fit"], [100, 2, 1, "", "get_depth"], [100, 2, 1, "", "get_leaf_node_samples"], [100, 2, 1, "", "get_metadata_routing"], [100, 2, 1, "", "get_n_leaves"], [100, 2, 1, "", "get_params"], [100, 2, 1, "", "predict"], [100, 2, 1, "", "predict_quantiles"], [100, 2, 1, "", "score"], [100, 2, 1, "", "set_fit_request"], [100, 2, 1, "", "set_params"], [100, 2, 1, "", "set_predict_request"], [100, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[101, 2, 1, "", "apply"], [101, 2, 1, "", "compute_similarity_matrix"], [101, 2, 1, "", "cost_complexity_pruning_path"], [101, 2, 1, "", "decision_path"], [101, 3, 1, "", "feature_importances_"], [101, 2, 1, "", "fit_predict"], [101, 2, 1, "", "fit_transform"], [101, 2, 1, "", "get_depth"], [101, 2, 1, "", "get_leaf_node_samples"], [101, 2, 1, "", "get_metadata_routing"], [101, 2, 1, "", "get_n_leaves"], [101, 2, 1, "", "get_params"], [101, 2, 1, "", "predict"], [101, 2, 1, "", "predict_quantiles"], [101, 2, 1, "", "set_fit_request"], [101, 2, 1, "", "set_output"], [101, 2, 1, "", "set_params"], [101, 2, 1, "", "set_predict_request"], [101, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[102, 2, 1, "", "apply"], [102, 2, 1, "", "compute_similarity_matrix"], [102, 2, 1, "", "cost_complexity_pruning_path"], [102, 2, 1, "", "decision_path"], [102, 3, 1, "", "feature_importances_"], [102, 2, 1, "", "fit_predict"], [102, 2, 1, "", "fit_transform"], [102, 2, 1, "", "get_depth"], [102, 2, 1, "", "get_leaf_node_samples"], [102, 2, 1, "", "get_metadata_routing"], [102, 2, 1, "", "get_n_leaves"], [102, 2, 1, "", "get_params"], [102, 2, 1, "", "predict"], [102, 2, 1, "", "predict_quantiles"], [102, 2, 1, "", "set_fit_request"], [102, 2, 1, "", "set_output"], [102, 2, 1, "", "set_params"], [102, 2, 1, "", "set_predict_request"], [102, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 114, 115, 116, 117, 118, 119, 120, 121], "scikit": [0, 104, 110], "learn": [0, 12, 13, 110], "tree": [0, 1, 4, 12, 13, 17, 26, 27, 29, 33, 36, 37, 38, 39, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 110], "estim": [0, 43], "supervis": [0, 107], "unsupervis": [0, 108], "outlier": [0, 12, 16, 110], "detect": [0, 12, 16, 110], "distanc": [0, 47], "metric": 0, "statist": [0, 9, 10, 43, 44, 45, 46, 47, 49, 50], "hypothesi": [0, 4, 5, 6, 7, 8, 9, 12, 41, 110], "test": [0, 4, 5, 6, 7, 9, 10, 12, 41, 48, 51, 110], "dataset": [0, 14, 27, 30, 31, 34, 66, 67, 68, 69, 70, 71, 72, 73], "experiment": [0, 74, 75, 76, 77, 78, 79, 80, 81], "function": [0, 21], "calibr": [1, 2, 12, 110], "decis": [1, 4, 12, 13, 17, 26, 27, 29, 33, 36, 107, 108, 110], "via": [1, 12, 110], "honesti": [1, 12, 110], "plot": [2, 17, 21, 22, 23, 27, 32, 34, 38, 39], "honest": [2, 107], "forest": [2, 12, 14, 17, 19, 21, 22, 23, 30, 31, 32, 34, 106, 110], "overlap": 2, "gaussian": [2, 43, 44, 45, 46, 47, 48, 49, 50, 51], "simul": [2, 5, 6, 7, 8, 9, 10, 14, 32, 43, 44, 45, 46, 47, 48, 49, 50, 51, 79, 80, 81], "refer": [2, 5, 6, 7, 8, 17, 30, 31, 104, 106, 107, 108], "comput": [3, 9, 10, 11, 15, 18, 24, 25, 28, 35, 40, 42, 109], "time": [3, 11, 15, 18, 24, 25, 28, 35, 38, 40, 42, 109], "mutual": [5, 6, 7, 9], "inform": [5, 6, 7, 9], "genuin": [5, 6, 7, 9], "might": [5, 6, 7, 8, 9, 10, 48], "data": [5, 6, 7, 8, 9, 10, 14, 17, 20, 23, 49, 51], "perform": [5, 6, 7, 14], "us": [5, 6, 9, 10, 68, 72, 73, 87, 89, 107, 110], "imbalanc": 6, "discuss": [6, 7, 8, 30, 31, 37, 39], "demonstr": [7, 37], "condit": [7, 8], "co": [7, 8], "when": 8, "exhibit": 8, "independ": [8, 48, 51], "analysi": 8, "null": 8, "i": 8, "true": [8, 43], "partial": [9, 10], "auc": [9, 10], "repeat": [9, 10], "second": 9, "featur": [9, 37, 106], "set": [9, 37], "all": [9, 10], "posterior": [9, 10, 43], "ar": [9, 10], "save": [9, 10], "within": [9, 10, 17], "model": [9, 10, 17, 22, 44, 45, 46, 47, 48, 49, 50, 51], "multi": [10, 12, 13, 14, 37, 107, 110], "view": [10, 12, 13, 14, 37, 110], "mv": 10, "without": 10, "exampl": [12, 17, 68, 72, 73, 87, 89, 106, 110], "quantil": [12, 19, 20, 21, 22, 23, 110], "predict": [12, 17, 19, 20, 21, 22, 23, 30, 32, 34, 110], "random": [12, 14, 19, 21, 22, 30, 31, 32, 34, 106, 110], "compar": [12, 14, 26, 30, 33, 107, 110], "sklearn": [12, 26, 110], "sktree": [12, 26, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 110], "spars": [12, 29, 32, 39, 110], "obliqu": [12, 23, 29, 30, 31, 32, 33, 34, 38, 39, 106, 107, 110], "project": [12, 29, 37, 38, 39, 110], "splitter": [12, 36, 37, 38, 39, 110], "treepl": [12, 41, 110], "analyz": 14, "fit": [14, 22, 44, 45, 46, 47, 48, 49, 50, 51], "visual": [14, 17, 37], "score": 14, "extendedisolationforest": [17, 52], "gener": [17, 20, 23, 38, 39, 43], "train": [17, 22, 27], "discret": 17, "boundari": 17, "path": 17, "length": 17, "each": [17, 37], "differ": [20, 31, 107], "interpol": 20, "method": 20, "The": 20, "interv": 21, "regressor": [21, 22], "result": [21, 22, 23], "class": 22, "sampl": [22, 37, 38], "regress": [23, 107], "surfac": [27, 33], "iri": 27, "extra": [30, 31, 33], "cc18": [30, 34], "speed": 31, "v": 31, "size": 31, "axi": [32, 34, 37], "align": [32, 34, 37], "pariti": 32, "standard": 33, "matrix": [37, 39], "an": [37, 38, 39], "initi": [37, 38, 39], "split": 37, "candid": 37, "scale": 37, "dimension": [37, 49], "matric": [38, 39], "imag": 38, "seri": 38, "patch": [38, 39], "1d": 38, "2d": 38, "3d": 38, "discontigu": 38, "mixtur": 43, "calcul": [43, 44, 45, 46, 47, 48, 49, 50, 51], "x": [43, 49, 50], "prior": 43, "pdf": 43, "": [43, 44, 49], "98": [43, 44, 49], "mi": [43, 45, 48], "pauc": [43, 46], "90": 43, "creat": [44, 45, 46, 47, 48, 49, 50, 51], "two": [44, 45, 46, 47, 48, 49, 50, 51, 108], "r": 46, "helling": 47, "p": [48, 51], "valu": [48, 51], "multiview": [49, 51], "z": [49, 50], "cmi": [50, 51], "onli": 50, "comight": 51, "modifi": 51, "permut": 51, "variabl": 51, "extratreesclassifi": 53, "extratreesregressor": 54, "honestforestclassifi": 55, "multiviewrandomforestclassifi": 56, "nearestneighborsmetaestim": 57, "obliquerandomforestclassifi": 58, "obliquerandomforestregressor": 59, "patchobliquerandomforestclassifi": 60, "patchobliquerandomforestregressor": 61, "randomforestclassifi": 62, "randomforestregressor": 63, "unsupervisedobliquerandomforest": 64, "unsupervisedrandomforest": 65, "approximate_clf_mutual_inform": 66, "approximate_clf_mutual_information_with_monte_carlo": 67, "make_gaussian_mixtur": 68, "make_joint_factor_model": 69, "make_marron_wand_classif": 70, "make_quadratic_classif": 71, "make_trunk_classif": 72, "make_trunk_mixture_classif": 73, "conditional_resampl": 74, "mutual_info": [75, 76, 77], "cmi_gaussian": 75, "entropy_gaussian": 76, "mi_gaussian": 77, "mutual_info_ksg": 78, "simulate_helix": 79, "simulate_multivariate_gaussian": 80, "simulate_spher": 81, "stat": [82, 83, 84, 85, 86, 87, 88, 89, 90], "featureimportanceforestclassifi": 82, "featureimportanceforestregressor": 83, "permutationforestclassifi": 84, "permutationforestregressor": 85, "permutationhonestforestclassifi": 86, "build_coleman_forest": 87, "build_hyppo_cv_forest": 88, "build_hyppo_oob_forest": 89, "build_permutation_forest": 90, "decisiontreeclassifi": 91, "decisiontreeregressor": 92, "extratreeclassifi": 93, "extratreeregressor": 94, "honesttreeclassifi": 95, "multiviewdecisiontreeclassifi": 96, "obliquedecisiontreeclassifi": 97, "obliquedecisiontreeregressor": 98, "patchobliquedecisiontreeclassifi": 99, "patchobliquedecisiontreeregressor": 100, "unsuperviseddecisiontre": 101, "unsupervisedobliquedecisiontre": 102, "compute_forest_similarity_matrix": 103, "content": 104, "get": 104, "start": 104, "indic": 104, "tabl": 104, "instal": 105, "depend": 105, "pip": 105, "from": 105, "sourc": 105, "meson": 105, "conda": 105, "recommend": 105, "import": 106, "evalu": [106, 108], "mathemat": 107, "formul": 107, "classif": 107, "output": 107, "problem": 107, "complex": 107, "tip": 107, "practic": 107, "limit": 107, "criterion": 108, "mean": 108, "fast": 108, "bic": 108, "user": 111, "guid": 111, "releas": 112, "histori": 112, "version": [114, 115, 116, 117, 118, 119, 120, 121], "0": [114, 115, 116, 117, 118, 119, 120, 121], "1": 114, "changelog": [114, 115, 116, 117, 118, 119, 120, 121], "code": [114, 115, 116, 117, 118, 119, 120, 121], "contributor": [114, 115, 116, 117, 118, 119, 120, 121], "2": 115, "3": 116, "4": 117, "5": 118, "6": 119, "7": 120, "8": 121}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Outlier Detection": [[0, "outlier-detection"]], "Distance Metrics": [[0, "distance-metrics"]], "Statistical Hypothesis Testing": [[0, "statistical-hypothesis-testing"]], "Datasets": [[0, "datasets"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Calibrated decision trees via honesty": [[1, "calibrated-decision-trees-via-honesty"], [12, "calibrated-decision-trees-via-honesty"], [110, "calibrated-decision-trees-via-honesty"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[2, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[2, "references"], [5, "references"], [6, "references"], [7, "references"], [8, "references"], [17, "references"], [30, "references"], [31, "references"], [104, null], [106, null], [106, null], [108, null]], "Computation times": [[3, "computation-times"], [11, "computation-times"], [15, "computation-times"], [18, "computation-times"], [24, "computation-times"], [25, "computation-times"], [28, "computation-times"], [35, "computation-times"], [40, "computation-times"], [42, "computation-times"], [109, "computation-times"]], "Hypothesis testing with decision trees": [[4, "hypothesis-testing-with-decision-trees"], [12, "hypothesis-testing-with-decision-trees"], [110, "hypothesis-testing-with-decision-trees"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[5, "mutual-information-for-genuine-hypothesis-testing-might"]], "Simulate data": [[5, "simulate-data"], [6, "simulate-data"], [7, "simulate-data"], [8, "simulate-data"], [9, "simulate-data"], [10, "simulate-data"], [14, "simulate-data"]], "Perform hypothesis testing using Mutual Information": [[5, "perform-hypothesis-testing-using-mutual-information"], [6, "perform-hypothesis-testing-using-mutual-information"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data": [[6, "mutual-information-for-genuine-hypothesis-testing-might-with-imbalanced-data"]], "Discussion": [[6, "discussion"], [7, "discussion"], [8, "discussion"], [30, "discussion"], [31, "discussion"], [37, "discussion"], [39, "discussion"]], "Demonstrate Conditional Mutual Information for Genuine Hypothesis Testing (Co-MIGHT)": [[7, "demonstrate-conditional-mutual-information-for-genuine-hypothesis-testing-co-might"]], "Perform hypothesis testing": [[7, "perform-hypothesis-testing"]], "Co-MIGHT when Data Exhibits Conditional Independence": [[8, "co-might-when-data-exhibits-conditional-independence"]], "Analysis when the null hypothesis is true": [[8, "analysis-when-the-null-hypothesis-is-true"]], "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[9, "compute-partial-auc-using-mutual-information-for-genuine-hypothesis-testing-might"]], "Use partial AUC as test statistic": [[9, "use-partial-auc-as-test-statistic"], [10, "use-partial-auc-as-test-statistic"]], "Repeat for the second feature set": [[9, "repeat-for-the-second-feature-set"]], "All posteriors are saved within the model": [[9, "all-posteriors-are-saved-within-the-model"], [10, "all-posteriors-are-saved-within-the-model"]], "Compute partial AUC using multi-view MIGHT (MV-MIGHT)": [[10, "compute-partial-auc-using-multi-view-might-mv-might"]], "Repeat without multi-view": [[10, "repeat-without-multi-view"]], "Examples": [[12, "examples"], [110, "examples"]], "Multi-view learning with Decision-trees": [[12, "multi-view-learning-with-decision-trees"], [13, "multi-view-learning-with-decision-trees"], [110, "multi-view-learning-with-decision-trees"]], "Outlier-detection": [[12, "outlier-detection"], [16, "outlier-detection"], [110, "outlier-detection"]], "Quantile Predictions with Random Forest": [[12, "quantile-predictions-with-random-forest"], [19, "quantile-predictions-with-random-forest"], [110, "quantile-predictions-with-random-forest"]], "Comparing sklearn and sktree decision trees": [[12, "comparing-sklearn-and-sktree-decision-trees"], [26, "comparing-sklearn-and-sktree-decision-trees"], [110, "comparing-sklearn-and-sktree-decision-trees"]], "Sparse oblique projections with oblique decision-trees": [[12, "sparse-oblique-projections-with-oblique-decision-trees"], [29, "sparse-oblique-projections-with-oblique-decision-trees"], [110, "sparse-oblique-projections-with-oblique-decision-trees"]], "Decision-tree splitters": [[12, "decision-tree-splitters"], [36, "decision-tree-splitters"], [110, "decision-tree-splitters"]], "Treeple for Hypothesis Testing": [[12, "treeple-for-hypothesis-testing"], [41, "treeple-for-hypothesis-testing"], [110, "treeple-for-hypothesis-testing"]], "Analyze a multi-view dataset with a multi-view random forest": [[14, "analyze-a-multi-view-dataset-with-a-multi-view-random-forest"]], "Fit Random Forest and Multi-view Random Forest": [[14, "fit-random-forest-and-multi-view-random-forest"]], "Visualize scores and compare performance": [[14, "visualize-scores-and-compare-performance"]], "ExtendedIsolationForest example": [[17, "extendedisolationforest-example"]], "Data generation": [[17, "data-generation"]], "Training of the model": [[17, "training-of-the-model"]], "Plot discrete decision boundary": [[17, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[17, "plot-path-length-decision-boundary"]], "Visualize the prediction of each tree within the forest": [[17, "visualize-the-prediction-of-each-tree-within-the-forest"]], "Predicting with different quantile interpolation methods": [[20, "predicting-with-different-quantile-interpolation-methods"]], "Generate the data": [[20, "generate-the-data"], [23, "generate-the-data"]], "The interpolation methods": [[20, "the-interpolation-methods"]], "Quantile prediction intervals with Random Forest Regressor": [[21, "quantile-prediction-intervals-with-random-forest-regressor"]], "Quantile Prediction Function": [[21, "quantile-prediction-function"]], "Plot the results": [[21, "plot-the-results"], [22, "plot-the-results"], [23, "plot-the-results"]], "Quantile prediction with Random Forest Regressor class": [[22, "quantile-prediction-with-random-forest-regressor-class"]], "Fit the model to the training samples": [[22, "fit-the-model-to-the-training-samples"]], "Quantile regression with oblique regression forest": [[23, "quantile-regression-with-oblique-regression-forest"]], "Generate Quantile Predictions": [[23, "generate-quantile-predictions"]], "Plot the decision surface of decision trees trained on the iris dataset": [[27, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Compare extra oblique forest and oblique random forest predictions on cc18 datasets": [[30, "compare-extra-oblique-forest-and-oblique-random-forest-predictions-on-cc18-datasets"]], "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes": [[31, "speed-of-extra-oblique-random-forest-vs-oblique-random-forest-on-different-dataset-sizes"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[32, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Compare the decision surfaces of oblique extra-trees with standard oblique trees": [[33, "compare-the-decision-surfaces-of-oblique-extra-trees-with-standard-oblique-trees"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[34, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree": [[37, "demonstrate-and-visualize-a-multi-view-projection-matrix-for-an-axis-aligned-tree"]], "Initialize the multi-view splitter": [[37, "initialize-the-multi-view-splitter"]], "Sample the projection matrix": [[37, "sample-the-projection-matrix"]], "Sampling split candidates scaled to each feature-set dimensionality": [[37, "sampling-split-candidates-scaled-to-each-feature-set-dimensionality"]], "Plot the projection matrices of an oblique tree for sampling images, or time-series": [[38, "plot-the-projection-matrices-of-an-oblique-tree-for-sampling-images-or-time-series"]], "Initialize patch splitter": [[38, "initialize-patch-splitter"], [39, "initialize-patch-splitter"]], "Generate 1D patches": [[38, "generate-1d-patches"]], "Generate 2D patches": [[38, "generate-2d-patches"]], "Generate 3D patches": [[38, "generate-3d-patches"]], "Discontiguous Patches": [[38, "discontiguous-patches"]], "Plot the sparse projection matrices of an oblique tree": [[39, "plot-the-sparse-projection-matrices-of-an-oblique-tree"]], "Initialize the splitter": [[39, "initialize-the-splitter"]], "Generate projection matrix": [[39, "generate-projection-matrix"]], "Estimating true posteriors & statistics": [[43, "estimating-true-posteriors-statistics"]], "True posterior estimation": [[43, "true-posterior-estimation"]], "Generate gaussian mixture simulations": [[43, "generate-gaussian-mixture-simulations"]], "Calculate X priors with true pdfs": [[43, "calculate-x-priors-with-true-pdfs"]], "Calculate true posteriors": [[43, "calculate-true-posteriors"]], "Generate true statistic estimates: S@98": [[43, "generate-true-statistic-estimates-s-98"]], "Generate true statistic estimates: MI": [[43, "generate-true-statistic-estimates-mi"]], "Generate true statistic estimates: pAUC@90": [[43, "generate-true-statistic-estimates-pauc-90"]], "Calculating S@98": [[44, "calculating-s-98"]], "S@98": [[44, "s-98"]], "Create a simulation with two gaussians": [[44, "create-a-simulation-with-two-gaussians"], [45, "create-a-simulation-with-two-gaussians"], [46, "create-a-simulation-with-two-gaussians"], [47, "create-a-simulation-with-two-gaussians"], [48, "create-a-simulation-with-two-gaussians"], [50, "create-a-simulation-with-two-gaussians"], [51, "create-a-simulation-with-two-gaussians"]], "Fit the model": [[44, "fit-the-model"], [45, "fit-the-model"], [46, "fit-the-model"], [47, "fit-the-model"]], "Calculate the statistic": [[44, "calculate-the-statistic"], [45, "calculate-the-statistic"], [46, "calculate-the-statistic"], [47, "calculate-the-statistic"], [49, "calculate-the-statistic"], [50, "calculate-the-statistic"]], "Calculating MI": [[45, "calculating-mi"]], "MI": [[45, "mi"], [48, "mi"]], "Calculating pAUC": [[46, "calculating-pauc"]], "pAUC@r": [[46, "pauc-r"]], "Calculating Hellinger Distance": [[47, "calculating-hellinger-distance"]], "Hellinger Distance": [[47, "hellinger-distance"]], "Calculating p-value (MIGHT)": [[48, "calculating-p-value-might"]], "Independence Testing": [[48, "independence-testing"], [51, "independence-testing"]], "Fit the models and calculate the p-value": [[48, "fit-the-models-and-calculate-the-p-value"], [51, "fit-the-models-and-calculate-the-p-value"]], "Calculating S@98 with multiview data": [[49, "calculating-s-98-with-multiview-data"]], "S@98 with multiview data": [[49, "s-98-with-multiview-data"]], "Create a two-dimensional simulation with gaussians": [[49, "create-a-two-dimensional-simulation-with-gaussians"]], "Fit the model with X and Z": [[49, "fit-the-model-with-x-and-z"], [50, "fit-the-model-with-x-and-z"]], "Calculating CMI": [[50, "calculating-cmi"]], "CMI": [[50, "cmi"], [51, "cmi"]], "Fit the model with Z only": [[50, "fit-the-model-with-z-only"]], "Calculating p-value with multiview data (CoMIGHT)": [[51, "calculating-p-value-with-multiview-data-comight"]], "Modify the simulation with permuted variable two": [[51, "modify-the-simulation-with-permuted-variable-two"]], "sktree.ExtendedIsolationForest": [[52, "sktree-extendedisolationforest"]], "sktree.ExtraTreesClassifier": [[53, "sktree-extratreesclassifier"]], "sktree.ExtraTreesRegressor": [[54, "sktree-extratreesregressor"]], "sktree.HonestForestClassifier": [[55, "sktree-honestforestclassifier"]], "sktree.MultiViewRandomForestClassifier": [[56, "sktree-multiviewrandomforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[57, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[58, "sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[59, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[60, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[61, "sktree-patchobliquerandomforestregressor"]], "sktree.RandomForestClassifier": [[62, "sktree-randomforestclassifier"]], "sktree.RandomForestRegressor": [[63, "sktree-randomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[64, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[65, "sktree-unsupervisedrandomforest"]], "sktree.datasets.approximate_clf_mutual_information": [[66, "sktree-datasets-approximate-clf-mutual-information"]], "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo": [[67, "sktree-datasets-approximate-clf-mutual-information-with-monte-carlo"]], "sktree.datasets.make_gaussian_mixture": [[68, "sktree-datasets-make-gaussian-mixture"]], "Examples using sktree.datasets.make_gaussian_mixture": [[68, "examples-using-sktree-datasets-make-gaussian-mixture"]], "sktree.datasets.make_joint_factor_model": [[69, "sktree-datasets-make-joint-factor-model"]], "sktree.datasets.make_marron_wand_classification": [[70, "sktree-datasets-make-marron-wand-classification"]], "sktree.datasets.make_quadratic_classification": [[71, "sktree-datasets-make-quadratic-classification"]], "sktree.datasets.make_trunk_classification": [[72, "sktree-datasets-make-trunk-classification"]], "Examples using sktree.datasets.make_trunk_classification": [[72, "examples-using-sktree-datasets-make-trunk-classification"]], "sktree.datasets.make_trunk_mixture_classification": [[73, "sktree-datasets-make-trunk-mixture-classification"]], "Examples using sktree.datasets.make_trunk_mixture_classification": [[73, "examples-using-sktree-datasets-make-trunk-mixture-classification"]], "sktree.experimental.conditional_resample": [[74, "sktree-experimental-conditional-resample"]], "sktree.experimental.mutual_info.cmi_gaussian": [[75, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[76, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[77, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[78, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[79, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[80, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[81, "sktree-experimental-simulate-simulate-sphere"]], "sktree.stats.FeatureImportanceForestClassifier": [[82, "sktree-stats-featureimportanceforestclassifier"]], "sktree.stats.FeatureImportanceForestRegressor": [[83, "sktree-stats-featureimportanceforestregressor"]], "sktree.stats.PermutationForestClassifier": [[84, "sktree-stats-permutationforestclassifier"]], "sktree.stats.PermutationForestRegressor": [[85, "sktree-stats-permutationforestregressor"]], "sktree.stats.PermutationHonestForestClassifier": [[86, "sktree-stats-permutationhonestforestclassifier"]], "sktree.stats.build_coleman_forest": [[87, "sktree-stats-build-coleman-forest"]], "Examples using sktree.stats.build_coleman_forest": [[87, "examples-using-sktree-stats-build-coleman-forest"]], "sktree.stats.build_hyppo_cv_forest": [[88, "sktree-stats-build-hyppo-cv-forest"]], "sktree.stats.build_hyppo_oob_forest": [[89, "sktree-stats-build-hyppo-oob-forest"]], "Examples using sktree.stats.build_hyppo_oob_forest": [[89, "examples-using-sktree-stats-build-hyppo-oob-forest"]], "sktree.stats.build_permutation_forest": [[90, "sktree-stats-build-permutation-forest"]], "sktree.tree.DecisionTreeClassifier": [[91, "sktree-tree-decisiontreeclassifier"]], "sktree.tree.DecisionTreeRegressor": [[92, "sktree-tree-decisiontreeregressor"]], "sktree.tree.ExtraTreeClassifier": [[93, "sktree-tree-extratreeclassifier"]], "sktree.tree.ExtraTreeRegressor": [[94, "sktree-tree-extratreeregressor"]], "sktree.tree.HonestTreeClassifier": [[95, "sktree-tree-honesttreeclassifier"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[96, "sktree-tree-multiviewdecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[97, "sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[98, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[99, "sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[100, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[101, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[102, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[103, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[104, "scikit-tree"]], "Contents": [[104, "contents"]], "Getting started:": [[104, null]], "Indices and tables": [[104, "indices-and-tables"]], "Installation": [[105, "installation"]], "Dependencies": [[105, "dependencies"]], "Installing with pip": [[105, "installing-with-pip"]], "Installing from source with Meson": [[105, "installing-from-source-with-meson"]], "Conda (Recommended)": [[105, "conda-recommended"]], "Oblique Random Forests": [[106, "oblique-random-forests"]], "Examples:": [[106, null]], "Feature importance evaluation": [[106, "feature-importance-evaluation"]], "Supervised Decision Trees": [[107, "supervised-decision-trees"]], "Oblique Trees": [[107, "oblique-trees"]], "Differences compared to decision trees": [[107, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[107, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[107, "classification-regression-and-multi-output-problems"]], "Complexity": [[107, "complexity"]], "Tips on practical use": [[107, "tips-on-practical-use"]], "Limitations compared to decision trees": [[107, "limitations-compared-to-decision-trees"]], "References:": [[107, null]], "Honest Trees": [[107, "honest-trees"]], "Unsupervised Decision Trees": [[108, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[108, "unsupervised-criterion"]], "Two-Means": [[108, "two-means"]], "Fast-BIC": [[108, "fast-bic"]], "Evaluating Unsupervised Trees": [[108, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[110, "examples-using-scikit-tree"]], "User Guide": [[111, "user-guide"]], "Release History": [[112, "release-history"]], "Version 0.1": [[114, "version-0-1"]], "Changelog": [[114, "changelog"], [115, "changelog"], [116, "changelog"], [117, "changelog"], [118, "changelog"], [119, "changelog"], [120, "changelog"], [121, "changelog"]], "Code and Documentation Contributors": [[114, "code-and-documentation-contributors"], [115, "code-and-documentation-contributors"], [116, "code-and-documentation-contributors"], [117, "code-and-documentation-contributors"], [118, "code-and-documentation-contributors"], [119, "code-and-documentation-contributors"], [120, "code-and-documentation-contributors"], [121, "code-and-documentation-contributors"]], "Version 0.2": [[115, "version-0-2"]], "Version 0.3": [[116, "version-0-3"]], "Version 0.4": [[117, "version-0-4"]], "Version 0.5": [[118, "version-0-5"]], "Version 0.6": [[119, "version-0-6"]], "Version 0.7": [[120, "version-0-7"]], "Version 0.8": [[121, "version-0-8"]]}, "indexentries": {"module": [[0, "module-sktree"], [0, "module-sktree._lib.sklearn.ensemble"]], "sktree": [[0, "module-sktree"]], "sktree._lib.sklearn.ensemble": [[0, "module-sktree._lib.sklearn.ensemble"]], "extendedisolationforest (class in sktree)": [[52, "sktree.ExtendedIsolationForest"]], "decision_function() (sktree.extendedisolationforest method)": [[52, "sktree.ExtendedIsolationForest.decision_function"]], "estimators_samples_ (sktree.extendedisolationforest property)": [[52, "sktree.ExtendedIsolationForest.estimators_samples_"]], "fit() (sktree.extendedisolationforest method)": [[52, "sktree.ExtendedIsolationForest.fit"]], "fit_predict() (sktree.extendedisolationforest method)": [[52, "sktree.ExtendedIsolationForest.fit_predict"]], "get_metadata_routing() (sktree.extendedisolationforest method)": [[52, "sktree.ExtendedIsolationForest.get_metadata_routing"]], "get_params() (sktree.extendedisolationforest method)": [[52, "sktree.ExtendedIsolationForest.get_params"]], "predict() (sktree.extendedisolationforest method)": [[52, "sktree.ExtendedIsolationForest.predict"]], "score_samples() (sktree.extendedisolationforest method)": [[52, "sktree.ExtendedIsolationForest.score_samples"]], "set_fit_request() (sktree.extendedisolationforest method)": [[52, "sktree.ExtendedIsolationForest.set_fit_request"]], "set_params() (sktree.extendedisolationforest method)": [[52, "sktree.ExtendedIsolationForest.set_params"]], "extratreesclassifier (class in sktree)": [[53, "sktree.ExtraTreesClassifier"]], "apply() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.apply"]], "decision_path() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sktree.extratreesclassifier property)": [[53, "sktree.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sktree.extratreesclassifier property)": [[53, "sktree.ExtraTreesClassifier.feature_importances_"]], "fit() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.get_params"]], "partial_fit() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.partial_fit"]], "predict() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.predict"]], "predict_log_proba() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.predict_quantiles"]], "score() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.score"]], "set_fit_request() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.set_fit_request"]], "set_params() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.set_params"]], "set_partial_fit_request() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.set_partial_fit_request"]], "set_score_request() (sktree.extratreesclassifier method)": [[53, "sktree.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sktree)": [[54, "sktree.ExtraTreesRegressor"]], "apply() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.apply"]], "decision_path() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sktree.extratreesregressor property)": [[54, "sktree.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sktree.extratreesregressor property)": [[54, "sktree.ExtraTreesRegressor.feature_importances_"]], "fit() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.get_params"]], "predict() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.predict"]], "predict_quantiles() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.predict_quantiles"]], "score() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.score"]], "set_fit_request() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.set_fit_request"]], "set_params() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.set_params"]], "set_score_request() (sktree.extratreesregressor method)": [[54, "sktree.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in sktree)": [[55, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.apply"]], "decision_path() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.decision_path"]], "estimators_samples_ (sktree.honestforestclassifier property)": [[55, "sktree.HonestForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.honestforestclassifier property)": [[55, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.get_params"]], "honest_indices_ (sktree.honestforestclassifier property)": [[55, "sktree.HonestForestClassifier.honest_indices_"]], "oob_samples_ (sktree.honestforestclassifier property)": [[55, "sktree.HonestForestClassifier.oob_samples_"]], "partial_fit() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.partial_fit"]], "predict() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.honestforestclassifier method)": [[55, "sktree.HonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.honestforestclassifier property)": [[55, "sktree.HonestForestClassifier.structure_indices_"]], "multiviewrandomforestclassifier (class in sktree)": [[56, "sktree.MultiViewRandomForestClassifier"]], "apply() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.multiviewrandomforestclassifier property)": [[56, "sktree.MultiViewRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.multiviewrandomforestclassifier property)": [[56, "sktree.MultiViewRandomForestClassifier.feature_importances_"]], "fit() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.get_params"]], "oob_samples_ (sktree.multiviewrandomforestclassifier property)": [[56, "sktree.MultiViewRandomForestClassifier.oob_samples_"]], "partial_fit() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.partial_fit"]], "predict() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.predict"]], "predict_log_proba() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.predict_quantiles"]], "score() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.score"]], "set_fit_request() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.set_fit_request"]], "set_params() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.multiviewrandomforestclassifier method)": [[56, "sktree.MultiViewRandomForestClassifier.set_score_request"]], "nearestneighborsmetaestimator (class in sktree)": [[57, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[57, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[57, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[57, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[57, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[57, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[57, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[58, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestclassifier property)": [[58, "sktree.ObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[58, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.get_params"]], "oob_samples_ (sktree.obliquerandomforestclassifier property)": [[58, "sktree.ObliqueRandomForestClassifier.oob_samples_"]], "partial_fit() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[58, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[59, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestregressor property)": [[59, "sktree.ObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[59, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.get_params"]], "oob_samples_ (sktree.obliquerandomforestregressor property)": [[59, "sktree.ObliqueRandomForestRegressor.oob_samples_"]], "predict() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[59, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[60, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestclassifier property)": [[60, "sktree.PatchObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[60, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "oob_samples_ (sktree.patchobliquerandomforestclassifier property)": [[60, "sktree.PatchObliqueRandomForestClassifier.oob_samples_"]], "partial_fit() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[60, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[61, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestregressor property)": [[61, "sktree.PatchObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[61, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "oob_samples_ (sktree.patchobliquerandomforestregressor property)": [[61, "sktree.PatchObliqueRandomForestRegressor.oob_samples_"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[61, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in sktree)": [[62, "sktree.RandomForestClassifier"]], "apply() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.apply"]], "decision_path() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.randomforestclassifier property)": [[62, "sktree.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.randomforestclassifier property)": [[62, "sktree.RandomForestClassifier.feature_importances_"]], "fit() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.get_params"]], "partial_fit() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.partial_fit"]], "predict() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.predict"]], "predict_log_proba() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.predict_quantiles"]], "score() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.score"]], "set_fit_request() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.set_fit_request"]], "set_params() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.randomforestclassifier method)": [[62, "sktree.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sktree)": [[63, "sktree.RandomForestRegressor"]], "apply() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.apply"]], "decision_path() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.randomforestregressor property)": [[63, "sktree.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.randomforestregressor property)": [[63, "sktree.RandomForestRegressor.feature_importances_"]], "fit() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.get_params"]], "predict() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.predict"]], "predict_quantiles() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.predict_quantiles"]], "score() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.score"]], "set_fit_request() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.set_fit_request"]], "set_params() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.set_params"]], "set_score_request() (sktree.randomforestregressor method)": [[63, "sktree.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[64, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedobliquerandomforest property)": [[64, "sktree.UnsupervisedObliqueRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[64, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[64, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[65, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedrandomforest property)": [[65, "sktree.UnsupervisedRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[65, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[65, "sktree.UnsupervisedRandomForest.transform"]], "approximate_clf_mutual_information() (in module sktree.datasets)": [[66, "sktree.datasets.approximate_clf_mutual_information"]], "approximate_clf_mutual_information_with_monte_carlo() (in module sktree.datasets)": [[67, "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo"]], "make_gaussian_mixture() (in module sktree.datasets)": [[68, "sktree.datasets.make_gaussian_mixture"]], "make_joint_factor_model() (in module sktree.datasets)": [[69, "sktree.datasets.make_joint_factor_model"]], "make_marron_wand_classification() (in module sktree.datasets)": [[70, "sktree.datasets.make_marron_wand_classification"]], "make_quadratic_classification() (in module sktree.datasets)": [[71, "sktree.datasets.make_quadratic_classification"]], "make_trunk_classification() (in module sktree.datasets)": [[72, "sktree.datasets.make_trunk_classification"]], "make_trunk_mixture_classification() (in module sktree.datasets)": [[73, "sktree.datasets.make_trunk_mixture_classification"]], "conditional_resample() (in module sktree.experimental)": [[74, "sktree.experimental.conditional_resample"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[75, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[76, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[77, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[78, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[79, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[80, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[81, "sktree.experimental.simulate.simulate_sphere"]], "featureimportanceforestclassifier (class in sktree.stats)": [[82, "sktree.stats.FeatureImportanceForestClassifier"]], "statistic() (sktree.stats.featureimportanceforestclassifier method)": [[82, "sktree.stats.FeatureImportanceForestClassifier.statistic"]], "test() (sktree.stats.featureimportanceforestclassifier method)": [[82, "sktree.stats.FeatureImportanceForestClassifier.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestclassifier property)": [[82, "sktree.stats.FeatureImportanceForestClassifier.train_test_samples_"]], "featureimportanceforestregressor (class in sktree.stats)": [[83, "sktree.stats.FeatureImportanceForestRegressor"]], "statistic() (sktree.stats.featureimportanceforestregressor method)": [[83, "sktree.stats.FeatureImportanceForestRegressor.statistic"]], "test() (sktree.stats.featureimportanceforestregressor method)": [[83, "sktree.stats.FeatureImportanceForestRegressor.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestregressor property)": [[83, "sktree.stats.FeatureImportanceForestRegressor.train_test_samples_"]], "permutationforestclassifier (class in sktree.stats)": [[84, "sktree.stats.PermutationForestClassifier"]], "statistic() (sktree.stats.permutationforestclassifier method)": [[84, "sktree.stats.PermutationForestClassifier.statistic"]], "test() (sktree.stats.permutationforestclassifier method)": [[84, "sktree.stats.PermutationForestClassifier.test"]], "train_test_samples_ (sktree.stats.permutationforestclassifier property)": [[84, "sktree.stats.PermutationForestClassifier.train_test_samples_"]], "permutationforestregressor (class in sktree.stats)": [[85, "sktree.stats.PermutationForestRegressor"]], "statistic() (sktree.stats.permutationforestregressor method)": [[85, "sktree.stats.PermutationForestRegressor.statistic"]], "test() (sktree.stats.permutationforestregressor method)": [[85, "sktree.stats.PermutationForestRegressor.test"]], "train_test_samples_ (sktree.stats.permutationforestregressor property)": [[85, "sktree.stats.PermutationForestRegressor.train_test_samples_"]], "permutationhonestforestclassifier (class in sktree.stats)": [[86, "sktree.stats.PermutationHonestForestClassifier"]], "apply() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.apply"]], "decision_path() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.decision_path"]], "estimators_samples_ (sktree.stats.permutationhonestforestclassifier property)": [[86, "sktree.stats.PermutationHonestForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.stats.permutationhonestforestclassifier property)": [[86, "sktree.stats.PermutationHonestForestClassifier.feature_importances_"]], "fit() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.get_params"]], "honest_indices_ (sktree.stats.permutationhonestforestclassifier property)": [[86, "sktree.stats.PermutationHonestForestClassifier.honest_indices_"]], "oob_samples_ (sktree.stats.permutationhonestforestclassifier property)": [[86, "sktree.stats.PermutationHonestForestClassifier.oob_samples_"]], "partial_fit() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.partial_fit"]], "predict() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.predict"]], "predict_log_proba() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.predict_proba"]], "predict_proba_per_tree() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.predict_proba_per_tree"]], "predict_quantiles() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.predict_quantiles"]], "score() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.score"]], "set_fit_request() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.set_fit_request"]], "set_params() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.stats.permutationhonestforestclassifier method)": [[86, "sktree.stats.PermutationHonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.stats.permutationhonestforestclassifier property)": [[86, "sktree.stats.PermutationHonestForestClassifier.structure_indices_"]], "build_coleman_forest() (in module sktree.stats)": [[87, "sktree.stats.build_coleman_forest"]], "build_hyppo_cv_forest() (in module sktree.stats)": [[88, "sktree.stats.build_hyppo_cv_forest"]], "build_hyppo_oob_forest() (in module sktree.stats)": [[89, "sktree.stats.build_hyppo_oob_forest"]], "build_permutation_forest() (in module sktree.stats)": [[90, "sktree.stats.build_permutation_forest"]], "decisiontreeclassifier (class in sktree.tree)": [[91, "sktree.tree.DecisionTreeClassifier"]], "apply() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeclassifier property)": [[91, "sktree.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeclassifier method)": [[91, "sktree.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sktree.tree)": [[92, "sktree.tree.DecisionTreeRegressor"]], "apply() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeregressor property)": [[92, "sktree.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.get_params"]], "predict() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeregressor method)": [[92, "sktree.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sktree.tree)": [[93, "sktree.tree.ExtraTreeClassifier"]], "apply() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.extratreeclassifier property)": [[93, "sktree.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.fit"]], "get_depth() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.get_params"]], "partial_fit() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.partial_fit"]], "predict() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.predict_quantiles"]], "score() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.extratreeclassifier method)": [[93, "sktree.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sktree.tree)": [[94, "sktree.tree.ExtraTreeRegressor"]], "apply() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.extratreeregressor property)": [[94, "sktree.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.fit"]], "get_depth() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.get_params"]], "predict() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.predict_quantiles"]], "score() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.extratreeregressor method)": [[94, "sktree.tree.ExtraTreeRegressor.set_score_request"]], "honesttreeclassifier (class in sktree.tree)": [[95, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[95, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.get_params"]], "partial_fit() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.partial_fit"]], "predict() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "score() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.score"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.honesttreeclassifier method)": [[95, "sktree.tree.HonestTreeClassifier.set_score_request"]], "multiviewdecisiontreeclassifier (class in sktree.tree)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier"]], "apply() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.multiviewdecisiontreeclassifier property)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[96, "sktree.tree.MultiViewDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[97, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[98, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[99, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[100, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[101, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[101, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[101, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[102, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[103, "sktree.tree.compute_forest_similarity_matrix"]]}})