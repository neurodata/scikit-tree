Search.setIndex({"docnames": ["api", "auto_examples/calibration/index", "auto_examples/calibration/plot_overlapping_gaussians", "auto_examples/calibration/sg_execution_times", "auto_examples/hypothesis_testing/index", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing", "auto_examples/hypothesis_testing/plot_co_MIGHT_alternative", "auto_examples/hypothesis_testing/plot_co_MIGHT_null", "auto_examples/hypothesis_testing/plot_might_auc", "auto_examples/hypothesis_testing/plot_might_mv_auc", "auto_examples/hypothesis_testing/sg_execution_times", "auto_examples/index", "auto_examples/multiview/index", "auto_examples/multiview/plot_multiview_dtc", "auto_examples/multiview/sg_execution_times", "auto_examples/outlier_detection/index", "auto_examples/outlier_detection/plot_extended_isolation_forest", "auto_examples/outlier_detection/sg_execution_times", "auto_examples/quantile_predictions/index", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest", "auto_examples/quantile_predictions/sg_execution_times", "auto_examples/sg_execution_times", "auto_examples/sklearn_vs_sktree/index", "auto_examples/sklearn_vs_sktree/plot_iris_dtc", "auto_examples/sklearn_vs_sktree/sg_execution_times", "auto_examples/sparse_oblique_trees/index", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest", "auto_examples/sparse_oblique_trees/sg_execution_times", "auto_examples/splitters/index", "auto_examples/splitters/plot_multiview_axis_aligned_splitter", "auto_examples/splitters/plot_projection_matrices", "auto_examples/splitters/plot_sparse_projection_matrix", "auto_examples/splitters/sg_execution_times", "generated/sktree.ExtendedIsolationForest", "generated/sktree.ExtraTreesClassifier", "generated/sktree.ExtraTreesRegressor", "generated/sktree.HonestForestClassifier", "generated/sktree.MultiViewRandomForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.RandomForestClassifier", "generated/sktree.RandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.datasets.approximate_clf_mutual_information", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "generated/sktree.datasets.make_gaussian_mixture", "generated/sktree.datasets.make_joint_factor_model", "generated/sktree.datasets.make_quadratic_classification", "generated/sktree.datasets.make_trunk_classification", "generated/sktree.experimental.conditional_resample", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.stats.FeatureImportanceForestClassifier", "generated/sktree.stats.FeatureImportanceForestRegressor", "generated/sktree.stats.PermutationForestClassifier", "generated/sktree.stats.PermutationForestRegressor", "generated/sktree.tree.DecisionTreeClassifier", "generated/sktree.tree.DecisionTreeRegressor", "generated/sktree.tree.ExtraTreeClassifier", "generated/sktree.tree.ExtraTreeRegressor", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.MultiViewDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "sg_execution_times", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4", "whats_new/v0.5", "whats_new/v0.6"], "filenames": ["api.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_overlapping_gaussians.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/hypothesis_testing/index.rst", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest.rst", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing.rst", "auto_examples/hypothesis_testing/plot_co_MIGHT_alternative.rst", "auto_examples/hypothesis_testing/plot_co_MIGHT_null.rst", "auto_examples/hypothesis_testing/plot_might_auc.rst", "auto_examples/hypothesis_testing/plot_might_mv_auc.rst", "auto_examples/hypothesis_testing/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/multiview/index.rst", "auto_examples/multiview/plot_multiview_dtc.rst", "auto_examples/multiview/sg_execution_times.rst", "auto_examples/outlier_detection/index.rst", "auto_examples/outlier_detection/plot_extended_isolation_forest.rst", "auto_examples/outlier_detection/sg_execution_times.rst", "auto_examples/quantile_predictions/index.rst", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest.rst", "auto_examples/quantile_predictions/sg_execution_times.rst", "auto_examples/sg_execution_times.rst", "auto_examples/sklearn_vs_sktree/index.rst", "auto_examples/sklearn_vs_sktree/plot_iris_dtc.rst", "auto_examples/sklearn_vs_sktree/sg_execution_times.rst", "auto_examples/sparse_oblique_trees/index.rst", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size.rst", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris.rst", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/sg_execution_times.rst", "auto_examples/splitters/index.rst", "auto_examples/splitters/plot_multiview_axis_aligned_splitter.rst", "auto_examples/splitters/plot_projection_matrices.rst", "auto_examples/splitters/plot_sparse_projection_matrix.rst", "auto_examples/splitters/sg_execution_times.rst", "generated/sktree.ExtendedIsolationForest.rst", "generated/sktree.ExtraTreesClassifier.rst", "generated/sktree.ExtraTreesRegressor.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.MultiViewRandomForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.RandomForestClassifier.rst", "generated/sktree.RandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.datasets.approximate_clf_mutual_information.rst", "generated/sktree.datasets.approximate_clf_mutual_information_with_monte_carlo.rst", "generated/sktree.datasets.make_gaussian_mixture.rst", "generated/sktree.datasets.make_joint_factor_model.rst", "generated/sktree.datasets.make_quadratic_classification.rst", "generated/sktree.datasets.make_trunk_classification.rst", "generated/sktree.experimental.conditional_resample.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.stats.FeatureImportanceForestClassifier.rst", "generated/sktree.stats.FeatureImportanceForestRegressor.rst", "generated/sktree.stats.PermutationForestClassifier.rst", "generated/sktree.stats.PermutationForestRegressor.rst", "generated/sktree.tree.DecisionTreeClassifier.rst", "generated/sktree.tree.DecisionTreeRegressor.rst", "generated/sktree.tree.ExtraTreeClassifier.rst", "generated/sktree.tree.ExtraTreeRegressor.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.MultiViewDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "sg_execution_times.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst", "whats_new/v0.5.rst", "whats_new/v0.6.rst"], "titles": ["API Documentation", "Calibrated decision trees via honesty", "Plot honest forest calibrations on overlapping gaussian simulations", "Computation times", "Hypothesis testing with decision trees", "Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data", "Demonstrate Conditional Mutual Information for Genuine Hypothesis Testing (Co-MIGHT)", "Co-MIGHT when Data Exhibits Conditional Independence", "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Compute partial AUC using multi-view MIGHT (MV-MIGHT)", "Computation times", "Examples", "Multi-view learning with Decision-trees", "Analyze a multi-view dataset with a multi-view random forest", "Computation times", "Outlier-detection", "ExtendedIsolationForest example", "Computation times", "Quantile Predictions with Random Forest", "Predicting with different quantile interpolation methods", "Quantile prediction intervals with Random Forest Regressor", "Quantile prediction with Random Forest Regressor class", "Quantile regression vs. standard and oblique regression forest", "Computation times", "Computation times", "Comparing sklearn and sktree decision trees", "Plot the decision surface of decision trees trained on the iris dataset", "Computation times", "Sparse oblique projections with oblique decision-trees", "Compare extra oblique forest and oblique random forest predictions on cc18 datasets", "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Compare the decision surfaces of oblique extra-trees with standard oblique trees", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Computation times", "Decision-tree splitters", "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree", "Plot the projection matrices of an oblique tree for sampling images, or time-series", "Plot the sparse projection matrices of an oblique tree", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtendedIsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.MultiViewRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.datasets.approximate_clf_mutual_information", "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo", "sktree.datasets.make_gaussian_mixture", "sktree.datasets.make_joint_factor_model", "sktree.datasets.make_quadratic_classification", "sktree.datasets.make_trunk_classification", "sktree.experimental.conditional_resample", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.MultiViewDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Computation times", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "Version 0.1", "Version 0.2", "Version 0.3", "Version 0.4", "Version 0.5", "Version 0.6"], "terms": {"sktree": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 86, 87, 89, 99, 100, 101], "manifold": [0, 38, 49, 50, 81, 82, 86, 88, 96], "obliqu": [0, 19, 24, 27, 35, 36, 40, 45, 47, 48, 49, 50, 53, 78, 79, 80, 81, 82, 84, 86, 87, 91, 93, 96, 97], "random": [0, 2, 5, 6, 7, 8, 9, 10, 13, 15, 17, 23, 24, 29, 33, 35, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 91, 93, 96, 98], "forest": [0, 1, 3, 5, 6, 7, 8, 13, 15, 24, 29, 33, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 93, 96, 97, 98, 99], "we": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 23, 27, 33, 37, 38, 39, 41, 44, 61, 62, 66, 86, 87, 88, 89, 90, 97, 98], "provid": [0, 14, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "drop": [0, 20, 21, 22, 23, 30, 31, 32, 34, 89], "replac": [0, 41, 61, 88], "featur": [0, 5, 6, 7, 8, 10, 14, 20, 23, 27, 30, 31, 32, 33, 34, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101], "have": [0, 2, 7, 8, 14, 33, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 97, 98], "develop": [0, 87, 101], "These": [0, 33, 38, 88], "ar": [0, 2, 5, 6, 7, 14, 17, 20, 21, 22, 23, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 94, 99], "still": [0, 6, 7, 8, 38, 44], "compat": [0, 38, 53, 54, 83, 84], "all": [0, 6, 7, 12, 14, 27, 31, 34, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 60, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 94, 96, 97], "capabl": [0, 97], "bin": [0, 2, 23, 42, 43, 51, 52], "which": [0, 2, 5, 6, 7, 8, 9, 10, 17, 21, 30, 32, 37, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 98, 99, 100, 101], "theoret": [0, 2, 86], "improv": [0, 2, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 96, 97, 98, 99, 100, 101], "runtim": [0, 41, 89], "significantli": [0, 6, 43, 48, 50, 52], "high": [0, 6, 7, 8, 14, 17, 30, 32, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 97], "dimension": [0, 6, 7, 8, 14, 30, 41, 60, 67, 90, 96, 97], "sampl": [0, 2, 5, 6, 7, 9, 10, 12, 14, 17, 20, 21, 23, 27, 30, 31, 32, 34, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 96, 98, 99, 101], "size": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 21, 22, 29, 30, 35, 38, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 79, 80, 81, 82, 89, 91, 92, 99], "data": [0, 2, 4, 11, 12, 21, 22, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 96, 98], "us": [0, 2, 4, 7, 8, 11, 12, 13, 14, 17, 19, 20, 21, 22, 23, 29, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 93, 97, 98], "your": [0, 14, 81, 82, 86], "own": [0, 42, 44, 45, 46, 47, 49, 51, 73, 75, 77, 78, 79, 81], "risk": 0, "extens": 0, "compar": [0, 2, 5, 6, 7, 8, 17, 21, 22, 29, 34, 35, 39, 51, 52, 69, 70, 71, 72, 78, 79, 80, 81, 82, 86, 91, 93], "decis": [0, 6, 7, 8, 16, 28, 30, 35, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 91, 93, 97, 98], "model": [0, 6, 7, 8, 14, 20, 27, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 96, 101], "tradition": 0, "implement": [0, 7, 37, 38, 39, 41, 42, 43, 44, 57, 60, 61, 69, 70, 71, 72, 79, 80, 86, 88, 89, 96, 97], "axi": [0, 2, 5, 6, 9, 10, 12, 14, 17, 20, 21, 27, 29, 31, 33, 35, 36, 38, 39, 40, 45, 47, 48, 49, 50, 78, 79, 80, 81, 82, 88, 89, 91, 92, 96, 98], "align": [0, 12, 14, 27, 29, 35, 36, 39, 40, 45, 47, 48, 49, 50, 78, 79, 80, 81, 82, 88, 89, 91, 92, 98], "split": [0, 2, 6, 12, 17, 21, 30, 33, 36, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 92, 99, 100, 101], "store": [0, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 88, 89], "mean": [0, 2, 5, 7, 9, 10, 17, 21, 23, 30, 31, 32, 33, 34, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 67, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 93, 96, 97, 99], "outcom": 0, "i": [0, 2, 5, 6, 7, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 100, 101], "e": [0, 5, 6, 7, 17, 21, 23, 37, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90], "label": [0, 2, 6, 7, 8, 9, 10, 17, 21, 22, 23, 27, 32, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90], "vote": [0, 42, 44, 45, 47, 49, 51, 53, 54, 77], "leaf": [0, 17, 20, 21, 22, 23, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89], "node": [0, 12, 17, 20, 21, 22, 23, 30, 36, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 92], "howev": [0, 7, 30, 33, 37, 69, 70, 89], "more": [0, 2, 5, 6, 14, 17, 20, 27, 30, 31, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 89, 99], "exot": 0, "possibl": [0, 30, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90], "call": [0, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 61, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 99], "some": [0, 14, 17, 30, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 92, 99], "multipl": [0, 14, 37, 38, 41, 46, 60, 61, 78, 89, 98], "column": [0, 5, 6, 7, 30, 31, 32, 33, 34, 37, 38, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 73, 75, 77, 78, 79, 80, 81, 82, 89, 96], "creat": [0, 6, 14, 17, 20, 21, 22, 23, 33, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88], "new": [0, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 94, 97], "valu": [0, 17, 20, 21, 23, 30, 31, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 65, 66, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 100], "thi": [0, 2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 23, 30, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 90, 94, 97, 98, 99, 100], "can": [0, 7, 9, 10, 14, 17, 20, 33, 37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 60, 61, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 96], "take": [0, 21, 27, 33, 53, 54, 61, 65, 69, 70, 83, 84, 97], "form": [0, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "spars": [0, 30, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91], "linear": [0, 7, 20, 27, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "combin": [0, 5, 6, 7, 8, 9, 10, 27, 39, 41, 45, 47, 48, 53, 78, 79, 80, 84, 88, 89, 90], "even": [0, 8, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "advantag": [0, 97], "structur": [0, 6, 14, 27, 37, 38, 44, 61, 73, 74, 75, 76, 77, 81, 82, 90, 96], "g": [0, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89], "an": [0, 5, 6, 7, 9, 10, 12, 14, 17, 20, 21, 22, 23, 30, 33, 34, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 60, 61, 63, 65, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101], "imag": [0, 12, 36, 40, 81, 82, 91, 92], "indic": [0, 5, 20, 21, 22, 23, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 98, 101], "awar": [0, 6, 37, 81, 82], "fashion": [0, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "class": [0, 2, 5, 9, 10, 12, 17, 19, 21, 24, 32, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 90, 91, 92, 99], "gener": [0, 2, 5, 6, 7, 8, 9, 10, 12, 14, 19, 21, 22, 27, 30, 31, 32, 33, 34, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 80, 81, 82, 88, 89, 90, 92, 96, 99, 101], "while": [0, 2, 6, 14, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "everyth": [0, 92], "els": [0, 17, 33, 34], "consist": [0, 17, 30, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 74, 76, 80, 82, 83, 84, 89, 98], "how": [0, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 19, 21, 22, 30, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 92], "build": [0, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 87, 97, 98], "classif": [0, 14, 32, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 93, 99], "regress": [0, 2, 12, 19, 24, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 91, 92, 93, 99], "thei": [0, 17, 30, 38, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89], "also": [0, 2, 27, 37, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 98, 99], "power": [0, 6, 7, 88], "non": [0, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "parametr": [0, 89], "embed": 0, "cluster": [0, 2, 17, 33, 53, 54, 83, 84, 90], "The": [0, 2, 5, 6, 7, 9, 10, 14, 17, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 98], "randomtreesembed": [0, 75], "exampl": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90, 91, 98], "other": [0, 2, 6, 7, 14, 17, 21, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "state": 0, "art": 0, "explicitli": 0, "base": [0, 8, 17, 21, 30, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 99, 101], "criterion": [0, 37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 96], "varianc": [0, 21, 30, 43, 44, 48, 50, 52, 53, 54, 57, 74, 76, 77, 80, 82, 83, 84, 88, 90], "bic": [0, 53, 54, 83, 84, 93], "compris": [0, 81, 82], "those": [0, 21, 22, 30, 42, 43, 44, 47, 48, 49, 50, 51, 52, 67, 73, 74, 75, 76, 77, 79, 80, 88, 89], "avail": [0, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 87, 97], "standalon": 0, "isol": [0, 17, 41, 86, 87, 97], "ensembl": [0, 2, 17, 20, 21, 22, 23, 32, 33, 34, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 75, 76, 88], "extrem": [0, 30, 31, 42, 43, 51, 52, 75, 76], "extend": [0, 14, 17, 41, 86, 89, 97], "allow": [0, 7, 14, 21, 30, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 97, 98, 99], "flexibl": [0, 90], "inher": [0, 53, 54], "produc": [0, 17], "like": [0, 17, 37, 38, 39, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 90], "extract": [0, 9, 10, 30, 31, 34], "pairwis": 0, "from": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 88, 89, 90, 91, 98], "includ": [0, 2, 42, 44, 45, 46, 47, 49, 51, 65, 73, 75, 77, 78, 79, 81, 86, 96, 97, 98, 99, 100, 101], "correct": 0, "turn": 0, "proper": 0, "In": [0, 7, 8, 14, 17, 23, 30, 31, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 101], "addit": [0, 8, 42, 43, 51, 52, 53, 54, 57, 69, 70, 83, 84, 89], "leav": [0, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "natur": [0, 55, 56, 66, 90], "wai": [0, 7, 17, 30, 41, 61, 75, 76, 90], "comput": [0, 4, 5, 6, 7, 12, 30, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 92, 96], "neighbor": [0, 2, 41, 46, 61, 65, 86, 99], "nearest": [0, 2, 20, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 99, 100, 101], "interfac": [0, 37, 38, 39], "similar": [0, 30, 33, 45, 47, 48, 49, 50, 53, 54, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 96], "nearestneighbor": [0, 46, 61, 65], "perform": [0, 8, 9, 10, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90], "conveni": 0, "simul": [0, 1, 3, 12, 29, 35, 37, 56, 59, 88, 91, 92], "beyond": [0, 89], "offer": 0, "work": [0, 14, 23, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "progress": 0, "help": [0, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "evalu": [0, 5, 6, 7, 9, 17, 30, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 93], "mutual": [0, 4, 8, 11, 12, 55, 56, 57, 62, 63, 64, 65, 66, 68, 83, 91, 92, 96, 101], "inform": [0, 2, 4, 8, 10, 11, 12, 14, 27, 31, 32, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 64, 65, 66, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90, 91, 92, 96, 101], "mi": [0, 5, 6, 7, 8, 55, 56, 65, 67, 69, 70, 99], "condit": [0, 4, 11, 12, 21, 22, 49, 50, 55, 56, 57, 61, 62, 65, 81, 82, 91, 92, 96, 99], "cmi": [0, 7, 8, 62, 65, 67], "specif": [0, 7, 8, 9, 10, 37, 38, 39, 42, 44, 45, 47, 49, 51, 89, 98], "multivari": [0, 5, 9, 10, 32, 38, 55, 56, 62, 63, 64, 67, 81, 82, 97], "gaussian": [0, 1, 3, 12, 17, 41, 55, 56, 57, 60, 62, 63, 64, 67, 90, 91, 92], "analyt": [0, 62, 63, 64, 65, 67], "solut": [0, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 62, 63, 64, 65], "entropi": [0, 42, 44, 45, 47, 49, 51, 55, 56, 62, 63, 64, 67, 73, 75, 77, 78, 79, 81], "distribut": [0, 5, 6, 7, 17, 21, 23, 32, 41, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 89, 90, 100, 101], "demonstr": [1, 4, 6, 8, 11, 12, 13, 14, 19, 20, 22, 26, 29, 30, 33, 36, 38, 39, 40, 57, 91, 92], "usag": [1, 2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 73, 74, 75, 76, 77, 92, 98], "honest": [1, 3, 6, 12, 44, 69, 70, 77, 86, 91, 92, 93], "obtain": [1, 12, 14, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 88, 92], "predict": [1, 2, 5, 9, 24, 27, 29, 33, 35, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 91], "plot": [1, 3, 6, 7, 8, 12, 14, 26, 28, 29, 30, 31, 33, 35, 36, 40, 88, 91, 92], "overlap": [1, 3, 12, 91, 92], "go": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39], "end": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "download": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 92], "full": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 60], "code": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 83, 84, 87, 92], "result": [2, 9, 10, 17, 31, 33, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 99], "variou": [2, 42, 43, 45, 47, 48, 49, 50, 51, 52], "method": [2, 12, 19, 23, 24, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 92, 98], "tree": [2, 5, 6, 7, 8, 9, 10, 14, 16, 20, 21, 22, 23, 28, 30, 31, 34, 35, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 87, 88, 91, 93, 94, 96, 97, 98, 99, 100, 101], "achiev": [2, 33, 43, 52, 86, 88], "see": [2, 6, 7, 8, 14, 20, 21, 27, 30, 31, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 90], "user": [2, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 96, 98], "guid": [2, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 90, 96], "isoton": 2, "irf": 2, "sigmoid": 2, "sigrf": 2, "regular": [2, 6, 7, 14, 23, 27, 30, 60, 71, 72], "without": [2, 41, 73, 74, 75, 76, 90], "rf": [2, 6, 7, 8, 14, 21, 22, 32, 34, 89], "show": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 37, 38, 39], "curv": [2, 89], "differ": [2, 5, 6, 7, 8, 9, 12, 14, 19, 24, 26, 29, 30, 33, 35, 36, 37, 41, 46, 58, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 91, 92, 93, 100, 101], "dataset": [2, 5, 6, 7, 8, 9, 10, 12, 13, 15, 17, 21, 23, 26, 28, 29, 32, 33, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 99, 101], "two": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 27, 30, 31, 33, 34, 37, 53, 54, 57, 60, 69, 70, 75, 76, 88, 89, 93, 96, 99], "red": 2, "line": [2, 21, 22], "closest": 2, "ideal": [2, 73, 74, 75, 76, 87], "figur": [2, 17, 27, 30, 38], "reproduc": [2, 41, 57, 58, 61, 101], "1": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94, 97], "ronan": [2, 49, 50, 81, 82, 86, 88, 96], "perri": [2, 49, 50, 81, 82, 86, 88, 96], "ronak": [2, 49, 50, 81, 82, 88], "mehta": [2, 49, 50, 81, 82, 88], "richard": 2, "guo": 2, "eva": 2, "yezeret": 2, "jes\u00fa": 2, "arroyo": [2, 49, 50, 81, 82, 88], "mike": 2, "powel": 2, "hayden": 2, "helm": 2, "cencheng": [2, 59, 88], "shen": [2, 59, 88], "joshua": [2, 49, 50, 54, 59, 81, 82, 88, 90], "t": [2, 6, 14, 17, 22, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 54, 58, 59, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90], "vogelstein": [2, 49, 50, 54, 59, 81, 82, 88, 90], "adapt": [2, 53, 54, 63, 86, 90], "estim": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 61, 63, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 96], "quantiti": [2, 86], "arxiv": [2, 59, 86], "2021": [2, 86], "1907": [2, 86], "00325": [2, 86], "import": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 93, 97], "necessari": [2, 87], "modul": [2, 37, 38, 39, 86], "librari": [2, 14, 94, 96], "matplotlib": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 87], "pyplot": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39], "plt": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39], "numpi": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 31, 32, 33, 37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87], "np": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "cm": [2, 27, 33, 37, 39], "sklearn": [2, 6, 7, 8, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 98], "calibratedclassifiercv": 2, "randomforestclassifi": [2, 14, 32, 34, 42, 43, 45, 47, 49, 71, 75], "model_select": [2, 14, 17, 21, 22, 23, 30, 31, 32, 34, 43, 73, 74, 75, 76, 77, 79, 80, 82], "train_test_split": [2, 17, 22, 23, 43, 69, 70, 75, 76], "honestforestclassifi": [2, 5, 6, 7, 8, 9, 10, 96, 98, 101], "defin": [2, 32, 37, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 65, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 99], "classifi": [2, 8, 33, 41, 42, 43, 44, 45, 47, 49, 51, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81], "color_dict": 2, "honestrf": 2, "f41711": 2, "1b9e77": 2, "377eb8": 2, "fdae61": 2, "n_estim": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 23, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70], "100": [2, 5, 6, 7, 8, 14, 17, 21, 30, 32, 34, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58], "n_job": [2, 5, 6, 7, 8, 9, 10, 14, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65], "2": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 94], "clf_cv": 2, "5": [2, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 94, 97], "max_featur": [2, 5, 6, 7, 8, 9, 10, 14, 21, 30, 31, 32, 34, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 99, 100, 101], "0": [2, 5, 6, 7, 8, 9, 10, 11, 14, 17, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 94], "rep": 2, "clf": [2, 17, 27, 30, 31, 32, 34, 41, 42, 44, 47, 51, 73, 77, 79, 89], "honest_fract": [2, 5, 6, 7, 8, 9, 10, 44, 77], "cv": [2, 14, 30, 31, 32, 34, 73, 74, 77, 79, 80, 82], "def": [2, 6, 14, 21, 22, 30, 31, 32, 34], "likelihood": [2, 90], "x": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90], "lik1": 2, "prod": 2, "exp": [2, 22, 55, 56], "asarrai": 2, "lik0": 2, "return": [2, 5, 6, 9, 10, 14, 17, 21, 22, 30, 31, 32, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "n_sampl": [2, 5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23, 32, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "60000": 2, "n_bin": 2, "3": [2, 6, 7, 8, 14, 17, 21, 22, 27, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 91, 94, 97], "calibration_curv": 2, "here": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 37, 38, 39, 44, 89, 92], "blob": 2, "where": [2, 5, 6, 7, 14, 27, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 62, 65, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 96, 98, 99, 100, 101], "second": [2, 5, 6, 7, 8, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 45, 57, 60, 78, 89], "contain": [2, 14, 17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "half": [2, 44], "posit": [2, 9, 10, 41, 42, 51, 73, 75, 77, 88, 90], "neg": [2, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "probabl": [2, 42, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 69, 70, 71, 72, 73, 75, 77, 78, 79, 81, 89], "therefor": [2, 44, 47, 48, 49, 50, 51, 52, 81, 82, 88, 89], "center": [2, 6, 7, 14, 17, 21, 23, 53, 54, 57, 83, 84], "y": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "make_blob": [2, 6, 14], "shuffl": [2, 5, 6, 7, 8, 33, 44, 47, 48, 50, 51, 52, 57, 61, 69, 70, 71, 72, 98], "fals": [2, 7, 8, 17, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 100, 101], "random_st": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 98], "42": [2, 17, 30, 31, 42, 43, 52, 57, 75, 76], "sample_weight": [2, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "randomst": [2, 17, 22, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 58, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "rand": [2, 17], "shape": [2, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 30, 31, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88], "train": [2, 5, 6, 7, 12, 20, 21, 23, 26, 28, 30, 31, 33, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 92, 98], "test": [2, 8, 11, 21, 22, 30, 31, 32, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 57, 60, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 86, 87, 91, 97, 98, 99], "x_train": [2, 17, 21, 22, 23, 43, 75, 76], "x_test": [2, 17, 20, 21, 22, 23, 43, 75, 76], "y_train": [2, 17, 20, 21, 22, 23, 43, 73, 74, 75, 76], "y_test": [2, 17, 21, 22, 23, 43, 75, 76], "sw_train": 2, "sw_test": 2, "test_siz": [2, 5, 6, 7, 8, 9, 10, 23, 69, 70, 71, 72], "9": [2, 8, 9, 15, 17, 20, 21, 23, 24, 27, 28, 30, 32, 33, 34, 35, 37, 38, 39, 40, 87, 91, 96], "class_one_prob": 2, "name": [2, 17, 23, 30, 31, 33, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "fit": [2, 17, 20, 21, 23, 27, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 101], "predict_proba": [2, 42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "fig": [2, 6, 7, 8, 14, 17, 21, 27, 30, 31, 32, 34, 37, 38, 39], "ax": [2, 6, 7, 8, 14, 17, 27, 30, 31, 32, 34, 37, 38, 39, 89], "subplot": [2, 6, 7, 8, 14, 17, 21, 27, 30, 31, 32, 33, 34, 37, 38, 39], "figsiz": [2, 6, 7, 8, 17, 21, 32, 37, 38, 39], "10": [2, 5, 6, 9, 10, 11, 14, 17, 20, 21, 22, 23, 30, 31, 32, 33, 37, 38, 39, 40, 42, 43, 45, 49, 50, 51, 52, 54, 57, 58, 60, 73, 74, 77, 78, 79, 80, 81, 82, 88, 89, 90, 91], "y_uniqu": 2, "uniqu": [2, 30, 31, 34, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "color": [2, 6, 7, 8, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39], "rainbow": 2, "linspac": [2, 14, 17, 22, 31], "this_i": 2, "zip": [2, 12, 14, 17, 20, 21, 27, 33, 92], "this_x": 2, "this_sw": 2, "scatter": [2, 17, 20, 27, 33, 38], "": [2, 6, 7, 8, 17, 27, 30, 32, 33, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 90], "50": [2, 8, 23, 30, 31, 33, 34, 74], "c": [2, 17, 21, 22, 27, 33, 63, 64, 73, 74, 76, 77, 79, 80, 81, 82, 87], "newaxi": 2, "alpha": [2, 6, 7, 8, 17, 21, 33, 38, 66, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "edgecolor": [2, 17, 27, 33], "k": [2, 6, 7, 8, 17, 20, 33, 42, 43, 46, 65, 83], "legend": [2, 6, 7, 8, 17, 20, 22, 23, 27, 32, 37], "loc": [2, 5, 9, 10, 20, 22, 23, 27, 32], "best": [2, 30, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "set_xtick": [2, 37, 39], "set_ytick": [2, 37, 39], "clf_name": 2, "prob": 2, "item": [2, 20, 21, 22, 23, 31], "order": [2, 21, 30, 31, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "lexsort": 2, "51": 2, "reshap": [2, 17, 23, 33, 37, 38, 39], "25": [2, 5, 20, 22, 33, 37, 38], "x_test_prob": 2, "linewidth": [2, 37], "l": [2, 21, 30, 31, 42, 43, 52, 73, 74, 75, 76, 77, 79, 80, 88, 89, 90], "r": [2, 17, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 65, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 89], "truth": [2, 17, 22, 89], "set_ylim": [2, 21], "05": [2, 5, 6, 7, 8, 24, 91], "set_xlabel": [2, 14, 21, 30, 34], "instanc": [2, 23, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97], "sort": [2, 17, 21, 30, 31, 34, 44, 46, 83, 90], "true": [2, 5, 6, 7, 9, 10, 17, 27, 30, 31, 32, 34, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 61, 62, 63, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 99], "p": [2, 5, 9, 10, 21, 30, 31, 32, 42, 43, 44, 45, 47, 49, 51, 52, 66, 69, 70, 75, 76], "set_ylabel": [2, 14, 21, 30, 34], "upper": [2, 21, 22], "left": [2, 21, 22, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "tight_layout": [2, 6, 7, 8, 17, 21, 27, 33], "savefig": [2, 32], "overlapping_gaussian": 2, "png": 2, "discuss": [2, 33], "well": [2, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "closer": [2, 60], "shown": [2, 62], "below": 2, "total": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91], "run": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 69, 70, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 98, 99], "time": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 36, 37, 39, 52, 53, 54, 66, 69, 70, 71, 72, 79, 80, 81, 82, 83, 85, 89, 92], "script": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39], "minut": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39], "11": [2, 3, 7, 11, 24, 74, 91, 96], "233": [2, 3, 91], "memori": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80], "76": 2, "mb": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 91], "jupyt": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 92], "notebook": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 92], "plot_overlapping_gaussian": [2, 3, 91], "ipynb": [2, 5, 6, 7, 8, 9, 10, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39], "python": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 87, 92], "sourc": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 92], "py": [2, 3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 17, 18, 20, 21, 22, 23, 24, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 91], "galleri": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 91, 92], "sphinx": [2, 5, 6, 7, 8, 9, 10, 12, 14, 17, 20, 21, 22, 23, 27, 30, 31, 32, 33, 34, 37, 38, 39, 92], "00": [3, 11, 15, 18, 24, 25, 28, 35, 40, 74, 91], "execut": [3, 11, 15, 18, 24, 25, 28, 35, 40, 91], "file": [3, 11, 15, 18, 24, 25, 28, 35, 40, 87, 91], "auto_exampl": [3, 11, 15, 18, 24, 25, 28, 35, 40], "calibr": [3, 86, 89, 91], "mem": [3, 11, 15, 18, 24, 25, 28, 35, 40, 91], "75": [3, 20, 37, 91, 97], "6": [3, 7, 11, 17, 24, 30, 31, 32, 34, 35, 37, 38, 39, 41, 58, 86, 91, 94], "statist": [4, 5, 6, 7, 12, 23, 44, 58, 60, 69, 70, 71, 72, 73, 74, 77, 79, 80, 86, 88, 89, 92, 99], "co": [4, 11, 12, 57, 66, 91, 92], "might": [4, 11, 12, 42, 44, 45, 47, 48, 49, 51, 53, 54, 57, 89, 91, 92], "when": [4, 6, 7, 11, 12, 14, 17, 20, 30, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 91, 92, 94, 97, 98, 99, 100, 101], "exhibit": [4, 11, 12, 91, 92], "independ": [4, 7, 11, 12, 66, 69, 70, 89, 91, 92], "partial": [4, 6, 11, 12, 91, 92], "auc": [4, 6, 11, 12, 91, 92, 99], "genuin": [4, 8, 11, 12, 57, 91, 92], "multi": [4, 6, 7, 8, 11, 15, 36, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 75, 77, 78, 79, 81, 86, 91, 93, 96, 98, 99], "view": [4, 6, 7, 8, 11, 15, 36, 40, 45, 57, 58, 78, 86, 91, 98, 99, 100, 101], "mv": [4, 6, 7, 8, 11, 12, 91, 92], "imbalanc": [4, 11, 12, 91, 92], "featureimportanceforestclassifi": [5, 6, 7, 8, 9, 10, 71, 72, 98, 100, 101], "nonparametr": [5, 9, 10], "present": [5, 9, 10, 17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 83, 84, 89], "set": [5, 6, 7, 8, 10, 14, 17, 30, 31, 33, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 98, 99], "target": [5, 6, 7, 8, 9, 10, 14, 21, 23, 27, 33, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89], "framework": [5, 6, 7], "1000": [5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 31, 32, 44, 47, 51, 66, 67, 68, 69, 70, 71, 72], "500": [5, 9, 10, 14], "binari": [5, 9, 10, 17, 32, 55, 56], "variabl": [5, 6, 7, 8, 9, 10, 14, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 62, 66, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89], "within": [5, 38, 44, 46, 53, 54, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87], "each": [5, 6, 7, 9, 14, 20, 21, 22, 23, 27, 30, 31, 33, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 99, 100, 101], "associ": [5, 9, 42, 44, 45, 47, 49, 51, 54, 73, 75, 77, 78, 79, 81, 89, 90], "one": [5, 6, 7, 9, 14, 17, 20, 21, 22, 23, 37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 61, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 99, 100, 101], "anoth": [5, 9, 89, 100, 101], "One": [5, 6, 7, 9, 17, 69, 70, 73, 74, 75, 76], "could": [5, 9, 65, 73, 74, 75, 76], "think": [5, 9], "collect": [5, 9, 14, 17, 20, 21, 22, 23, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 61, 77], "same": [5, 6, 7, 8, 9, 20, 21, 22, 23, 27, 37, 38, 39, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 75, 77, 78, 79, 81, 82, 85, 88, 89, 99], "patient": [5, 9], "biomed": [5, 9], "first": [5, 6, 7, 8, 9, 10, 14, 27, 32, 33, 37, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 60, 61, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 99], "strongli": [5, 9, 10], "correl": [5, 9, 10, 14], "w": [5, 9, 10, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "weakli": [5, 9, 10], "null": [5, 6, 7, 69, 70, 71, 72, 100, 101], "h0": 5, "ha": [5, 7, 8, 9, 10, 14, 33, 34, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 96, 97, 98, 99, 100, 101], "respect": [5, 33, 37, 69, 70, 78, 88, 90], "For": [5, 6, 14, 17, 20, 27, 30, 31, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 65, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 97], "follow": [5, 6, 7, 8, 20, 21, 30, 31, 34, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 60, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90], "our": [5, 6, 8, 30, 37, 38, 39, 86, 89], "uninform": 5, "complet": [5, 6], "disconnect": 5, "d": [5, 17, 20, 21, 22, 23, 30, 31, 37, 39, 42, 43, 52, 57, 60, 62, 63, 64, 67, 75, 76], "separ": [5, 30, 44, 75, 76], "given": [5, 17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90], "scipi": [5, 9, 10, 23, 49, 50, 61, 81, 82, 87], "special": [5, 9, 10, 89], "expit": [5, 9, 10], "stat": [5, 6, 7, 8, 9, 10, 23, 73, 74, 77, 79, 80, 100, 101], "decisiontreeclassifi": [5, 6, 7, 8, 9, 10, 27, 33, 37, 39, 42, 44, 51, 74, 75, 77, 78, 79, 80, 81], "seed": [5, 6, 7, 8, 9, 10, 14, 22, 32, 33, 53, 54, 55, 56, 59, 60, 65, 66, 67, 68, 71, 72], "12345": [5, 6, 7, 8, 9, 10, 14], "rng": [5, 6, 7, 8, 9, 10, 14, 17, 21, 22, 23], "default_rng": [5, 6, 7, 8, 9, 10, 14, 67], "them": [5, 6, 7, 8, 9, 10, 17, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 88], "singl": [5, 6, 7, 8, 9, 10, 27, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "2000": [5, 30], "n_features_set": [5, 9, 10], "20": [5, 7, 8, 17, 32, 33, 41, 45, 54, 78, 90], "sigma": [5, 9, 10, 22, 90], "beta": [5, 9, 10], "unimportant_mean": [5, 9, 10], "unimportant_sigma": [5, 9, 10], "4": [5, 6, 7, 9, 10, 11, 17, 18, 21, 24, 27, 32, 37, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 91, 94], "uniform": [5, 9, 10, 17, 22, 32, 44, 57, 60, 65, 66, 68, 77], "x_import": [5, 9, 10], "normal": [5, 6, 9, 10, 17, 23, 30, 31, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 60, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 96], "scale": [5, 9, 10, 21, 23, 58, 99], "hstack": [5, 6, 7, 8, 9, 10, 14], "x_unimport": [5, 9, 10], "binomi": [5, 9, 10], "n": [5, 6, 7, 8, 9, 10, 17, 25, 30, 31, 34, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 90, 96], "sum": [5, 9, 10, 14, 32, 37, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "metric": [5, 6, 7, 8, 9, 10, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 65, 69, 70, 71, 72, 73, 75, 77, 78, 79, 81, 86, 90, 99, 100, 101], "between": [5, 6, 7, 8, 12, 14, 20, 21, 26, 30, 31, 32, 34, 37, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 92], "origin": [5, 6, 7, 30, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89], "permut": [5, 6, 7, 21, 44, 47, 48, 49, 50, 51, 52, 61, 69, 70, 71, 72, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 88, 97, 99], "row": [5, 6, 7, 33, 38, 69, 81, 82, 99], "covariate_index": [5, 6, 7, 8, 69, 70, 71, 72, 99], "randomli": [5, 6, 7, 17, 30, 37, 39, 41, 44, 47, 48, 49, 50, 51, 52, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "effici": [5, 6, 7, 41, 46, 53, 54, 69, 70, 71, 72, 74, 76, 80, 82, 83, 94, 95, 96, 97, 98, 99, 100, 101], "manner": [5, 6, 7, 89], "posterior": [5, 6, 7, 44, 69, 70, 71, 72, 77], "n_repeat": [5, 6, 7, 8, 30, 31, 32, 34, 69, 70, 71, 72], "pvalu": [5, 6, 7, 8, 71, 72], "proport": [5, 6, 7, 41, 42, 44, 45, 47, 49, 51, 69, 70, 71, 72, 73, 75, 77, 78, 79, 81], "less": [5, 6, 7, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "than": [5, 6, 7, 23, 30, 31, 32, 33, 37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 99], "observ": [5, 6, 7, 9, 10, 17, 21, 22, 41, 63, 71, 72], "sqrt": [5, 6, 9, 10, 14, 30, 31, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97, 99], "est": [5, 6, 7, 8, 9, 10, 20], "tree_estim": [5, 6, 7, 8, 9, 10, 44, 77], "thu": [5, 6, 9, 10, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 79, 80, 88, 89, 90], "should": [5, 6, 7, 9, 10, 30, 31, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87], "arang": [5, 6, 7, 8, 20, 21, 33, 37, 38, 39], "dtype": [5, 6, 7, 8, 17, 34, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "int": [5, 6, 7, 8, 14, 17, 21, 30, 31, 34, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "print": [5, 6, 7, 8, 9, 10, 30, 32, 33, 34, 37, 38, 39, 44, 47, 48, 50, 51, 52, 57], "f": [5, 6, 7, 8, 9, 10, 17, 22, 27, 30, 32, 34, 38], "unimport": [5, 6], "015040594336712287": 5, "001998001998001998": [5, 6], "0026866694904621735": 5, "7562437562437563": 5, "tim": [5, 6, 7, 69, 70], "coleman": [5, 6, 7, 60, 69, 70], "wei": [5, 6, 7, 69, 70], "peng": [5, 6, 7, 69, 70], "luca": [5, 6, 7, 69, 70], "mentch": [5, 6, 7, 69, 70], "scalabl": [5, 6, 7, 69, 70], "journal": [5, 6, 7, 48, 49, 50, 69, 70, 81, 82, 86, 88], "machin": [5, 6, 7, 30, 31, 42, 43, 44, 47, 48, 51, 52, 69, 70, 75, 76, 86, 88, 89], "learn": [5, 6, 7, 27, 29, 30, 31, 33, 42, 43, 44, 47, 48, 51, 52, 53, 54, 59, 69, 70, 73, 74, 75, 76, 77, 79, 80, 83, 84, 86, 87, 88, 89, 90], "research": [5, 6, 7, 48, 69, 70, 86, 88], "23": [5, 6, 7, 43, 48, 50, 52, 69, 70, 74, 76, 80, 82, 87], "7679": [5, 6, 7, 69, 70], "7713": [5, 6, 7, 69, 70], "2022": [5, 6, 7, 69, 70, 83, 86], "26": [5, 11, 14, 58, 91], "802": [5, 11, 91], "plot_mi_genuine_hypothesis_testing_forest": [5, 11, 91], "do": [6, 7, 12, 16, 33, 37, 38, 39, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 92], "highli": [6, 17, 97], "term": [6, 65, 66, 89, 90], "smaller": [6, 9, 10, 42, 43, 44, 51, 52, 73, 74, 75, 76, 77], "instead": [6, 14, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "leverag": 6, "knowledg": [6, 17, 41, 54, 89, 90], "analyz": [6, 12, 13, 15, 37, 38, 91, 92], "multiviewdecisiontreeclassifi": [6, 7, 8, 10, 37, 99, 100, 101], "graphic": [6, 7, 8, 66], "x_1": [6, 7, 8, 57], "rightarrow": [6, 7, 8, 66], "x_2": [6, 7, 8], "signal": [6, 8, 14, 58], "nois": [6, 7, 14, 17, 22, 57, 58, 59, 60, 66, 68], "low": [6, 7, 8, 14, 17, 21, 30, 31, 58], "make_multiview_classif": [6, 14], "n_features_1": [6, 8, 14], "n_features_2": [6, 7, 8, 14], "cluster_std": [6, 14], "none": [6, 10, 14, 32, 33, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "multiview": [6, 14, 15, 57, 91], "subspac": [6, 14, 65], "x0_first": [6, 14], "y0": [6, 14], "n_featur": [6, 7, 8, 14, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89], "integ": [6, 14, 41, 42, 44, 45, 47, 49, 51, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 100, 101], "10000": [6, 14, 21, 31], "center_box": 6, "x1_first": [6, 14], "y1": [6, 14, 68], "add": [6, 14, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 57, 59, 66, 68, 96, 98, 99], "x0": [6, 14], "concaten": [6, 14, 17, 20, 21, 78], "standard_norm": [6, 7, 8, 14], "x1": [6, 14], "vstack": [6, 14], "10_000": [6, 51, 52], "n_features_view": [6, 14], "200": [6, 7, 8, 17, 101], "10010": 6, "feature_set_end": [6, 7, 8, 10, 14, 37, 45, 78], "apply_max_features_per_feature_set": [6, 7, 8, 37, 45, 78, 100, 101], "mv_result": [6, 7, 8], "dict": [6, 7, 8, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "overal": [6, 88], "v": [6, 12, 14, 19, 24, 29, 30, 35, 43, 44, 48, 50, 52, 59, 60, 74, 76, 80, 82, 88, 89, 91, 92], "feature_stat": 6, "feature_pvalu": 6, "important_feature_stat": 6, "important_feature_pvalu": 6, "unimportant_feature_stat": 6, "unimportant_feature_pvalu": 6, "007719008004977823": 6, "007713833056419039": 6, "000999000999000999": [6, 7], "00010913275452317794": 6, "5974025974025974": 6, "let": [6, 7, 8, 89], "investig": [6, 7, 8], "what": [6, 7, 8, 33, 37, 38, 39, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "happen": [6, 7, 8], "paramet": [6, 7, 8, 14, 21, 27, 30, 31, 32, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 97], "kept": [6, 7, 14], "ensur": 6, "max": [6, 17, 21, 33, 41, 42, 43, 51, 52, 53, 54, 73, 74, 75, 76, 83, 84, 89], "across": [6, 32, 37, 39, 41, 42, 44, 45, 47, 49, 51, 53, 54, 57, 58, 61, 70, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84], "rf_result": [6, 7, 8], "nanalyz": 6, "bar": [6, 7, 8, 37, 39], "axhlin": [6, 7, 8], "linestyl": [6, 7, 8], "ylabel": [6, 7, 8, 20, 22, 23, 27, 37, 39], "log10": [6, 7, 8], "xlim": [6, 7, 8, 17, 20, 38], "yscale": [6, 7, 8], "log": [6, 7, 8, 42, 44, 45, 47, 49, 51, 63, 64, 73, 75, 78, 79, 81, 89, 90], "00021117234595469103": 6, "7": [6, 9, 17, 32], "50656276637951e": 6, "06": [6, 74], "00025189663881775015": 6, "abl": [6, 7, 87, 92, 99], "detect": [6, 17, 41, 86], "becaus": [6, 14, 37, 43, 44, 46, 48, 50, 52, 74, 76, 80, 82, 89], "challeng": 6, "rare": 6, "unabl": [6, 17, 99], "its": [6, 9, 10, 33, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 73, 75, 77, 78, 79, 81, 89], "note": [6, 30, 33, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 94], "both": [6, 7, 8, 14, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 57, 69, 70, 71, 72, 73, 75, 89], "approach": [6, 30, 88], "fail": [6, 8], "reject": [6, 7, 8], "higher": [6, 7, 8, 9, 10, 20, 31, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 88, 89], "41": [6, 11, 91], "505": [6, 11, 91], "103": [6, 11, 91], "plot_mi_imbalanced_hyppo_test": [6, 11, 91], "To": [7, 8, 20, 30, 37, 38, 39, 42, 43, 44, 47, 48, 49, 50, 51, 52, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 92], "h_0": [7, 8], "h_1": [7, 8], "process": [7, 30, 41, 44, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97], "had": 7, "perfect": 7, "properli": 7, "standard": [7, 8, 12, 17, 19, 24, 29, 30, 31, 32, 34, 35, 39, 46, 57, 65, 67, 81, 82, 89, 91, 92], "explor": [7, 88], "case": [7, 14, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 89, 98, 100, 101], "altern": [7, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "determin": [7, 30, 41, 43, 48, 50, 52, 61, 74, 76, 80, 82, 89], "correctli": [7, 42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81, 100, 101], "doe": [7, 8, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 65, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88, 89], "exactli": [7, 81, 82, 88], "yet": 7, "sinc": [7, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 96, 97, 98, 99, 100, 101], "make_spd_matrix": 7, "make_gaussian_mixtur": 7, "noise_dim": [7, 8, 57], "80": [7, 8], "class_prob": [7, 55, 56, 57], "fixed_cent": 7, "covari": [7, 17, 41, 55, 56, 57, 60, 62, 63, 64, 65, 67, 69, 70, 71, 72, 98, 101], "n_dim": [7, 55, 56, 60], "123": [7, 30, 31, 33], "transform": [7, 53, 54, 57, 58, 65, 83, 84], "second_x": 7, "first_x": 7, "n_features_end": [7, 8], "1100": [7, 8], "sample_dataset_per_tre": [7, 8, 9, 10, 69, 70], "lower": [7, 8, 20, 21, 27, 41, 44, 66, 68, 73, 74, 75, 76, 77, 89], "low_dim_feature_stat": [7, 8], "low_dim_feature_pvalu": [7, 8], "analysi": [7, 89], "high_dim_feature_stat": [7, 8], "high_dim_feature_pvalu": [7, 8], "009982498466282963": 7, "0008142171799750964": 7, "6213786213786214": 7, "nanalys": 7, "now": [7, 8, 14, 30, 31, 32, 33, 34, 38, 87, 96, 99, 100, 101], "dim": [7, 8, 30, 31, 38], "analys": 7, "004356557107899395": 7, "04695304695304695": 7, "0013859613186406605": 7, "7102897102897103": 7, "answer": 7, "neither": 7, "nor": 7, "u": [7, 14, 21, 43, 48, 50, 52, 58, 74, 76, 80, 82, 87, 88], "level": [7, 33, 61], "28": [7, 11, 91], "546": [7, 11, 91], "plot_co_might_altern": [7, 11, 91], "perp": 8, "verifi": 8, "make_classif": [8, 42, 44, 47, 51], "signal_x": 8, "n_inform": [8, 44, 47, 48, 50, 51, 52, 60], "n_redund": [8, 44, 47, 51], "n_class": [8, 27, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "class_sep": 8, "flip_i": 8, "01": [8, 24, 33, 35, 38, 91], "either": [8, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 101], "procedur": [8, 61, 89], "abov": [8, 78], "make": [8, 14, 21, 30, 38, 88, 96, 98], "_x": 8, "copi": [8, 17, 27, 61], "rf_est": 8, "nimport": 8, "depend": [8, 14, 30, 31, 66, 86], "0005043866821097254": 8, "2897102897102897": 8, "8": [8, 10, 11, 17, 21, 30, 34, 35, 38, 52, 66, 77, 91], "607395727067146e": 8, "9170829170829171": 8, "ncompar": 8, "black": [8, 22, 27, 33, 37, 38], "grai": 8, "green": [8, 37, 39], "blue": [8, 21, 22], "titl": [8, 17, 27, 33, 37, 38, 39], "00040413552453044677": 8, "4595404595404595": 8, "00034490828020194986": 8, "5334665334665335": 8, "nset": 8, "90517887221598e": 8, "977022977022977": 8, "603475244135407e": 8, "8921078921078921": 8, "again": 8, "0005332704695734103": 8, "1938061938061938": 8, "00011515246297311155": 8, "916083916083916": 8, "contrast": [8, 30, 33, 37, 39, 88, 89], "58": [8, 11, 91], "021": [8, 11, 91], "54": [8, 11, 91], "plot_co_might_nul": [8, 11, 91], "calcul": [9, 10, 21, 38, 85, 90], "you": [9, 10, 14, 34, 37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 92], "specifi": [9, 10, 37, 38, 42, 44, 45, 47, 49, 51, 57, 58, 73, 75, 77, 78, 79, 81, 89], "maximum": [9, 10, 21, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90], "modifi": [9, 10], "max_fpr": [9, 10], "125": [9, 10, 38, 97], "permute_forest_fract": [9, 10, 69, 70], "posterior_arr": [9, 10], "return_posterior": [9, 10, 69, 70, 71, 72], "ash": [9, 10], "90": [9, 10, 41], "5470205935322214": 9, "expect": [9, 10, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 65, 69, 70, 71, 72, 74, 76, 79, 80, 81, 82, 88], "due": [9, 10, 30, 34, 63], "weak": [9, 42, 43, 51, 52], "5164002324345042": 9, "anytim": [9, 10], "pickl": [9, 10, 89], "observe_stat_": [9, 10, 69, 70], "observe_samples_": [9, 10], "observe_posteriors_": [9, 10, 69, 70], "n_tree": [9, 10], "n_samples_test": [9, 10, 69, 70], "y_true_final_": [9, 10, 69, 70], "162": [9, 11, 91], "207": [9, 11, 91], "plot_might_auc": [9, 11, 91], "hypothesi": [10, 11, 57, 60, 69, 70, 71, 72, 86, 91, 97, 98, 99], "mutli": 10, "auroc": 10, "510": 10, "est_mv": 10, "22": [10, 42, 43, 46, 51, 52, 73, 74, 75, 76, 91], "5537834485202906": 10, "lack": 10, "5746436799068378": 10, "573": [10, 11, 91], "388": 10, "plot_might_mv_auc": [10, 11, 91], "02": [11, 27, 74], "52": 11, "610": 11, "hypothesis_test": [11, 91], "09": [11, 18, 35, 91], "08": [11, 41, 91], "387": [11, 91], "scikit": [12, 27, 37, 53, 54, 83, 84, 87, 88, 89, 94], "algorithm": [12, 17, 30, 41, 46, 53, 54, 65, 69, 70, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 92], "variant": [12, 13, 14, 19, 92], "concern": [12, 16, 92], "extendedisolationforest": [12, 16, 18, 91, 92], "interpol": [12, 19, 24, 37, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 91, 92], "interv": [12, 19, 20, 22, 24, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 89, 91, 92], "regressor": [12, 19, 23, 24, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 72, 73, 74, 75, 76, 80, 82, 91, 92], "surfac": [12, 26, 28, 29, 35, 38, 39, 91, 92], "iri": [12, 26, 28, 33, 73, 77, 79, 89, 91, 92], "extra": [12, 29, 34, 35, 39, 42, 43, 75, 76, 91, 92, 97], "cc18": [12, 29, 35, 39, 88, 91, 92], "pariti": [12, 29, 35, 88, 91, 92], "speed": [12, 29, 30, 35, 52, 90, 91, 92, 97], "strategi": [12, 36, 44, 51, 52, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92], "visual": [12, 36, 38, 39, 40, 91, 92], "matrix": [12, 14, 36, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 62, 63, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 91, 92], "matric": [12, 36, 37, 40, 41, 53, 54, 58, 60, 61, 89, 91, 92, 96], "seri": [12, 36, 40, 81, 82, 91, 92], "auto_examples_python": [12, 92], "auto_examples_jupyt": [12, 92], "multiviewrandomforestclassifi": 14, "uniformli": [14, 32, 37, 38], "vastli": 14, "number": [14, 17, 32, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 98, 99, 100, 101], "If": [14, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 61, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "known": [14, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "pass": [14, 31, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 96, 100, 101], "via": [14, 27, 59, 79, 80, 83, 86, 87, 88, 96, 98, 99, 101], "splitter": [14, 40, 44, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 91, 98], "project": [14, 17, 27, 34, 36, 40, 45, 47, 48, 79, 80, 86, 88, 89, 91, 96, 97, 98, 99, 100, 101], "defaultdict": [14, 20, 21, 22, 23], "panda": [14, 30, 31, 32, 33, 34, 53, 54, 59, 83, 84, 96, 97, 98], "pd": [14, 30, 31, 32, 33, 34, 67], "seaborn": [14, 30, 31, 32, 34], "sn": [14, 30, 31, 32, 34], "cross_val_scor": [14, 73, 74, 77, 79, 80, 82], "cluster_std_first": 14, "cluster_std_second": 14, "home": [14, 27], "circleci": [14, 27], "plot_multiview_dtc": [14, 15, 91], "deprecationwarn": 14, "pyarrow": 14, "becom": [14, 60], "requir": [14, 17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "next": [14, 33, 45, 78, 87], "major": [14, 89, 94, 95, 96, 97, 98, 99, 100, 101], "releas": [14, 86, 97, 98, 100], "type": [14, 30, 31, 33, 34, 44, 60, 69, 70, 71, 72, 77, 89, 96], "arrow": 14, "string": [14, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "better": [14, 23, 79, 80, 88, 89], "interoper": 14, "wa": [14, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 70, 71, 72, 83, 84, 89, 99], "found": [14, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "instal": [14, 86], "system": 14, "would": [14, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 99], "caus": 14, "problem": [14, 32, 42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81, 86, 93], "pleas": [14, 17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "feedback": 14, "http": [14, 30, 31, 32, 34, 54, 58, 60, 73, 74, 77, 79, 80, 87, 88, 89, 90], "github": [14, 17, 87], "com": [14, 87], "dev": [14, 87], "issu": [14, 99], "54466": 14, "five": 14, "dimens": [14, 30, 31, 32, 37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 60, 61, 66, 81, 82, 83, 84, 89], "vari": [14, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "thousand": 14, "fix": [14, 44, 47, 48, 49, 50, 51, 52, 65, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101], "so": [14, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "20000": 14, "astyp": [14, 30, 31, 32, 34, 37, 38, 39], "portion": 14, "increasingli": 14, "idx": [14, 20, 21, 22, 23, 27, 33, 38], "enumer": [14, 20, 21, 22, 23, 27, 30, 31, 32, 34, 38, 44, 47, 48, 49, 50, 51, 52], "append": [14, 17, 20, 21, 22, 23, 30, 31, 32, 34], "over": [14, 17, 37, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 57, 73, 75, 77, 78, 81, 82, 88, 99], "list": [14, 20, 21, 22, 23, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "arrai": [14, 17, 20, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 100, 101], "mvrf": 14, "cross": [14, 89], "valid": [14, 21, 23, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "rf_score": 14, "mvrf_score": 14, "len": [14, 17, 20, 21, 22, 23, 33, 37, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "70": [14, 96], "122": 14, "141": 14, "experi": 14, "df": [14, 30, 31, 32, 34], "datafram": [14, 30, 31, 32, 33, 34, 53, 54, 61, 83, 84], "melt": 14, "easier": [14, 98], "id_var": 14, "var_nam": 14, "value_nam": 14, "lineplot": [14, 31], "marker": [14, 21, 38], "o": [14, 17, 20, 30, 38, 60, 83, 89, 96, 97], "hue": [14, 31], "set_titl": [14, 17, 30, 31, 32, 34], "As": [14, 34, 37, 39, 60, 71, 72, 85, 89], "outperform": [14, 34, 89], "increas": [14, 21, 30, 31, 42, 43, 46, 51, 52, 58, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 88], "kei": [14, 37, 73, 74, 75, 76], "43": [14, 15, 91], "743": [14, 15, 91], "712": 14, "711": [15, 91], "anomali": [17, 41], "isolationforest": [17, 41], "demo": 17, "toi": 17, "randn": [17, 23], "spheric": 17, "slightli": 17, "deform": 17, "notat": 17, "inlier": [17, 41], "assign": [17, 83, 84, 90], "ground": [17, 22, 89], "wherea": [17, 52, 66, 89], "outlier": [17, 41, 86], "inspect": [17, 27, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "decisionboundarydisplai": [17, 27], "n_outlier": 17, "120": 17, "40": [17, 32, 35], "cluster_1": 17, "cluster_2": 17, "ones": [17, 37, 38, 39], "stratifi": [17, 44, 61, 69, 77, 98], "handl": [17, 89, 100, 101], "legend_el": 17, "squar": [17, 38, 43, 48, 50, 52, 74, 76, 80, 82, 99], "nuniformli": 17, "extended_clf": 17, "max_sampl": [17, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "feature_combin": [17, 37, 38, 39, 41, 45, 47, 48, 53, 78, 79, 80, 84, 88, 89], "environ": [17, 87], "rerun": 17, "cell": 17, "html": [17, 88], "represent": 17, "trust": 17, "On": [17, 69, 70], "render": 17, "try": [17, 89], "load": [17, 21, 27, 33, 34, 58], "page": [17, 87, 94, 98], "nbviewer": 17, "org": [17, 30, 31, 32, 34, 54, 58, 60, 73, 74, 77, 79, 80, 88, 89, 90], "nbsp": 17, "document": [17, 86, 88], "isolationforestifittedisolationforest": 17, "background": 17, "repres": [17, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "whether": [17, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "area": [17, 22], "displai": [17, 27], "isoforest": 17, "extendedisoforest": 17, "disp": 17, "from_estim": [17, 27], "response_method": [17, 27], "ax_": 17, "nof": 17, "By": [17, 42, 43, 44, 51, 52, 53, 54, 60, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 88], "decision_funct": [17, 41], "measur": [17, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90], "Such": 17, "score": [17, 30, 31, 32, 33, 34, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "averag": [17, 30, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 65, 78, 79, 80, 84, 88], "itself": [17, 32, 42, 44, 45, 47, 49, 51, 53, 54, 65], "depth": [17, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "equival": [17, 41, 43, 45, 47, 48, 51, 52, 79, 80, 89], "short": 17, "particular": [17, 41, 89], "close": [17, 41, 49, 50, 81, 82, 86, 88], "similarli": [17, 89], "larg": [17, 30, 31, 34, 42, 43, 44, 47, 48, 49, 50, 51, 52, 60, 73, 74, 75, 76, 77, 79, 80], "correspond": [17, 20, 21, 22, 23, 27, 33, 42, 44, 45, 47, 49, 50, 51, 58, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "colorbar": [17, 37, 39], "sinusoid": 17, "ad": [17, 41, 42, 43, 51, 52, 53, 54, 57, 66, 73, 74, 75, 76, 83, 84, 89, 96, 97, 98], "top": [17, 21, 33, 86, 88], "pi": [17, 64, 66, 90], "sin": [17, 22, 57, 66], "add_subplot": [17, 38], "111": [17, 22], "30": [17, 30, 31, 45, 74, 78], "ylim": [17, 38], "15": [17, 20, 21, 27, 33], "circl": 17, "locat": 17, "bottom": 17, "right": [17, 21, 23, 27, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "corner": 17, "inlier_sampl": 17, "outlier_sampl": 17, "theta": [17, 89], "estimators_": [17, 33, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "max_tree_depth": 17, "get_depth": [17, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "rang": [17, 20, 21, 22, 23, 27, 30, 32, 33, 38, 41, 46, 81, 82], "polar": [17, 53, 54, 83, 84], "radii_in": 17, "radii_out": 17, "get": [17, 20, 21, 22, 23, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "radii": 17, "lw": [17, 21, 22], "b": [17, 33, 58], "max_depth_tre": 17, "leaf_index": 17, "appli": [17, 20, 21, 22, 23, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 60, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 99, 100, 101], "_decision_path_length": 17, "squeez": [17, 38], "j": [17, 20, 44, 60, 73, 74, 77, 79, 80, 87, 89], "nnomin": 17, "round": [17, 21, 32, 44, 45, 47, 48, 49, 50, 51, 52, 100, 101], "var": 17, "xlabel": [17, 20, 22, 23, 27, 37, 39], "set_xticklabel": [17, 37, 39], "get_xaxi": 17, "set_vis": 17, "get_yaxi": 17, "sahand": 17, "hariri": 17, "matia": 17, "carrasco": 17, "kind": 17, "robert": [17, 58], "brunner": 17, "ieee": [17, 41, 60, 63], "transact": [17, 41], "engin": 17, "33": [17, 33, 35, 76, 91], "1479": 17, "1489": 17, "2019": [17, 44, 77], "011": [17, 18, 91], "19": [17, 18, 40, 42, 43, 51, 52, 73, 74, 75, 76, 91], "plot_extended_isolation_forest": [17, 18, 91], "outlier_detect": [18, 91], "comparison": [20, 30, 31, 32, 34, 51, 52], "dure": [20, 30, 38, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "desir": [20, 23, 70, 89], "li": [20, 21, 22, 23, 49, 50, 54, 81, 82, 86, 88, 90, 96, 97, 98, 99, 100, 101], "point": [20, 21, 27, 32, 33, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90], "randomforestregressor": [20, 21, 22, 42, 43, 48, 50, 69, 70, 72, 75], "four": [20, 30, 42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "simpl": [20, 27, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "illustr": 20, "midpoint": 20, "detail": [20, 30, 31, 32, 34, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "006aff": [20, 21, 22], "ffd237": 20, "0d4599": 20, "f2a619": [20, 21, 22], "a6e5ff": [20, 23], "025": [20, 21, 22], "975": [20, 21, 22], "y_median": 20, "y_err": 20, "fell": [20, 21, 22, 23], "leaf_id": [20, 21, 22, 23], "dictionari": [20, 21, 22, 23, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "map": [20, 21, 22, 23, 33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "node_to_indic": [20, 21, 22, 23], "id": [20, 21, 22, 23, 30, 31, 34], "fall": [20, 21, 22, 23, 42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "leaf_ids_test": [20, 21, 22, 23], "y_pred_quantil": [20, 21, 23], "merg": [20, 21, 22, 23], "sublist": [20, 21, 22, 23], "quatil": [20, 21, 22, 23], "predit": [20, 21, 22, 23], "y_pred": [20, 21, 22, 42, 43, 48, 50, 51, 52, 74, 76, 80, 82], "sc": 20, "35": [20, 30, 35, 91], "zorder": 20, "eb": 20, "median": [20, 21, 22, 23, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "errorbar": 20, "yerr": 20, "ecolor": 20, "fmt": 20, "xtick": 20, "tolist": 20, "actual": [20, 23, 37, 38, 39, 41], "150": [20, 24, 91], "plot_quantile_interpolation_with_rf": [20, 24, 91], "california": 21, "hous": 21, "being": [21, 46, 57, 89], "95": [21, 22], "bound": [21, 38, 66, 68], "ticker": 21, "funcformatt": 21, "kfold": 21, "util": [21, 23, 34, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "check_random_st": [21, 23], "argument": [21, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 98, 99, 100, 101], "ani": [21, 38, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 96], "variat": [21, 32], "get_quantile_predict": 21, "dollar_formatt": 21, "lambda": [21, 89], "format": [21, 33, 37, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 83, 84], "price": 21, "fetch_california_h": 21, "min": [21, 33, 41], "perm": 21, "kf": 21, "n_split": [21, 30, 31, 32, 34], "get_n_split": 21, "y_true": [21, 42, 43, 48, 50, 51, 52, 74, 76, 80, 82], "y_pred_low": [21, 22], "y_pred_upp": [21, 22], "train_index": 21, "test_index": 21, "set_param": [21, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "y_pred_i": 21, "dollar": 21, "1e5": 21, "confid": [21, 22, 44, 89], "against": 21, "segment": [21, 83], "halfwai": 21, "ax1": 21, "ax2": 21, "nrow": [21, 38], "ncol": [21, 38], "y_pred_interv": 21, "sort_idx": 21, "argsort": 21, "y_min": [21, 33], "minimum": [21, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "y_max": [21, 33], "float": [21, 30, 31, 32, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "mid": 21, "upp": 21, "e0f2ff": [21, 22], "m": [21, 22, 49, 50, 58, 81, 82, 86, 88, 89], "_": [21, 27], "grei": 21, "grid": [21, 32, 33, 38], "xaxi": 21, "set_major_formatt": 21, "yaxi": 21, "set_xlim": 21, "fill_between": [21, 22], "subplots_adjust": 21, "pad": [21, 27, 33], "402": [21, 24, 91], "plot_quantile_regression_intervals_with_rf": [21, 24, 91], "function": [22, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 61, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88, 89, 100, 101], "noisi": [22, 32, 57, 58], "make_toy_dataset": 22, "lognorm": 22, "atleast_2d": 22, "xx": [22, 33], "max_depth": [22, 30, 31, 32, 33, 34, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "y_pred_quatil": 22, "y_pred_m": 22, "shade": 22, "dot": [22, 57], "ravel": [22, 33], "619": [22, 24, 91], "plot_quantile_toy_example_with_rf": [22, 24, 91], "synthet": 23, "skew": 23, "sp": 23, "obliquerandomforestregressor": [23, 88, 96], "5000": 23, "skewnorm_rv": 23, "skewnorm": 23, "rv": 23, "regr_orf": 23, "y_pred_orf": 23, "idea": 23, "off": [23, 32, 66], "c0c0c0": 23, "e7a4f5": 23, "qrf": 23, "orf": [23, 30, 31], "hist": 23, "count": [23, 85], "615": [23, 24, 91], "plot_quantile_vs_standard_oblique_forest": [23, 24, 91], "786": 24, "quantile_predict": [24, 91], "quantil": [24, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 91], "03": [24, 35, 40, 91], "110": [24, 91], "000": 25, "A": [25, 30, 31, 32, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 96], "pair": [27, 33, 85, 89], "boundari": [27, 33, 38, 46, 49, 50, 81, 82, 96], "made": 27, "threshold": [27, 30, 41, 89], "rule": 27, "infer": [27, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "built": [27, 30, 33, 75, 76, 88, 89], "load_iri": [27, 33, 73, 75, 77, 79, 89], "_lib": [27, 37, 38, 39], "plot_tre": 27, "obliquedecisiontreeclassifi": [27, 39, 44, 45, 47, 49, 80, 89], "ship": 27, "plot_color": 27, "ryb": 27, "plot_step": [27, 33], "clf_label": 27, "123456": [27, 32, 34], "flatten": [27, 38], "pairidx": 27, "onli": [27, 33, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "h_pad": [27, 33], "w_pad": [27, 33], "cmap": [27, 33, 37, 38, 39], "rdylbu": 27, "feature_nam": [27, 33], "target_nam": 27, "suptitl": [27, 33, 38], "borderpad": 27, "handletextpad": 27, "tight": [27, 33], "sklearn_vs_sktre": [27, 28, 91], "plot_iris_dtc": [27, 28, 91], "72": [27, 96], "userwarn": 27, "No": 27, "colormap": 27, "ignor": [27, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "togeth": [27, 33, 89, 90], "fill": [27, 33], "250": [27, 28, 91], "04": [28, 40, 91], "openml": [30, 31, 34], "benchmark": [30, 31, 34, 86], "suit": [30, 31, 34], "classic": [30, 75, 76], "look": [30, 37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92], "group": [30, 37, 75, 76, 89, 90], "drawn": [30, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 67, 69, 70, 71, 72, 75, 76, 88], "select": [30, 37, 41, 43, 48, 50, 52, 58, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "among": [30, 45, 47, 48, 49, 50, 53, 54, 66, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "chosen": [30, 42, 43, 44, 51, 52, 73, 74, 75, 76, 77], "greedi": [30, 44], "phish": [30, 31, 34], "websit": [30, 31, 34], "www": [30, 31, 34, 58, 73, 74, 77, 79, 80], "search": [30, 31, 32, 34, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "4534": [30, 31, 34], "wdbc": [30, 34], "1510": [30, 34], "lsvt": 30, "1484": 30, "har": [30, 31], "1478": [30, 31], "cnae": [30, 34], "1468": [30, 34], "subsampl": [30, 31, 34, 41, 44, 77, 89], "constraint": [30, 34, 42, 43, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "veri": [30, 33, 42, 43, 44, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 79, 80], "856": 30, "mostli": [30, 39], "zero": [30, 32, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "datatyp": [30, 31], "nomin": [30, 31], "455": 30, "numer": [30, 31, 34, 101], "310": 30, "561": 30, "864": 30, "deliber": [30, 31], "ci": [30, 31], "appropri": [30, 31], "bia": [30, 88], "tradeoff": [30, 89], "substanti": 30, "faster": [30, 31, 83], "omit": [30, 42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "computation": [30, 71, 72], "expens": [30, 71, 72], "main": [30, 41, 87], "stem": 30, "omiss": 30, "ascend": 30, "henc": [30, 88], "complex": [30, 42, 43, 44, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93], "nlog": 30, "draw": [30, 31, 32, 34, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "suitabl": 30, "affect": 30, "geurt": [30, 31, 42, 43, 52, 75, 76], "ernst": [30, 31, 42, 43, 52, 75, 76], "wehenkel": [30, 31, 42, 43, 52, 75, 76], "63": [30, 31, 42, 43, 52, 75, 76, 96], "2006": [30, 31, 42, 43, 52, 75, 76, 83], "n_cv": [30, 31, 32, 34], "time_taken": [30, 31], "phishingwebsit": [30, 34], "eorf": [30, 31], "450226": 30, "405337": 30, "562003": 30, "514854": 30, "615880": 30, "428097": 30, "285081": 30, "231719": 30, "246737": 30, "206264": 30, "datetim": [30, 31, 32, 34], "fetch_openml": [30, 31, 34], "repeatedkfold": [30, 31, 32, 34], "cross_valid": [30, 31, 32, 34], "extraobliquerandomforestclassifi": [30, 31, 33], "obliquerandomforestclassifi": [30, 31, 32, 33, 34, 88], "max_sample_s": [30, 31], "phishing_websit": [30, 31], "cnae_9": 30, "data_id": [30, 31, 34], "load_cc18": [30, 31, 34], "as_fram": [30, 31, 34], "parser": [30, 31, 34], "d_name": [30, 31, 34], "frame": [30, 31, 34], "iloc": [30, 31, 32, 34], "get_scor": [30, 31, 32, 34], "kwarg": [30, 31, 32, 34, 41, 53, 54, 83, 84, 100, 101], "tmp": [30, 31, 32, 34], "t0": [30, 31, 32, 34], "test_scor": [30, 31, 32, 34], "accuraci": [30, 31, 32, 34, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 73, 75, 77, 78, 79, 81], "convert": [30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "taken": [30, 31, 57, 78, 79, 80, 88], "total_second": [30, 31], "explod": [30, 31, 32, 34], "reset_index": [30, 31, 32, 34], "inplac": [30, 31, 32, 34], "param": [30, 31, 32, 34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "concat": [30, 31, 34], "from_dict": 30, "orient": 30, "index": [30, 37, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89], "groupbi": [30, 31], "set_size_inch": [30, 31, 34], "stripplot": [30, 32, 34], "queri": [30, 32, 34, 46], "dodg": [30, 32, 34], "boxplot": [30, 32, 34], "white": [30, 32, 34, 37, 39], "435": [30, 35, 91], "171": 30, "plot_extra_oblique_random_forest": [30, 35, 91], "purpos": [31, 33, 87], "chang": [31, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101], "11055": 31, "10299": 31, "562": 31, "section": [31, 33, 58], "focu": 31, "notabl": [31, 34, 100], "grow": [31, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "linearli": [31, 39, 58], "signific": [31, 88], "sample_s": 31, "n_row": [31, 33, 38], "df_tmp": 31, "49": [31, 35, 91], "853": [31, 35, 91], "159": 31, "plot_extra_orf_sample_s": [31, 35, 91], "xor": 32, "task": [32, 33, 86], "limit": [32, 46, 93, 98], "carri": [32, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "about": [32, 89], "odd": 32, "greater": [32, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "otherwis": [32, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "further": 32, "public": [32, 37, 38, 39, 88], "epub": 32, "siam": [32, 49, 50, 81, 82, 83, 86, 88], "doi": [32, 49, 50, 54, 60, 81, 82, 88, 89, 90], "epdf": 32, "1137": [32, 49, 50, 81, 82, 88], "9781611974973": 32, "56": 32, "It": [32, 34, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 89, 90], "took": [32, 34], "sparse_par": 32, "p_star": 32, "random_se": [32, 33, 65, 66, 68], "OF": [32, 34], "hyper": 32, "t_d": 32, "rff": 32, "plot_sim_": 32, "jpg": 32, "211": [32, 35, 91], "plot_oblique_axis_aligned_forests_sparse_par": [32, 35, 91], "sepal": 33, "width": [33, 81, 82], "length": [33, 38, 41, 46, 58, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "petal": 33, "third": [33, 34, 37], "extraobliquerandomforest": 33, "92": 33, "obliquerandomforest": 33, "9866666666666667": 33, "98": 33, "9933333333333333": 33, "listedcolormap": [33, 37, 39], "1234": [33, 67], "spectral": 33, "fine": 33, "step": [33, 41, 61], "contour": 33, "plot_step_coars": 33, "coars": 33, "guess": 33, "plot_idx": 33, "n_model": 33, "sec": 33, "std": 33, "consol": 33, "str": [33, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "slice": [33, 61, 69, 70], "awai": 33, "useless": 33, "part": [33, 37, 38, 39], "model_titl": 33, "model_detail": 33, "hasattr": 33, "fontsiz": 33, "mesh": 33, "input": [33, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89], "x_min": 33, "x_max": 33, "yy": 33, "meshgrid": 33, "blend": 33, "isinst": 33, "z": [33, 38, 62, 65, 66, 68], "c_": 33, "contourf": 33, "choos": [33, 44, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "adaboost": 33, "fewer": 33, "good": [33, 88], "enough": 33, "earli": 33, "estimator_alpha": 33, "coarser": 33, "regularli": 33, "space": [33, 34, 45, 46, 53, 54, 63, 65, 78, 83, 84, 89], "outlin": 33, "xx_coarser": 33, "yy_coars": 33, "z_points_coars": 33, "cs_point": 33, "move": 33, "sequenc": [33, 61, 83], "subset": [33, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 75, 77, 78, 79, 81, 89], "12": [33, 38, 91], "obliquedecisiontre": 33, "extraobliquedecisiontre": 33, "basic": [33, 73, 74, 75, 76, 77], "decisiontre": 33, "three": [33, 34, 37], "distinct": [33, 57], "359": [33, 35, 91], "2312": [33, 35, 91], "plot_oblique_forests_iri": [33, 35, 91], "31": 34, "former": [34, 52], "entir": [34, 45, 49, 50, 78, 81, 82], "latter": [34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "normin": 34, "dub": 34, "statu": 34, "activ": [34, 87], "857": 34, "notic": [34, 73, 74, 75, 76], "mechan": [34, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "practic": [34, 37, 38, 39, 88, 93], "object": [34, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90], "32": [34, 35, 44, 47, 48, 51, 52, 88, 89, 91], "586": [34, 35, 91], "plot_oblique_random_forest": [34, 35, 91], "443": 35, "sparse_oblique_tre": [35, 91], "158": [35, 91, 98], "170": [35, 91, 99], "oper": [37, 73, 77, 79, 81, 82], "under": [37, 86], "assumpt": 37, "hyperparamet": [37, 38, 39, 89, 99], "relat": [37, 38, 39, 41, 98], "privat": [37, 38, 39], "cython": [37, 38, 39, 83, 84, 87, 97], "patch": [37, 49, 50, 81, 82, 96, 99], "api": [37, 38, 39, 41, 44, 46, 53, 54, 77, 81, 82, 83, 84, 86, 87, 94, 95, 96, 97, 98, 99, 100, 101], "just": [37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 66, 69, 70, 87], "wrapper": [37, 38, 39], "underli": [37, 38, 39, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "relev": [37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86], "scalarmapp": [37, 39], "_criterion": [37, 38, 39], "gini": [37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "_oblique_splitt": [37, 39], "multiviewsplittertest": 37, "min_samples_leaf": [37, 38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "min_weight_leaf": [37, 38, 39], "intp": [37, 60], "n_feature_set": [37, 45, 78], "max_features_per_set_": [37, 78], "monotonic_cst": [37, 38, 39, 42, 43, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 97], "missing_value_feature_mask": [37, 38, 39], "dummi": [37, 38, 39], "repeat": [37, 38, 60, 66], "float32": [37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "float64": [37, 38, 39, 60, 74, 76, 80, 82], "intern": [37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90], "expos": [37, 39], "tester": 37, "directli": [37, 38, 39], "init_test": [37, 38, 39], "though": 37, "contigu": [37, 38, 49, 50, 81, 82], "projection_matrix": [37, 39], "sample_projection_matrix_pi": [37, 38, 39], "heatmap": [37, 39], "imshow": [37, 38, 39], "aspect": [37, 39], "axvlin": 37, "iend": 37, "vector": [37, 39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 60, 67, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 89, 90], "set_yticklabel": [37, 39], "mappabl": [37, 39], "sm": [37, 39], "set_arrai": [37, 39], "empti": [37, 39, 44, 77], "tick": [37, 39], "set_label": [37, 39], "weight": [37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 96], "previou": [37, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70], "setup": 37, "max_features_per_set": 37, "factor": [37, 41, 58, 60], "want": 37, "onc": [37, 69, 70], "control": [37, 39, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 58, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 99], "899": [37, 40, 91], "plot_multiview_axis_aligned_splitt": [37, 40, 91], "patchobliquedecisiontreeclassifi": [38, 49], "done": [38, 61, 81, 82, 88, 99], "data_dim": [38, 49, 50, 81, 82], "n_col": 38, "n_depth": 38, "robust": [38, 86], "hyperrectangl": 38, "start": [38, 60, 69, 70, 87], "min_patch_dim": [38, 49, 50, 81, 82], "max_patch_dim": [38, 49, 50, 81, 82], "constrain": [38, 89], "arbitrarili": [38, 43, 48, 50, 52, 74, 76, 80, 82], "_morf_splitt": 38, "bestpatchsplittertest": 38, "sake": [38, 39], "feature_weight": [38, 49, 50, 81, 82], "th": [38, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "appear": [38, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "dim_contigu": [38, 49, 50, 81, 82], "proj_mat": 38, "sharex": 38, "sharei": 38, "viridi": 38, "nonzero": 38, "custom": [38, 42, 43, 51, 52, 53, 54], "set_zlim": 38, "necessarili": [38, 46, 88], "certain": 38, "n_channel": 38, "n_time": 38, "channel": 38, "527": [38, 40, 91], "plot_projection_matric": [38, 40, 91], "small": [39, 42, 44, 45, 47, 48, 49, 51, 53, 54], "element": [39, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "candid": [39, 88, 89, 99], "bestobliquesplittertest": 39, "orang": 39, "762": [39, 40, 91], "plot_sparse_projection_matrix": [39, 40, 91], "188": 40, "auto": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "contamin": 41, "bootstrap": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 61, 69, 70, 71, 72, 88], "verbos": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 87], "warm_start": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "read": [41, 42, 43, 47, 48, 51, 52, 73, 74, 75, 76, 77, 79, 80], "default": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 98], "256": 41, "larger": [41, 44, 61, 77, 88], "amount": [41, 44, 75, 76], "paper": [41, 88, 89], "n_features_in_": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "enabl": [41, 44, 83, 97], "lead": [41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 79, 80, 88], "longer": 41, "bool": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 61, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "individu": 41, "consid": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 98], "extraobliquedecisiontreeregressor": [41, 97], "job": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65], "parallel": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 65], "unless": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "joblib": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 87], "parallel_backend": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52], "context": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52], "processor": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52], "glossari": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "pseudo": 41, "branch": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "reus": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52], "whole": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52], "version": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 94], "21": [41, 48, 86, 88, 96], "ellipticenvelop": 41, "svm": 41, "oneclasssvm": 41, "unsupervis": [41, 53, 54, 83, 84, 86, 93, 96, 97], "support": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89, 96, 100, 101], "libsvm": 41, "localoutlierfactor": 41, "local": [41, 87], "lof": 41, "extratreeregressor": [41, 43, 75], "ceil": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "log_2": 41, "liu": 41, "et": [41, 86], "al": [41, 86], "2008": [41, 60], "refer": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 60, 63, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "fei": 41, "toni": 41, "ting": 41, "kai": 41, "ming": 41, "zhou": 41, "zhi": 41, "hua": 41, "mine": [41, 54, 83, 90], "icdm": 41, "eighth": 41, "confer": [41, 54, 83, 90], "acm": [41, 54, 90], "discoveri": [41, 54, 90], "tkdd": 41, "2012": 41, "attribut": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 58, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "estimator_": [41, 42, 43, 51, 52, 53, 54, 69, 70, 77], "child": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "templat": [41, 42, 43, 44, 51, 52, 53, 54, 77], "sub": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "estimators_features_": 41, "ndarrai": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 60, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "estimators_samples_": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "max_samples_": 41, "offset_": 41, "offset": 41, "raw": 41, "score_sampl": 41, "equal": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 99], "seen": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "24": [41, 42, 43, 51, 52, 73, 74, 75, 76], "feature_names_in_": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "sever": [41, 44, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "n_left": 41, "path": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "array_lik": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 59, 61, 62, 63, 64, 66, 67, 68, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85], "csr_matrix": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "abnorm": 41, "csc_matrix": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "Not": [41, 46, 53, 54, 78, 79, 80, 81, 82, 83, 84], "convent": [41, 46, 53, 54, 83, 84], "self": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "fit_predict": [41, 53, 54, 83, 84], "get_metadata_rout": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "metadata": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "rout": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "check": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "metadatarequest": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "encapsul": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "get_param": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "deep": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88], "subobject": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "is_inli": 41, "tell": 41, "accord": [41, 46], "opposit": 41, "set_fit_request": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "unchang": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "request": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86], "enable_metadata_rout": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "set_config": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "option": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 98], "meta": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "rais": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "error": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "alia": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "metadata_rout": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "retain": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "exist": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "insid": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 96], "pipelin": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "effect": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 92], "updat": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "nest": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "compon": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "__": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "properti": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 98, 101], "dynam": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72], "identifi": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 90], "member": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72], "bag": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 101], "re": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "reduc": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 88], "footprint": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72], "fetch": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72], "mai": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90], "slower": [41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72], "min_samples_split": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97], "min_weight_fraction_leaf": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "max_leaf_nod": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "min_impurity_decreas": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "oob_scor": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "class_weight": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "ccp_alpha": [42, 43, 44, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "max_bin": [42, 43, 51, 52], "store_leaf_valu": [42, 43, 51, 52, 73, 74, 75, 76, 78, 79, 80, 81, 82], "log_loss": [42, 51, 73, 75], "qualiti": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90], "criteria": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90], "impur": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89], "shannon": [42, 51, 73, 75], "gain": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "mathemat": [42, 49, 50, 51, 53, 54, 73, 75, 81, 82, 86, 88, 93], "formul": [42, 51, 53, 54, 73, 75, 93], "expand": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "until": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "pure": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "fraction": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "18": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "least": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "smooth": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "especi": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "log2": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97], "stop": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "partit": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 63, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 89], "rel": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 90], "reduct": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "unlimit": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "induc": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "decreas": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "equat": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "n_t": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "n_t_r": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "right_impur": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "n_t_l": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "left_impur": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "current": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89], "callabl": [42, 43, 51, 52, 53, 54, 57, 66, 68, 83, 84], "out": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 71, 72, 88, 101], "accuracy_scor": [42, 51], "signatur": [42, 43, 51, 52, 53, 54], "decision_path": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "learner": [42, 43, 51, 52], "balanc": [42, 44, 45, 47, 49, 51, 55, 56, 73, 75, 77, 78, 79, 81], "balanced_subsampl": [42, 44, 45, 47, 49, 51], "class_label": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "suppos": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "output": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 93, 96], "multioutput": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "multilabel": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "everi": [42, 44, 45, 47, 49, 50, 51, 73, 75, 77, 78, 79, 81, 82, 89], "mode": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81, 87], "automat": [42, 44, 45, 47, 49, 51, 61, 73, 75, 77, 78, 79, 81], "adjust": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "invers": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "frequenc": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "bincount": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "except": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 74, 76, 80, 82, 88], "grown": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 79, 80], "multipli": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "through": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86], "minim": [42, 43, 44, 48, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90], "cost": [42, 43, 44, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89], "prune": [42, 43, 44, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "subtre": [42, 43, 44, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "largest": [42, 43, 44, 51, 52, 66, 73, 74, 75, 76, 77], "255": [42, 43, 51, 52], "miss": [42, 43, 51, 52, 73, 74, 75, 76, 77, 89], "experiment": [42, 43, 51, 52, 73, 74, 75, 76, 78, 86, 97, 98, 99], "get_leaf_node_sampl": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "monoton": [42, 43, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "enforc": [42, 43, 44, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "multiclass": [42, 51, 73, 75, 77], "n_outputs_": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "hold": [42, 51, 73, 75, 77], "extratreesregressor": [42, 52, 75, 76], "optim": [42, 43, 81, 82, 89], "etc": [42, 43, 44, 47, 48, 49, 50, 51, 52, 65, 73, 74, 75, 76, 77, 79, 80], "fulli": [42, 43, 44, 47, 48, 49, 50, 51, 52, 69, 70, 73, 74, 75, 76, 77, 79, 80], "unprun": [42, 43, 44, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 79, 80], "potenti": [42, 43, 44, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 79, 80, 82], "consumpt": [42, 43, 44, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 79, 80], "extratreeclassifi": [42, 76], "base_estimator_": [42, 43, 51, 52], "renam": [42, 43, 51, 52], "classes_": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "n_classes_": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "feature_importances_": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 98], "oob_score_": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "oob_decision_function_": [42, 44, 45, 47, 48, 49, 51, 53, 54], "n_output": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "never": [42, 44, 45, 47, 48, 49, 51, 53, 54], "nan": [42, 44, 45, 47, 48, 49, 51, 53, 54, 70, 77], "x_leav": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "datapoint": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "up": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 100, 101], "n_node": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "goe": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "csr": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "n_nodes_ptr": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "give": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 79, 80], "real": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 74, 76, 80, 82], "net": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "possibli": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89], "leaf_node_sampl": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "reach": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "n_leaf_node_sampl": [42, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "partial_fit": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81, 97], "must": [42, 44, 45, 47, 48, 49, 51, 57, 66, 73, 75, 77, 78, 79, 80, 81, 83, 84], "subsequ": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "That": [42, 44, 45, 47, 49, 51, 53, 54, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84], "highest": [42, 44, 45, 47, 49, 51, 53, 54, 73, 77, 79], "predict_log_proba": [42, 44, 45, 47, 49, 51, 73, 75, 78, 79, 81], "predict_quantil": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "keyword": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 97, 98], "accept": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "n_quantil": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54], "harsh": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "set_partial_fit_request": [42, 44, 45, 47, 49, 51, 73, 75, 77, 78, 79, 81], "set_score_request": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "brought": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "warn": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "mislead": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "cardin": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88], "mani": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 88, 89, 97], "permutation_import": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "root": [42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 99], "squared_error": [43, 48, 50, 52, 74, 76, 80, 82], "absolute_error": [43, 48, 50, 52, 74, 76, 80, 82], "friedman_ms": [43, 48, 50, 52, 74, 76, 80, 82], "poisson": [43, 48, 50, 52, 74, 76, 80, 82], "l2": [43, 48, 50, 52, 74, 76, 80, 82], "loss": [43, 48, 50, 52, 74, 76, 80, 82, 89], "termin": [43, 48, 50, 52, 74, 76, 80, 82], "friedman": [43, 48, 50, 52, 73, 74, 76, 77, 79, 80, 82, 89], "absolut": [43, 48, 50, 52, 74, 76, 80, 82], "l1": [43, 48, 50, 52, 74, 76, 80, 82], "devianc": [43, 48, 50, 52, 74, 76, 80, 82], "find": [43, 46, 48, 50, 52, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 90, 98], "mae": [43, 52, 74, 76], "r2_score": [43, 48, 50, 52, 74, 76, 80, 82], "extratreesclassifi": [43, 51, 75, 76], "load_diabet": [43, 74, 76, 80, 82], "return_x_i": [43, 74, 75, 76, 80, 82], "reg": [43, 76], "2727": 43, "decisiontreeregressor": [43, 51, 52, 73, 76, 80, 82], "oob_prediction_": [43, 50, 52], "coeffici": [43, 48, 50, 52, 74, 76, 80, 82], "frac": [43, 48, 50, 52, 63, 64, 74, 76, 80, 82, 90], "residu": [43, 48, 50, 52, 74, 76, 80, 82], "wors": [43, 48, 50, 52, 74, 76, 80, 82], "constant": [43, 48, 50, 52, 74, 76, 80, 82], "alwai": [43, 44, 45, 47, 48, 49, 50, 51, 52, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 87, 89], "disregard": [43, 48, 50, 52, 74, 76, 80, 82], "precomput": [43, 46, 48, 50, 52, 74, 76, 80, 82], "kernel": [43, 48, 50, 52, 59, 74, 76, 80, 82, 96], "n_samples_fit": [43, 48, 50, 52, 74, 76, 80, 82], "uniform_averag": [43, 48, 50, 52, 74, 76, 80, 82], "keep": [43, 48, 50, 52, 74, 76, 80, 82], "influenc": [43, 48, 50, 52, 74, 76, 80, 82], "multioutputregressor": [43, 48, 50, 52, 74, 76, 80, 82], "honest_prior": [44, 77], "empir": [44, 52, 77, 89], "remain": [44, 77], "deal": [44, 77], "prior": [44, 57, 77, 89, 90], "shallow": [44, 77], "namespac": [44, 77], "rather": [44, 52, 77, 90], "ident": [44, 47, 48, 49, 50, 51, 52, 60, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84], "determinist": [44, 47, 48, 49, 50, 51, 52, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84], "behaviour": [44, 47, 48, 49, 50, 51, 52, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84], "honesti": [44, 86, 89], "unbias": 44, "doubl": 44, "access": 44, "ineffici": 44, "recommend": [44, 53, 54, 79, 80, 81, 82, 86, 89], "propens": [44, 89], "causal": 44, "breiman": [44, 47, 48, 51, 52, 73, 74, 77, 79, 80, 88, 89], "45": [44, 47, 48, 51, 52, 58, 63, 88, 89, 96], "2001": [44, 47, 48, 51, 52, 88, 89], "athei": [44, 77], "tibshirani": [44, 58, 73, 74, 77, 79, 80, 89], "wager": [44, 77], "annal": [44, 58, 60, 77], "honest_forest": [44, 77], "honesttreeclassifi": [44, 96], "n_features_": [44, 45, 47, 48, 49, 50], "honest_decision_function_": 44, "structure_indices_": [44, 77], "n_structur": [44, 77], "honest_indices_": [44, 77], "n_honest": [44, 77], "oob_samples_": [44, 101], "n_samples_bootstrap": 44, "tradit": [45, 47, 48, 79, 80], "assum": [45, 78], "per": [45, 57, 69, 70, 78, 96, 99, 100, 101], "compute_similarity_matrix": [45, 47, 48, 49, 50, 53, 54, 78, 79, 80, 81, 82, 83, 84], "sim_matrix": [45, 47, 48, 49, 50, 53, 54, 78, 79, 80, 81, 82, 83, 84], "n_neighbor": 46, "radiu": [46, 65, 66, 68], "distanc": [46, 53, 54, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90], "basedecisiontre": [46, 77, 85], "baseforest": [46, 69, 70, 85], "kneighbor": 46, "radius_neighbor": 46, "return_dist": 46, "n_queri": 46, "n_index": 46, "constructor": 46, "neigh_dist": 46, "neigh_ind": 46, "popul": 46, "sort_result": 46, "ly": 46, "ball": 46, "around": [46, 97], "befor": [46, 57, 66, 69, 70, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84], "approxim": [46, 55, 56, 101], "lie": 46, "cannot": 46, "1d": [46, 49, 50, 57, 81, 82], "obliquedecisiontreeregressor": [48, 50, 96], "tomita": [48, 49, 50, 81, 82, 86, 88], "104": [48, 86, 88], "39": [48, 74, 86, 88], "2020": [48, 54, 86, 88, 90], "make_regress": [48, 50, 52], "regr": [48, 52], "86327109": 48, "along": [49, 50, 67, 69, 81, 82, 89], "presum": [49, 50, 81, 82], "un": [49, 50, 81, 82], "wrap": [49, 50, 81, 82], "adam": [49, 50, 81, 82, 86, 88, 96, 97, 98, 99, 100, 101], "chester": [49, 50, 81, 82, 88], "huynh": [49, 50, 81, 82, 88], "tyler": [49, 50, 81, 82, 86, 88], "jesu": [49, 50, 81, 82, 88], "jess": [49, 50, 81, 82, 88], "patsol": [49, 50, 81, 82, 88], "ben": [49, 50, 81, 82, 88], "falk": [49, 50, 81, 82, 88], "sridevi": [49, 50, 81, 82, 88], "sarma": [49, 50, 81, 82, 88], "toward": [49, 50, 81, 82, 86, 88], "gap": [49, 50, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 88], "convolut": [49, 50, 81, 82, 86, 88], "network": [49, 50, 81, 82, 86, 88], "scienc": [49, 50, 81, 82, 86, 88], "77": [49, 50, 81, 82, 86, 88], "96": [49, 50, 81, 82, 86, 88], "2023": [49, 50, 58, 81, 82, 86, 88], "21m1449117": [49, 50, 81, 82, 88], "82818509": 50, "patchobliquedecisiontreeregressor": [50, 96], "histogram": [51, 52], "gradient": [51, 52], "boost": [51, 52], "histgradientboostingclassifi": 51, "fast": [51, 52, 83, 93], "big": [51, 52], "histgradientboostingregressor": 52, "suggest": 52, "recent": 52, "justifi": 52, "32987858": 52, "twomean": [53, 54, 83, 84], "clustering_func": [53, 54, 83, 84], "clustering_func_arg": [53, 54, 83, 84], "simultan": [53, 54], "affin": [53, 54, 83, 84], "fastbic": [53, 54, 83, 84, 96], "maxim": [53, 54], "bayesian": [53, 54, 90], "calinski_harabasz_scor": [53, 54], "predicted_label": [53, 54], "silhouette_scor": [53, 54], "davies_bouldin_scor": [53, 54], "cpu": [53, 54], "construct": [53, 54, 88, 89], "continu": [53, 54, 70], "instant": [53, 54], "agglomerativeclust": [53, 54, 83, 84], "unsuperviseddecisiontre": [53, 54], "labels_": [53, 54], "similarity_matrix_": [53, 54], "oob": [53, 54], "dissimilarity_matrix_": [53, 54], "dissimilar": [53, 54, 96], "int64": [53, 54, 83, 84], "fit_transform": [53, 54, 83, 84], "fit_param": [53, 54, 83, 84], "x_new": [53, 54, 83, 84], "n_features_new": [53, 54, 83, 84], "set_output": [53, 54, 83, 84], "introduc": [53, 54, 83, 84], "configur": [53, 54, 83, 84], "typic": [53, 54, 83, 84, 89], "dens": [53, 54, 60, 83, 84, 89], "meghana": [54, 86, 90], "madhyastha": [54, 86, 90], "perci": [54, 90], "jame": [54, 88, 90], "brown": [54, 88, 90], "veronika": [54, 90], "strnadova": [54, 90], "neelei": [54, 90], "carei": [54, 88, 90], "prieb": [54, 88, 90], "randal": [54, 88, 90], "burn": [54, 88, 90], "geodes": [54, 65, 83, 86, 90], "proceed": [54, 83, 90], "26th": [54, 90], "sigkdd": [54, 90], "kdd": [54, 86, 90], "513": [54, 86, 90], "523": [54, 86, 90], "york": [54, 90], "ny": [54, 90], "usa": [54, 90], "machineri": [54, 90], "url": [54, 58, 60, 88, 90], "1145": [54, 90], "3394486": [54, 90], "3403094": [54, 90], "cov": [55, 56, 60, 62, 63, 64, 67], "718281828459045": [55, 56], "arraylik": [55, 56, 60, 65, 69, 70, 71, 72], "bit": [55, 56], "logarithm": [55, 56], "i_xi": [55, 56], "h_x": 55, "mixtur": [55, 57], "h_xy": 55, "int_err": 55, "integr": 55, "100000": 56, "h_y": 56, "h_y_on_x": 56, "return_lat": 57, "add_latent_nois": 57, "nonlinear": 57, "latent": 57, "2d": [57, 67, 73, 74, 75, 76, 81, 82], "match": [57, 88], "divid": 57, "poli": 57, "membership": 57, "p_i": 57, "mu_i": 57, "sigma_i": 57, "y_1": 57, "x_": 57, "np_i": 57, "y_": 57, "overset": 57, "sim": 57, "mathcal": [57, 90], "ey": 57, "shuffle_random_st": 57, "n_view": 58, "joint_rank": 58, "noise_std": 58, "return_decomp": 58, "joint": [58, 69, 70], "rank": [58, 65, 88], "share": 58, "common": [58, 89, 90], "strength": 58, "orthonorm": 58, "view_load": 58, "n_features_i": [58, 65], "rotat": 58, "sval": 58, "singular": 58, "w_b": 58, "n_features_b": 58, "preserv": [58, 61, 69, 70], "inner": [58, 89], "product": [58, 89], "unitari": 58, "x_b": 58, "diag": 58, "e_b": 58, "yunjin": 58, "choi": 58, "jonathan": 58, "taylor": 58, "princip": 58, "2590": 58, "2617": 58, "2017": 58, "jstor": 58, "stabl": 58, "26362952": 58, "visit": 58, "quadrat": 59, "sambit": [59, 96, 97, 98], "interpret": 59, "characterist": 59, "preprint": [59, 86], "1812": 59, "00029": 59, "2018": 59, "m_factor": 60, "rho": 60, "band_typ": 60, "ma": 60, "return_param": 60, "mix": 60, "trunk": [60, 101], "band": [60, 101], "gerard": 60, "tran": [60, 63], "pattern": [60, 90], "anal": 60, "mach": 60, "intel": 60, "343": 60, "345": 60, "1982": 60, "1109": 60, "tpami": 60, "4767256": 60, "peter": 60, "bickel": 60, "elizaveta": 60, "levina": 60, "februari": 60, "dx": 60, "1214": 60, "009053607000000758": 60, "conditional_arrai": 61, "nn_estim": 61, "replace_nbr": 61, "condition": [61, 66, 69, 70], "resampl": [61, 69, 70, 99], "modif": 61, "techniqu": [61, 90], "place": 61, "resampled_arrai": 61, "impact": 61, "x_index": 62, "y_index": 62, "z_index": 62, "true_mi": [62, 63, 64], "h": [62, 63, 64, 89], "plug": 62, "entropy_gaussian": 62, "det": [63, 64], "georg": 63, "darbellai": 63, "igor": 63, "vajda": 63, "inf": 63, "theori": [63, 88], "1315": 63, "1321": 63, "1999": 63, "kd_tree": 65, "ksg": 65, "n_features_x": 65, "n_features_z": 65, "unsupervisedobliquerandomforest": 65, "knn": 65, "ball_tre": 65, "brute": 65, "preprocess": 65, "val": 65, "proce": 65, "kth": 65, "nbr": 65, "xyz": 65, "nn": [65, 83], "xz": 65, "yz": 65, "psi": 65, "n_x": 65, "n_y": 65, "n_": [65, 89], "digamma": 65, "n_i": 65, "denot": [65, 66, 89], "radius_a": 66, "radius_b": 66, "obs_noise_func": 66, "nature_noise_func": 66, "005": [66, 68], "return_mi_lb": [66, 68], "helix": 66, "smallest": 66, "defauult": 66, "func": 66, "lb": [66, 68], "approx": 66, "unif": 66, "afterward": 66, "epsilon_1": 66, "n_1": 66, "epsilon_2": 66, "n_2": 66, "epsilon_3": 66, "n_3": 66, "And": 66, "confound": 66, "impli": 66, "feed": 67, "noise_func": 68, "sphere": 68, "latitud": 68, "longitud": 68, "coordin": 68, "y2": 68, "y3": 68, "conditional_perm": [69, 70], "categor": 69, "describ": [69, 70, 83, 89], "initi": [69, 70], "Then": [69, 70, 85, 87], "metric_forest": [69, 70], "metric_perm_forest": [69, 70], "recomput": [69, 70], "rest": [69, 70, 89], "cach": [69, 70], "reset": [69, 70, 71, 72], "upon": [69, 70, 73, 74, 75, 76], "n_samples_test_": [69, 70], "final": [69, 70, 71, 72, 88, 89, 97], "indices_train_": [69, 70], "n_samples_train": [69, 70], "indices_test_": [69, 70], "samples_": [69, 70, 71, 72], "n_samples_fin": [69, 70, 71, 72], "null_dist_": [69, 70, 71, 72], "check_input": [69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "metric_kwarg": [69, 70, 71, 72], "n_covari": [69, 70, 71, 72], "mse": [69, 70, 71, 72, 89], "posterior_fin": [69, 70, 71, 72], "encount": [69, 70, 71, 72], "permute_stat_": [69, 70], "subtract": [69, 70], "pval": [69, 70], "train_test_samples_": [69, 70, 71, 72], "featureimportanceforestregressor": [71, 72, 98], "much": [71, 72, 89], "y_true_": [71, 72], "posterior_": [71, 72], "posterior_null_": [71, 72], "observe_stat": [71, 72], "But": [73, 74, 77, 78, 79, 80, 81, 82, 83, 84], "tree_": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "node_id": [73, 74, 75, 76], "xxx": [73, 74, 75, 76], "moreov": [73, 74, 75, 76, 89, 97, 98], "twice": [73, 74, 75, 76], "ram": [73, 74, 75, 76], "diskspac": [73, 74, 75, 76], "argmax": [73, 77, 79], "ti": [73, 77, 79], "lowest": [73, 77, 79], "en": [73, 74, 77, 79, 80, 89], "wikipedia": [73, 74, 77, 79, 80, 89], "wiki": [73, 74, 77, 79, 80, 89], "decision_tree_learn": [73, 74, 77, 79, 80, 89], "olshen": [73, 74, 77, 79, 80], "stone": [73, 74, 77, 79, 80], "wadsworth": [73, 74, 77, 79, 80], "belmont": [73, 74, 77, 79, 80], "ca": [73, 74, 77, 79, 80], "1984": [73, 74, 77, 79, 80], "hasti": [73, 74, 77, 79, 80, 89], "springer": [73, 74, 77, 79, 80, 89], "2009": [73, 74, 77, 79, 80, 89], "cutler": [73, 74, 77, 79, 80], "berkelei": [73, 74, 77, 79, 80], "edu": [73, 74, 77, 79, 80], "randomforest": [73, 74, 77, 79, 80], "cc_home": [73, 74, 77, 79, 80], "htm": [73, 74, 77, 79, 80], "93": [73, 79], "86": [73, 79, 96], "max_features_": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "_tree": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82], "understand": [73, 74, 75, 76, 77, 88], "builder_": [73, 74, 75, 76], "treebuild": [73, 74, 75, 76], "min_samples_split_": [73, 74, 75, 76], "need": [73, 74, 75, 76, 87, 89, 92], "17": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "bypass": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "don": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "know": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "node_count": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "cost_complexity_pruning_path": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "ccp_path": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "bunch": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "leaf_nodes_sampl": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "get_n_leav": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "n_leav": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "proba": [73, 75, 77, 78, 79, 81], "set_predict_proba_request": [73, 75, 77, 78, 79, 81], "set_predict_request": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "46": 74, "16": 74, "73": 74, "pick": [75, 76], "baggingclassifi": 75, "extra_tre": [75, 76], "cl": 75, "8947": 75, "baggingregressor": 76, "instanti": 77, "93333333": 77, "empirical_prior_": 77, "logic": 78, "feature_combinations_": [78, 79, 80], "feature_set_ends_": 78, "n_feature_sets_": 78, "fact": [79, 80], "caveat": [79, 80], "willing": [79, 80, 89], "spend": [79, 80, 89], "resourc": [79, 80, 89], "68908909": 80, "35854406": 80, "35223873": 80, "03616902": 80, "56008907": 80, "32235221": 80, "06945264": 80, "1465216": 80, "34597007": 80, "15308512": 80, "morf": [81, 82, 86, 96], "discontigu": [81, 82], "sensor": [81, 82], "mask": [81, 82], "onto": [81, 82], "data_width": [81, 82], "data_height": [81, 82], "tt": [81, 82], "last": [81, 82], "height": [81, 82], "albeit": [81, 82, 98], "efficienc": [81, 82], "min_patch_dims_": [81, 82], "max_patch_dims_": [81, 82], "data_dims_": [81, 82], "rg": 82, "10163671": 82, "78786738": 82, "01490768": 82, "32737289": 82, "24816698": 82, "41881754": 82, "0588273": 82, "48722913": 82, "07927208": 82, "15600762": 82, "unsupervisedcriterion": [83, 84], "abid": [83, 84], "unsupervisedsplitt": [83, 84], "enablescomput": 83, "alexand": 83, "marx": 83, "jona": 83, "fischer": 83, "sdm": 83, "415": 83, "423": 83, "evimaria": 83, "terzi": 83, "panayioti": 83, "tsapara": 83, "316": 83, "327": 83, "intermedi": 85, "aff_matrix": 85, "packag": [86, 87], "modern": 86, "supervis": [86, 90, 93], "strong": 86, "madhyastha2020": 86, "sporf": 86, "tomita2020": 86, "li2023": 86, "perry2021": 86, "futur": 86, "plan": 86, "stream": [86, 97], "xu2022": 86, "encourag": 86, "pull": 86, "walk": 86, "contribut": [86, 88, 96, 97, 98, 99, 100, 101], "licens": 86, "bsd": 86, "xu": [86, 96, 97, 101], "haoyin": [86, 96, 97, 101], "simplest": 86, "2110": 86, "08483": 86, "histori": 86, "unreleas": [86, 94], "pip": 86, "meson": 86, "conda": 86, "pypi": 87, "clone": 87, "repositori": 87, "git": 87, "neurodata": 87, "cd": 87, "virtual": 87, "build_requir": 87, "txt": 87, "spin": 87, "cli": 87, "edit": 87, "pend": 87, "repo": 87, "zipbal": 87, "master": 87, "forg": 87, "threadpoolctl": 87, "pytest": 87, "compil": 87, "llvm": 87, "openmp": 87, "directori": 87, "obliquepr": 87, "pr": 87, "checkout": 87, "instruct": 87, "divers": 88, "sometim": 88, "slight": 88, "aim": 88, "motiv": 88, "therebi": [88, 89], "often": [88, 90], "yield": 88, "intuit": [88, 89], "leo": 88, "assess": 88, "essenti": 88, "abil": 88, "mdi": 88, "l2014": 88, "suffer": 88, "flaw": 88, "conclus": 88, "deriv": 88, "most": [88, 89, 100], "held": 88, "secondli": 88, "favor": 88, "whose": 88, "jaewon": 88, "chung": 88, "benjamin": 88, "jason": 88, "yim": 88, "mauro": 88, "maggioni": 88, "jmlr": 88, "v21": 88, "664": 88, "loupp": 88, "phd": 88, "thesi": 88, "lieg": 88, "2014": 88, "dt": 89, "ot": 89, "ref": 89, "rc": 89, "landmark": 89, "varieti": [89, 90], "definit": 89, "x_i": [89, 90], "recurs": 89, "orthogon": 89, "a_i": 89, "langl": 89, "rangl": 89, "entri": 89, "q_m": 89, "n_m": 89, "t_m": 89, "x_j": 89, "leq": 89, "setminu": 89, "e_i": 89, "basi": 89, "elsewher": 89, "exact": 89, "_featur": 89, "come": 89, "sparsiti": 89, "consider": 89, "disc": 89, "earlier": 89, "sai": 89, "storag": 89, "ask": 89, "question": 89, "gridsearchcv": 89, "There": 89, "imput": 89, "1023": 89, "1010933404324": 89, "predictive_analyt": 89, "quinlan": 89, "c4": 89, "program": 89, "morgan": 89, "kaufmann": 89, "1993": 89, "prevent": 89, "overfit": 89, "triplet": 89, "treatment": 89, "sacrific": 89, "goal": 90, "overview": 90, "cutpoint": 90, "cutoff": 90, "min_": 90, "sum_": 90, "hat": 90, "mu": 90, "_1": 90, "_2": 90, "sample_indic": 90, "popular": 90, "seleciton": 90, "kmean": 90, "mclust": 90, "tri": 90, "mle": 90, "hard": 90, "soft": 90, "gmm": 90, "simpler": 90, "x_n": 90, "quad": 90, "le": 90, "mu_j": 90, "notion": 90, "efficaci": 90, "scheme": 90, "adjusted_rand_scor": 90, "265": 91, "tip": [93, 94], "enhanc": [94, 95, 96, 97, 98, 99, 100, 101], "link": 94, "subscrib": 94, "io": 94, "notifi": 94, "jong": 96, "shin": 96, "bug": [96, 98, 99, 100], "outsid": 96, "61": 96, "arbitrari": 96, "discontinu": 96, "64": 96, "67": 96, "patchobliquerandomforestregressor": 96, "suki": [96, 97], "57": 96, "nearestneighborsmetaestim": 96, "83": 96, "thank": [96, 97, 98, 99, 100, 101], "everyon": [96, 97, 98, 99, 100, 101], "who": [96, 97, 98, 99, 100, 101], "mainten": [96, 97, 98, 99, 100, 101], "incept": [96, 97, 98, 99, 100, 101], "analog": 97, "upgrad": 97, "reli": 97, "109": 97, "extraobliquedecisiontreeclassifi": 97, "2x": 97, "114": 97, "101": 97, "streamdecisionforest": 97, "116": 97, "undergon": 98, "organiz": 98, "overhaul": 98, "135": 98, "were": 98, "140": 98, "129": 98, "featureimport": [98, 99], "yuxin": 98, "bai": 98, "143": 98, "156": 98, "featureimportanceforest": 99, "permute_per_forest_fract": 99, "145": 99, "169": 99, "164": 99, "conditional_resampl": 99, "rate": 99, "152": 99, "apply_max_features_per_set": 99, "incorrect": 99, "oversampl": 99, "after": 99, "172": 99, "mainli": 100, "183": [100, 101], "exhaust": [100, 101], "make_trunk_classif": 101, "approximate_clf_mutual_inform": 101, "approximate_clf_mutual_information_with_monte_carlo": 101, "mont": 101, "carlo": 101, "199": 101}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[41, 1, 1, "", "ExtendedIsolationForest"], [42, 1, 1, "", "ExtraTreesClassifier"], [43, 1, 1, "", "ExtraTreesRegressor"], [44, 1, 1, "", "HonestForestClassifier"], [45, 1, 1, "", "MultiViewRandomForestClassifier"], [46, 1, 1, "", "NearestNeighborsMetaEstimator"], [47, 1, 1, "", "ObliqueRandomForestClassifier"], [48, 1, 1, "", "ObliqueRandomForestRegressor"], [49, 1, 1, "", "PatchObliqueRandomForestClassifier"], [50, 1, 1, "", "PatchObliqueRandomForestRegressor"], [51, 1, 1, "", "RandomForestClassifier"], [52, 1, 1, "", "RandomForestRegressor"], [53, 1, 1, "", "UnsupervisedObliqueRandomForest"], [54, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ExtendedIsolationForest": [[41, 2, 1, "", "decision_function"], [41, 3, 1, "", "estimators_samples_"], [41, 2, 1, "", "fit"], [41, 2, 1, "", "fit_predict"], [41, 2, 1, "", "get_metadata_routing"], [41, 2, 1, "", "get_params"], [41, 2, 1, "", "predict"], [41, 2, 1, "", "score_samples"], [41, 2, 1, "", "set_fit_request"], [41, 2, 1, "", "set_params"]], "sktree.ExtraTreesClassifier": [[42, 2, 1, "", "apply"], [42, 2, 1, "", "decision_path"], [42, 3, 1, "", "estimators_samples_"], [42, 3, 1, "", "feature_importances_"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "get_leaf_node_samples"], [42, 2, 1, "", "get_metadata_routing"], [42, 2, 1, "", "get_params"], [42, 2, 1, "", "partial_fit"], [42, 2, 1, "", "predict"], [42, 2, 1, "", "predict_log_proba"], [42, 2, 1, "", "predict_proba"], [42, 2, 1, "", "predict_quantiles"], [42, 2, 1, "", "score"], [42, 2, 1, "", "set_fit_request"], [42, 2, 1, "", "set_params"], [42, 2, 1, "", "set_partial_fit_request"], [42, 2, 1, "", "set_score_request"]], "sktree.ExtraTreesRegressor": [[43, 2, 1, "", "apply"], [43, 2, 1, "", "decision_path"], [43, 3, 1, "", "estimators_samples_"], [43, 3, 1, "", "feature_importances_"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "get_leaf_node_samples"], [43, 2, 1, "", "get_metadata_routing"], [43, 2, 1, "", "get_params"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "predict_quantiles"], [43, 2, 1, "", "score"], [43, 2, 1, "", "set_fit_request"], [43, 2, 1, "", "set_params"], [43, 2, 1, "", "set_score_request"]], "sktree.HonestForestClassifier": [[44, 2, 1, "", "apply"], [44, 2, 1, "", "decision_path"], [44, 3, 1, "", "estimators_samples_"], [44, 3, 1, "", "feature_importances_"], [44, 2, 1, "", "fit"], [44, 2, 1, "", "get_leaf_node_samples"], [44, 2, 1, "", "get_metadata_routing"], [44, 2, 1, "", "get_params"], [44, 3, 1, "", "honest_indices_"], [44, 3, 1, "", "oob_samples_"], [44, 2, 1, "", "partial_fit"], [44, 2, 1, "", "predict"], [44, 2, 1, "", "predict_log_proba"], [44, 2, 1, "", "predict_proba"], [44, 2, 1, "", "predict_quantiles"], [44, 2, 1, "", "score"], [44, 2, 1, "", "set_fit_request"], [44, 2, 1, "", "set_params"], [44, 2, 1, "", "set_partial_fit_request"], [44, 2, 1, "", "set_score_request"], [44, 3, 1, "", "structure_indices_"]], "sktree.MultiViewRandomForestClassifier": [[45, 2, 1, "", "apply"], [45, 2, 1, "", "compute_similarity_matrix"], [45, 2, 1, "", "decision_path"], [45, 3, 1, "", "estimators_samples_"], [45, 3, 1, "", "feature_importances_"], [45, 2, 1, "", "fit"], [45, 2, 1, "", "get_leaf_node_samples"], [45, 2, 1, "", "get_metadata_routing"], [45, 2, 1, "", "get_params"], [45, 2, 1, "", "partial_fit"], [45, 2, 1, "", "predict"], [45, 2, 1, "", "predict_log_proba"], [45, 2, 1, "", "predict_proba"], [45, 2, 1, "", "predict_quantiles"], [45, 2, 1, "", "score"], [45, 2, 1, "", "set_fit_request"], [45, 2, 1, "", "set_params"], [45, 2, 1, "", "set_partial_fit_request"], [45, 2, 1, "", "set_score_request"]], "sktree.NearestNeighborsMetaEstimator": [[46, 2, 1, "", "fit"], [46, 2, 1, "", "get_metadata_routing"], [46, 2, 1, "", "get_params"], [46, 2, 1, "", "kneighbors"], [46, 2, 1, "", "radius_neighbors"], [46, 2, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[47, 2, 1, "", "apply"], [47, 2, 1, "", "compute_similarity_matrix"], [47, 2, 1, "", "decision_path"], [47, 3, 1, "", "estimators_samples_"], [47, 3, 1, "", "feature_importances_"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "get_leaf_node_samples"], [47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "partial_fit"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "predict_log_proba"], [47, 2, 1, "", "predict_proba"], [47, 2, 1, "", "predict_quantiles"], [47, 2, 1, "", "score"], [47, 2, 1, "", "set_fit_request"], [47, 2, 1, "", "set_params"], [47, 2, 1, "", "set_partial_fit_request"], [47, 2, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[48, 2, 1, "", "apply"], [48, 2, 1, "", "compute_similarity_matrix"], [48, 2, 1, "", "decision_path"], [48, 3, 1, "", "estimators_samples_"], [48, 3, 1, "", "feature_importances_"], [48, 2, 1, "", "fit"], [48, 2, 1, "", "get_leaf_node_samples"], [48, 2, 1, "", "get_metadata_routing"], [48, 2, 1, "", "get_params"], [48, 2, 1, "", "predict"], [48, 2, 1, "", "predict_quantiles"], [48, 2, 1, "", "score"], [48, 2, 1, "", "set_fit_request"], [48, 2, 1, "", "set_params"], [48, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[49, 2, 1, "", "apply"], [49, 2, 1, "", "compute_similarity_matrix"], [49, 2, 1, "", "decision_path"], [49, 3, 1, "", "estimators_samples_"], [49, 3, 1, "", "feature_importances_"], [49, 2, 1, "", "fit"], [49, 2, 1, "", "get_leaf_node_samples"], [49, 2, 1, "", "get_metadata_routing"], [49, 2, 1, "", "get_params"], [49, 2, 1, "", "partial_fit"], [49, 2, 1, "", "predict"], [49, 2, 1, "", "predict_log_proba"], [49, 2, 1, "", "predict_proba"], [49, 2, 1, "", "predict_quantiles"], [49, 2, 1, "", "score"], [49, 2, 1, "", "set_fit_request"], [49, 2, 1, "", "set_params"], [49, 2, 1, "", "set_partial_fit_request"], [49, 2, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[50, 2, 1, "", "apply"], [50, 2, 1, "", "compute_similarity_matrix"], [50, 2, 1, "", "decision_path"], [50, 3, 1, "", "estimators_samples_"], [50, 3, 1, "", "feature_importances_"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "get_leaf_node_samples"], [50, 2, 1, "", "get_metadata_routing"], [50, 2, 1, "", "get_params"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "predict_quantiles"], [50, 2, 1, "", "score"], [50, 2, 1, "", "set_fit_request"], [50, 2, 1, "", "set_params"], [50, 2, 1, "", "set_score_request"]], "sktree.RandomForestClassifier": [[51, 2, 1, "", "apply"], [51, 2, 1, "", "decision_path"], [51, 3, 1, "", "estimators_samples_"], [51, 3, 1, "", "feature_importances_"], [51, 2, 1, "", "fit"], [51, 2, 1, "", "get_leaf_node_samples"], [51, 2, 1, "", "get_metadata_routing"], [51, 2, 1, "", "get_params"], [51, 2, 1, "", "partial_fit"], [51, 2, 1, "", "predict"], [51, 2, 1, "", "predict_log_proba"], [51, 2, 1, "", "predict_proba"], [51, 2, 1, "", "predict_quantiles"], [51, 2, 1, "", "score"], [51, 2, 1, "", "set_fit_request"], [51, 2, 1, "", "set_params"], [51, 2, 1, "", "set_partial_fit_request"], [51, 2, 1, "", "set_score_request"]], "sktree.RandomForestRegressor": [[52, 2, 1, "", "apply"], [52, 2, 1, "", "decision_path"], [52, 3, 1, "", "estimators_samples_"], [52, 3, 1, "", "feature_importances_"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "get_leaf_node_samples"], [52, 2, 1, "", "get_metadata_routing"], [52, 2, 1, "", "get_params"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "predict_quantiles"], [52, 2, 1, "", "score"], [52, 2, 1, "", "set_fit_request"], [52, 2, 1, "", "set_params"], [52, 2, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[53, 2, 1, "", "apply"], [53, 2, 1, "", "compute_similarity_matrix"], [53, 2, 1, "", "decision_path"], [53, 3, 1, "", "estimators_samples_"], [53, 3, 1, "", "feature_importances_"], [53, 2, 1, "", "fit"], [53, 2, 1, "", "fit_predict"], [53, 2, 1, "", "fit_transform"], [53, 2, 1, "", "get_leaf_node_samples"], [53, 2, 1, "", "get_metadata_routing"], [53, 2, 1, "", "get_params"], [53, 2, 1, "", "predict"], [53, 2, 1, "", "predict_quantiles"], [53, 2, 1, "", "set_fit_request"], [53, 2, 1, "", "set_output"], [53, 2, 1, "", "set_params"], [53, 2, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[54, 2, 1, "", "apply"], [54, 2, 1, "", "compute_similarity_matrix"], [54, 2, 1, "", "decision_path"], [54, 3, 1, "", "estimators_samples_"], [54, 3, 1, "", "feature_importances_"], [54, 2, 1, "", "fit"], [54, 2, 1, "", "fit_predict"], [54, 2, 1, "", "fit_transform"], [54, 2, 1, "", "get_leaf_node_samples"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "predict"], [54, 2, 1, "", "predict_quantiles"], [54, 2, 1, "", "set_fit_request"], [54, 2, 1, "", "set_output"], [54, 2, 1, "", "set_params"], [54, 2, 1, "", "transform"]], "sktree._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "sktree.datasets": [[55, 4, 1, "", "approximate_clf_mutual_information"], [56, 4, 1, "", "approximate_clf_mutual_information_with_monte_carlo"], [57, 4, 1, "", "make_gaussian_mixture"], [58, 4, 1, "", "make_joint_factor_model"], [59, 4, 1, "", "make_quadratic_classification"], [60, 4, 1, "", "make_trunk_classification"]], "sktree.experimental": [[61, 4, 1, "", "conditional_resample"], [65, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.mutual_info": [[62, 4, 1, "", "cmi_gaussian"], [63, 4, 1, "", "entropy_gaussian"], [64, 4, 1, "", "mi_gaussian"]], "sktree.experimental.simulate": [[66, 4, 1, "", "simulate_helix"], [67, 4, 1, "", "simulate_multivariate_gaussian"], [68, 4, 1, "", "simulate_sphere"]], "sktree.stats": [[69, 1, 1, "", "FeatureImportanceForestClassifier"], [70, 1, 1, "", "FeatureImportanceForestRegressor"], [71, 1, 1, "", "PermutationForestClassifier"], [72, 1, 1, "", "PermutationForestRegressor"]], "sktree.stats.FeatureImportanceForestClassifier": [[69, 2, 1, "", "statistic"], [69, 2, 1, "", "test"], [69, 3, 1, "", "train_test_samples_"]], "sktree.stats.FeatureImportanceForestRegressor": [[70, 2, 1, "", "statistic"], [70, 2, 1, "", "test"], [70, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestClassifier": [[71, 2, 1, "", "statistic"], [71, 2, 1, "", "test"], [71, 3, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestRegressor": [[72, 2, 1, "", "statistic"], [72, 2, 1, "", "test"], [72, 3, 1, "", "train_test_samples_"]], "sktree.tree": [[73, 1, 1, "", "DecisionTreeClassifier"], [74, 1, 1, "", "DecisionTreeRegressor"], [75, 1, 1, "", "ExtraTreeClassifier"], [76, 1, 1, "", "ExtraTreeRegressor"], [77, 1, 1, "", "HonestTreeClassifier"], [78, 1, 1, "", "MultiViewDecisionTreeClassifier"], [79, 1, 1, "", "ObliqueDecisionTreeClassifier"], [80, 1, 1, "", "ObliqueDecisionTreeRegressor"], [81, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [82, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [83, 1, 1, "", "UnsupervisedDecisionTree"], [84, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [85, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.DecisionTreeClassifier": [[73, 2, 1, "", "apply"], [73, 2, 1, "", "cost_complexity_pruning_path"], [73, 2, 1, "", "decision_path"], [73, 3, 1, "", "feature_importances_"], [73, 2, 1, "", "fit"], [73, 2, 1, "", "get_depth"], [73, 2, 1, "", "get_leaf_node_samples"], [73, 2, 1, "", "get_metadata_routing"], [73, 2, 1, "", "get_n_leaves"], [73, 2, 1, "", "get_params"], [73, 2, 1, "", "partial_fit"], [73, 2, 1, "", "predict"], [73, 2, 1, "", "predict_log_proba"], [73, 2, 1, "", "predict_proba"], [73, 2, 1, "", "predict_quantiles"], [73, 2, 1, "", "score"], [73, 2, 1, "", "set_fit_request"], [73, 2, 1, "", "set_params"], [73, 2, 1, "", "set_partial_fit_request"], [73, 2, 1, "", "set_predict_proba_request"], [73, 2, 1, "", "set_predict_request"], [73, 2, 1, "", "set_score_request"]], "sktree.tree.DecisionTreeRegressor": [[74, 2, 1, "", "apply"], [74, 2, 1, "", "cost_complexity_pruning_path"], [74, 2, 1, "", "decision_path"], [74, 3, 1, "", "feature_importances_"], [74, 2, 1, "", "fit"], [74, 2, 1, "", "get_depth"], [74, 2, 1, "", "get_leaf_node_samples"], [74, 2, 1, "", "get_metadata_routing"], [74, 2, 1, "", "get_n_leaves"], [74, 2, 1, "", "get_params"], [74, 2, 1, "", "predict"], [74, 2, 1, "", "predict_quantiles"], [74, 2, 1, "", "score"], [74, 2, 1, "", "set_fit_request"], [74, 2, 1, "", "set_params"], [74, 2, 1, "", "set_predict_request"], [74, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeClassifier": [[75, 2, 1, "", "apply"], [75, 2, 1, "", "cost_complexity_pruning_path"], [75, 2, 1, "", "decision_path"], [75, 3, 1, "", "feature_importances_"], [75, 2, 1, "", "fit"], [75, 2, 1, "", "get_depth"], [75, 2, 1, "", "get_leaf_node_samples"], [75, 2, 1, "", "get_metadata_routing"], [75, 2, 1, "", "get_n_leaves"], [75, 2, 1, "", "get_params"], [75, 2, 1, "", "partial_fit"], [75, 2, 1, "", "predict"], [75, 2, 1, "", "predict_log_proba"], [75, 2, 1, "", "predict_proba"], [75, 2, 1, "", "predict_quantiles"], [75, 2, 1, "", "score"], [75, 2, 1, "", "set_fit_request"], [75, 2, 1, "", "set_params"], [75, 2, 1, "", "set_partial_fit_request"], [75, 2, 1, "", "set_predict_proba_request"], [75, 2, 1, "", "set_predict_request"], [75, 2, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeRegressor": [[76, 2, 1, "", "apply"], [76, 2, 1, "", "cost_complexity_pruning_path"], [76, 2, 1, "", "decision_path"], [76, 3, 1, "", "feature_importances_"], [76, 2, 1, "", "fit"], [76, 2, 1, "", "get_depth"], [76, 2, 1, "", "get_leaf_node_samples"], [76, 2, 1, "", "get_metadata_routing"], [76, 2, 1, "", "get_n_leaves"], [76, 2, 1, "", "get_params"], [76, 2, 1, "", "predict"], [76, 2, 1, "", "predict_quantiles"], [76, 2, 1, "", "score"], [76, 2, 1, "", "set_fit_request"], [76, 2, 1, "", "set_params"], [76, 2, 1, "", "set_predict_request"], [76, 2, 1, "", "set_score_request"]], "sktree.tree.HonestTreeClassifier": [[77, 2, 1, "", "apply"], [77, 2, 1, "", "cost_complexity_pruning_path"], [77, 2, 1, "", "decision_path"], [77, 3, 1, "", "feature_importances_"], [77, 2, 1, "", "fit"], [77, 2, 1, "", "get_depth"], [77, 2, 1, "", "get_leaf_node_samples"], [77, 2, 1, "", "get_metadata_routing"], [77, 2, 1, "", "get_n_leaves"], [77, 2, 1, "", "get_params"], [77, 2, 1, "", "partial_fit"], [77, 2, 1, "", "predict"], [77, 2, 1, "", "predict_proba"], [77, 2, 1, "", "predict_quantiles"], [77, 2, 1, "", "score"], [77, 2, 1, "", "set_fit_request"], [77, 2, 1, "", "set_params"], [77, 2, 1, "", "set_partial_fit_request"], [77, 2, 1, "", "set_predict_proba_request"], [77, 2, 1, "", "set_predict_request"], [77, 2, 1, "", "set_score_request"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[78, 2, 1, "", "apply"], [78, 2, 1, "", "compute_similarity_matrix"], [78, 2, 1, "", "cost_complexity_pruning_path"], [78, 2, 1, "", "decision_path"], [78, 3, 1, "", "feature_importances_"], [78, 2, 1, "", "fit"], [78, 2, 1, "", "get_depth"], [78, 2, 1, "", "get_leaf_node_samples"], [78, 2, 1, "", "get_metadata_routing"], [78, 2, 1, "", "get_n_leaves"], [78, 2, 1, "", "get_params"], [78, 2, 1, "", "partial_fit"], [78, 2, 1, "", "predict"], [78, 2, 1, "", "predict_log_proba"], [78, 2, 1, "", "predict_proba"], [78, 2, 1, "", "predict_quantiles"], [78, 2, 1, "", "score"], [78, 2, 1, "", "set_fit_request"], [78, 2, 1, "", "set_params"], [78, 2, 1, "", "set_partial_fit_request"], [78, 2, 1, "", "set_predict_proba_request"], [78, 2, 1, "", "set_predict_request"], [78, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[79, 2, 1, "", "apply"], [79, 2, 1, "", "compute_similarity_matrix"], [79, 2, 1, "", "cost_complexity_pruning_path"], [79, 2, 1, "", "decision_path"], [79, 3, 1, "", "feature_importances_"], [79, 2, 1, "", "fit"], [79, 2, 1, "", "get_depth"], [79, 2, 1, "", "get_leaf_node_samples"], [79, 2, 1, "", "get_metadata_routing"], [79, 2, 1, "", "get_n_leaves"], [79, 2, 1, "", "get_params"], [79, 2, 1, "", "partial_fit"], [79, 2, 1, "", "predict"], [79, 2, 1, "", "predict_log_proba"], [79, 2, 1, "", "predict_proba"], [79, 2, 1, "", "predict_quantiles"], [79, 2, 1, "", "score"], [79, 2, 1, "", "set_fit_request"], [79, 2, 1, "", "set_params"], [79, 2, 1, "", "set_partial_fit_request"], [79, 2, 1, "", "set_predict_proba_request"], [79, 2, 1, "", "set_predict_request"], [79, 2, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[80, 2, 1, "", "apply"], [80, 2, 1, "", "compute_similarity_matrix"], [80, 2, 1, "", "cost_complexity_pruning_path"], [80, 2, 1, "", "decision_path"], [80, 3, 1, "", "feature_importances_"], [80, 2, 1, "", "fit"], [80, 2, 1, "", "get_depth"], [80, 2, 1, "", "get_leaf_node_samples"], [80, 2, 1, "", "get_metadata_routing"], [80, 2, 1, "", "get_n_leaves"], [80, 2, 1, "", "get_params"], [80, 2, 1, "", "predict"], [80, 2, 1, "", "predict_quantiles"], [80, 2, 1, "", "score"], [80, 2, 1, "", "set_fit_request"], [80, 2, 1, "", "set_params"], [80, 2, 1, "", "set_predict_request"], [80, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[81, 2, 1, "", "apply"], [81, 2, 1, "", "compute_similarity_matrix"], [81, 2, 1, "", "cost_complexity_pruning_path"], [81, 2, 1, "", "decision_path"], [81, 3, 1, "", "feature_importances_"], [81, 2, 1, "", "fit"], [81, 2, 1, "", "get_depth"], [81, 2, 1, "", "get_leaf_node_samples"], [81, 2, 1, "", "get_metadata_routing"], [81, 2, 1, "", "get_n_leaves"], [81, 2, 1, "", "get_params"], [81, 2, 1, "", "partial_fit"], [81, 2, 1, "", "predict"], [81, 2, 1, "", "predict_log_proba"], [81, 2, 1, "", "predict_proba"], [81, 2, 1, "", "predict_quantiles"], [81, 2, 1, "", "score"], [81, 2, 1, "", "set_fit_request"], [81, 2, 1, "", "set_params"], [81, 2, 1, "", "set_partial_fit_request"], [81, 2, 1, "", "set_predict_proba_request"], [81, 2, 1, "", "set_predict_request"], [81, 2, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[82, 2, 1, "", "apply"], [82, 2, 1, "", "compute_similarity_matrix"], [82, 2, 1, "", "cost_complexity_pruning_path"], [82, 2, 1, "", "decision_path"], [82, 3, 1, "", "feature_importances_"], [82, 2, 1, "", "fit"], [82, 2, 1, "", "get_depth"], [82, 2, 1, "", "get_leaf_node_samples"], [82, 2, 1, "", "get_metadata_routing"], [82, 2, 1, "", "get_n_leaves"], [82, 2, 1, "", "get_params"], [82, 2, 1, "", "predict"], [82, 2, 1, "", "predict_quantiles"], [82, 2, 1, "", "score"], [82, 2, 1, "", "set_fit_request"], [82, 2, 1, "", "set_params"], [82, 2, 1, "", "set_predict_request"], [82, 2, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[83, 2, 1, "", "apply"], [83, 2, 1, "", "compute_similarity_matrix"], [83, 2, 1, "", "cost_complexity_pruning_path"], [83, 2, 1, "", "decision_path"], [83, 3, 1, "", "feature_importances_"], [83, 2, 1, "", "fit_predict"], [83, 2, 1, "", "fit_transform"], [83, 2, 1, "", "get_depth"], [83, 2, 1, "", "get_leaf_node_samples"], [83, 2, 1, "", "get_metadata_routing"], [83, 2, 1, "", "get_n_leaves"], [83, 2, 1, "", "get_params"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "predict_quantiles"], [83, 2, 1, "", "set_fit_request"], [83, 2, 1, "", "set_output"], [83, 2, 1, "", "set_params"], [83, 2, 1, "", "set_predict_request"], [83, 2, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[84, 2, 1, "", "apply"], [84, 2, 1, "", "compute_similarity_matrix"], [84, 2, 1, "", "cost_complexity_pruning_path"], [84, 2, 1, "", "decision_path"], [84, 3, 1, "", "feature_importances_"], [84, 2, 1, "", "fit_predict"], [84, 2, 1, "", "fit_transform"], [84, 2, 1, "", "get_depth"], [84, 2, 1, "", "get_leaf_node_samples"], [84, 2, 1, "", "get_metadata_routing"], [84, 2, 1, "", "get_n_leaves"], [84, 2, 1, "", "get_params"], [84, 2, 1, "", "predict"], [84, 2, 1, "", "predict_quantiles"], [84, 2, 1, "", "set_fit_request"], [84, 2, 1, "", "set_output"], [84, 2, 1, "", "set_params"], [84, 2, 1, "", "set_predict_request"], [84, 2, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 96, 97, 98, 99, 100, 101], "scikit": [0, 86, 92], "learn": [0, 12, 13, 92], "tree": [0, 1, 4, 12, 13, 17, 26, 27, 29, 33, 36, 37, 38, 39, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 92], "estim": 0, "supervis": [0, 89], "unsupervis": [0, 90], "outlier": [0, 12, 16, 92], "detect": [0, 12, 16, 92], "distanc": 0, "metric": 0, "statist": [0, 9, 10], "hypothesi": [0, 4, 5, 6, 7, 8, 9, 12, 92], "test": [0, 4, 5, 6, 7, 9, 10, 12, 92], "dataset": [0, 14, 27, 30, 31, 34, 55, 56, 57, 58, 59, 60], "experiment": [0, 61, 62, 63, 64, 65, 66, 67, 68], "function": [0, 21], "calibr": [1, 2, 12, 92], "decis": [1, 4, 12, 13, 17, 26, 27, 29, 33, 36, 89, 90, 92], "via": [1, 12, 92], "honesti": [1, 12, 92], "plot": [2, 17, 21, 22, 23, 27, 32, 34, 38, 39], "honest": [2, 89], "forest": [2, 12, 14, 17, 19, 21, 22, 23, 30, 31, 32, 34, 88, 92], "overlap": 2, "gaussian": 2, "simul": [2, 5, 6, 7, 8, 9, 10, 14, 32, 66, 67, 68], "refer": [2, 5, 6, 7, 8, 17, 30, 31, 86, 88, 89, 90], "comput": [3, 9, 10, 11, 15, 18, 24, 25, 28, 35, 40, 91], "time": [3, 11, 15, 18, 24, 25, 28, 35, 38, 40, 91], "mutual": [5, 6, 7, 9], "inform": [5, 6, 7, 9], "genuin": [5, 6, 7, 9], "might": [5, 6, 7, 8, 9, 10], "data": [5, 6, 7, 8, 9, 10, 14, 17, 20, 23], "perform": [5, 6, 7, 14], "us": [5, 6, 9, 10, 57, 89, 92], "imbalanc": 6, "discuss": [6, 7, 8, 30, 31, 37, 39], "demonstr": [7, 37], "condit": [7, 8], "co": [7, 8], "when": 8, "exhibit": 8, "independ": 8, "analysi": 8, "null": 8, "i": 8, "true": 8, "partial": [9, 10], "auc": [9, 10], "repeat": [9, 10], "second": 9, "featur": [9, 37, 88], "set": [9, 37], "all": [9, 10], "posterior": [9, 10], "ar": [9, 10], "save": [9, 10], "within": [9, 10, 17], "model": [9, 10, 17, 22], "multi": [10, 12, 13, 14, 37, 89, 92], "view": [10, 12, 13, 14, 37, 92], "mv": 10, "without": 10, "exampl": [12, 17, 57, 88, 92], "quantil": [12, 19, 20, 21, 22, 23, 92], "predict": [12, 17, 19, 20, 21, 22, 23, 30, 32, 34, 92], "random": [12, 14, 19, 21, 22, 30, 31, 32, 34, 88, 92], "compar": [12, 14, 26, 30, 33, 89, 92], "sklearn": [12, 26, 92], "sktree": [12, 26, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 92], "spars": [12, 29, 32, 39, 92], "obliqu": [12, 23, 29, 30, 31, 32, 33, 34, 38, 39, 88, 89, 92], "project": [12, 29, 37, 38, 39, 92], "splitter": [12, 36, 37, 38, 39, 92], "analyz": 14, "fit": [14, 22], "visual": [14, 17, 37], "score": 14, "extendedisolationforest": [17, 41], "gener": [17, 20, 23, 38, 39], "train": [17, 22, 27], "discret": 17, "boundari": 17, "path": 17, "length": 17, "each": [17, 37], "differ": [20, 31, 89], "interpol": 20, "method": 20, "The": 20, "interv": 21, "regressor": [21, 22], "result": [21, 22, 23], "class": 22, "sampl": [22, 37, 38], "regress": [23, 89], "v": [23, 31], "standard": [23, 33], "surfac": [27, 33], "iri": 27, "extra": [30, 31, 33], "cc18": [30, 34], "speed": 31, "size": 31, "axi": [32, 34, 37], "align": [32, 34, 37], "pariti": 32, "matrix": [37, 39], "an": [37, 38, 39], "initi": [37, 38, 39], "split": 37, "candid": 37, "scale": 37, "dimension": 37, "matric": [38, 39], "imag": 38, "seri": 38, "patch": [38, 39], "1d": 38, "2d": 38, "3d": 38, "discontigu": 38, "extratreesclassifi": 42, "extratreesregressor": 43, "honestforestclassifi": 44, "multiviewrandomforestclassifi": 45, "nearestneighborsmetaestim": 46, "obliquerandomforestclassifi": 47, "obliquerandomforestregressor": 48, "patchobliquerandomforestclassifi": 49, "patchobliquerandomforestregressor": 50, "randomforestclassifi": 51, "randomforestregressor": 52, "unsupervisedobliquerandomforest": 53, "unsupervisedrandomforest": 54, "approximate_clf_mutual_inform": 55, "approximate_clf_mutual_information_with_monte_carlo": 56, "make_gaussian_mixtur": 57, "make_joint_factor_model": 58, "make_quadratic_classif": 59, "make_trunk_classif": 60, "conditional_resampl": 61, "mutual_info": [62, 63, 64], "cmi_gaussian": 62, "entropy_gaussian": 63, "mi_gaussian": 64, "mutual_info_ksg": 65, "simulate_helix": 66, "simulate_multivariate_gaussian": 67, "simulate_spher": 68, "stat": [69, 70, 71, 72], "featureimportanceforestclassifi": 69, "featureimportanceforestregressor": 70, "permutationforestclassifi": 71, "permutationforestregressor": 72, "decisiontreeclassifi": 73, "decisiontreeregressor": 74, "extratreeclassifi": 75, "extratreeregressor": 76, "honesttreeclassifi": 77, "multiviewdecisiontreeclassifi": 78, "obliquedecisiontreeclassifi": 79, "obliquedecisiontreeregressor": 80, "patchobliquedecisiontreeclassifi": 81, "patchobliquedecisiontreeregressor": 82, "unsuperviseddecisiontre": 83, "unsupervisedobliquedecisiontre": 84, "compute_forest_similarity_matrix": 85, "content": 86, "get": 86, "start": 86, "indic": 86, "tabl": 86, "instal": 87, "depend": 87, "pip": 87, "from": 87, "sourc": 87, "meson": 87, "conda": 87, "recommend": 87, "import": 88, "evalu": [88, 90], "mathemat": 89, "formul": 89, "classif": 89, "output": 89, "problem": 89, "complex": 89, "tip": 89, "practic": 89, "limit": 89, "criterion": 90, "two": 90, "mean": 90, "fast": 90, "bic": 90, "user": 93, "guid": 93, "releas": 94, "histori": 94, "version": [96, 97, 98, 99, 100, 101], "0": [96, 97, 98, 99, 100, 101], "1": 96, "changelog": [96, 97, 98, 99, 100, 101], "code": [96, 97, 98, 99, 100, 101], "contributor": [96, 97, 98, 99, 100, 101], "2": 97, "3": 98, "4": 99, "5": 100, "6": 101}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Outlier Detection": [[0, "outlier-detection"]], "Distance Metrics": [[0, "distance-metrics"]], "Statistical Hypothesis Testing": [[0, "statistical-hypothesis-testing"]], "Datasets": [[0, "datasets"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Calibrated decision trees via honesty": [[1, "calibrated-decision-trees-via-honesty"], [12, "calibrated-decision-trees-via-honesty"], [92, "calibrated-decision-trees-via-honesty"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[2, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[2, "references"], [5, "references"], [6, "references"], [7, "references"], [8, "references"], [17, "references"], [30, "references"], [31, "references"], [86, null], [88, null], [88, null], [90, null]], "Computation times": [[3, "computation-times"], [11, "computation-times"], [15, "computation-times"], [18, "computation-times"], [24, "computation-times"], [25, "computation-times"], [28, "computation-times"], [35, "computation-times"], [40, "computation-times"], [91, "computation-times"]], "Hypothesis testing with decision trees": [[4, "hypothesis-testing-with-decision-trees"], [12, "hypothesis-testing-with-decision-trees"], [92, "hypothesis-testing-with-decision-trees"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[5, "mutual-information-for-genuine-hypothesis-testing-might"]], "Simulate data": [[5, "simulate-data"], [6, "simulate-data"], [7, "simulate-data"], [8, "simulate-data"], [9, "simulate-data"], [10, "simulate-data"], [14, "simulate-data"]], "Perform hypothesis testing using Mutual Information": [[5, "perform-hypothesis-testing-using-mutual-information"], [6, "perform-hypothesis-testing-using-mutual-information"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data": [[6, "mutual-information-for-genuine-hypothesis-testing-might-with-imbalanced-data"]], "Discussion": [[6, "discussion"], [7, "discussion"], [8, "discussion"], [30, "discussion"], [31, "discussion"], [37, "discussion"], [39, "discussion"]], "Demonstrate Conditional Mutual Information for Genuine Hypothesis Testing (Co-MIGHT)": [[7, "demonstrate-conditional-mutual-information-for-genuine-hypothesis-testing-co-might"]], "Perform hypothesis testing": [[7, "perform-hypothesis-testing"]], "Co-MIGHT when Data Exhibits Conditional Independence": [[8, "co-might-when-data-exhibits-conditional-independence"]], "Analysis when the null hypothesis is true": [[8, "analysis-when-the-null-hypothesis-is-true"]], "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[9, "compute-partial-auc-using-mutual-information-for-genuine-hypothesis-testing-might"]], "Use partial AUC as test statistic": [[9, "use-partial-auc-as-test-statistic"], [10, "use-partial-auc-as-test-statistic"]], "Repeat for the second feature set": [[9, "repeat-for-the-second-feature-set"]], "All posteriors are saved within the model": [[9, "all-posteriors-are-saved-within-the-model"], [10, "all-posteriors-are-saved-within-the-model"]], "Compute partial AUC using multi-view MIGHT (MV-MIGHT)": [[10, "compute-partial-auc-using-multi-view-might-mv-might"]], "Repeat without multi-view": [[10, "repeat-without-multi-view"]], "Examples": [[12, "examples"], [92, "examples"]], "Multi-view learning with Decision-trees": [[12, "multi-view-learning-with-decision-trees"], [13, "multi-view-learning-with-decision-trees"], [92, "multi-view-learning-with-decision-trees"]], "Outlier-detection": [[12, "outlier-detection"], [16, "outlier-detection"], [92, "outlier-detection"]], "Quantile Predictions with Random Forest": [[12, "quantile-predictions-with-random-forest"], [19, "quantile-predictions-with-random-forest"], [92, "quantile-predictions-with-random-forest"]], "Comparing sklearn and sktree decision trees": [[12, "comparing-sklearn-and-sktree-decision-trees"], [26, "comparing-sklearn-and-sktree-decision-trees"], [92, "comparing-sklearn-and-sktree-decision-trees"]], "Sparse oblique projections with oblique decision-trees": [[12, "sparse-oblique-projections-with-oblique-decision-trees"], [29, "sparse-oblique-projections-with-oblique-decision-trees"], [92, "sparse-oblique-projections-with-oblique-decision-trees"]], "Decision-tree splitters": [[12, "decision-tree-splitters"], [36, "decision-tree-splitters"], [92, "decision-tree-splitters"]], "Analyze a multi-view dataset with a multi-view random forest": [[14, "analyze-a-multi-view-dataset-with-a-multi-view-random-forest"]], "Fit Random Forest and Multi-view Random Forest": [[14, "fit-random-forest-and-multi-view-random-forest"]], "Visualize scores and compare performance": [[14, "visualize-scores-and-compare-performance"]], "ExtendedIsolationForest example": [[17, "extendedisolationforest-example"]], "Data generation": [[17, "data-generation"]], "Training of the model": [[17, "training-of-the-model"]], "Plot discrete decision boundary": [[17, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[17, "plot-path-length-decision-boundary"]], "Visualize the prediction of each tree within the forest": [[17, "visualize-the-prediction-of-each-tree-within-the-forest"]], "Predicting with different quantile interpolation methods": [[20, "predicting-with-different-quantile-interpolation-methods"]], "Generate the data": [[20, "generate-the-data"], [23, "generate-the-data"]], "The interpolation methods": [[20, "the-interpolation-methods"]], "Quantile prediction intervals with Random Forest Regressor": [[21, "quantile-prediction-intervals-with-random-forest-regressor"]], "Quantile Prediction Function": [[21, "quantile-prediction-function"]], "Plot the results": [[21, "plot-the-results"], [22, "plot-the-results"], [23, "plot-the-results"]], "Quantile prediction with Random Forest Regressor class": [[22, "quantile-prediction-with-random-forest-regressor-class"]], "Fit the model to the training samples": [[22, "fit-the-model-to-the-training-samples"]], "Quantile regression vs. standard and oblique regression forest": [[23, "quantile-regression-vs-standard-and-oblique-regression-forest"]], "Generate Quantile Predictions": [[23, "generate-quantile-predictions"]], "Plot the decision surface of decision trees trained on the iris dataset": [[27, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Compare extra oblique forest and oblique random forest predictions on cc18 datasets": [[30, "compare-extra-oblique-forest-and-oblique-random-forest-predictions-on-cc18-datasets"]], "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes": [[31, "speed-of-extra-oblique-random-forest-vs-oblique-random-forest-on-different-dataset-sizes"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[32, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Compare the decision surfaces of oblique extra-trees with standard oblique trees": [[33, "compare-the-decision-surfaces-of-oblique-extra-trees-with-standard-oblique-trees"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[34, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree": [[37, "demonstrate-and-visualize-a-multi-view-projection-matrix-for-an-axis-aligned-tree"]], "Initialize the multi-view splitter": [[37, "initialize-the-multi-view-splitter"]], "Sample the projection matrix": [[37, "sample-the-projection-matrix"]], "Sampling split candidates scaled to each feature-set dimensionality": [[37, "sampling-split-candidates-scaled-to-each-feature-set-dimensionality"]], "Plot the projection matrices of an oblique tree for sampling images, or time-series": [[38, "plot-the-projection-matrices-of-an-oblique-tree-for-sampling-images-or-time-series"]], "Initialize patch splitter": [[38, "initialize-patch-splitter"], [39, "initialize-patch-splitter"]], "Generate 1D patches": [[38, "generate-1d-patches"]], "Generate 2D patches": [[38, "generate-2d-patches"]], "Generate 3D patches": [[38, "generate-3d-patches"]], "Discontiguous Patches": [[38, "discontiguous-patches"]], "Plot the sparse projection matrices of an oblique tree": [[39, "plot-the-sparse-projection-matrices-of-an-oblique-tree"]], "Initialize the splitter": [[39, "initialize-the-splitter"]], "Generate projection matrix": [[39, "generate-projection-matrix"]], "sktree.ExtendedIsolationForest": [[41, "sktree-extendedisolationforest"]], "sktree.ExtraTreesClassifier": [[42, "sktree-extratreesclassifier"]], "sktree.ExtraTreesRegressor": [[43, "sktree-extratreesregressor"]], "sktree.HonestForestClassifier": [[44, "sktree-honestforestclassifier"]], "sktree.MultiViewRandomForestClassifier": [[45, "sktree-multiviewrandomforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[46, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[47, "sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[48, "sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[49, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[50, "sktree-patchobliquerandomforestregressor"]], "sktree.RandomForestClassifier": [[51, "sktree-randomforestclassifier"]], "sktree.RandomForestRegressor": [[52, "sktree-randomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[53, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[54, "sktree-unsupervisedrandomforest"]], "sktree.datasets.approximate_clf_mutual_information": [[55, "sktree-datasets-approximate-clf-mutual-information"]], "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo": [[56, "sktree-datasets-approximate-clf-mutual-information-with-monte-carlo"]], "sktree.datasets.make_gaussian_mixture": [[57, "sktree-datasets-make-gaussian-mixture"]], "Examples using sktree.datasets.make_gaussian_mixture": [[57, "examples-using-sktree-datasets-make-gaussian-mixture"]], "sktree.datasets.make_joint_factor_model": [[58, "sktree-datasets-make-joint-factor-model"]], "sktree.datasets.make_quadratic_classification": [[59, "sktree-datasets-make-quadratic-classification"]], "sktree.datasets.make_trunk_classification": [[60, "sktree-datasets-make-trunk-classification"]], "sktree.experimental.conditional_resample": [[61, "sktree-experimental-conditional-resample"]], "sktree.experimental.mutual_info.cmi_gaussian": [[62, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[63, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[64, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[65, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[66, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[67, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[68, "sktree-experimental-simulate-simulate-sphere"]], "sktree.stats.FeatureImportanceForestClassifier": [[69, "sktree-stats-featureimportanceforestclassifier"]], "sktree.stats.FeatureImportanceForestRegressor": [[70, "sktree-stats-featureimportanceforestregressor"]], "sktree.stats.PermutationForestClassifier": [[71, "sktree-stats-permutationforestclassifier"]], "sktree.stats.PermutationForestRegressor": [[72, "sktree-stats-permutationforestregressor"]], "sktree.tree.DecisionTreeClassifier": [[73, "sktree-tree-decisiontreeclassifier"]], "sktree.tree.DecisionTreeRegressor": [[74, "sktree-tree-decisiontreeregressor"]], "sktree.tree.ExtraTreeClassifier": [[75, "sktree-tree-extratreeclassifier"]], "sktree.tree.ExtraTreeRegressor": [[76, "sktree-tree-extratreeregressor"]], "sktree.tree.HonestTreeClassifier": [[77, "sktree-tree-honesttreeclassifier"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[78, "sktree-tree-multiviewdecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[79, "sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[80, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[81, "sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[82, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[83, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[84, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[85, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[86, "scikit-tree"]], "Contents": [[86, "contents"]], "Getting started:": [[86, null]], "Indices and tables": [[86, "indices-and-tables"]], "Installation": [[87, "installation"]], "Dependencies": [[87, "dependencies"]], "Installing with pip": [[87, "installing-with-pip"]], "Installing from source with Meson": [[87, "installing-from-source-with-meson"]], "Conda (Recommended)": [[87, "conda-recommended"]], "Oblique Random Forests": [[88, "oblique-random-forests"]], "Examples:": [[88, null]], "Feature importance evaluation": [[88, "feature-importance-evaluation"]], "Supervised Decision Trees": [[89, "supervised-decision-trees"]], "Oblique Trees": [[89, "oblique-trees"]], "Differences compared to decision trees": [[89, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[89, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[89, "classification-regression-and-multi-output-problems"]], "Complexity": [[89, "complexity"]], "Tips on practical use": [[89, "tips-on-practical-use"]], "Limitations compared to decision trees": [[89, "limitations-compared-to-decision-trees"]], "References:": [[89, null]], "Honest Trees": [[89, "honest-trees"]], "Unsupervised Decision Trees": [[90, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[90, "unsupervised-criterion"]], "Two-Means": [[90, "two-means"]], "Fast-BIC": [[90, "fast-bic"]], "Evaluating Unsupervised Trees": [[90, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[92, "examples-using-scikit-tree"]], "User Guide": [[93, "user-guide"]], "Release History": [[94, "release-history"]], "Version 0.1": [[96, "version-0-1"]], "Changelog": [[96, "changelog"], [97, "changelog"], [98, "changelog"], [99, "changelog"], [100, "changelog"], [101, "changelog"]], "Code and Documentation Contributors": [[96, "code-and-documentation-contributors"], [97, "code-and-documentation-contributors"], [98, "code-and-documentation-contributors"], [99, "code-and-documentation-contributors"], [100, "code-and-documentation-contributors"], [101, "code-and-documentation-contributors"]], "Version 0.2": [[97, "version-0-2"]], "Version 0.3": [[98, "version-0-3"]], "Version 0.4": [[99, "version-0-4"]], "Version 0.5": [[100, "version-0-5"]], "Version 0.6": [[101, "version-0-6"]]}, "indexentries": {"module": [[0, "module-sktree"], [0, "module-sktree._lib.sklearn.ensemble"]], "sktree": [[0, "module-sktree"]], "sktree._lib.sklearn.ensemble": [[0, "module-sktree._lib.sklearn.ensemble"]], "extendedisolationforest (class in sktree)": [[41, "sktree.ExtendedIsolationForest"]], "decision_function() (sktree.extendedisolationforest method)": [[41, "sktree.ExtendedIsolationForest.decision_function"]], "estimators_samples_ (sktree.extendedisolationforest property)": [[41, "sktree.ExtendedIsolationForest.estimators_samples_"]], "fit() (sktree.extendedisolationforest method)": [[41, "sktree.ExtendedIsolationForest.fit"]], "fit_predict() (sktree.extendedisolationforest method)": [[41, "sktree.ExtendedIsolationForest.fit_predict"]], "get_metadata_routing() (sktree.extendedisolationforest method)": [[41, "sktree.ExtendedIsolationForest.get_metadata_routing"]], "get_params() (sktree.extendedisolationforest method)": [[41, "sktree.ExtendedIsolationForest.get_params"]], "predict() (sktree.extendedisolationforest method)": [[41, "sktree.ExtendedIsolationForest.predict"]], "score_samples() (sktree.extendedisolationforest method)": [[41, "sktree.ExtendedIsolationForest.score_samples"]], "set_fit_request() (sktree.extendedisolationforest method)": [[41, "sktree.ExtendedIsolationForest.set_fit_request"]], "set_params() (sktree.extendedisolationforest method)": [[41, "sktree.ExtendedIsolationForest.set_params"]], "extratreesclassifier (class in sktree)": [[42, "sktree.ExtraTreesClassifier"]], "apply() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.apply"]], "decision_path() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sktree.extratreesclassifier property)": [[42, "sktree.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sktree.extratreesclassifier property)": [[42, "sktree.ExtraTreesClassifier.feature_importances_"]], "fit() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.get_params"]], "partial_fit() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.partial_fit"]], "predict() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.predict"]], "predict_log_proba() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.predict_quantiles"]], "score() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.score"]], "set_fit_request() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.set_fit_request"]], "set_params() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.set_params"]], "set_partial_fit_request() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.set_partial_fit_request"]], "set_score_request() (sktree.extratreesclassifier method)": [[42, "sktree.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sktree)": [[43, "sktree.ExtraTreesRegressor"]], "apply() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.apply"]], "decision_path() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sktree.extratreesregressor property)": [[43, "sktree.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sktree.extratreesregressor property)": [[43, "sktree.ExtraTreesRegressor.feature_importances_"]], "fit() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.get_params"]], "predict() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.predict"]], "predict_quantiles() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.predict_quantiles"]], "score() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.score"]], "set_fit_request() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.set_fit_request"]], "set_params() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.set_params"]], "set_score_request() (sktree.extratreesregressor method)": [[43, "sktree.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in sktree)": [[44, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.apply"]], "decision_path() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.decision_path"]], "estimators_samples_ (sktree.honestforestclassifier property)": [[44, "sktree.HonestForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.honestforestclassifier property)": [[44, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.get_params"]], "honest_indices_ (sktree.honestforestclassifier property)": [[44, "sktree.HonestForestClassifier.honest_indices_"]], "oob_samples_ (sktree.honestforestclassifier property)": [[44, "sktree.HonestForestClassifier.oob_samples_"]], "partial_fit() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.partial_fit"]], "predict() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.predict_proba"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.honestforestclassifier method)": [[44, "sktree.HonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.honestforestclassifier property)": [[44, "sktree.HonestForestClassifier.structure_indices_"]], "multiviewrandomforestclassifier (class in sktree)": [[45, "sktree.MultiViewRandomForestClassifier"]], "apply() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.multiviewrandomforestclassifier property)": [[45, "sktree.MultiViewRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.multiviewrandomforestclassifier property)": [[45, "sktree.MultiViewRandomForestClassifier.feature_importances_"]], "fit() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.get_params"]], "partial_fit() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.partial_fit"]], "predict() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.predict"]], "predict_log_proba() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.predict_quantiles"]], "score() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.score"]], "set_fit_request() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.set_fit_request"]], "set_params() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.multiviewrandomforestclassifier method)": [[45, "sktree.MultiViewRandomForestClassifier.set_score_request"]], "nearestneighborsmetaestimator (class in sktree)": [[46, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[46, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[46, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[46, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[46, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[46, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[46, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[47, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestclassifier property)": [[47, "sktree.ObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[47, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[47, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[48, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestregressor property)": [[48, "sktree.ObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[48, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.get_params"]], "predict() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[48, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[49, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestclassifier property)": [[49, "sktree.PatchObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[49, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[49, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[50, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.apply"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestregressor property)": [[50, "sktree.PatchObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[50, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[50, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in sktree)": [[51, "sktree.RandomForestClassifier"]], "apply() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.apply"]], "decision_path() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.randomforestclassifier property)": [[51, "sktree.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.randomforestclassifier property)": [[51, "sktree.RandomForestClassifier.feature_importances_"]], "fit() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.get_params"]], "partial_fit() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.partial_fit"]], "predict() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.predict"]], "predict_log_proba() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.predict_quantiles"]], "score() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.score"]], "set_fit_request() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.set_fit_request"]], "set_params() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.randomforestclassifier method)": [[51, "sktree.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sktree)": [[52, "sktree.RandomForestRegressor"]], "apply() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.apply"]], "decision_path() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.randomforestregressor property)": [[52, "sktree.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.randomforestregressor property)": [[52, "sktree.RandomForestRegressor.feature_importances_"]], "fit() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.get_params"]], "predict() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.predict"]], "predict_quantiles() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.predict_quantiles"]], "score() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.score"]], "set_fit_request() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.set_fit_request"]], "set_params() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.set_params"]], "set_score_request() (sktree.randomforestregressor method)": [[52, "sktree.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[53, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedobliquerandomforest property)": [[53, "sktree.UnsupervisedObliqueRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[53, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[53, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[54, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.apply"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedrandomforest property)": [[54, "sktree.UnsupervisedRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[54, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[54, "sktree.UnsupervisedRandomForest.transform"]], "approximate_clf_mutual_information() (in module sktree.datasets)": [[55, "sktree.datasets.approximate_clf_mutual_information"]], "approximate_clf_mutual_information_with_monte_carlo() (in module sktree.datasets)": [[56, "sktree.datasets.approximate_clf_mutual_information_with_monte_carlo"]], "make_gaussian_mixture() (in module sktree.datasets)": [[57, "sktree.datasets.make_gaussian_mixture"]], "make_joint_factor_model() (in module sktree.datasets)": [[58, "sktree.datasets.make_joint_factor_model"]], "make_quadratic_classification() (in module sktree.datasets)": [[59, "sktree.datasets.make_quadratic_classification"]], "make_trunk_classification() (in module sktree.datasets)": [[60, "sktree.datasets.make_trunk_classification"]], "conditional_resample() (in module sktree.experimental)": [[61, "sktree.experimental.conditional_resample"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[62, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[63, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[64, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[65, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[66, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[67, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[68, "sktree.experimental.simulate.simulate_sphere"]], "featureimportanceforestclassifier (class in sktree.stats)": [[69, "sktree.stats.FeatureImportanceForestClassifier"]], "statistic() (sktree.stats.featureimportanceforestclassifier method)": [[69, "sktree.stats.FeatureImportanceForestClassifier.statistic"]], "test() (sktree.stats.featureimportanceforestclassifier method)": [[69, "sktree.stats.FeatureImportanceForestClassifier.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestclassifier property)": [[69, "sktree.stats.FeatureImportanceForestClassifier.train_test_samples_"]], "featureimportanceforestregressor (class in sktree.stats)": [[70, "sktree.stats.FeatureImportanceForestRegressor"]], "statistic() (sktree.stats.featureimportanceforestregressor method)": [[70, "sktree.stats.FeatureImportanceForestRegressor.statistic"]], "test() (sktree.stats.featureimportanceforestregressor method)": [[70, "sktree.stats.FeatureImportanceForestRegressor.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestregressor property)": [[70, "sktree.stats.FeatureImportanceForestRegressor.train_test_samples_"]], "permutationforestclassifier (class in sktree.stats)": [[71, "sktree.stats.PermutationForestClassifier"]], "statistic() (sktree.stats.permutationforestclassifier method)": [[71, "sktree.stats.PermutationForestClassifier.statistic"]], "test() (sktree.stats.permutationforestclassifier method)": [[71, "sktree.stats.PermutationForestClassifier.test"]], "train_test_samples_ (sktree.stats.permutationforestclassifier property)": [[71, "sktree.stats.PermutationForestClassifier.train_test_samples_"]], "permutationforestregressor (class in sktree.stats)": [[72, "sktree.stats.PermutationForestRegressor"]], "statistic() (sktree.stats.permutationforestregressor method)": [[72, "sktree.stats.PermutationForestRegressor.statistic"]], "test() (sktree.stats.permutationforestregressor method)": [[72, "sktree.stats.PermutationForestRegressor.test"]], "train_test_samples_ (sktree.stats.permutationforestregressor property)": [[72, "sktree.stats.PermutationForestRegressor.train_test_samples_"]], "decisiontreeclassifier (class in sktree.tree)": [[73, "sktree.tree.DecisionTreeClassifier"]], "apply() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeclassifier property)": [[73, "sktree.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeclassifier method)": [[73, "sktree.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sktree.tree)": [[74, "sktree.tree.DecisionTreeRegressor"]], "apply() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeregressor property)": [[74, "sktree.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.get_params"]], "predict() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeregressor method)": [[74, "sktree.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sktree.tree)": [[75, "sktree.tree.ExtraTreeClassifier"]], "apply() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.extratreeclassifier property)": [[75, "sktree.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.fit"]], "get_depth() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.get_params"]], "partial_fit() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.partial_fit"]], "predict() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.predict_quantiles"]], "score() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.extratreeclassifier method)": [[75, "sktree.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sktree.tree)": [[76, "sktree.tree.ExtraTreeRegressor"]], "apply() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.extratreeregressor property)": [[76, "sktree.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.fit"]], "get_depth() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.get_params"]], "predict() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.predict_quantiles"]], "score() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.extratreeregressor method)": [[76, "sktree.tree.ExtraTreeRegressor.set_score_request"]], "honesttreeclassifier (class in sktree.tree)": [[77, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[77, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.get_params"]], "partial_fit() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.partial_fit"]], "predict() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "score() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.score"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.honesttreeclassifier method)": [[77, "sktree.tree.HonestTreeClassifier.set_score_request"]], "multiviewdecisiontreeclassifier (class in sktree.tree)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier"]], "apply() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.multiviewdecisiontreeclassifier property)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[78, "sktree.tree.MultiViewDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[79, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[80, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[81, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[82, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[83, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[83, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[83, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[84, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[85, "sktree.tree.compute_forest_similarity_matrix"]]}})