Search.setIndex({"docnames": ["api", "auto_examples/calibration/index", "auto_examples/calibration/plot_overlapping_gaussians", "auto_examples/calibration/sg_execution_times", "auto_examples/hypothesis_testing/index", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing", "auto_examples/hypothesis_testing/plot_might_auc", "auto_examples/hypothesis_testing/plot_might_mv_auc", "auto_examples/hypothesis_testing/sg_execution_times", "auto_examples/index", "auto_examples/multiview/index", "auto_examples/multiview/plot_multiview_dtc", "auto_examples/multiview/sg_execution_times", "auto_examples/outlier_detection/index", "auto_examples/outlier_detection/plot_extended_isolation_forest", "auto_examples/outlier_detection/sg_execution_times", "auto_examples/quantile_predictions/index", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest", "auto_examples/quantile_predictions/sg_execution_times", "auto_examples/sklearn_vs_sktree/index", "auto_examples/sklearn_vs_sktree/plot_iris_dtc", "auto_examples/sklearn_vs_sktree/sg_execution_times", "auto_examples/sparse_oblique_trees/index", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest", "auto_examples/sparse_oblique_trees/sg_execution_times", "auto_examples/splitters/index", "auto_examples/splitters/plot_multiview_axis_aligned_splitter", "auto_examples/splitters/plot_projection_matrices", "auto_examples/splitters/plot_sparse_projection_matrix", "auto_examples/splitters/sg_execution_times", "generated/sktree.ExtendedIsolationForest", "generated/sktree.ExtraTreesClassifier", "generated/sktree.ExtraTreesRegressor", "generated/sktree.HonestForestClassifier", "generated/sktree.MultiViewRandomForestClassifier", "generated/sktree.NearestNeighborsMetaEstimator", "generated/sktree.ObliqueRandomForestClassifier", "generated/sktree.ObliqueRandomForestRegressor", "generated/sktree.PatchObliqueRandomForestClassifier", "generated/sktree.PatchObliqueRandomForestRegressor", "generated/sktree.RandomForestClassifier", "generated/sktree.RandomForestRegressor", "generated/sktree.UnsupervisedObliqueRandomForest", "generated/sktree.UnsupervisedRandomForest", "generated/sktree.datasets.make_gaussian_mixture", "generated/sktree.datasets.make_joint_factor_model", "generated/sktree.datasets.make_quadratic_classification", "generated/sktree.experimental.conditional_resample", "generated/sktree.experimental.mutual_info.cmi_gaussian", "generated/sktree.experimental.mutual_info.entropy_gaussian", "generated/sktree.experimental.mutual_info.mi_gaussian", "generated/sktree.experimental.mutual_info_ksg", "generated/sktree.experimental.simulate.simulate_helix", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian", "generated/sktree.experimental.simulate.simulate_sphere", "generated/sktree.stats.FeatureImportanceForestClassifier", "generated/sktree.stats.FeatureImportanceForestRegressor", "generated/sktree.stats.PermutationForestClassifier", "generated/sktree.stats.PermutationForestRegressor", "generated/sktree.tree.DecisionTreeClassifier", "generated/sktree.tree.DecisionTreeRegressor", "generated/sktree.tree.ExtraTreeClassifier", "generated/sktree.tree.ExtraTreeRegressor", "generated/sktree.tree.HonestTreeClassifier", "generated/sktree.tree.MultiViewDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeClassifier", "generated/sktree.tree.ObliqueDecisionTreeRegressor", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor", "generated/sktree.tree.UnsupervisedDecisionTree", "generated/sktree.tree.UnsupervisedObliqueDecisionTree", "generated/sktree.tree.compute_forest_similarity_matrix", "index", "install", "modules/ensemble", "modules/supervised_tree", "modules/unsupervised_tree", "use", "user_guide", "whats_new", "whats_new/_contributors", "whats_new/v0.1", "whats_new/v0.2", "whats_new/v0.3", "whats_new/v0.4"], "filenames": ["api.rst", "auto_examples/calibration/index.rst", "auto_examples/calibration/plot_overlapping_gaussians.rst", "auto_examples/calibration/sg_execution_times.rst", "auto_examples/hypothesis_testing/index.rst", "auto_examples/hypothesis_testing/plot_MI_genuine_hypothesis_testing_forest.rst", "auto_examples/hypothesis_testing/plot_MI_imbalanced_hyppo_testing.rst", "auto_examples/hypothesis_testing/plot_might_auc.rst", "auto_examples/hypothesis_testing/plot_might_mv_auc.rst", "auto_examples/hypothesis_testing/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/multiview/index.rst", "auto_examples/multiview/plot_multiview_dtc.rst", "auto_examples/multiview/sg_execution_times.rst", "auto_examples/outlier_detection/index.rst", "auto_examples/outlier_detection/plot_extended_isolation_forest.rst", "auto_examples/outlier_detection/sg_execution_times.rst", "auto_examples/quantile_predictions/index.rst", "auto_examples/quantile_predictions/plot_quantile_interpolation_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_regression_intervals_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_toy_example_with_RF.rst", "auto_examples/quantile_predictions/plot_quantile_vs_standard_oblique_forest.rst", "auto_examples/quantile_predictions/sg_execution_times.rst", "auto_examples/sklearn_vs_sktree/index.rst", "auto_examples/sklearn_vs_sktree/plot_iris_dtc.rst", "auto_examples/sklearn_vs_sktree/sg_execution_times.rst", "auto_examples/sparse_oblique_trees/index.rst", "auto_examples/sparse_oblique_trees/plot_extra_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/plot_extra_orf_sample_size.rst", "auto_examples/sparse_oblique_trees/plot_oblique_axis_aligned_forests_sparse_parity.rst", "auto_examples/sparse_oblique_trees/plot_oblique_forests_iris.rst", "auto_examples/sparse_oblique_trees/plot_oblique_random_forest.rst", "auto_examples/sparse_oblique_trees/sg_execution_times.rst", "auto_examples/splitters/index.rst", "auto_examples/splitters/plot_multiview_axis_aligned_splitter.rst", "auto_examples/splitters/plot_projection_matrices.rst", "auto_examples/splitters/plot_sparse_projection_matrix.rst", "auto_examples/splitters/sg_execution_times.rst", "generated/sktree.ExtendedIsolationForest.rst", "generated/sktree.ExtraTreesClassifier.rst", "generated/sktree.ExtraTreesRegressor.rst", "generated/sktree.HonestForestClassifier.rst", "generated/sktree.MultiViewRandomForestClassifier.rst", "generated/sktree.NearestNeighborsMetaEstimator.rst", "generated/sktree.ObliqueRandomForestClassifier.rst", "generated/sktree.ObliqueRandomForestRegressor.rst", "generated/sktree.PatchObliqueRandomForestClassifier.rst", "generated/sktree.PatchObliqueRandomForestRegressor.rst", "generated/sktree.RandomForestClassifier.rst", "generated/sktree.RandomForestRegressor.rst", "generated/sktree.UnsupervisedObliqueRandomForest.rst", "generated/sktree.UnsupervisedRandomForest.rst", "generated/sktree.datasets.make_gaussian_mixture.rst", "generated/sktree.datasets.make_joint_factor_model.rst", "generated/sktree.datasets.make_quadratic_classification.rst", "generated/sktree.experimental.conditional_resample.rst", "generated/sktree.experimental.mutual_info.cmi_gaussian.rst", "generated/sktree.experimental.mutual_info.entropy_gaussian.rst", "generated/sktree.experimental.mutual_info.mi_gaussian.rst", "generated/sktree.experimental.mutual_info_ksg.rst", "generated/sktree.experimental.simulate.simulate_helix.rst", "generated/sktree.experimental.simulate.simulate_multivariate_gaussian.rst", "generated/sktree.experimental.simulate.simulate_sphere.rst", "generated/sktree.stats.FeatureImportanceForestClassifier.rst", "generated/sktree.stats.FeatureImportanceForestRegressor.rst", "generated/sktree.stats.PermutationForestClassifier.rst", "generated/sktree.stats.PermutationForestRegressor.rst", "generated/sktree.tree.DecisionTreeClassifier.rst", "generated/sktree.tree.DecisionTreeRegressor.rst", "generated/sktree.tree.ExtraTreeClassifier.rst", "generated/sktree.tree.ExtraTreeRegressor.rst", "generated/sktree.tree.HonestTreeClassifier.rst", "generated/sktree.tree.MultiViewDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.ObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.PatchObliqueDecisionTreeClassifier.rst", "generated/sktree.tree.PatchObliqueDecisionTreeRegressor.rst", "generated/sktree.tree.UnsupervisedDecisionTree.rst", "generated/sktree.tree.UnsupervisedObliqueDecisionTree.rst", "generated/sktree.tree.compute_forest_similarity_matrix.rst", "index.rst", "install.rst", "modules/ensemble.rst", "modules/supervised_tree.rst", "modules/unsupervised_tree.rst", "use.rst", "user_guide.rst", "whats_new.rst", "whats_new/_contributors.rst", "whats_new/v0.1.rst", "whats_new/v0.2.rst", "whats_new/v0.3.rst", "whats_new/v0.4.rst"], "titles": ["API Documentation", "Calibrated decision trees via honesty", "Plot honest forest calibrations on overlapping gaussian simulations", "Computation times", "Hypothesis testing with decision trees", "Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data", "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)", "Compute partial AUC using multi-view MIGHT (MV-MIGHT)", "Computation times", "Examples", "Multi-view learning with Decision-trees", "Analyze a multi-view dataset with a multi-view random forest", "Computation times", "Outlier-detection", "ExtendedIsolationForest example", "Computation times", "Quantile Predictions with Random Forest", "Predicting with different quantile interpolation methods", "Quantile prediction intervals with Random Forest Regressor", "Quantile prediction with Random Forest Regressor class", "Quantile regression vs. standard and oblique regression forest", "Computation times", "Comparing sklearn and sktree decision trees", "Plot the decision surface of decision trees trained on the iris dataset", "Computation times", "Sparse oblique projections with oblique decision-trees", "Compare extra oblique forest and oblique random forest predictions on cc18 datasets", "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes", "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation", "Compare the decision surfaces of oblique extra-trees with standard oblique trees", "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets", "Computation times", "Decision-tree splitters", "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree", "Plot the projection matrices of an oblique tree for sampling images, or time-series", "Plot the sparse projection matrices of an oblique tree", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtendedIsolationForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ExtraTreesRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.HonestForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.MultiViewRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.NearestNeighborsMetaEstimator", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.ObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.PatchObliqueRandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.RandomForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedObliqueRandomForest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree</span></code>.UnsupervisedRandomForest", "sktree.datasets.make_gaussian_mixture", "sktree.datasets.make_joint_factor_model", "sktree.datasets.make_quadratic_classification", "sktree.experimental.conditional_resample", "sktree.experimental.mutual_info.cmi_gaussian", "sktree.experimental.mutual_info.entropy_gaussian", "sktree.experimental.mutual_info.mi_gaussian", "sktree.experimental.mutual_info_ksg", "sktree.experimental.simulate.simulate_helix", "sktree.experimental.simulate.simulate_multivariate_gaussian", "sktree.experimental.simulate.simulate_sphere", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.FeatureImportanceForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.stats</span></code>.PermutationForestRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.DecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ExtraTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.HonestTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.MultiViewDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.ObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeClassifier", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.PatchObliqueDecisionTreeRegressor", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedDecisionTree", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sktree.tree</span></code>.UnsupervisedObliqueDecisionTree", "sktree.tree.compute_forest_similarity_matrix", "<strong>scikit-tree</strong>", "Installation", "<span class=\"section-number\">3. </span>Oblique Random Forests", "<span class=\"section-number\">1. </span>Supervised Decision Trees", "<span class=\"section-number\">2. </span>Unsupervised Decision Trees", "Examples using scikit-tree", "User guide: contents", "Release History", "&lt;no title&gt;", "Version 0.1", "Version 0.2", "Version 0.3", "Version 0.4"], "terms": {"sktree": [0, 2, 5, 6, 7, 8, 12, 15, 18, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 80, 81, 83, 92], "manifold": [0, 35, 46, 47, 75, 76, 80, 82, 89], "obliqu": [0, 17, 22, 24, 32, 33, 37, 42, 44, 45, 46, 47, 50, 72, 73, 74, 75, 76, 78, 80, 81, 86, 89, 90], "random": [0, 2, 5, 6, 7, 8, 11, 13, 15, 21, 22, 26, 30, 32, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 86, 89, 91], "forest": [0, 1, 3, 5, 6, 11, 13, 22, 26, 30, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 86, 89, 90, 91, 92], "we": [0, 2, 5, 6, 7, 8, 12, 15, 18, 19, 21, 24, 30, 34, 35, 36, 38, 41, 55, 56, 60, 80, 81, 82, 83, 84, 90, 91], "provid": [0, 24, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "drop": [0, 18, 19, 20, 21, 27, 28, 29, 31, 83], "replac": [0, 38, 55, 82], "featur": [0, 5, 6, 8, 12, 18, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92], "have": [0, 2, 12, 30, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 90, 91], "develop": [0, 81, 92], "These": [0, 30, 35, 82], "ar": [0, 2, 5, 6, 12, 15, 18, 19, 20, 21, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 87], "still": [0, 6, 35, 41], "compat": [0, 35, 50, 51, 77, 78], "all": [0, 6, 10, 12, 24, 28, 31, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 85, 87, 89, 90], "capabl": [0, 90], "bin": [0, 2, 21, 39, 40, 48, 49], "which": [0, 2, 5, 6, 7, 8, 15, 19, 27, 29, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 91, 92], "theoret": [0, 2, 80], "improv": [0, 2, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 89, 90, 91, 92], "runtim": [0, 38, 83], "significantli": [0, 6, 40, 45, 47, 49], "high": [0, 6, 12, 15, 27, 29, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 90], "dimension": [0, 6, 12, 27, 38, 61, 84, 89, 90], "sampl": [0, 2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 21, 24, 27, 28, 29, 31, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 89, 91], "size": [0, 2, 5, 6, 7, 8, 10, 12, 15, 19, 20, 26, 27, 32, 35, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 73, 74, 75, 76, 83, 85], "data": [0, 2, 4, 9, 10, 19, 20, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 89, 91], "us": [0, 2, 4, 9, 10, 11, 12, 15, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30, 31, 34, 35, 36, 39, 40, 43, 46, 47, 49, 50, 51, 52, 54, 55, 59, 64, 65, 66, 68, 69, 70, 71, 74, 76, 77, 78, 79, 80, 81, 82, 84, 86, 90, 91], "your": [0, 75, 76, 80], "own": [0, 39, 41, 42, 43, 44, 46, 48, 67, 69, 71, 72, 73, 75], "risk": 0, "extens": 0, "compar": [0, 2, 5, 6, 15, 19, 20, 26, 31, 32, 36, 44, 48, 49, 63, 64, 65, 66, 72, 73, 74, 75, 76, 80, 86], "decis": [0, 6, 14, 25, 27, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 86, 90, 91], "model": [0, 12, 18, 24, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 89], "tradition": 0, "implement": [0, 34, 35, 36, 38, 39, 40, 41, 52, 55, 63, 64, 65, 66, 73, 74, 80, 82, 83, 89, 90], "axi": [0, 2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 24, 26, 28, 30, 32, 33, 35, 36, 37, 42, 44, 45, 46, 47, 72, 73, 74, 75, 76, 82, 83, 85, 89, 91], "align": [0, 10, 12, 24, 26, 32, 33, 36, 37, 42, 44, 45, 46, 47, 72, 73, 74, 75, 76, 82, 83, 85, 91], "split": [0, 2, 6, 10, 15, 19, 27, 30, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85], "store": [0, 30, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 82, 83], "mean": [0, 2, 5, 7, 8, 12, 15, 19, 21, 27, 28, 29, 30, 31, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 61, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 86, 89, 90], "outcom": 0, "i": [0, 2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 89, 90, 91, 92], "e": [0, 5, 6, 15, 19, 21, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84], "label": [0, 2, 6, 7, 8, 15, 19, 20, 21, 24, 29, 34, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84], "vote": [0, 39, 41, 42, 44, 46, 48, 50, 51, 71], "leaf": [0, 15, 18, 19, 20, 21, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83], "node": [0, 10, 15, 18, 19, 20, 21, 27, 33, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85], "howev": [0, 27, 30, 34, 63, 64, 83], "more": [0, 2, 5, 6, 15, 18, 24, 27, 28, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 83], "exot": 0, "possibl": [0, 27, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "call": [0, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 92], "some": [0, 12, 15, 27, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 85], "multipl": [0, 12, 34, 35, 38, 43, 55, 72, 83, 91], "column": [0, 5, 6, 27, 28, 29, 30, 31, 34, 35, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 67, 69, 71, 72, 73, 74, 75, 76, 83, 89], "creat": [0, 6, 12, 15, 18, 19, 20, 21, 30, 34, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82], "new": [0, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 87, 90], "valu": [0, 15, 18, 19, 21, 27, 28, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 59, 60, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83], "thi": [0, 2, 5, 6, 7, 8, 12, 15, 19, 21, 27, 28, 29, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84, 87, 90, 91], "can": [0, 7, 8, 12, 15, 18, 30, 34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 89], "take": [0, 19, 24, 30, 50, 51, 55, 59, 77, 78, 90], "form": [0, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "spars": [0, 27, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83], "linear": [0, 18, 24, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "combin": [0, 5, 6, 7, 8, 24, 36, 38, 42, 44, 45, 50, 72, 73, 74, 78, 82, 83, 84], "even": [0, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "advantag": [0, 90], "structur": [0, 6, 12, 24, 34, 35, 41, 55, 67, 68, 69, 70, 71, 75, 76, 84, 89], "g": [0, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83], "an": [0, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 27, 30, 31, 33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 57, 59, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 89, 90, 91], "imag": [0, 10, 33, 37, 75, 76, 85], "indic": [0, 5, 18, 19, 20, 21, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 91], "awar": [0, 6, 34, 75, 76], "fashion": [0, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "class": [0, 2, 5, 7, 8, 10, 15, 17, 19, 22, 29, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 84, 85], "gener": [0, 2, 5, 6, 7, 8, 10, 12, 17, 19, 20, 24, 27, 28, 29, 30, 31, 34, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 74, 75, 76, 82, 83, 84, 85, 89, 92], "while": [0, 2, 6, 12, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "everyth": [0, 85], "els": [0, 15, 30, 31], "consist": [0, 15, 27, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 68, 70, 74, 76, 77, 78, 83, 91], "how": [0, 4, 5, 6, 7, 8, 10, 12, 14, 17, 19, 20, 27, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 85], "build": [0, 30, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 90, 91], "classif": [0, 12, 29, 30, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 54, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 86, 92], "regress": [0, 2, 10, 17, 22, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85, 86, 92], "thei": [0, 15, 27, 35, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83], "also": [0, 2, 24, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 91], "power": [0, 6, 82], "non": [0, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "parametr": [0, 83], "embed": 0, "cluster": [0, 2, 15, 30, 50, 51, 77, 78, 84], "The": [0, 2, 5, 6, 7, 8, 12, 15, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 91], "randomtreesembed": [0, 69], "exampl": [0, 1, 2, 4, 5, 6, 7, 8, 11, 12, 14, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 39, 40, 46, 47, 49, 50, 51, 52, 59, 68, 69, 70, 71, 74, 76, 77, 78, 80, 84, 91], "other": [0, 2, 6, 12, 15, 19, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "state": 0, "art": 0, "explicitli": 0, "base": [0, 15, 19, 27, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 92], "criterion": [0, 34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 86, 89], "varianc": [0, 19, 27, 40, 41, 45, 47, 49, 50, 51, 52, 68, 70, 71, 74, 76, 77, 78, 82, 84], "bic": [0, 50, 51, 77, 78, 86], "compris": [0, 75, 76], "those": [0, 19, 20, 27, 39, 40, 41, 44, 45, 46, 47, 48, 49, 61, 67, 68, 69, 70, 71, 73, 74, 82, 83], "avail": [0, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 81, 90], "standalon": 0, "isol": [0, 15, 38, 80, 81, 90], "ensembl": [0, 2, 15, 18, 19, 20, 21, 29, 30, 31, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 69, 70, 82], "extrem": [0, 27, 28, 39, 40, 48, 49, 69, 70], "extend": [0, 15, 38, 80, 83, 90], "allow": [0, 19, 27, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 90, 91, 92], "flexibl": [0, 84], "inher": [0, 50, 51], "produc": [0, 15], "like": [0, 15, 34, 35, 36, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84], "extract": [0, 7, 8, 27, 28, 31], "pairwis": 0, "from": [0, 2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 82, 83, 84, 91], "includ": [0, 2, 39, 41, 42, 43, 44, 46, 48, 59, 67, 69, 71, 72, 73, 75, 80, 89, 90, 91, 92], "correct": 0, "turn": 0, "proper": 0, "In": [0, 12, 15, 21, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 92], "addit": [0, 39, 40, 48, 49, 50, 51, 52, 63, 64, 77, 78, 83], "leav": [0, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "natur": [0, 60, 84], "wai": [0, 15, 27, 38, 55, 69, 70, 84], "comput": [0, 4, 5, 6, 10, 27, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 89], "neighbor": [0, 2, 38, 43, 55, 59, 80, 92], "nearest": [0, 2, 18, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 92], "interfac": [0, 34, 35, 36], "similar": [0, 27, 30, 42, 44, 45, 46, 47, 50, 51, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 89], "nearestneighbor": [0, 43, 55, 59], "perform": [0, 7, 8, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84], "conveni": 0, "simul": [0, 1, 3, 10, 26, 32, 34, 41, 44, 54, 82, 85], "beyond": [0, 83], "offer": 0, "work": [0, 12, 21, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "progress": 0, "help": [0, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "evalu": [0, 5, 6, 7, 15, 27, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 86], "mutual": [0, 4, 9, 10, 41, 56, 57, 58, 59, 60, 62, 63, 67, 72, 77, 85, 89], "inform": [0, 2, 4, 8, 9, 10, 12, 24, 28, 29, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 62, 63, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84, 85, 89], "mi": [0, 5, 6, 59, 61, 63, 64, 92], "condit": [0, 19, 20, 46, 47, 55, 56, 59, 75, 76, 89, 92], "cmi": [0, 56, 59, 61], "specif": [0, 7, 8, 34, 35, 36, 39, 41, 42, 44, 46, 48, 83, 91], "multivari": [0, 5, 7, 8, 29, 35, 56, 57, 58, 61, 75, 76, 90], "gaussian": [0, 1, 3, 10, 15, 38, 41, 52, 56, 57, 58, 61, 84, 85], "analyt": [0, 56, 57, 58, 59, 61], "solut": [0, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 56, 57, 58, 59], "entropi": [0, 39, 41, 42, 44, 46, 48, 56, 57, 58, 61, 67, 69, 71, 72, 73, 75], "distribut": [0, 5, 6, 15, 19, 21, 29, 38, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 83, 84], "demonstr": [1, 4, 6, 10, 11, 12, 17, 18, 20, 23, 26, 27, 30, 33, 35, 36, 37, 72, 85], "usag": [1, 2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 67, 68, 69, 70, 71, 85, 91], "honest": [1, 3, 6, 10, 41, 63, 64, 71, 80, 85, 86], "obtain": [1, 10, 12, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 82, 85], "predict": [1, 2, 5, 7, 22, 24, 26, 30, 32, 34, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83], "plot": [1, 3, 6, 10, 12, 23, 25, 26, 27, 28, 30, 32, 33, 37, 41, 44, 73, 75, 82, 85], "overlap": [1, 3, 10, 41, 85], "go": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36], "end": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "download": [2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 85], "full": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36], "code": [2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 77, 78, 81, 85], "result": [2, 7, 8, 15, 28, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84], "variou": [2, 39, 40, 42, 44, 45, 46, 47, 48, 49], "method": [2, 10, 17, 21, 22, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 91], "tree": [2, 5, 6, 7, 8, 12, 14, 18, 19, 20, 21, 25, 27, 28, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 81, 82, 86, 87, 89, 90, 91], "achiev": [2, 30, 40, 49, 80, 82], "see": [2, 6, 12, 18, 19, 24, 27, 28, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 84], "user": [2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 89, 91], "guid": [2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84, 89], "isoton": 2, "irf": 2, "sigmoid": 2, "sigrf": 2, "regular": [2, 6, 12, 21, 24, 27, 65, 66], "without": [2, 38, 67, 68, 69, 70, 84], "rf": [2, 6, 12, 19, 20, 29, 31, 83], "show": [2, 6, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 34, 35, 36], "curv": [2, 83], "differ": [2, 5, 6, 7, 10, 12, 17, 22, 23, 26, 27, 30, 32, 33, 34, 38, 43, 44, 53, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85, 86], "dataset": [2, 5, 6, 7, 8, 10, 11, 13, 15, 19, 21, 23, 25, 26, 29, 30, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 92], "two": [2, 5, 6, 7, 8, 12, 15, 18, 24, 27, 28, 30, 31, 34, 50, 51, 52, 63, 64, 69, 70, 82, 83, 86, 89], "red": 2, "line": [2, 19, 20], "closest": 2, "ideal": [2, 67, 68, 69, 70, 81], "figur": [2, 15, 24, 27, 35], "reproduc": [2, 38, 52, 53, 55], "1": [2, 5, 6, 7, 8, 9, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 60, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 87, 90], "ronan": [2, 46, 47, 75, 76, 80, 82, 89], "perri": [2, 46, 47, 75, 76, 80, 82, 89], "ronak": [2, 46, 47, 75, 76, 82], "mehta": [2, 46, 47, 75, 76, 82], "richard": 2, "guo": 2, "eva": 2, "yezeret": 2, "jes\u00fa": 2, "arroyo": [2, 46, 47, 75, 76, 82], "mike": 2, "powel": 2, "hayden": 2, "helm": 2, "cencheng": [2, 54, 82], "shen": [2, 54, 82], "joshua": [2, 46, 47, 51, 54, 75, 76, 82, 84], "t": [2, 6, 12, 15, 20, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 54, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84], "vogelstein": [2, 46, 47, 51, 54, 75, 76, 82, 84], "adapt": [2, 50, 51, 57, 80, 84], "estim": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 57, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 89], "quantiti": [2, 80], "arxiv": [2, 54, 80], "2021": [2, 80], "1907": [2, 80], "00325": [2, 80], "import": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 86, 90], "necessari": [2, 81], "modul": [2, 34, 35, 36, 80], "librari": [2, 87, 89], "matplotlib": [2, 6, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 81], "pyplot": [2, 6, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36], "plt": [2, 6, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36], "numpi": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 28, 29, 30, 34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81], "np": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 28, 29, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "cm": [2, 24, 30, 34, 36], "sklearn": [2, 6, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 91], "calibratedclassifiercv": 2, "randomforestclassifi": [2, 12, 29, 31, 39, 40, 42, 44, 46, 65, 69], "model_select": [2, 12, 15, 19, 20, 21, 27, 28, 29, 31, 40, 67, 68, 69, 70, 71, 73, 74, 76], "train_test_split": [2, 15, 20, 21, 40, 63, 64, 69, 70], "honestforestclassifi": [2, 5, 6, 7, 8, 89, 91], "defin": [2, 29, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 59, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 92], "classifi": [2, 30, 38, 39, 40, 41, 42, 44, 46, 48, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75], "color_dict": 2, "honestrf": 2, "f41711": 2, "1b9e77": 2, "377eb8": 2, "fdae61": 2, "n_estim": [2, 5, 6, 7, 8, 12, 15, 18, 19, 21, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64], "100": [2, 5, 6, 12, 15, 19, 27, 29, 31, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53], "n_job": [2, 5, 6, 7, 8, 12, 27, 28, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59], "2": [2, 5, 6, 7, 8, 9, 12, 15, 18, 19, 20, 21, 24, 27, 29, 30, 31, 34, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 87], "clf_cv": 2, "5": [2, 5, 6, 7, 8, 9, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 32, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 90], "max_featur": [2, 5, 6, 7, 8, 19, 27, 28, 29, 31, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "0": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 87], "rep": 2, "clf": [2, 15, 24, 27, 28, 29, 31, 38, 39, 41, 44, 48, 67, 71, 73, 83], "honest_fract": [2, 5, 6, 7, 8, 41, 71], "base_estim": 2, "cv": [2, 12, 27, 28, 29, 31, 67, 68, 71, 73, 74, 76], "def": [2, 6, 12, 19, 20, 27, 28, 29, 31], "likelihood": [2, 84], "x": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84], "lik1": 2, "prod": 2, "exp": [2, 20], "asarrai": 2, "lik0": 2, "return": [2, 5, 6, 7, 8, 12, 15, 19, 20, 27, 28, 29, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "n_sampl": [2, 5, 6, 7, 8, 12, 15, 19, 20, 21, 29, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "60000": 2, "n_bin": 2, "3": [2, 6, 15, 19, 20, 22, 24, 27, 28, 29, 30, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 87, 90], "calibration_curv": 2, "here": [2, 5, 6, 7, 8, 12, 15, 18, 34, 35, 36, 41, 83, 85], "blob": 2, "where": [2, 5, 6, 12, 24, 31, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 59, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84, 89, 91, 92], "second": [2, 5, 6, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 42, 52, 72, 83], "contain": [2, 12, 15, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "half": 2, "posit": [2, 7, 8, 38, 39, 48, 67, 69, 71, 82, 84], "neg": [2, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "probabl": [2, 39, 41, 42, 44, 46, 48, 50, 51, 52, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 83], "therefor": [2, 41, 44, 45, 46, 47, 48, 49, 75, 76, 82, 83], "center": [2, 6, 12, 15, 19, 21, 50, 51, 52, 77, 78], "y": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "make_blob": [2, 6, 12], "shuffl": [2, 5, 6, 30, 41, 44, 45, 47, 48, 49, 52, 55, 63, 64, 65, 66, 91], "fals": [2, 15, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "random_st": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 91], "42": [2, 15, 27, 28, 39, 40, 49, 52, 69, 70], "sample_weight": [2, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "randomst": [2, 15, 20, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "rand": [2, 15], "shape": [2, 6, 7, 8, 12, 15, 18, 19, 20, 21, 27, 28, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82], "train": [2, 5, 6, 10, 18, 19, 21, 23, 25, 27, 28, 30, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 85, 91], "test": [2, 9, 19, 20, 27, 28, 29, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 81, 90, 91, 92], "x_train": [2, 15, 19, 20, 21, 40, 69, 70], "x_test": [2, 15, 18, 19, 20, 21, 40, 69, 70], "y_train": [2, 15, 18, 19, 20, 21, 40, 67, 68, 69, 70], "y_test": [2, 15, 19, 20, 21, 40, 69, 70], "sw_train": 2, "sw_test": 2, "test_siz": [2, 5, 6, 7, 8, 21, 63, 64, 65, 66], "9": [2, 3, 5, 9, 15, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 81, 89], "class_one_prob": 2, "name": [2, 15, 21, 27, 28, 30, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "fit": [2, 15, 18, 19, 21, 24, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83], "predict_proba": [2, 39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "home": [2, 24], "circleci": [2, 24], "pyenv": 2, "version": [2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 87], "18": [2, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "lib": 2, "python3": 2, "site": 2, "packag": [2, 80, 81], "py": [2, 3, 5, 6, 7, 8, 9, 12, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37], "300": 2, "futurewarn": 2, "wa": [2, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50, 51, 64, 65, 66, 83, 92], "renam": [2, 38, 39, 40, 48, 49], "remov": 2, "4": [2, 5, 7, 8, 15, 19, 24, 29, 34, 35, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 87], "warn": [2, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "fig": [2, 6, 12, 15, 19, 24, 27, 28, 29, 31, 34, 35, 36], "ax": [2, 6, 12, 15, 24, 27, 28, 29, 31, 34, 35, 36, 83], "subplot": [2, 6, 12, 15, 19, 24, 27, 28, 29, 30, 31, 34, 35, 36], "figsiz": [2, 6, 15, 19, 29, 34, 35, 36], "10": [2, 3, 5, 6, 7, 8, 15, 18, 19, 20, 21, 22, 27, 28, 29, 30, 34, 35, 36, 37, 39, 40, 42, 46, 47, 48, 49, 51, 52, 53, 67, 68, 71, 72, 73, 74, 75, 76, 82, 83, 84], "y_uniqu": 2, "uniqu": [2, 27, 28, 31, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "color": [2, 6, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36], "rainbow": 2, "linspac": [2, 12, 15, 20, 28], "this_i": 2, "zip": [2, 10, 12, 15, 18, 19, 24, 30, 85], "this_x": 2, "this_sw": 2, "scatter": [2, 15, 18, 24, 30, 35], "": [2, 6, 15, 24, 27, 29, 30, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84], "50": [2, 21, 27, 28, 30, 31, 68], "c": [2, 15, 19, 20, 24, 30, 57, 58, 67, 68, 70, 71, 73, 74, 75, 76, 81], "newaxi": 2, "alpha": [2, 6, 15, 19, 30, 35, 60, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "edgecolor": [2, 15, 24, 30], "k": [2, 6, 15, 18, 30, 39, 40, 43, 59, 77], "legend": [2, 6, 15, 18, 20, 21, 24, 29, 34], "loc": [2, 5, 7, 8, 18, 20, 21, 24, 29], "best": [2, 27, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "set_xtick": [2, 34, 36], "set_ytick": [2, 34, 36], "clf_name": 2, "prob": 2, "item": [2, 18, 19, 20, 21, 28], "order": [2, 19, 27, 28, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "lexsort": 2, "51": 2, "reshap": [2, 15, 21, 30, 34, 35, 36], "25": [2, 5, 6, 9, 18, 20, 30, 32, 34, 35], "x_test_prob": 2, "linewidth": [2, 34], "l": [2, 19, 27, 28, 39, 40, 49, 67, 68, 69, 70, 71, 73, 74, 82, 83, 84], "r": [2, 15, 30, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 59, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 83], "truth": [2, 15, 20, 83], "set_ylim": [2, 19], "05": [2, 5, 6, 13], "set_xlabel": [2, 12, 19, 27, 31], "instanc": [2, 21, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90], "sort": [2, 15, 19, 27, 28, 31, 41, 43, 77, 84], "true": [2, 5, 7, 8, 15, 24, 27, 28, 29, 31, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "p": [2, 5, 7, 8, 19, 27, 28, 29, 39, 40, 41, 42, 44, 46, 48, 49, 60, 63, 64, 69, 70], "set_ylabel": [2, 12, 19, 27, 31], "upper": [2, 19, 20], "left": [2, 19, 20, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "tight_layout": [2, 6, 15, 19, 24, 30], "savefig": [2, 29], "overlapping_gaussian": 2, "png": 2, "discuss": [2, 30], "well": [2, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "closer": 2, "shown": [2, 56], "below": 2, "total": [2, 3, 5, 6, 7, 8, 9, 12, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "run": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 91, 92], "time": [2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 33, 34, 36, 49, 50, 51, 60, 63, 64, 65, 66, 73, 74, 75, 76, 77, 79, 83, 85], "script": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36], "minut": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36], "187": [2, 3], "memori": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74], "73": [2, 68], "mb": [2, 3, 5, 6, 7, 8, 9, 12, 13, 15, 16, 18, 19, 20, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37], "python": [2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 81, 85], "sourc": [2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85], "plot_overlapping_gaussian": [2, 3], "jupyt": [2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 85], "notebook": [2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 85], "ipynb": [2, 5, 6, 7, 8, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36], "galleri": [2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 85], "sphinx": [2, 5, 6, 7, 8, 10, 12, 15, 18, 19, 20, 21, 24, 27, 28, 29, 30, 31, 34, 35, 36, 85], "00": [3, 9, 13, 16, 22, 25, 32, 37, 68], "execut": [3, 9, 13, 16, 22, 25, 32, 37], "auto_examples_calibr": 3, "file": [3, 9, 13, 16, 22, 25, 32, 37, 81], "calibr": [3, 41, 80, 83], "72": [3, 89], "statist": [4, 5, 6, 10, 21, 41, 53, 63, 64, 65, 66, 67, 68, 71, 73, 74, 80, 82, 83, 85, 92], "partial": [4, 6, 9, 10, 41, 63, 67, 72, 85], "auc": [4, 6, 9, 10, 41, 63, 67, 72, 85, 92], "genuin": [4, 9, 10, 41, 63, 67, 72, 85], "might": [4, 9, 10, 39, 41, 42, 44, 45, 46, 48, 50, 51, 63, 67, 72, 83, 85], "multi": [4, 6, 9, 13, 33, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 67, 69, 71, 72, 73, 75, 80, 86, 89, 91], "view": [4, 6, 9, 13, 33, 37, 41, 42, 48, 52, 53, 63, 67, 72, 80, 91], "mv": [4, 6, 9, 10, 41, 63, 67, 72, 85], "imbalanc": [4, 9, 10, 41, 63, 67, 72, 85], "featureimportanceforestclassifi": [5, 6, 7, 8, 65, 66, 91], "nonparametr": [5, 7, 8], "present": [5, 7, 8, 15, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 77, 78, 83], "set": [5, 6, 8, 12, 15, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 91, 92], "target": [5, 6, 7, 8, 12, 19, 21, 24, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83], "framework": [5, 6], "1000": [5, 6, 7, 8, 12, 15, 19, 20, 28, 29, 41, 44, 48, 60, 61, 62, 63, 64, 65, 66], "500": [5, 7, 8], "binari": [5, 7, 8, 15, 29], "variabl": [5, 6, 7, 8, 12, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 60, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83], "within": [5, 35, 41, 43, 50, 51, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81], "each": [5, 6, 7, 12, 18, 19, 20, 21, 24, 27, 28, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84], "associ": [5, 7, 39, 41, 42, 44, 46, 48, 51, 67, 69, 71, 72, 73, 75, 83, 84], "one": [5, 6, 7, 12, 15, 18, 19, 20, 21, 34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 55, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84], "anoth": [5, 7, 83], "One": [5, 6, 7, 15, 63, 64, 67, 68, 69, 70], "could": [5, 7, 59, 67, 68, 69, 70], "think": [5, 7], "collect": [5, 7, 12, 15, 18, 19, 20, 21, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 71], "same": [5, 6, 7, 18, 19, 20, 21, 24, 34, 35, 36, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 69, 71, 72, 73, 75, 76, 79, 82, 83], "patient": [5, 7], "biomed": [5, 7], "first": [5, 6, 7, 8, 12, 24, 29, 30, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83], "strongli": [5, 7, 8], "correl": [5, 7, 8, 12], "w": [5, 7, 8, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "weakli": [5, 7, 8], "null": [5, 6, 63, 64, 65, 66], "h0": 5, "ha": [5, 7, 8, 12, 30, 31, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 89, 90, 91, 92], "respect": [5, 30, 34, 82, 84], "For": [5, 6, 12, 15, 18, 24, 27, 28, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 90], "follow": [5, 6, 18, 19, 27, 28, 31, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84], "our": [5, 27, 34, 35, 36, 80, 83], "uninform": 5, "complet": [5, 6], "disconnect": 5, "d": [5, 15, 18, 19, 20, 21, 27, 28, 34, 36, 39, 40, 49, 52, 56, 57, 58, 61, 69, 70], "separ": [5, 27, 41, 69, 70], "given": [5, 15, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 56, 57, 58, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84], "scipi": [5, 7, 8, 21, 46, 47, 55, 75, 76, 81], "special": [5, 7, 8, 83], "expit": [5, 7, 8], "stat": [5, 6, 7, 8, 21, 67, 68, 71, 73, 74], "decisiontreeclassifi": [5, 6, 7, 8, 24, 30, 34, 36, 39, 41, 48, 68, 69, 71, 72, 73, 74, 75], "seed": [5, 6, 7, 8, 12, 20, 29, 30, 50, 51, 54, 59, 60, 61, 62, 65, 66], "12345": [5, 6, 7, 8, 12], "rng": [5, 6, 7, 8, 12, 15, 19, 20, 21], "default_rng": [5, 6, 7, 8, 12, 61], "them": [5, 6, 7, 8, 15, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 82], "singl": [5, 6, 7, 8, 24, 30, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "2000": [5, 27], "n_features_set": [5, 7, 8], "20": [5, 15, 29, 30, 38, 42, 51, 72, 84], "sigma": [5, 7, 8, 20, 84], "beta": [5, 7, 8], "unimportant_mean": [5, 7, 8], "unimportant_sigma": [5, 7, 8], "uniform": [5, 7, 8, 15, 20, 29, 41, 52, 59, 60, 62, 71], "x_import": [5, 7, 8], "normal": [5, 6, 7, 8, 15, 21, 27, 28, 34, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 89], "scale": [5, 7, 8, 19, 21, 53], "hstack": [5, 6, 7, 8, 12], "x_unimport": [5, 7, 8], "binomi": [5, 7, 8], "n": [5, 7, 8, 15, 27, 28, 31, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 84, 89], "sum": [5, 7, 8, 12, 29, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "metric": [5, 6, 7, 8, 39, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 59, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 80, 84, 92], "between": [5, 6, 10, 12, 18, 19, 23, 27, 28, 29, 31, 34, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 85], "origin": [5, 6, 27, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83], "permut": [5, 6, 19, 41, 44, 45, 46, 47, 48, 49, 55, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 82, 90, 92], "row": [5, 6, 30, 35, 63, 75, 76, 92], "covariate_index": [5, 6, 63, 64, 65, 66, 92], "randomli": [5, 6, 15, 27, 34, 36, 38, 41, 44, 45, 46, 47, 48, 49, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "effici": [5, 6, 38, 43, 50, 51, 63, 64, 65, 66, 68, 70, 74, 76, 77, 87, 88, 89, 90, 91, 92], "manner": [5, 6, 83], "posterior": [5, 6, 41, 63, 64, 65, 66, 71], "n_repeat": [5, 6, 27, 28, 29, 31, 63, 64, 65, 66], "pvalu": [5, 6, 65, 66], "proport": [5, 6, 38, 39, 41, 42, 44, 46, 48, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75], "less": [5, 6, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "than": [5, 6, 21, 27, 28, 29, 30, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "observ": [5, 6, 7, 8, 15, 19, 20, 38, 57, 65, 66], "sqrt": [5, 6, 7, 8, 27, 28, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90], "est": [5, 6, 7, 8, 18], "tree_estim": [5, 6, 7, 8, 41, 71], "thu": [5, 6, 7, 8, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 73, 74, 82, 83, 84], "should": [5, 6, 7, 8, 27, 28, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81], "arang": [5, 6, 18, 19, 30, 34, 35, 36], "dtype": [5, 6, 15, 31, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "int": [5, 6, 12, 15, 19, 27, 28, 31, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "print": [5, 6, 7, 8, 27, 29, 30, 31, 34, 35, 36, 41, 44, 45, 47, 48, 49, 52], "f": [5, 6, 7, 8, 15, 20, 24, 27, 29, 31, 35], "unimport": [5, 6], "014745221429565053": 5, "002997002997002997": 5, "002889270939341354": 5, "7802197802197802": 5, "tim": [5, 6, 63, 64], "coleman": [5, 6, 63, 64], "wei": [5, 6, 63, 64], "peng": [5, 6, 63, 64], "luca": [5, 6, 63, 64], "mentch": [5, 6, 63, 64], "scalabl": [5, 6, 63, 64], "journal": [5, 6, 45, 46, 47, 63, 64, 75, 76, 80, 82], "machin": [5, 6, 27, 28, 39, 40, 41, 44, 45, 48, 49, 63, 64, 69, 70, 80, 82, 83], "learn": [5, 6, 24, 26, 27, 28, 30, 39, 40, 41, 44, 45, 48, 49, 50, 51, 54, 63, 64, 67, 68, 69, 70, 71, 73, 74, 77, 78, 80, 81, 82, 83, 84], "research": [5, 6, 45, 63, 64, 80, 82], "23": [5, 6, 40, 45, 47, 49, 63, 64, 68, 70, 74, 76, 81], "7679": [5, 6, 63, 64], "7713": [5, 6, 63, 64], "2022": [5, 6, 63, 64, 77, 80], "17": [5, 9, 37, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "937": [5, 9], "plot_mi_genuine_hypothesis_testing_forest": [5, 9], "do": [6, 10, 14, 30, 34, 35, 36, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 85], "highli": [6, 15, 90], "term": [6, 59, 60, 83, 84], "smaller": [6, 7, 8, 39, 40, 41, 48, 49, 67, 68, 69, 70, 71], "instead": [6, 12, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "leverag": 6, "knowledg": [6, 15, 38, 51, 83, 84], "analyz": [6, 10, 11, 13, 34, 35, 42, 48, 85], "multiviewdecisiontreeclassifi": [6, 8, 34], "make_multiview_classif": [6, 12], "n_features_1": [6, 12], "n_features_2": [6, 12], "cluster_std": [6, 12], "none": [6, 12, 29, 30, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "multiview": [6, 12, 52], "low": [6, 12, 15, 19, 27, 28, 53], "subspac": [6, 12, 59], "x0_first": [6, 12], "y0": [6, 12], "n_featur": [6, 12, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83], "integ": [6, 12, 38, 39, 41, 42, 44, 46, 48, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "10000": [6, 12, 19, 28], "x1_first": [6, 12], "y1": [6, 12, 62], "concaten": [6, 12, 15, 18, 19, 72], "standard_norm": [6, 12], "add": [6, 30, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 54, 60, 62, 89, 91, 92], "nois": [6, 15, 20, 52, 53, 54, 60, 62], "x0": [6, 12], "x1": [6, 12], "vstack": [6, 12], "n_features_view": [6, 12], "200": [6, 15], "feature_set_end": [6, 8, 12, 34, 42, 72], "mv_result": 6, "dict": [6, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "important_feature_stat": 6, "important_feature_pvalu": 6, "unimportant_feature_stat": 6, "unimportant_feature_pvalu": 6, "6702711340047818": 6, "000999000999000999": 6, "5274725274725275": 6, "let": [6, 83], "investig": 6, "what": [6, 30, 34, 35, 36, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "happen": 6, "when": [6, 12, 15, 18, 27, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 87, 90, 91, 92], "paramet": [6, 12, 19, 24, 27, 28, 29, 30, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 90], "kept": [6, 12], "rf_result": 6, "bar": [6, 34, 36], "axhlin": 6, "linestyl": 6, "ylabel": [6, 18, 20, 21, 24, 34, 36], "log10": 6, "xlim": [6, 15, 18, 35], "yscale": 6, "log": [6, 39, 41, 42, 44, 46, 48, 57, 58, 67, 69, 72, 73, 75, 83, 84], "00502439987974812": 6, "001998001998001998": 6, "0001252431065501547": 6, "5264735264735265": 6, "abl": [6, 81, 85], "detect": [6, 15, 38, 80], "becaus": [6, 12, 34, 40, 41, 43, 45, 47, 49, 68, 70, 74, 76, 83], "challeng": 6, "rare": 6, "unabl": [6, 15, 92], "its": [6, 7, 8, 30, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 69, 71, 72, 73, 75, 83], "note": [6, 27, 30, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 87], "both": [6, 12, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 52, 63, 64, 65, 66, 67, 69, 83], "approach": [6, 27, 82], "fail": 6, "reject": 6, "higher": [6, 7, 8, 18, 28, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 82, 83], "150": [6, 9], "117": 6, "plot_mi_imbalanced_hyppo_test": [6, 9], "calcul": [7, 8, 19, 35, 79, 84], "you": [7, 8, 31, 34, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85], "specifi": [7, 8, 35, 39, 41, 42, 44, 46, 48, 52, 53, 67, 69, 71, 72, 73, 75, 83], "maximum": [7, 8, 19, 30, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "modifi": [7, 8], "max_fpr": [7, 8], "125": [7, 8, 35, 90], "7": [7, 8, 15, 22], "permute_forest_fract": [7, 8, 63, 64], "sample_dataset_per_tre": [7, 8, 63, 64], "posterior_arr": [7, 8], "return_posterior": [7, 8, 63, 64, 65, 66], "ash": [7, 8], "90": [7, 8, 38], "5737670462272666": 7, "expect": [7, 8, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 59, 63, 64, 65, 66, 68, 70, 73, 74, 75, 76, 82], "due": [7, 8, 27, 31, 57], "weak": [7, 39, 40, 48, 49], "5047785072264876": 7, "anytim": [7, 8], "pickl": [7, 8, 83], "observe_stat_": [7, 8], "observe_samples_": [7, 8], "observe_posteriors_": [7, 8, 63, 64], "n_tree": [7, 8], "n_samples_test": [7, 8, 63, 64], "y_true_final_": [7, 8, 63, 64], "8": [7, 9, 13, 15, 16, 19, 22, 25, 27, 29, 31, 32, 35, 37, 49, 60, 71], "641": [7, 9], "204": [7, 9], "plot_might_auc": [7, 9], "hypothesi": [8, 9, 41, 63, 64, 65, 66, 67, 72, 80, 90, 91, 92], "mutli": 8, "auroc": 8, "510": 8, "est_mv": 8, "5898331687805372": 8, "lack": 8, "5547960811118706": 8, "434": [8, 9], "398": [8, 9], "plot_might_mv_auc": [8, 9], "59": 9, "161": 9, "auto_examples_hypothesis_test": 9, "116": [9, 20, 22, 28, 32, 90], "08": [9, 16, 38], "07": 9, "scikit": [10, 24, 34, 50, 51, 77, 78, 81, 82, 83, 87], "algorithm": [10, 15, 27, 38, 43, 50, 51, 59, 63, 64, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 85], "variant": [10, 11, 12, 17, 85], "concern": [10, 14, 85], "extendedisolationforest": [10, 14, 16, 85], "interpol": [10, 17, 22, 34, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85], "interv": [10, 17, 18, 20, 22, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 83, 85], "regressor": [10, 17, 21, 22, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 66, 67, 68, 69, 70, 74, 76, 85], "v": [10, 12, 17, 22, 26, 27, 32, 40, 41, 44, 45, 47, 49, 54, 68, 70, 74, 76, 82, 83, 85], "standard": [10, 15, 17, 22, 26, 27, 28, 29, 31, 32, 36, 43, 44, 45, 52, 59, 61, 73, 75, 76, 83, 85], "surfac": [10, 23, 25, 26, 32, 35, 36, 44, 73, 85], "iri": [10, 23, 25, 30, 67, 71, 73, 83, 85], "extra": [10, 26, 31, 32, 36, 39, 40, 44, 69, 70, 73, 85, 90], "cc18": [10, 26, 32, 36, 44, 82, 85], "pariti": [10, 26, 32, 44, 82, 85], "speed": [10, 26, 27, 32, 44, 49, 84, 85, 90], "strategi": [10, 33, 41, 48, 49, 55, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85], "visual": [10, 33, 35, 36, 37, 72, 85], "matrix": [10, 12, 33, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 85], "matric": [10, 33, 34, 37, 38, 50, 51, 53, 55, 73, 75, 83, 85, 89], "seri": [10, 33, 37, 75, 76, 85], "auto_examples_python": [10, 85], "auto_examples_jupyt": [10, 85], "multiviewrandomforestclassifi": 12, "uniformli": [12, 29, 34, 35], "vastli": 12, "case": [12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 83, 91], "number": [12, 15, 29, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 91, 92], "If": [12, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "known": [12, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "pass": [12, 28, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 89], "via": [12, 24, 54, 73, 74, 77, 80, 81, 82, 89, 91, 92], "splitter": [12, 41, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 91], "project": [12, 15, 24, 31, 33, 37, 42, 44, 45, 72, 73, 74, 75, 80, 81, 82, 83, 89, 90, 91, 92], "defaultdict": [12, 18, 19, 20, 21], "panda": [12, 27, 28, 29, 30, 31, 50, 51, 54, 77, 78, 89, 90, 91], "pd": [12, 27, 28, 29, 30, 31, 61], "seaborn": [12, 27, 28, 29, 31], "sn": [12, 27, 28, 29, 31], "cross_val_scor": [12, 67, 68, 71, 73, 74, 76], "five": 12, "dimens": [12, 27, 28, 29, 34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 60, 75, 76, 77, 78, 83], "vari": [12, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "thousand": 12, "fix": [12, 41, 44, 45, 46, 47, 48, 49, 59, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92], "so": [12, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "astyp": [12, 27, 28, 29, 31, 34, 35, 36], "idx": [12, 18, 19, 20, 21, 24, 30, 35], "enumer": [12, 18, 19, 20, 21, 24, 27, 28, 29, 31, 35, 41, 44, 45, 46, 47, 48, 49], "append": [12, 15, 18, 19, 20, 21, 27, 28, 29, 31], "over": [12, 15, 34, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 67, 69, 71, 75, 76, 82], "list": [12, 18, 19, 20, 21, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "arrai": [12, 15, 18, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "mvrf": 12, "cross": [12, 83], "valid": [12, 19, 21, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "rf_score": 12, "mvrf_score": 12, "now": [12, 27, 28, 29, 30, 31, 35, 81, 89, 92], "experi": 12, "df": [12, 27, 28, 29, 31], "datafram": [12, 27, 28, 29, 30, 31, 50, 51, 55, 77, 78], "melt": 12, "make": [12, 19, 27, 35, 82, 89, 91], "easier": [12, 91], "id_var": 12, "var_nam": 12, "value_nam": 12, "lineplot": [12, 28], "marker": [12, 19, 35], "o": [12, 15, 18, 27, 35, 77, 83, 89, 90], "hue": [12, 28], "set_titl": [12, 15, 27, 28, 29, 31], "As": [12, 31, 34, 36, 65, 66, 79, 83], "outperform": [12, 31, 83], "increas": [12, 19, 27, 28, 39, 40, 43, 48, 49, 53, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82], "kei": [12, 34, 67, 68, 69, 70], "621": [12, 13], "89": 12, "plot_multiview_dtc": [12, 13], "auto_examples_multiview": 13, "88": 13, "anomali": [15, 38], "isolationforest": [15, 38], "demo": 15, "toi": 15, "randn": [15, 21], "spheric": 15, "slightli": 15, "deform": 15, "notat": 15, "inlier": [15, 38], "assign": [15, 77, 78, 84], "ground": [15, 20, 83], "wherea": [15, 49, 60, 83], "outlier": [15, 38, 80], "copi": [15, 24, 55], "inspect": [15, 24, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "decisionboundarydisplai": [15, 24], "n_outlier": 15, "120": 15, "40": [15, 29], "covari": [15, 38, 52, 56, 57, 58, 59, 61, 63, 64, 65, 66, 91], "cluster_1": 15, "cluster_2": 15, "ones": [15, 34, 35, 36], "stratifi": [15, 55, 63, 91], "handl": [15, 83], "legend_el": 15, "squar": [15, 35, 40, 45, 47, 49, 68, 70, 74, 76], "titl": [15, 24, 30, 34, 35, 36], "nuniformli": 15, "extended_clf": 15, "max_sampl": [15, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "feature_combin": [15, 34, 35, 36, 38, 42, 44, 45, 50, 72, 73, 74, 78, 82, 83], "environ": [15, 81], "pleas": [15, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "rerun": 15, "cell": 15, "html": [15, 82], "represent": 15, "trust": 15, "On": [15, 63, 64], "github": [15, 81], "render": 15, "try": [15, 83], "load": [15, 19, 24, 30, 31, 53], "page": [15, 81, 87, 91], "nbviewer": 15, "org": [15, 27, 28, 29, 31, 51, 53, 67, 68, 71, 73, 74, 81, 82, 83, 84], "isolationforestisolationforest": 15, "background": 15, "repres": [15, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "whether": [15, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "area": [15, 20], "displai": [15, 24], "isoforest": 15, "extendedisoforest": 15, "disp": 15, "from_estim": [15, 24], "response_method": [15, 24], "ax_": 15, "nof": 15, "By": [15, 39, 40, 41, 48, 49, 50, 51, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 78, 82], "decision_funct": [15, 38], "measur": [15, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "Such": 15, "score": [15, 27, 28, 29, 30, 31, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "averag": [15, 27, 36, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 59, 72, 73, 74, 78, 82], "itself": [15, 29, 39, 41, 42, 44, 46, 48, 50, 51, 59], "depth": [15, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "equival": [15, 38, 40, 42, 44, 45, 48, 49, 73, 74, 83], "requir": [15, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "short": 15, "particular": [15, 38, 83], "close": [15, 38, 46, 47, 75, 76, 80, 82], "similarli": [15, 83], "larg": [15, 27, 28, 31, 39, 40, 41, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 73, 74], "correspond": [15, 18, 19, 20, 21, 24, 30, 39, 41, 42, 44, 46, 47, 48, 53, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "colorbar": [15, 34, 36], "sinusoid": 15, "ad": [15, 38, 39, 40, 48, 49, 52, 60, 67, 68, 69, 70, 83, 89, 90, 91], "top": [15, 19, 30, 80, 82], "pi": [15, 58, 60, 84], "sin": [15, 20, 52, 60], "6": [15, 27, 28, 29, 31, 34, 35, 36, 38, 53], "add_subplot": [15, 35], "111": 15, "30": [15, 27, 28, 32, 42, 68, 72], "ylim": [15, 35], "15": [15, 18, 19, 24, 30], "circl": 15, "locat": 15, "bottom": 15, "right": [15, 19, 21, 24, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "corner": 15, "inlier_sampl": 15, "outlier_sampl": 15, "theta": [15, 83], "len": [15, 18, 19, 20, 21, 30, 34, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "estimators_": [15, 30, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "max_tree_depth": 15, "max": [15, 19, 30, 38, 39, 40, 48, 49, 50, 51, 67, 68, 69, 70, 77, 78, 83], "get_depth": [15, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "rang": [15, 18, 19, 20, 21, 24, 27, 29, 30, 35, 38, 43, 75, 76], "polar": 15, "radii_in": 15, "radii_out": 15, "get": [15, 18, 19, 20, 21, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "radii": 15, "lw": [15, 19, 20], "b": [15, 30, 53], "max_depth_tre": 15, "leaf_index": 15, "appli": [15, 18, 19, 20, 21, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "_decision_path_length": 15, "squeez": [15, 35], "j": [15, 18, 41, 67, 68, 71, 73, 74, 81, 83], "nnomin": 15, "round": [15, 19, 29, 41, 42, 44, 45, 46, 47, 48, 49], "var": 15, "xlabel": [15, 18, 20, 21, 24, 34, 36], "set_xticklabel": [15, 34, 36], "get_xaxi": 15, "set_vis": 15, "get_yaxi": 15, "sahand": 15, "hariri": 15, "matia": 15, "carrasco": 15, "kind": 15, "robert": [15, 53], "brunner": 15, "ieee": [15, 38, 57], "transact": [15, 38], "engin": 15, "33": [15, 70], "1479": 15, "1489": 15, "2019": [15, 41, 71], "152": [15, 16], "32": [15, 41, 44, 45, 48, 49, 82, 83], "plot_extended_isolation_forest": [15, 16], "auto_examples_outlier_detect": 16, "31": [16, 31], "comparison": [18, 27, 28, 29, 31, 48, 49], "dure": [18, 27, 35, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "desir": [18, 21, 64, 83], "li": [18, 19, 20, 21, 46, 47, 51, 75, 76, 80, 82, 84, 89, 90, 91, 92], "point": [18, 19, 24, 29, 30, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "randomforestregressor": [18, 19, 20, 39, 40, 45, 47, 63, 64, 66, 69], "four": [18, 27, 39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "simpl": [18, 24, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "illustr": 18, "To": [18, 27, 34, 35, 36, 39, 40, 41, 44, 45, 46, 47, 48, 49, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 85], "lower": [18, 19, 24, 38, 41, 60, 62, 67, 68, 69, 70, 71, 83], "midpoint": 18, "detail": [18, 27, 28, 29, 31, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "006aff": [18, 19, 20], "ffd237": 18, "0d4599": 18, "f2a619": [18, 19, 20], "a6e5ff": [18, 21], "025": [18, 19, 20], "975": [18, 19, 20], "y_median": 18, "y_err": 18, "fell": [18, 19, 20, 21], "leaf_id": [18, 19, 20, 21], "dictionari": [18, 19, 20, 21, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "map": [18, 19, 20, 21, 30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "node_to_indic": [18, 19, 20, 21], "id": [18, 19, 20, 21, 27, 28, 31], "fall": [18, 19, 20, 21, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "leaf_ids_test": [18, 19, 20, 21], "y_pred_quantil": [18, 19, 21], "merg": [18, 19, 20, 21], "sublist": [18, 19, 20, 21], "quatil": [18, 19, 20, 21], "predit": [18, 19, 20, 21], "y_pred": [18, 19, 20, 39, 40, 45, 47, 48, 49, 68, 70, 74, 76], "sc": 18, "35": 18, "zorder": 18, "eb": 18, "median": [18, 19, 20, 21, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "errorbar": 18, "yerr": 18, "ecolor": 18, "fmt": 18, "75": [18, 34, 90], "xtick": 18, "tolist": 18, "actual": [18, 21, 34, 35, 36, 38], "055": [18, 22], "plot_quantile_interpolation_with_rf": [18, 22], "california": 19, "hous": 19, "being": [19, 43, 52, 83], "u": [19, 40, 45, 47, 49, 53, 68, 70, 74, 76, 81, 82], "95": [19, 20], "bound": [19, 35, 60, 62], "ticker": 19, "funcformatt": 19, "kfold": 19, "util": [19, 21, 31, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "check_random_st": [19, 21], "argument": [19, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 91], "ani": [19, 35, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89], "variat": [19, 29], "get_quantile_predict": 19, "dollar_formatt": 19, "lambda": [19, 83], "format": [19, 30, 34, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 77, 78], "price": 19, "fetch_california_h": 19, "min": [19, 30, 38], "perm": 19, "kf": 19, "n_split": [19, 27, 28, 29, 31], "get_n_split": 19, "y_true": [19, 39, 40, 45, 47, 48, 49, 68, 70, 74, 76], "y_pred_low": [19, 20], "y_pred_upp": [19, 20], "train_index": 19, "test_index": 19, "set_param": [19, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "y_pred_i": 19, "dollar": 19, "1e5": 19, "confid": [19, 20, 41, 83], "against": 19, "blue": [19, 20], "segment": [19, 77], "halfwai": 19, "ax1": 19, "ax2": 19, "nrow": [19, 35], "ncol": [19, 35], "y_pred_interv": 19, "sort_idx": 19, "argsort": 19, "y_min": [19, 30], "minimum": [19, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "y_max": [19, 30], "float": [19, 27, 28, 29, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "mid": 19, "upp": 19, "e0f2ff": [19, 20], "m": [19, 20, 46, 47, 53, 75, 76, 80, 82, 83], "_": [19, 24], "grei": 19, "grid": [19, 29, 30, 35], "xaxi": 19, "set_major_formatt": 19, "yaxi": 19, "set_xlim": 19, "fill_between": [19, 20], "subplots_adjust": 19, "pad": [19, 24, 30], "925": [19, 22], "plot_quantile_regression_intervals_with_rf": [19, 22], "function": [20, 24, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83], "noisi": [20, 29, 52, 53], "make_toy_dataset": 20, "lognorm": 20, "atleast_2d": 20, "xx": [20, 30], "max_depth": [20, 27, 28, 29, 30, 31, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "y_pred_quatil": 20, "y_pred_m": 20, "shade": 20, "dot": [20, 52], "black": [20, 24, 30, 34, 35], "ravel": [20, 30], "258": [20, 22], "plot_quantile_toy_example_with_rf": [20, 22], "synthet": 21, "skew": 21, "sp": 21, "obliquerandomforestregressor": [21, 82, 89], "5000": 21, "skewnorm_rv": 21, "skewnorm": 21, "rv": 21, "regr_orf": 21, "y_pred_orf": 21, "idea": 21, "better": [21, 73, 74, 82, 83], "off": [21, 29, 60], "c0c0c0": 21, "e7a4f5": 21, "qrf": 21, "orf": [21, 27, 28], "hist": 21, "count": [21, 79], "535": [21, 22], "plot_quantile_vs_standard_oblique_forest": [21, 22], "773": 22, "auto_examples_quantile_predict": 22, "quantil": [22, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80], "04": [22, 25], "03": [22, 32, 37], "01": [22, 30, 32, 35], "pair": [24, 30, 79, 83], "boundari": [24, 30, 35, 43, 46, 47, 75, 76, 89], "made": 24, "threshold": [24, 27, 38, 83], "rule": 24, "infer": [24, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "built": [24, 27, 30, 69, 70, 82, 83], "ship": 24, "load_iri": [24, 30, 67, 69, 71, 73, 83], "_lib": [24, 34, 35, 36], "plot_tre": 24, "obliquedecisiontreeclassifi": [24, 36, 41, 42, 44, 46, 74, 83], "n_class": [24, 30, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "plot_color": 24, "ryb": 24, "plot_step": [24, 30], "02": [24, 68], "clf_label": 24, "123456": [24, 29, 31], "flatten": [24, 35], "pairidx": 24, "onli": [24, 30, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "h_pad": [24, 30], "w_pad": [24, 30], "cmap": [24, 30, 34, 35, 36], "rdylbu": 24, "feature_nam": [24, 30], "target_nam": 24, "suptitl": [24, 30, 35], "borderpad": 24, "handletextpad": 24, "tight": [24, 30], "sklearn_vs_sktre": 24, "plot_iris_dtc": [24, 25], "78": 24, "userwarn": 24, "No": 24, "colormap": 24, "ignor": [24, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "togeth": [24, 30, 83, 84], "fill": [24, 30], "057": [24, 25], "auto_examples_sklearn_vs_sktre": 25, "A": [27, 28, 29, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 89], "openml": [27, 28, 31], "benchmark": [27, 28, 31, 80], "suit": [27, 28, 31], "classic": [27, 69, 70], "look": [27, 34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85], "group": [27, 34, 69, 70, 83, 84], "drawn": [27, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 61, 63, 64, 65, 66, 69, 70, 82], "select": [27, 34, 38, 40, 45, 47, 49, 53, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "among": [27, 42, 44, 45, 46, 47, 50, 51, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "chosen": [27, 39, 40, 41, 48, 49, 67, 68, 69, 70, 71], "contrast": [27, 30, 34, 36, 82, 83], "greedi": [27, 41], "phish": [27, 28, 31], "websit": [27, 28, 31], "http": [27, 28, 29, 31, 51, 53, 67, 68, 71, 73, 74, 81, 82, 83, 84], "www": [27, 28, 31, 53, 67, 68, 71, 73, 74], "search": [27, 28, 29, 31, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "type": [27, 28, 30, 31, 41, 63, 64, 65, 66, 71, 83, 89], "4534": [27, 28, 31], "wdbc": [27, 31], "1510": [27, 31], "lsvt": 27, "1484": 27, "har": [27, 28], "1478": [27, 28], "cnae": [27, 31], "1468": [27, 31], "subsampl": [27, 28, 31, 38, 41, 71, 83], "constraint": [27, 31, 39, 40, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "veri": [27, 30, 39, 40, 41, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 73, 74], "856": 27, "mostli": [27, 36], "zero": [27, 29, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "datatyp": [27, 28], "nomin": [27, 28], "455": 27, "numer": [27, 28, 31], "310": 27, "561": 27, "864": 27, "deliber": [27, 28], "ci": [27, 28], "appropri": [27, 28], "depend": [27, 28, 60, 80], "bia": [27, 82], "tradeoff": [27, 83], "substanti": 27, "faster": [27, 28, 77], "process": [27, 38, 41, 60, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90], "omit": [27, 39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "computation": [27, 65, 66], "expens": [27, 65, 66], "main": [27, 38, 81], "stem": 27, "omiss": 27, "ascend": 27, "determin": [27, 38, 40, 45, 47, 49, 55, 68, 70, 74, 76, 83], "henc": [27, 82], "complex": [27, 39, 40, 41, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 86], "nlog": 27, "draw": [27, 28, 29, 31, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "suitabl": 27, "affect": 27, "geurt": [27, 28, 39, 40, 49, 69, 70], "ernst": [27, 28, 39, 40, 49, 69, 70], "wehenkel": [27, 28, 39, 40, 49, 69, 70], "63": [27, 28, 39, 40, 49, 69, 70, 89], "2006": [27, 28, 39, 40, 49, 69, 70, 77], "123": [27, 28, 30], "n_cv": [27, 28, 29, 31], "time_taken": [27, 28], "phishingwebsit": [27, 31], "eorf": [27, 28], "325670": 27, "289174": 27, "206804": 27, "215604": 27, "247007": 27, "071102": 27, "011137": 27, "011618": 27, "997095": 27, "987410": 27, "datetim": [27, 28, 29, 31], "fetch_openml": [27, 28, 31], "repeatedkfold": [27, 28, 29, 31], "cross_valid": [27, 28, 29, 31], "extraobliquerandomforestclassifi": [27, 28, 30], "obliquerandomforestclassifi": [27, 28, 29, 30, 31, 82], "max_sample_s": [27, 28], "phishing_websit": [27, 28], "cnae_9": 27, "data_id": [27, 28, 31], "load_cc18": [27, 28, 31], "as_fram": [27, 28, 31], "parser": [27, 28, 31], "d_name": [27, 28, 31], "frame": [27, 28, 31], "iloc": [27, 28, 29, 31], "get_scor": [27, 28, 29, 31], "kwarg": [27, 28, 29, 31], "dim": [27, 28, 35], "tmp": [27, 28, 29, 31], "t0": [27, 28, 29, 31], "test_scor": [27, 28, 29, 31], "accuraci": [27, 28, 29, 31, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 69, 71, 72, 73, 75], "convert": [27, 28, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "taken": [27, 28, 52, 72, 73, 74, 82], "total_second": [27, 28], "explod": [27, 28, 29, 31], "reset_index": [27, 28, 29, 31], "inplac": [27, 28, 29, 31], "param": [27, 28, 29, 31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "concat": [27, 28, 31], "from_dict": 27, "orient": 27, "index": [27, 34, 36, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83], "groupbi": [27, 28], "set_size_inch": [27, 28, 31], "stripplot": [27, 29, 31], "queri": [27, 29, 31, 43], "dodg": [27, 29, 31], "boxplot": [27, 29, 31], "white": [27, 29, 31, 34, 36], "491": [27, 32], "80": [27, 32], "plot_extra_oblique_random_forest": [27, 32], "purpos": [28, 30, 81], "chang": [28, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 87, 88, 89, 90, 91, 92], "11055": 28, "10299": 28, "562": 28, "section": [28, 30, 53], "focu": 28, "notabl": [28, 31], "grow": [28, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "linearli": [28, 36, 53], "signific": [28, 82], "sample_s": 28, "n_row": [28, 30, 35], "df_tmp": 28, "44": [28, 32], "plot_extra_orf_sample_s": [28, 32], "problem": [29, 39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75, 80, 86], "xor": 29, "task": [29, 30, 80], "limit": [29, 43, 86, 91], "carri": [29, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "about": [29, 83], "odd": 29, "across": [29, 34, 36, 38, 39, 41, 42, 44, 46, 48, 50, 51, 52, 53, 55, 64, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78], "greater": [29, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "otherwis": [29, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "further": 29, "public": [29, 34, 35, 36, 82], "epub": 29, "siam": [29, 46, 47, 75, 76, 77, 80, 82], "doi": [29, 46, 47, 51, 75, 76, 82, 83, 84], "epdf": 29, "1137": [29, 46, 47, 75, 76, 82], "9781611974973": 29, "56": 29, "It": [29, 31, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84], "took": [29, 31], "sparse_par": 29, "p_star": 29, "random_se": [29, 30, 59, 60, 62], "OF": [29, 31], "hyper": 29, "t_d": 29, "rff": 29, "plot_sim_": 29, "jpg": 29, "273": [29, 32], "plot_oblique_axis_aligned_forests_sparse_par": [29, 32], "sepal": 30, "width": [30, 75, 76], "length": [30, 35, 38, 43, 53, 55, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "petal": 30, "third": [30, 31], "extraobliquerandomforest": 30, "92": 30, "obliquerandomforest": 30, "9866666666666667": 30, "98": 30, "9933333333333333": 30, "listedcolormap": [30, 34, 36], "1234": [30, 61], "spectral": 30, "fine": 30, "step": [30, 38, 55], "contour": 30, "plot_step_coars": 30, "coars": 30, "guess": 30, "plot_idx": 30, "n_model": 30, "sec": 30, "std": 30, "consol": 30, "str": [30, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "slice": [30, 55, 63, 64], "awai": 30, "useless": 30, "part": [30, 34, 35, 36], "string": [30, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "model_titl": 30, "model_detail": 30, "hasattr": 30, "fontsiz": 30, "mesh": 30, "input": [30, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83], "x_min": 30, "x_max": 30, "yy": 30, "meshgrid": 30, "either": [30, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "blend": 30, "isinst": 30, "z": [30, 35, 56, 59, 60, 62], "c_": 30, "contourf": 30, "choos": [30, 41, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "level": [30, 55], "adaboost": 30, "fewer": 30, "good": [30, 82], "enough": 30, "earli": 30, "estimator_alpha": 30, "coarser": 30, "regularli": 30, "space": [30, 31, 43, 50, 51, 57, 59, 77, 78, 83], "outlin": 30, "xx_coarser": 30, "yy_coars": 30, "z_points_coars": 30, "cs_point": 30, "move": 30, "next": [30, 42, 72, 81], "sequenc": [30, 55, 77], "subset": [30, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 83], "12": [30, 35], "obliquedecisiontre": 30, "extraobliquedecisiontre": 30, "basic": [30, 67, 68, 69, 70, 71], "decisiontre": 30, "three": [30, 31, 34], "distinct": [30, 52], "947": [30, 32], "2277": 30, "plot_oblique_forests_iri": [30, 32], "former": [31, 49], "entir": [31, 46, 47, 75, 76], "latter": [31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "normin": 31, "dub": 31, "statu": 31, "activ": [31, 81], "857": 31, "notic": [31, 67, 68, 69, 70], "mechan": [31, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "practic": [31, 34, 35, 36, 82, 86], "22": [31, 39, 40, 43, 48, 49, 67, 68, 69, 70], "object": [31, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "24": [31, 32, 38, 39, 40, 48, 49, 67, 68, 69, 70], "291": [31, 32], "plot_oblique_random_forest": [31, 32], "14": 32, "118": 32, "auto_examples_sparse_oblique_tre": 32, "2276": 32, "09": 32, "oper": [34, 67, 71, 73, 75, 76], "under": [34, 80], "assumpt": 34, "hyperparamet": [34, 35, 36, 83, 92], "relat": [34, 35, 36, 38, 91], "privat": [34, 35, 36], "cython": [34, 35, 36, 77, 78, 81, 90], "patch": [34, 46, 47, 75, 76, 89], "api": [34, 35, 36, 38, 41, 43, 50, 51, 71, 75, 76, 77, 78, 80, 81, 87, 88, 89, 90, 91, 92], "just": [34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 60, 63, 64, 81], "wrapper": [34, 35, 36], "underli": [34, 35, 36, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "relev": [34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80], "scalarmapp": [34, 36], "_criterion": [34, 35, 36], "gini": [34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "_oblique_splitt": [34, 36], "multiviewsplittertest": 34, "min_samples_leaf": [34, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "min_weight_leaf": [34, 35, 36], "intp": 34, "n_feature_set": [34, 42, 72], "monotonic_cst": [34, 35, 36, 39, 40, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 90], "missing_value_feature_mask": [34, 35, 36], "dummi": [34, 35, 36], "repeat": [34, 35, 60], "float32": [34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "float64": [34, 35, 36, 68, 70, 74, 76], "intern": [34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "expos": [34, 36], "tester": 34, "directli": [34, 35, 36], "init_test": [34, 35, 36], "candid": [34, 36, 82, 83], "though": 34, "contigu": [34, 35, 46, 47, 75, 76], "projection_matrix": [34, 36], "sample_projection_matrix_pi": [34, 35, 36], "green": [34, 36], "heatmap": [34, 36], "imshow": [34, 35, 36], "aspect": [34, 36], "axvlin": 34, "iend": 34, "vector": [34, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 83, 84], "set_yticklabel": [34, 36], "mappabl": [34, 36], "sm": [34, 36], "set_arrai": [34, 36], "empti": [34, 36, 41, 71], "tick": [34, 36], "set_label": [34, 36], "weight": [34, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 89], "260": [34, 37], "plot_multiview_axis_aligned_splitt": [34, 37], "patchobliquedecisiontreeclassifi": [35, 46], "done": [35, 55, 75, 76, 82, 92], "data_dim": [35, 46, 47, 75, 76], "n_col": 35, "n_depth": 35, "robust": [35, 80], "hyperrectangl": 35, "start": [35, 63, 64, 81], "min_patch_dim": [35, 46, 47, 75, 76], "max_patch_dim": [35, 46, 47, 75, 76], "constrain": [35, 83], "arbitrarili": [35, 40, 45, 47, 49, 68, 70, 74, 76], "_morf_splitt": 35, "bestpatchsplittertest": 35, "sake": [35, 36], "feature_weight": [35, 46, 47, 75, 76], "th": [35, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "appear": [35, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "dim_contigu": [35, 46, 47, 75, 76], "proj_mat": 35, "sharex": 35, "sharei": 35, "viridi": 35, "nonzero": 35, "custom": [35, 39, 40, 48, 49, 50, 51], "set_zlim": 35, "necessarili": [35, 43, 82], "certain": 35, "n_channel": 35, "n_time": 35, "channel": 35, "746": [35, 37], "plot_projection_matric": [35, 37], "control": [36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 53, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 92], "small": [36, 39, 41, 42, 44, 45, 46, 48, 50, 51], "element": [36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "bestobliquesplittertest": 36, "orang": 36, "627": [36, 37], "plot_sparse_projection_matrix": [36, 37], "633": 37, "auto_examples_splitt": 37, "auto": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "contamin": 38, "bootstrap": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 55, 63, 64, 65, 66, 82], "verbos": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 81], "warm_start": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "read": [38, 39, 40, 44, 45, 48, 49, 67, 68, 69, 70, 71, 73, 74], "default": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 91], "256": 38, "larger": [38, 41, 55, 71, 82], "amount": [38, 41, 69, 70], "paper": [38, 82, 83], "n_features_in_": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "enabl": [38, 41, 77, 90], "lead": [38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 73, 74, 82], "longer": 38, "bool": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "individu": 38, "consid": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 91], "extraobliquedecisiontreeregressor": [38, 90], "job": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 59], "parallel": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 59], "unless": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "joblib": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 81], "parallel_backend": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49], "context": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49], "processor": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49], "glossari": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "pseudo": 38, "branch": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "reus": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49], "previou": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64], "whole": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49], "21": [38, 45, 80, 82, 89], "ellipticenvelop": 38, "svm": 38, "oneclasssvm": 38, "unsupervis": [38, 50, 51, 77, 78, 80, 86, 89, 90], "support": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83, 89], "libsvm": 38, "localoutlierfactor": 38, "local": [38, 81], "factor": [38, 53], "lof": 38, "extratreeregressor": [38, 40, 69], "ceil": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "log_2": 38, "liu": 38, "et": [38, 80], "al": [38, 80], "2008": 38, "refer": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 57, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "fei": 38, "toni": 38, "ting": 38, "kai": 38, "ming": 38, "zhou": 38, "zhi": 38, "hua": 38, "mine": [38, 51, 77, 84], "icdm": 38, "eighth": 38, "confer": [38, 51, 77, 84], "acm": [38, 51, 84], "discoveri": [38, 51, 84], "tkdd": 38, "2012": 38, "attribut": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 53, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "estimator_": [38, 39, 40, 48, 49, 50, 51, 63, 64, 71], "child": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "templat": [38, 39, 40, 41, 48, 49, 50, 51, 71], "sub": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "base_estimator_": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "estimators_features_": 38, "ndarrai": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "estimators_samples_": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "max_samples_": 38, "offset_": 38, "offset": 38, "raw": 38, "score_sampl": 38, "equal": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "seen": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "feature_names_in_": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "sever": [38, 41, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "n_left": 38, "path": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "array_lik": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "csr_matrix": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "abnorm": 38, "csc_matrix": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "Not": [38, 43, 50, 51, 72, 73, 74, 75, 76, 77, 78], "convent": [38, 43, 50, 51, 77, 78], "self": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "fit_predict": [38, 50, 51, 77, 78], "get_metadata_rout": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "metadata": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "rout": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "check": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "metadatarequest": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "encapsul": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "get_param": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "deep": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82], "subobject": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "is_inli": 38, "tell": 38, "accord": [38, 43], "opposit": 38, "set_fit_request": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "unchang": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "request": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80], "enable_metadata_rout": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "set_config": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "option": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 91], "meta": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "rais": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "error": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "alia": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "metadata_rout": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "retain": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "exist": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "insid": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89], "pipelin": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "effect": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 85], "updat": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "nest": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "compon": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "__": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "properti": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 91], "dynam": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66], "identifi": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 84], "member": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66], "bag": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66], "re": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "reduc": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 82], "footprint": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66], "fetch": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66], "mai": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "slower": [38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66], "min_samples_split": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90], "min_weight_fraction_leaf": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "max_leaf_nod": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "min_impurity_decreas": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "oob_scor": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "class_weight": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "ccp_alpha": [39, 40, 41, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "max_bin": [39, 40, 48, 49], "store_leaf_valu": [39, 40, 48, 49, 67, 68, 69, 70, 72, 73, 74, 75, 76], "log_loss": [39, 48, 67, 69], "qualiti": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84], "criteria": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84], "impur": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83], "shannon": [39, 48, 67, 69], "gain": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "mathemat": [39, 46, 47, 48, 50, 51, 67, 69, 75, 76, 80, 82, 86], "formul": [39, 48, 50, 51, 67, 69, 86], "expand": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "until": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "pure": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "fraction": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "least": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "smooth": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "especi": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "log2": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90], "doe": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 59, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 83], "stop": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "partit": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 57, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 83], "found": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "rel": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 84], "reduct": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "unlimit": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "induc": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "decreas": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "equat": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "n_t": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "n_t_r": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "right_impur": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "n_t_l": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "left_impur": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "current": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83], "19": [39, 40, 48, 49, 67, 68, 69, 70], "callabl": [39, 40, 48, 49, 50, 51, 52, 60, 62, 77, 78], "out": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 65, 66, 82], "accuracy_scor": [39, 48], "signatur": [39, 40, 48, 49, 50, 51], "decision_path": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "learner": [39, 40, 48, 49], "balanc": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "balanced_subsampl": [39, 41, 42, 44, 46, 48], "class_label": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "suppos": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "output": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 86, 89], "multioutput": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "multilabel": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "everi": [39, 41, 42, 44, 46, 47, 48, 67, 69, 71, 72, 73, 75, 76, 83], "mode": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75, 81], "automat": [39, 41, 42, 44, 46, 48, 55, 67, 69, 71, 72, 73, 75], "adjust": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "invers": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "frequenc": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "bincount": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "except": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 68, 70, 74, 76, 82], "grown": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 73, 74], "multipli": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "through": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80], "minim": [39, 40, 41, 45, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83, 84], "cost": [39, 40, 41, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83], "prune": [39, 40, 41, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "subtre": [39, 40, 41, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "largest": [39, 40, 41, 48, 49, 60, 67, 68, 69, 70, 71], "255": [39, 40, 48, 49], "miss": [39, 40, 48, 49, 67, 68, 69, 70, 71, 83], "experiment": [39, 40, 48, 49, 67, 68, 69, 70, 72, 80, 90, 91, 92], "get_leaf_node_sampl": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "monoton": [39, 40, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "enforc": [39, 40, 41, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "multiclass": [39, 48, 67, 69, 71], "n_outputs_": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "hold": [39, 48, 67, 69, 71], "extratreesregressor": [39, 49, 69, 70], "optim": [39, 40, 75, 76, 83], "etc": [39, 40, 41, 44, 45, 46, 47, 48, 49, 59, 67, 68, 69, 70, 71, 73, 74], "fulli": [39, 40, 41, 44, 45, 46, 47, 48, 49, 63, 64, 67, 68, 69, 70, 71, 73, 74], "unprun": [39, 40, 41, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 73, 74], "potenti": [39, 40, 41, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 73, 74, 76], "consumpt": [39, 40, 41, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 73, 74], "make_classif": [39, 41, 44, 48], "extratreeclassifi": [39, 70], "classes_": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "n_classes_": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "feature_importances_": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 91], "oob_score_": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "oob_decision_function_": [39, 41, 42, 44, 45, 46, 48, 50, 51], "n_output": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "never": [39, 41, 42, 44, 45, 46, 48, 50, 51], "nan": [39, 41, 42, 44, 45, 46, 48, 50, 51, 64, 71], "x_leav": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "datapoint": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "up": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83], "n_node": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "goe": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "csr": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "n_nodes_ptr": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "give": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 73, 74], "real": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 68, 70, 74, 76], "would": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83], "net": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "possibli": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 83], "leaf_node_sampl": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "reach": [39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "n_leaf_node_sampl": [39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "sinc": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 89, 90, 91, 92], "partial_fit": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75, 90], "must": [39, 41, 42, 44, 45, 46, 48, 52, 60, 67, 69, 71, 72, 73, 74, 75, 77, 78], "subsequ": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "That": [39, 41, 42, 44, 46, 48, 50, 51, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78], "highest": [39, 41, 42, 44, 46, 48, 50, 51, 67, 71, 73], "predict_log_proba": [39, 41, 42, 44, 46, 48, 67, 69, 72, 73, 75], "predict_quantil": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "keyword": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 90, 91], "accept": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "n_quantil": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51], "harsh": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "correctli": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "set_partial_fit_request": [39, 41, 42, 44, 46, 48, 67, 69, 71, 72, 73, 75], "set_score_request": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "brought": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "mislead": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "cardin": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "mani": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 90], "permutation_import": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "altern": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82], "root": [39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "squared_error": [40, 45, 47, 49, 68, 70, 74, 76], "absolute_error": [40, 45, 47, 49, 68, 70, 74, 76], "friedman_ms": [40, 45, 47, 49, 68, 70, 74, 76], "poisson": [40, 45, 47, 49, 68, 70, 74, 76], "l2": [40, 45, 47, 49, 68, 70, 74, 76], "loss": [40, 45, 47, 49, 68, 70, 74, 76, 83], "termin": [40, 45, 47, 49, 68, 70, 74, 76], "friedman": [40, 45, 47, 49, 67, 68, 70, 71, 73, 74, 76, 83], "absolut": [40, 45, 47, 49, 68, 70, 74, 76], "l1": [40, 45, 47, 49, 68, 70, 74, 76], "devianc": [40, 45, 47, 49, 68, 70, 74, 76], "find": [40, 43, 45, 47, 49, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 91], "mae": [40, 49, 68, 70], "r2_score": [40, 45, 47, 49, 68, 70, 74, 76], "extratreesclassifi": [40, 48, 69, 70], "load_diabet": [40, 68, 70, 74, 76], "return_x_i": [40, 68, 69, 70, 74, 76], "reg": [40, 70], "2727": 40, "decisiontreeregressor": [40, 48, 49, 67, 70, 74, 76], "oob_prediction_": [40, 47, 49], "coeffici": [40, 45, 47, 49, 68, 70, 74, 76], "frac": [40, 45, 47, 49, 57, 58, 68, 70, 74, 76, 84], "residu": [40, 45, 47, 49, 68, 70, 74, 76], "wors": [40, 45, 47, 49, 68, 70, 74, 76], "constant": [40, 45, 47, 49, 68, 70, 74, 76], "alwai": [40, 41, 42, 44, 45, 46, 47, 48, 49, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 83], "disregard": [40, 45, 47, 49, 68, 70, 74, 76], "precomput": [40, 43, 45, 47, 49, 68, 70, 74, 76], "kernel": [40, 45, 47, 49, 54, 68, 70, 74, 76, 89], "n_samples_fit": [40, 45, 47, 49, 68, 70, 74, 76], "uniform_averag": [40, 45, 47, 49, 68, 70, 74, 76], "keep": [40, 45, 47, 49, 68, 70, 74, 76], "influenc": [40, 45, 47, 49, 68, 70, 74, 76], "multioutputregressor": [40, 45, 47, 49, 68, 70, 74, 76], "honest_prior": [41, 71], "empir": [41, 49, 71, 83], "deal": [41, 71], "prior": [41, 52, 71, 83, 84], "remain": [41, 71], "shallow": [41, 71], "namespac": [41, 71], "rather": [41, 49, 71, 84], "ident": [41, 44, 45, 46, 47, 48, 49, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78], "determinist": [41, 44, 45, 46, 47, 48, 49, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78], "behaviour": [41, 44, 45, 46, 47, 48, 49, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78], "honesti": [41, 80, 83], "unbias": 41, "doubl": 41, "access": 41, "ineffici": 41, "recommend": [41, 50, 51, 73, 74, 75, 76, 80, 83], "propens": [41, 83], "causal": 41, "breiman": [41, 44, 45, 48, 49, 67, 68, 71, 73, 74, 82, 83], "45": [41, 44, 45, 48, 49, 53, 57, 82, 83, 89], "2001": [41, 44, 45, 48, 49, 82, 83], "athei": [41, 71], "tibshirani": [41, 53, 67, 68, 71, 73, 74, 83], "wager": [41, 71], "annal": [41, 53, 71], "honest_forest": [41, 71], "n_inform": [41, 44, 45, 47, 48, 49], "n_redund": [41, 44, 48], "honesttreeclassifi": [41, 89], "n_features_": [41, 42, 44, 45, 46, 47], "honest_decision_function_": 41, "structure_indices_": [41, 71], "n_structur": [41, 71], "honest_indices_": [41, 71], "n_honest": [41, 71], "tradit": [42, 44, 45, 73, 74], "assum": [42, 72], "compute_similarity_matrix": [42, 44, 45, 46, 47, 50, 51, 72, 73, 74, 75, 76, 77, 78], "sim_matrix": [42, 44, 45, 46, 47, 50, 51, 72, 73, 74, 75, 76, 77, 78], "n_neighbor": 43, "radiu": [43, 59, 60, 62], "distanc": [43, 50, 51, 59, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84], "basedecisiontre": [43, 71, 79], "baseforest": [43, 63, 64, 79], "kneighbor": 43, "radius_neighbor": 43, "return_dist": 43, "n_queri": 43, "n_index": 43, "constructor": 43, "neigh_dist": 43, "neigh_ind": 43, "popul": 43, "sort_result": 43, "ly": 43, "ball": 43, "around": [43, 90], "befor": [43, 52, 60, 63, 64, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78], "approxim": 43, "lie": 43, "cannot": 43, "1d": [43, 46, 47, 52, 75, 76], "obliquedecisiontreeregressor": [45, 47, 89], "tomita": [45, 46, 47, 75, 76, 80, 82], "104": [45, 80, 82], "39": [45, 68, 80, 82], "2020": [45, 51, 80, 82, 84], "make_regress": [45, 47, 49], "regr": [45, 49], "86327109": 45, "along": [46, 47, 61, 63, 75, 76, 83], "presum": [46, 47, 75, 76], "un": [46, 47, 75, 76], "wrap": [46, 47, 75, 76], "adam": [46, 47, 75, 76, 80, 82, 89, 90, 91, 92], "chester": [46, 47, 75, 76, 82], "huynh": [46, 47, 75, 76, 82], "tyler": [46, 47, 75, 76, 80, 82], "jesu": [46, 47, 75, 76, 82], "jess": [46, 47, 75, 76, 82], "patsol": [46, 47, 75, 76, 82], "ben": [46, 47, 75, 76, 82], "falk": [46, 47, 75, 76, 82], "sridevi": [46, 47, 75, 76, 82], "sarma": [46, 47, 75, 76, 82], "toward": [46, 47, 75, 76, 80, 82], "gap": [46, 47, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82], "convolut": [46, 47, 75, 76, 80, 82], "network": [46, 47, 75, 76, 80, 82], "scienc": [46, 47, 75, 76, 80, 82], "77": [46, 47, 75, 76, 80, 82], "96": [46, 47, 75, 76, 80, 82], "2023": [46, 47, 53, 75, 76, 80, 82], "21m1449117": [46, 47, 75, 76, 82], "82818509": 47, "patchobliquedecisiontreeregressor": [47, 89], "histogram": [48, 49], "gradient": [48, 49], "boost": [48, 49], "histgradientboostingclassifi": 48, "fast": [48, 49, 77, 86], "big": [48, 49], "10_000": [48, 49], "histgradientboostingregressor": 49, "suggest": 49, "recent": 49, "justifi": 49, "32987858": 49, "twomean": [50, 51, 77, 78], "clustering_func": [50, 51, 77, 78], "clustering_func_arg": [50, 51, 77, 78], "simultan": [50, 51], "affin": [50, 51, 77, 78], "fastbic": [50, 51, 77, 78, 89], "maxim": [50, 51], "bayesian": [50, 51, 84], "calinski_harabasz_scor": [50, 51], "predicted_label": [50, 51], "silhouette_scor": [50, 51], "davies_bouldin_scor": [50, 51], "cpu": [50, 51], "construct": [50, 51, 82, 83], "continu": [50, 51, 64], "instant": [50, 51], "agglomerativeclust": [50, 51, 77, 78], "unsuperviseddecisiontre": [50, 51], "labels_": [50, 51], "similarity_matrix_": [50, 51], "oob": [50, 51], "dissimilarity_matrix_": [50, 51], "dissimilar": [50, 51, 89], "int64": [50, 51, 77, 78], "fit_transform": [50, 51, 77, 78], "fit_param": [50, 51, 77, 78], "transform": [50, 51, 52, 53, 59, 77, 78], "x_new": [50, 51, 77, 78], "n_features_new": [50, 51, 77, 78], "set_output": [50, 51, 77, 78], "introduc": [50, 51, 77, 78], "configur": [50, 51, 77, 78], "typic": [50, 51, 77, 78, 83], "dens": [50, 51, 77, 78, 83], "meghana": [51, 80, 84], "madhyastha": [51, 80, 84], "perci": [51, 84], "jame": [51, 82, 84], "brown": [51, 82, 84], "veronika": [51, 84], "strnadova": [51, 84], "neelei": [51, 84], "carei": [51, 82, 84], "prieb": [51, 82, 84], "randal": [51, 82, 84], "burn": [51, 82, 84], "geodes": [51, 59, 77, 80, 84], "proceed": [51, 77, 84], "26th": [51, 84], "sigkdd": [51, 84], "kdd": [51, 80, 84], "513": [51, 80, 84], "523": [51, 80, 84], "york": [51, 84], "ny": [51, 84], "usa": [51, 84], "machineri": [51, 84], "url": [51, 53, 82, 84], "1145": [51, 84], "3394486": [51, 84], "3403094": [51, 84], "noise_dim": 52, "class_prob": 52, "return_lat": 52, "add_latent_nois": 52, "mixtur": 52, "nonlinear": 52, "latent": 52, "2d": [52, 61, 67, 68, 69, 70, 75, 76], "match": [52, 82], "divid": 52, "per": [52, 63, 64, 89, 92], "poli": 52, "membership": 52, "p_i": 52, "mu_i": 52, "sigma_i": 52, "x_1": 52, "y_1": 52, "x_": 52, "np_i": 52, "y_": 52, "overset": 52, "sim": 52, "mathcal": [52, 84], "ey": 52, "shuffle_random_st": 52, "n_view": 53, "joint_rank": 53, "noise_std": 53, "return_decomp": 53, "joint": 53, "rank": [53, 59, 82], "share": 53, "common": [53, 83, 84], "signal": 53, "strength": 53, "orthonorm": 53, "view_load": 53, "n_features_i": [53, 59], "rotat": 53, "sval": 53, "singular": 53, "w_b": 53, "n_features_b": 53, "preserv": [53, 55], "inner": [53, 83], "product": [53, 83], "unitari": 53, "x_b": 53, "diag": 53, "e_b": 53, "yunjin": 53, "choi": 53, "jonathan": 53, "taylor": 53, "princip": 53, "2590": 53, "2617": 53, "2017": 53, "jstor": 53, "stabl": 53, "26362952": 53, "visit": 53, "26": 53, "quadrat": 54, "sambit": [54, 89, 90, 91], "interpret": 54, "characterist": 54, "preprint": [54, 80], "1812": 54, "00029": 54, "2018": 54, "conditional_arrai": 55, "nn_estim": 55, "replace_nbr": 55, "condition": [55, 60], "resampl": [55, 63, 64, 92], "procedur": [55, 83], "modif": 55, "techniqu": [55, 84], "place": 55, "resampled_arrai": 55, "impact": 55, "cov": [56, 57, 58, 61], "x_index": 56, "y_index": 56, "z_index": 56, "true_mi": [56, 57, 58], "h": [56, 57, 58, 83], "plug": 56, "entropy_gaussian": 56, "det": [57, 58], "georg": 57, "darbellai": 57, "igor": 57, "vajda": 57, "tran": 57, "inf": 57, "theori": [57, 82], "1315": 57, "1321": 57, "1999": 57, "kd_tree": 59, "ksg": 59, "arraylik": [59, 63, 64, 65, 66], "n_features_x": 59, "n_features_z": 59, "unsupervisedobliquerandomforest": 59, "knn": 59, "ball_tre": 59, "brute": 59, "preprocess": 59, "val": 59, "proce": 59, "kth": 59, "nbr": 59, "xyz": 59, "nn": [59, 77], "xz": 59, "yz": 59, "psi": 59, "n_x": 59, "n_y": 59, "n_": [59, 83], "digamma": 59, "n_i": 59, "denot": [59, 60, 83], "radius_a": 60, "radius_b": 60, "obs_noise_func": 60, "nature_noise_func": 60, "005": [60, 62], "return_mi_lb": [60, 62], "helix": 60, "smallest": 60, "defauult": 60, "func": 60, "independ": [60, 63, 64, 83], "lb": [60, 62], "approx": 60, "unif": 60, "afterward": 60, "epsilon_1": 60, "co": 60, "n_1": 60, "epsilon_2": 60, "n_2": 60, "epsilon_3": 60, "n_3": 60, "And": 60, "graphic": 60, "rightarrow": 60, "confound": 60, "impli": 60, "feed": 61, "noise_func": 62, "sphere": 62, "latitud": 62, "longitud": 62, "coordin": 62, "y2": 62, "y3": 62, "categor": 63, "describ": [63, 64, 77, 83], "initi": [63, 64], "Then": [63, 64, 79, 81], "onc": [63, 64], "metric_forest": [63, 64], "metric_perm_forest": [63, 64], "recomput": [63, 64], "cach": [63, 64], "reset": [63, 64, 65, 66], "upon": [63, 64, 67, 68, 69, 70], "n_samples_test_": [63, 64], "final": [63, 64, 65, 66, 82, 83, 90], "indices_train_": [63, 64], "n_samples_train": [63, 64], "indices_test_": [63, 64], "samples_": [63, 64, 65, 66], "n_samples_fin": [63, 64, 65, 66], "null_dist_": [63, 64, 65, 66], "check_input": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "metric_kwarg": [63, 64, 65, 66], "n_covari": [63, 64, 65, 66], "mse": [63, 64, 65, 66, 83], "posterior_fin": [63, 64, 65, 66], "encount": [63, 64, 65, 66], "pval": [63, 64], "train_test_samples_": [63, 64, 65, 66], "featureimportanceforestregressor": [65, 66, 91], "much": [65, 66, 83], "y_true_": [65, 66], "posterior_": [65, 66], "posterior_null_": [65, 66], "observe_stat": [65, 66], "But": [67, 68, 71, 72, 73, 74, 75, 76, 77, 78], "tree_": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "node_id": [67, 68, 69, 70], "xxx": [67, 68, 69, 70], "moreov": [67, 68, 69, 70, 83, 90, 91], "twice": [67, 68, 69, 70], "ram": [67, 68, 69, 70], "diskspac": [67, 68, 69, 70], "argmax": [67, 71, 73], "ti": [67, 71, 73], "lowest": [67, 71, 73], "en": [67, 68, 71, 73, 74, 83], "wikipedia": [67, 68, 71, 73, 74, 83], "wiki": [67, 68, 71, 73, 74, 83], "decision_tree_learn": [67, 68, 71, 73, 74, 83], "olshen": [67, 68, 71, 73, 74], "stone": [67, 68, 71, 73, 74], "wadsworth": [67, 68, 71, 73, 74], "belmont": [67, 68, 71, 73, 74], "ca": [67, 68, 71, 73, 74], "1984": [67, 68, 71, 73, 74], "hasti": [67, 68, 71, 73, 74, 83], "springer": [67, 68, 71, 73, 74, 83], "2009": [67, 68, 71, 73, 74, 83], "cutler": [67, 68, 71, 73, 74], "berkelei": [67, 68, 71, 73, 74], "edu": [67, 68, 71, 73, 74], "randomforest": [67, 68, 71, 73, 74], "cc_home": [67, 68, 71, 73, 74], "htm": [67, 68, 71, 73, 74], "93": [67, 73], "86": [67, 73, 89], "max_features_": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "_tree": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "understand": [67, 68, 69, 70, 71, 82], "builder_": [67, 68, 69, 70], "treebuild": [67, 68, 69, 70], "min_samples_split_": [67, 68, 69, 70], "need": [67, 68, 69, 70, 81, 83, 85], "bypass": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "don": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "know": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "node_count": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "cost_complexity_pruning_path": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "ccp_path": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "bunch": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "leaf_nodes_sampl": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "get_n_leav": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "n_leav": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "proba": [67, 69, 71, 72, 73, 75], "set_predict_proba_request": [67, 69, 71, 72, 73, 75], "set_predict_request": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78], "46": 68, "06": 68, "16": 68, "11": [68, 89], "pick": [69, 70], "baggingclassifi": 69, "extra_tre": [69, 70], "cl": 69, "8947": 69, "baggingregressor": 70, "instanti": 71, "93333333": 71, "empirical_prior_": 71, "feature_combinations_": [72, 73, 74], "feature_set_ends_": 72, "n_feature_sets_": 72, "fact": [73, 74], "caveat": [73, 74], "willing": [73, 74, 83], "spend": [73, 74, 83], "resourc": [73, 74, 83], "68908909": 74, "35854406": 74, "35223873": 74, "03616902": 74, "56008907": 74, "32235221": 74, "06945264": 74, "1465216": 74, "34597007": 74, "15308512": 74, "morf": [75, 76, 80, 89], "discontigu": [75, 76], "sensor": [75, 76], "mask": [75, 76], "onto": [75, 76], "data_width": [75, 76], "data_height": [75, 76], "tt": [75, 76], "last": [75, 76], "height": [75, 76], "exactli": [75, 76, 82], "albeit": [75, 76, 91], "efficienc": [75, 76], "min_patch_dims_": [75, 76], "max_patch_dims_": [75, 76], "data_dims_": [75, 76], "rg": 76, "10163671": 76, "78786738": 76, "01490768": 76, "32737289": 76, "24816698": 76, "41881754": 76, "0588273": 76, "48722913": 76, "07927208": 76, "15600762": 76, "unsupervisedcriterion": [77, 78], "abid": [77, 78], "unsupervisedsplitt": [77, 78], "enablescomput": 77, "alexand": 77, "marx": 77, "jona": 77, "fischer": 77, "sdm": 77, "415": 77, "423": 77, "evimaria": 77, "terzi": 77, "panayioti": 77, "tsapara": 77, "316": 77, "327": 77, "intermedi": 79, "aff_matrix": 79, "modern": 80, "supervis": [80, 84, 86], "strong": 80, "madhyastha2020": 80, "sporf": 80, "tomita2020": 80, "li2023": 80, "perry2021": 80, "futur": 80, "plan": 80, "stream": [80, 90], "xu2022": 80, "encourag": 80, "pull": 80, "walk": 80, "contribut": [80, 82, 89, 90, 91, 92], "licens": 80, "bsd": 80, "xu": [80, 89, 90], "haoyin": [80, 89, 90], "simplest": 80, "2110": 80, "08483": 80, "document": [80, 82], "releas": [80, 90, 91], "histori": 80, "unreleas": [80, 87], "instal": 80, "pip": 80, "meson": 80, "conda": 80, "pypi": 81, "clone": 81, "repositori": 81, "neurodata": 81, "git": 81, "com": 81, "cd": 81, "virtual": 81, "dev": 81, "build_requir": 81, "txt": 81, "spin": 81, "cli": 81, "edit": 81, "pend": 81, "repo": 81, "zipbal": 81, "master": 81, "forg": 81, "threadpoolctl": 81, "pytest": 81, "compil": 81, "llvm": 81, "openmp": 81, "poetri": 81, "directori": 81, "dodiscov": 81, "obliquepr": 81, "pr": 81, "22754": 81, "checkout": 81, "instruct": 81, "divers": 82, "sometim": 82, "slight": 82, "aim": 82, "motiv": 82, "therebi": [82, 83], "often": [82, 84], "yield": 82, "overal": 82, "intuit": [82, 83], "leo": 82, "assess": 82, "essenti": 82, "abil": 82, "mdi": 82, "l2014": 82, "suffer": 82, "flaw": 82, "conclus": 82, "deriv": 82, "most": [82, 83], "held": 82, "secondli": 82, "favor": 82, "explor": 82, "whose": 82, "jaewon": 82, "chung": 82, "benjamin": 82, "jason": 82, "yim": 82, "mauro": 82, "maggioni": 82, "jmlr": 82, "v21": 82, "664": 82, "loupp": 82, "phd": 82, "thesi": 82, "lieg": 82, "2014": 82, "dt": 83, "ot": 83, "ref": 83, "rc": 83, "landmark": 83, "varieti": [83, 84], "major": [83, 87, 88, 89, 90, 91, 92], "definit": 83, "x_i": [83, 84], "recurs": 83, "orthogon": 83, "a_i": 83, "langl": 83, "rangl": 83, "entri": 83, "rest": 83, "q_m": 83, "n_m": 83, "t_m": 83, "x_j": 83, "leq": 83, "setminu": 83, "e_i": 83, "basi": 83, "elsewher": 83, "exact": 83, "_featur": 83, "come": 83, "sparsiti": 83, "consider": 83, "disc": 83, "earlier": 83, "sai": 83, "analysi": 83, "storag": 83, "ask": 83, "question": 83, "gridsearchcv": 83, "There": 83, "imput": 83, "1023": 83, "1010933404324": 83, "predictive_analyt": 83, "quinlan": 83, "c4": 83, "program": 83, "morgan": 83, "kaufmann": 83, "1993": 83, "prevent": 83, "overfit": 83, "triplet": 83, "treatment": 83, "sacrific": 83, "goal": 84, "pattern": 84, "overview": 84, "cutpoint": 84, "cutoff": 84, "min_": 84, "sum_": 84, "hat": 84, "mu": 84, "_1": 84, "_2": 84, "sample_indic": 84, "popular": 84, "seleciton": 84, "kmean": 84, "mclust": 84, "tri": 84, "mle": 84, "hard": 84, "soft": 84, "gmm": 84, "simpler": 84, "x_n": 84, "quad": 84, "le": 84, "mu_j": 84, "notion": 84, "efficaci": 84, "scheme": 84, "adjusted_rand_scor": 84, "tip": [86, 87], "enhanc": [87, 88, 89, 90, 91, 92], "link": 87, "subscrib": 87, "io": 87, "notifi": 87, "jong": 89, "shin": 89, "bug": [89, 91, 92], "outsid": 89, "61": 89, "arbitrari": 89, "discontinu": 89, "64": 89, "67": 89, "70": 89, "patchobliquerandomforestregressor": 89, "suki": [89, 90], "57": 89, "nearestneighborsmetaestim": 89, "83": 89, "thank": [89, 90, 91, 92], "everyon": [89, 90, 91, 92], "who": [89, 90, 91, 92], "mainten": [89, 90, 91, 92], "incept": [89, 90, 91, 92], "analog": 90, "upgrad": 90, "reli": 90, "109": 90, "extraobliquedecisiontreeclassifi": 90, "2x": 90, "114": 90, "101": 90, "streamdecisionforest": 90, "undergon": 91, "organiz": 91, "overhaul": 91, "135": 91, "were": 91, "140": 91, "129": 91, "featureimport": 91, "yuxin": 91, "bai": 91, "143": 91, "156": 91, "158": 91, "featureimportanceforest": 92, "permute_per_forest_fract": 92, "145": 92, "169": 92, "164": 92, "conditional_resampl": 92, "170": 92}, "objects": {"": [[0, 0, 0, "-", "sktree"]], "sktree": [[38, 1, 1, "", "ExtendedIsolationForest"], [39, 1, 1, "", "ExtraTreesClassifier"], [40, 1, 1, "", "ExtraTreesRegressor"], [41, 1, 1, "", "HonestForestClassifier"], [42, 1, 1, "", "MultiViewRandomForestClassifier"], [43, 1, 1, "", "NearestNeighborsMetaEstimator"], [44, 1, 1, "", "ObliqueRandomForestClassifier"], [45, 1, 1, "", "ObliqueRandomForestRegressor"], [46, 1, 1, "", "PatchObliqueRandomForestClassifier"], [47, 1, 1, "", "PatchObliqueRandomForestRegressor"], [48, 1, 1, "", "RandomForestClassifier"], [49, 1, 1, "", "RandomForestRegressor"], [50, 1, 1, "", "UnsupervisedObliqueRandomForest"], [51, 1, 1, "", "UnsupervisedRandomForest"]], "sktree.ExtendedIsolationForest": [[38, 2, 1, "", "base_estimator_"], [38, 3, 1, "", "decision_function"], [38, 2, 1, "", "estimators_samples_"], [38, 3, 1, "", "fit"], [38, 3, 1, "", "fit_predict"], [38, 3, 1, "", "get_metadata_routing"], [38, 3, 1, "", "get_params"], [38, 3, 1, "", "predict"], [38, 3, 1, "", "score_samples"], [38, 3, 1, "", "set_fit_request"], [38, 3, 1, "", "set_params"]], "sktree.ExtraTreesClassifier": [[39, 3, 1, "", "apply"], [39, 2, 1, "", "base_estimator_"], [39, 3, 1, "", "decision_path"], [39, 2, 1, "", "estimators_samples_"], [39, 2, 1, "", "feature_importances_"], [39, 3, 1, "", "fit"], [39, 3, 1, "", "get_leaf_node_samples"], [39, 3, 1, "", "get_metadata_routing"], [39, 3, 1, "", "get_params"], [39, 3, 1, "", "partial_fit"], [39, 3, 1, "", "predict"], [39, 3, 1, "", "predict_log_proba"], [39, 3, 1, "", "predict_proba"], [39, 3, 1, "", "predict_quantiles"], [39, 3, 1, "", "score"], [39, 3, 1, "", "set_fit_request"], [39, 3, 1, "", "set_params"], [39, 3, 1, "", "set_partial_fit_request"], [39, 3, 1, "", "set_score_request"]], "sktree.ExtraTreesRegressor": [[40, 3, 1, "", "apply"], [40, 2, 1, "", "base_estimator_"], [40, 3, 1, "", "decision_path"], [40, 2, 1, "", "estimators_samples_"], [40, 2, 1, "", "feature_importances_"], [40, 3, 1, "", "fit"], [40, 3, 1, "", "get_leaf_node_samples"], [40, 3, 1, "", "get_metadata_routing"], [40, 3, 1, "", "get_params"], [40, 3, 1, "", "predict"], [40, 3, 1, "", "predict_quantiles"], [40, 3, 1, "", "score"], [40, 3, 1, "", "set_fit_request"], [40, 3, 1, "", "set_params"], [40, 3, 1, "", "set_score_request"]], "sktree.HonestForestClassifier": [[41, 3, 1, "", "apply"], [41, 2, 1, "", "base_estimator_"], [41, 3, 1, "", "decision_path"], [41, 2, 1, "", "estimators_samples_"], [41, 2, 1, "", "feature_importances_"], [41, 3, 1, "", "fit"], [41, 3, 1, "", "get_leaf_node_samples"], [41, 3, 1, "", "get_metadata_routing"], [41, 3, 1, "", "get_params"], [41, 2, 1, "", "honest_indices_"], [41, 3, 1, "", "partial_fit"], [41, 3, 1, "", "predict"], [41, 3, 1, "", "predict_log_proba"], [41, 3, 1, "", "predict_proba"], [41, 3, 1, "", "predict_quantiles"], [41, 3, 1, "", "score"], [41, 3, 1, "", "set_fit_request"], [41, 3, 1, "", "set_params"], [41, 3, 1, "", "set_partial_fit_request"], [41, 3, 1, "", "set_score_request"], [41, 2, 1, "", "structure_indices_"]], "sktree.MultiViewRandomForestClassifier": [[42, 3, 1, "", "apply"], [42, 2, 1, "", "base_estimator_"], [42, 3, 1, "", "compute_similarity_matrix"], [42, 3, 1, "", "decision_path"], [42, 2, 1, "", "estimators_samples_"], [42, 2, 1, "", "feature_importances_"], [42, 3, 1, "", "fit"], [42, 3, 1, "", "get_leaf_node_samples"], [42, 3, 1, "", "get_metadata_routing"], [42, 3, 1, "", "get_params"], [42, 3, 1, "", "partial_fit"], [42, 3, 1, "", "predict"], [42, 3, 1, "", "predict_log_proba"], [42, 3, 1, "", "predict_proba"], [42, 3, 1, "", "predict_quantiles"], [42, 3, 1, "", "score"], [42, 3, 1, "", "set_fit_request"], [42, 3, 1, "", "set_params"], [42, 3, 1, "", "set_partial_fit_request"], [42, 3, 1, "", "set_score_request"]], "sktree.NearestNeighborsMetaEstimator": [[43, 3, 1, "", "fit"], [43, 3, 1, "", "get_metadata_routing"], [43, 3, 1, "", "get_params"], [43, 3, 1, "", "kneighbors"], [43, 3, 1, "", "radius_neighbors"], [43, 3, 1, "", "set_params"]], "sktree.ObliqueRandomForestClassifier": [[44, 3, 1, "", "apply"], [44, 2, 1, "", "base_estimator_"], [44, 3, 1, "", "compute_similarity_matrix"], [44, 3, 1, "", "decision_path"], [44, 2, 1, "", "estimators_samples_"], [44, 2, 1, "", "feature_importances_"], [44, 3, 1, "", "fit"], [44, 3, 1, "", "get_leaf_node_samples"], [44, 3, 1, "", "get_metadata_routing"], [44, 3, 1, "", "get_params"], [44, 3, 1, "", "partial_fit"], [44, 3, 1, "", "predict"], [44, 3, 1, "", "predict_log_proba"], [44, 3, 1, "", "predict_proba"], [44, 3, 1, "", "predict_quantiles"], [44, 3, 1, "", "score"], [44, 3, 1, "", "set_fit_request"], [44, 3, 1, "", "set_params"], [44, 3, 1, "", "set_partial_fit_request"], [44, 3, 1, "", "set_score_request"]], "sktree.ObliqueRandomForestRegressor": [[45, 3, 1, "", "apply"], [45, 2, 1, "", "base_estimator_"], [45, 3, 1, "", "compute_similarity_matrix"], [45, 3, 1, "", "decision_path"], [45, 2, 1, "", "estimators_samples_"], [45, 2, 1, "", "feature_importances_"], [45, 3, 1, "", "fit"], [45, 3, 1, "", "get_leaf_node_samples"], [45, 3, 1, "", "get_metadata_routing"], [45, 3, 1, "", "get_params"], [45, 3, 1, "", "predict"], [45, 3, 1, "", "predict_quantiles"], [45, 3, 1, "", "score"], [45, 3, 1, "", "set_fit_request"], [45, 3, 1, "", "set_params"], [45, 3, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestClassifier": [[46, 3, 1, "", "apply"], [46, 2, 1, "", "base_estimator_"], [46, 3, 1, "", "compute_similarity_matrix"], [46, 3, 1, "", "decision_path"], [46, 2, 1, "", "estimators_samples_"], [46, 2, 1, "", "feature_importances_"], [46, 3, 1, "", "fit"], [46, 3, 1, "", "get_leaf_node_samples"], [46, 3, 1, "", "get_metadata_routing"], [46, 3, 1, "", "get_params"], [46, 3, 1, "", "partial_fit"], [46, 3, 1, "", "predict"], [46, 3, 1, "", "predict_log_proba"], [46, 3, 1, "", "predict_proba"], [46, 3, 1, "", "predict_quantiles"], [46, 3, 1, "", "score"], [46, 3, 1, "", "set_fit_request"], [46, 3, 1, "", "set_params"], [46, 3, 1, "", "set_partial_fit_request"], [46, 3, 1, "", "set_score_request"]], "sktree.PatchObliqueRandomForestRegressor": [[47, 3, 1, "", "apply"], [47, 2, 1, "", "base_estimator_"], [47, 3, 1, "", "compute_similarity_matrix"], [47, 3, 1, "", "decision_path"], [47, 2, 1, "", "estimators_samples_"], [47, 2, 1, "", "feature_importances_"], [47, 3, 1, "", "fit"], [47, 3, 1, "", "get_leaf_node_samples"], [47, 3, 1, "", "get_metadata_routing"], [47, 3, 1, "", "get_params"], [47, 3, 1, "", "predict"], [47, 3, 1, "", "predict_quantiles"], [47, 3, 1, "", "score"], [47, 3, 1, "", "set_fit_request"], [47, 3, 1, "", "set_params"], [47, 3, 1, "", "set_score_request"]], "sktree.RandomForestClassifier": [[48, 3, 1, "", "apply"], [48, 2, 1, "", "base_estimator_"], [48, 3, 1, "", "decision_path"], [48, 2, 1, "", "estimators_samples_"], [48, 2, 1, "", "feature_importances_"], [48, 3, 1, "", "fit"], [48, 3, 1, "", "get_leaf_node_samples"], [48, 3, 1, "", "get_metadata_routing"], [48, 3, 1, "", "get_params"], [48, 3, 1, "", "partial_fit"], [48, 3, 1, "", "predict"], [48, 3, 1, "", "predict_log_proba"], [48, 3, 1, "", "predict_proba"], [48, 3, 1, "", "predict_quantiles"], [48, 3, 1, "", "score"], [48, 3, 1, "", "set_fit_request"], [48, 3, 1, "", "set_params"], [48, 3, 1, "", "set_partial_fit_request"], [48, 3, 1, "", "set_score_request"]], "sktree.RandomForestRegressor": [[49, 3, 1, "", "apply"], [49, 2, 1, "", "base_estimator_"], [49, 3, 1, "", "decision_path"], [49, 2, 1, "", "estimators_samples_"], [49, 2, 1, "", "feature_importances_"], [49, 3, 1, "", "fit"], [49, 3, 1, "", "get_leaf_node_samples"], [49, 3, 1, "", "get_metadata_routing"], [49, 3, 1, "", "get_params"], [49, 3, 1, "", "predict"], [49, 3, 1, "", "predict_quantiles"], [49, 3, 1, "", "score"], [49, 3, 1, "", "set_fit_request"], [49, 3, 1, "", "set_params"], [49, 3, 1, "", "set_score_request"]], "sktree.UnsupervisedObliqueRandomForest": [[50, 3, 1, "", "apply"], [50, 2, 1, "", "base_estimator_"], [50, 3, 1, "", "compute_similarity_matrix"], [50, 3, 1, "", "decision_path"], [50, 2, 1, "", "estimators_samples_"], [50, 2, 1, "", "feature_importances_"], [50, 3, 1, "", "fit"], [50, 3, 1, "", "fit_predict"], [50, 3, 1, "", "fit_transform"], [50, 3, 1, "", "get_leaf_node_samples"], [50, 3, 1, "", "get_metadata_routing"], [50, 3, 1, "", "get_params"], [50, 3, 1, "", "predict"], [50, 3, 1, "", "predict_quantiles"], [50, 3, 1, "", "set_fit_request"], [50, 3, 1, "", "set_output"], [50, 3, 1, "", "set_params"], [50, 3, 1, "", "transform"]], "sktree.UnsupervisedRandomForest": [[51, 3, 1, "", "apply"], [51, 2, 1, "", "base_estimator_"], [51, 3, 1, "", "compute_similarity_matrix"], [51, 3, 1, "", "decision_path"], [51, 2, 1, "", "estimators_samples_"], [51, 2, 1, "", "feature_importances_"], [51, 3, 1, "", "fit"], [51, 3, 1, "", "fit_predict"], [51, 3, 1, "", "fit_transform"], [51, 3, 1, "", "get_leaf_node_samples"], [51, 3, 1, "", "get_metadata_routing"], [51, 3, 1, "", "get_params"], [51, 3, 1, "", "predict"], [51, 3, 1, "", "predict_quantiles"], [51, 3, 1, "", "set_fit_request"], [51, 3, 1, "", "set_output"], [51, 3, 1, "", "set_params"], [51, 3, 1, "", "transform"]], "sktree._lib.sklearn": [[0, 0, 0, "-", "ensemble"]], "sktree.datasets": [[52, 4, 1, "", "make_gaussian_mixture"], [53, 4, 1, "", "make_joint_factor_model"], [54, 4, 1, "", "make_quadratic_classification"]], "sktree.experimental": [[55, 4, 1, "", "conditional_resample"], [59, 4, 1, "", "mutual_info_ksg"]], "sktree.experimental.mutual_info": [[56, 4, 1, "", "cmi_gaussian"], [57, 4, 1, "", "entropy_gaussian"], [58, 4, 1, "", "mi_gaussian"]], "sktree.experimental.simulate": [[60, 4, 1, "", "simulate_helix"], [61, 4, 1, "", "simulate_multivariate_gaussian"], [62, 4, 1, "", "simulate_sphere"]], "sktree.stats": [[63, 1, 1, "", "FeatureImportanceForestClassifier"], [64, 1, 1, "", "FeatureImportanceForestRegressor"], [65, 1, 1, "", "PermutationForestClassifier"], [66, 1, 1, "", "PermutationForestRegressor"]], "sktree.stats.FeatureImportanceForestClassifier": [[63, 3, 1, "", "statistic"], [63, 3, 1, "", "test"], [63, 2, 1, "", "train_test_samples_"]], "sktree.stats.FeatureImportanceForestRegressor": [[64, 3, 1, "", "statistic"], [64, 3, 1, "", "test"], [64, 2, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestClassifier": [[65, 3, 1, "", "statistic"], [65, 3, 1, "", "test"], [65, 2, 1, "", "train_test_samples_"]], "sktree.stats.PermutationForestRegressor": [[66, 3, 1, "", "statistic"], [66, 3, 1, "", "test"], [66, 2, 1, "", "train_test_samples_"]], "sktree.tree": [[67, 1, 1, "", "DecisionTreeClassifier"], [68, 1, 1, "", "DecisionTreeRegressor"], [69, 1, 1, "", "ExtraTreeClassifier"], [70, 1, 1, "", "ExtraTreeRegressor"], [71, 1, 1, "", "HonestTreeClassifier"], [72, 1, 1, "", "MultiViewDecisionTreeClassifier"], [73, 1, 1, "", "ObliqueDecisionTreeClassifier"], [74, 1, 1, "", "ObliqueDecisionTreeRegressor"], [75, 1, 1, "", "PatchObliqueDecisionTreeClassifier"], [76, 1, 1, "", "PatchObliqueDecisionTreeRegressor"], [77, 1, 1, "", "UnsupervisedDecisionTree"], [78, 1, 1, "", "UnsupervisedObliqueDecisionTree"], [79, 4, 1, "", "compute_forest_similarity_matrix"]], "sktree.tree.DecisionTreeClassifier": [[67, 3, 1, "", "apply"], [67, 3, 1, "", "cost_complexity_pruning_path"], [67, 3, 1, "", "decision_path"], [67, 2, 1, "", "feature_importances_"], [67, 3, 1, "", "fit"], [67, 3, 1, "", "get_depth"], [67, 3, 1, "", "get_leaf_node_samples"], [67, 3, 1, "", "get_metadata_routing"], [67, 3, 1, "", "get_n_leaves"], [67, 3, 1, "", "get_params"], [67, 3, 1, "", "partial_fit"], [67, 3, 1, "", "predict"], [67, 3, 1, "", "predict_log_proba"], [67, 3, 1, "", "predict_proba"], [67, 3, 1, "", "predict_quantiles"], [67, 3, 1, "", "score"], [67, 3, 1, "", "set_fit_request"], [67, 3, 1, "", "set_params"], [67, 3, 1, "", "set_partial_fit_request"], [67, 3, 1, "", "set_predict_proba_request"], [67, 3, 1, "", "set_predict_request"], [67, 3, 1, "", "set_score_request"]], "sktree.tree.DecisionTreeRegressor": [[68, 3, 1, "", "apply"], [68, 3, 1, "", "cost_complexity_pruning_path"], [68, 3, 1, "", "decision_path"], [68, 2, 1, "", "feature_importances_"], [68, 3, 1, "", "fit"], [68, 3, 1, "", "get_depth"], [68, 3, 1, "", "get_leaf_node_samples"], [68, 3, 1, "", "get_metadata_routing"], [68, 3, 1, "", "get_n_leaves"], [68, 3, 1, "", "get_params"], [68, 3, 1, "", "predict"], [68, 3, 1, "", "predict_quantiles"], [68, 3, 1, "", "score"], [68, 3, 1, "", "set_fit_request"], [68, 3, 1, "", "set_params"], [68, 3, 1, "", "set_predict_request"], [68, 3, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeClassifier": [[69, 3, 1, "", "apply"], [69, 3, 1, "", "cost_complexity_pruning_path"], [69, 3, 1, "", "decision_path"], [69, 2, 1, "", "feature_importances_"], [69, 3, 1, "", "fit"], [69, 3, 1, "", "get_depth"], [69, 3, 1, "", "get_leaf_node_samples"], [69, 3, 1, "", "get_metadata_routing"], [69, 3, 1, "", "get_n_leaves"], [69, 3, 1, "", "get_params"], [69, 3, 1, "", "partial_fit"], [69, 3, 1, "", "predict"], [69, 3, 1, "", "predict_log_proba"], [69, 3, 1, "", "predict_proba"], [69, 3, 1, "", "predict_quantiles"], [69, 3, 1, "", "score"], [69, 3, 1, "", "set_fit_request"], [69, 3, 1, "", "set_params"], [69, 3, 1, "", "set_partial_fit_request"], [69, 3, 1, "", "set_predict_proba_request"], [69, 3, 1, "", "set_predict_request"], [69, 3, 1, "", "set_score_request"]], "sktree.tree.ExtraTreeRegressor": [[70, 3, 1, "", "apply"], [70, 3, 1, "", "cost_complexity_pruning_path"], [70, 3, 1, "", "decision_path"], [70, 2, 1, "", "feature_importances_"], [70, 3, 1, "", "fit"], [70, 3, 1, "", "get_depth"], [70, 3, 1, "", "get_leaf_node_samples"], [70, 3, 1, "", "get_metadata_routing"], [70, 3, 1, "", "get_n_leaves"], [70, 3, 1, "", "get_params"], [70, 3, 1, "", "predict"], [70, 3, 1, "", "predict_quantiles"], [70, 3, 1, "", "score"], [70, 3, 1, "", "set_fit_request"], [70, 3, 1, "", "set_params"], [70, 3, 1, "", "set_predict_request"], [70, 3, 1, "", "set_score_request"]], "sktree.tree.HonestTreeClassifier": [[71, 3, 1, "", "apply"], [71, 3, 1, "", "cost_complexity_pruning_path"], [71, 3, 1, "", "decision_path"], [71, 2, 1, "", "feature_importances_"], [71, 3, 1, "", "fit"], [71, 3, 1, "", "get_depth"], [71, 3, 1, "", "get_leaf_node_samples"], [71, 3, 1, "", "get_metadata_routing"], [71, 3, 1, "", "get_n_leaves"], [71, 3, 1, "", "get_params"], [71, 3, 1, "", "partial_fit"], [71, 3, 1, "", "predict"], [71, 3, 1, "", "predict_proba"], [71, 3, 1, "", "predict_quantiles"], [71, 3, 1, "", "score"], [71, 3, 1, "", "set_fit_request"], [71, 3, 1, "", "set_params"], [71, 3, 1, "", "set_partial_fit_request"], [71, 3, 1, "", "set_predict_proba_request"], [71, 3, 1, "", "set_predict_request"], [71, 3, 1, "", "set_score_request"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[72, 3, 1, "", "apply"], [72, 3, 1, "", "compute_similarity_matrix"], [72, 3, 1, "", "cost_complexity_pruning_path"], [72, 3, 1, "", "decision_path"], [72, 2, 1, "", "feature_importances_"], [72, 3, 1, "", "fit"], [72, 3, 1, "", "get_depth"], [72, 3, 1, "", "get_leaf_node_samples"], [72, 3, 1, "", "get_metadata_routing"], [72, 3, 1, "", "get_n_leaves"], [72, 3, 1, "", "get_params"], [72, 3, 1, "", "partial_fit"], [72, 3, 1, "", "predict"], [72, 3, 1, "", "predict_log_proba"], [72, 3, 1, "", "predict_proba"], [72, 3, 1, "", "predict_quantiles"], [72, 3, 1, "", "score"], [72, 3, 1, "", "set_fit_request"], [72, 3, 1, "", "set_params"], [72, 3, 1, "", "set_partial_fit_request"], [72, 3, 1, "", "set_predict_proba_request"], [72, 3, 1, "", "set_predict_request"], [72, 3, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[73, 3, 1, "", "apply"], [73, 3, 1, "", "compute_similarity_matrix"], [73, 3, 1, "", "cost_complexity_pruning_path"], [73, 3, 1, "", "decision_path"], [73, 2, 1, "", "feature_importances_"], [73, 3, 1, "", "fit"], [73, 3, 1, "", "get_depth"], [73, 3, 1, "", "get_leaf_node_samples"], [73, 3, 1, "", "get_metadata_routing"], [73, 3, 1, "", "get_n_leaves"], [73, 3, 1, "", "get_params"], [73, 3, 1, "", "partial_fit"], [73, 3, 1, "", "predict"], [73, 3, 1, "", "predict_log_proba"], [73, 3, 1, "", "predict_proba"], [73, 3, 1, "", "predict_quantiles"], [73, 3, 1, "", "score"], [73, 3, 1, "", "set_fit_request"], [73, 3, 1, "", "set_params"], [73, 3, 1, "", "set_partial_fit_request"], [73, 3, 1, "", "set_predict_proba_request"], [73, 3, 1, "", "set_predict_request"], [73, 3, 1, "", "set_score_request"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[74, 3, 1, "", "apply"], [74, 3, 1, "", "compute_similarity_matrix"], [74, 3, 1, "", "cost_complexity_pruning_path"], [74, 3, 1, "", "decision_path"], [74, 2, 1, "", "feature_importances_"], [74, 3, 1, "", "fit"], [74, 3, 1, "", "get_depth"], [74, 3, 1, "", "get_leaf_node_samples"], [74, 3, 1, "", "get_metadata_routing"], [74, 3, 1, "", "get_n_leaves"], [74, 3, 1, "", "get_params"], [74, 3, 1, "", "predict"], [74, 3, 1, "", "predict_quantiles"], [74, 3, 1, "", "score"], [74, 3, 1, "", "set_fit_request"], [74, 3, 1, "", "set_params"], [74, 3, 1, "", "set_predict_request"], [74, 3, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[75, 3, 1, "", "apply"], [75, 3, 1, "", "compute_similarity_matrix"], [75, 3, 1, "", "cost_complexity_pruning_path"], [75, 3, 1, "", "decision_path"], [75, 2, 1, "", "feature_importances_"], [75, 3, 1, "", "fit"], [75, 3, 1, "", "get_depth"], [75, 3, 1, "", "get_leaf_node_samples"], [75, 3, 1, "", "get_metadata_routing"], [75, 3, 1, "", "get_n_leaves"], [75, 3, 1, "", "get_params"], [75, 3, 1, "", "partial_fit"], [75, 3, 1, "", "predict"], [75, 3, 1, "", "predict_log_proba"], [75, 3, 1, "", "predict_proba"], [75, 3, 1, "", "predict_quantiles"], [75, 3, 1, "", "score"], [75, 3, 1, "", "set_fit_request"], [75, 3, 1, "", "set_params"], [75, 3, 1, "", "set_partial_fit_request"], [75, 3, 1, "", "set_predict_proba_request"], [75, 3, 1, "", "set_predict_request"], [75, 3, 1, "", "set_score_request"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[76, 3, 1, "", "apply"], [76, 3, 1, "", "compute_similarity_matrix"], [76, 3, 1, "", "cost_complexity_pruning_path"], [76, 3, 1, "", "decision_path"], [76, 2, 1, "", "feature_importances_"], [76, 3, 1, "", "fit"], [76, 3, 1, "", "get_depth"], [76, 3, 1, "", "get_leaf_node_samples"], [76, 3, 1, "", "get_metadata_routing"], [76, 3, 1, "", "get_n_leaves"], [76, 3, 1, "", "get_params"], [76, 3, 1, "", "predict"], [76, 3, 1, "", "predict_quantiles"], [76, 3, 1, "", "score"], [76, 3, 1, "", "set_fit_request"], [76, 3, 1, "", "set_params"], [76, 3, 1, "", "set_predict_request"], [76, 3, 1, "", "set_score_request"]], "sktree.tree.UnsupervisedDecisionTree": [[77, 3, 1, "", "apply"], [77, 3, 1, "", "compute_similarity_matrix"], [77, 3, 1, "", "cost_complexity_pruning_path"], [77, 3, 1, "", "decision_path"], [77, 2, 1, "", "feature_importances_"], [77, 3, 1, "", "fit_predict"], [77, 3, 1, "", "fit_transform"], [77, 3, 1, "", "get_depth"], [77, 3, 1, "", "get_leaf_node_samples"], [77, 3, 1, "", "get_metadata_routing"], [77, 3, 1, "", "get_n_leaves"], [77, 3, 1, "", "get_params"], [77, 3, 1, "", "predict"], [77, 3, 1, "", "predict_quantiles"], [77, 3, 1, "", "set_fit_request"], [77, 3, 1, "", "set_output"], [77, 3, 1, "", "set_params"], [77, 3, 1, "", "set_predict_request"], [77, 3, 1, "", "transform"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[78, 3, 1, "", "apply"], [78, 3, 1, "", "compute_similarity_matrix"], [78, 3, 1, "", "cost_complexity_pruning_path"], [78, 3, 1, "", "decision_path"], [78, 2, 1, "", "feature_importances_"], [78, 3, 1, "", "fit_predict"], [78, 3, 1, "", "fit_transform"], [78, 3, 1, "", "get_depth"], [78, 3, 1, "", "get_leaf_node_samples"], [78, 3, 1, "", "get_metadata_routing"], [78, 3, 1, "", "get_n_leaves"], [78, 3, 1, "", "get_params"], [78, 3, 1, "", "predict"], [78, 3, 1, "", "predict_quantiles"], [78, 3, 1, "", "set_fit_request"], [78, 3, 1, "", "set_output"], [78, 3, 1, "", "set_params"], [78, 3, 1, "", "set_predict_request"], [78, 3, 1, "", "transform"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"]}, "titleterms": {"api": 0, "document": [0, 89, 90, 91, 92], "scikit": [0, 80, 85], "learn": [0, 10, 11, 85], "tree": [0, 1, 4, 10, 11, 15, 23, 24, 26, 30, 33, 34, 35, 36, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 84, 85], "estim": 0, "supervis": [0, 83], "unsupervis": [0, 84], "outlier": [0, 10, 14, 85], "detect": [0, 10, 14, 85], "distanc": 0, "metric": 0, "statist": [0, 7, 8], "hypothesi": [0, 4, 5, 6, 7, 10, 85], "test": [0, 4, 5, 6, 7, 8, 10, 85], "dataset": [0, 12, 24, 27, 28, 31, 52, 53, 54], "experiment": [0, 55, 56, 57, 58, 59, 60, 61, 62], "function": [0, 19], "calibr": [1, 2, 10, 85], "decis": [1, 4, 10, 11, 15, 23, 24, 26, 30, 33, 83, 84, 85], "via": [1, 10, 85], "honesti": [1, 10, 85], "plot": [2, 15, 19, 20, 21, 24, 29, 31, 35, 36], "honest": [2, 83], "forest": [2, 10, 12, 15, 17, 19, 20, 21, 27, 28, 29, 31, 82, 85], "overlap": 2, "gaussian": 2, "simul": [2, 5, 6, 7, 8, 12, 29, 60, 61, 62], "refer": [2, 5, 6, 15, 27, 28, 80, 82, 83, 84], "comput": [3, 7, 8, 9, 13, 16, 22, 25, 32, 37], "time": [3, 9, 13, 16, 22, 25, 32, 35, 37], "mutual": [5, 6, 7], "inform": [5, 6, 7], "genuin": [5, 6, 7], "might": [5, 6, 7, 8], "data": [5, 6, 7, 8, 12, 15, 18, 21], "perform": [5, 6, 12], "us": [5, 6, 7, 8, 38, 41, 42, 44, 45, 48, 63, 67, 72, 73, 75, 83, 85], "imbalanc": 6, "discuss": [6, 27, 28, 34, 36], "partial": [7, 8], "auc": [7, 8], "repeat": [7, 8], "second": 7, "featur": [7, 82], "set": 7, "all": [7, 8], "posterior": [7, 8], "ar": [7, 8], "save": [7, 8], "within": [7, 8, 15], "model": [7, 8, 15, 20], "multi": [8, 10, 11, 12, 34, 83, 85], "view": [8, 10, 11, 12, 34, 85], "mv": 8, "without": 8, "exampl": [10, 15, 38, 41, 42, 44, 45, 48, 63, 67, 72, 73, 75, 82, 85], "quantil": [10, 17, 18, 19, 20, 21, 85], "predict": [10, 15, 17, 18, 19, 20, 21, 27, 29, 31, 85], "random": [10, 12, 17, 19, 20, 27, 28, 29, 31, 82, 85], "compar": [10, 12, 23, 27, 30, 83, 85], "sklearn": [10, 23, 85], "sktree": [10, 23, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 85], "spars": [10, 26, 29, 36, 85], "obliqu": [10, 21, 26, 27, 28, 29, 30, 31, 35, 36, 82, 83, 85], "project": [10, 26, 34, 35, 36, 85], "splitter": [10, 33, 34, 35, 36, 85], "analyz": 12, "fit": [12, 20], "visual": [12, 15, 34], "score": 12, "extendedisolationforest": [15, 38], "gener": [15, 18, 21, 35, 36], "train": [15, 20, 24], "discret": 15, "boundari": 15, "path": 15, "length": 15, "each": 15, "differ": [18, 28, 83], "interpol": 18, "method": 18, "The": 18, "interv": 19, "regressor": [19, 20], "result": [19, 20, 21], "class": 20, "sampl": [20, 34, 35], "regress": [21, 83], "v": [21, 28], "standard": [21, 30], "surfac": [24, 30], "iri": 24, "extra": [27, 28, 30], "cc18": [27, 31], "speed": 28, "size": 28, "axi": [29, 31, 34], "align": [29, 31, 34], "pariti": 29, "demonstr": 34, "matrix": [34, 36], "an": [34, 35, 36], "initi": [34, 35, 36], "matric": [35, 36], "imag": 35, "seri": 35, "patch": [35, 36], "1d": 35, "2d": 35, "3d": 35, "discontigu": 35, "extratreesclassifi": 39, "extratreesregressor": 40, "honestforestclassifi": 41, "multiviewrandomforestclassifi": 42, "nearestneighborsmetaestim": 43, "obliquerandomforestclassifi": 44, "obliquerandomforestregressor": 45, "patchobliquerandomforestclassifi": 46, "patchobliquerandomforestregressor": 47, "randomforestclassifi": 48, "randomforestregressor": 49, "unsupervisedobliquerandomforest": 50, "unsupervisedrandomforest": 51, "make_gaussian_mixtur": 52, "make_joint_factor_model": 53, "make_quadratic_classif": 54, "conditional_resampl": 55, "mutual_info": [56, 57, 58], "cmi_gaussian": 56, "entropy_gaussian": 57, "mi_gaussian": 58, "mutual_info_ksg": 59, "simulate_helix": 60, "simulate_multivariate_gaussian": 61, "simulate_spher": 62, "stat": [63, 64, 65, 66], "featureimportanceforestclassifi": 63, "featureimportanceforestregressor": 64, "permutationforestclassifi": 65, "permutationforestregressor": 66, "decisiontreeclassifi": 67, "decisiontreeregressor": 68, "extratreeclassifi": 69, "extratreeregressor": 70, "honesttreeclassifi": 71, "multiviewdecisiontreeclassifi": 72, "obliquedecisiontreeclassifi": 73, "obliquedecisiontreeregressor": 74, "patchobliquedecisiontreeclassifi": 75, "patchobliquedecisiontreeregressor": 76, "unsuperviseddecisiontre": 77, "unsupervisedobliquedecisiontre": 78, "compute_forest_similarity_matrix": 79, "content": 80, "get": 80, "start": 80, "indic": 80, "tabl": 80, "instal": 81, "depend": 81, "pip": 81, "from": 81, "sourc": 81, "meson": 81, "conda": 81, "recommend": 81, "import": 82, "evalu": [82, 84], "mathemat": 83, "formul": 83, "classif": 83, "output": 83, "problem": 83, "complex": 83, "tip": 83, "practic": 83, "limit": 83, "criterion": 84, "two": 84, "mean": 84, "fast": 84, "bic": 84, "user": 86, "guid": 86, "releas": 87, "histori": 87, "version": [89, 90, 91, 92], "0": [89, 90, 91, 92], "1": 89, "changelog": [89, 90, 91, 92], "code": [89, 90, 91, 92], "contributor": [89, 90, 91, 92], "2": 90, "3": 91, "4": 92}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 60}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Scikit-learn Tree Estimators": [[0, "scikit-learn-tree-estimators"]], "Supervised": [[0, "supervised"]], "Unsupervised": [[0, "unsupervised"]], "Outlier Detection": [[0, "outlier-detection"]], "Distance Metrics": [[0, "distance-metrics"]], "Statistical Hypothesis Testing": [[0, "statistical-hypothesis-testing"]], "Datasets": [[0, "datasets"]], "Experimental Functionality": [[0, "experimental-functionality"]], "Calibrated decision trees via honesty": [[1, "calibrated-decision-trees-via-honesty"], [10, "calibrated-decision-trees-via-honesty"], [85, "calibrated-decision-trees-via-honesty"]], "Plot honest forest calibrations on overlapping gaussian simulations": [[2, "plot-honest-forest-calibrations-on-overlapping-gaussian-simulations"]], "References": [[2, "references"], [5, "references"], [6, "references"], [15, "references"], [27, "references"], [28, "references"], [80, null], [82, null], [82, null], [84, null]], "Computation times": [[3, "computation-times"], [9, "computation-times"], [13, "computation-times"], [16, "computation-times"], [22, "computation-times"], [25, "computation-times"], [32, "computation-times"], [37, "computation-times"]], "Hypothesis testing with decision trees": [[4, "hypothesis-testing-with-decision-trees"], [10, "hypothesis-testing-with-decision-trees"], [85, "hypothesis-testing-with-decision-trees"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[5, "mutual-information-for-genuine-hypothesis-testing-might"]], "Simulate data": [[5, "simulate-data"], [6, "simulate-data"], [7, "simulate-data"], [8, "simulate-data"], [12, "simulate-data"]], "Perform hypothesis testing using Mutual Information": [[5, "perform-hypothesis-testing-using-mutual-information"], [6, "perform-hypothesis-testing-using-mutual-information"]], "Mutual Information for Genuine Hypothesis Testing (MIGHT) with Imbalanced Data": [[6, "mutual-information-for-genuine-hypothesis-testing-might-with-imbalanced-data"]], "Discussion": [[6, "discussion"], [27, "discussion"], [28, "discussion"], [34, "discussion"], [36, "discussion"]], "Compute partial AUC using Mutual Information for Genuine Hypothesis Testing (MIGHT)": [[7, "compute-partial-auc-using-mutual-information-for-genuine-hypothesis-testing-might"]], "Use partial AUC as test statistic": [[7, "use-partial-auc-as-test-statistic"], [8, "use-partial-auc-as-test-statistic"]], "Repeat for the second feature set": [[7, "repeat-for-the-second-feature-set"]], "All posteriors are saved within the model": [[7, "all-posteriors-are-saved-within-the-model"], [8, "all-posteriors-are-saved-within-the-model"]], "Compute partial AUC using multi-view MIGHT (MV-MIGHT)": [[8, "compute-partial-auc-using-multi-view-might-mv-might"]], "Repeat without multi-view": [[8, "repeat-without-multi-view"]], "Examples": [[10, "examples"], [85, "examples"]], "Multi-view learning with Decision-trees": [[10, "multi-view-learning-with-decision-trees"], [11, "multi-view-learning-with-decision-trees"], [85, "multi-view-learning-with-decision-trees"]], "Outlier-detection": [[10, "outlier-detection"], [14, "outlier-detection"], [85, "outlier-detection"]], "Quantile Predictions with Random Forest": [[10, "quantile-predictions-with-random-forest"], [17, "quantile-predictions-with-random-forest"], [85, "quantile-predictions-with-random-forest"]], "Comparing sklearn and sktree decision trees": [[10, "comparing-sklearn-and-sktree-decision-trees"], [23, "comparing-sklearn-and-sktree-decision-trees"], [85, "comparing-sklearn-and-sktree-decision-trees"]], "Sparse oblique projections with oblique decision-trees": [[10, "sparse-oblique-projections-with-oblique-decision-trees"], [26, "sparse-oblique-projections-with-oblique-decision-trees"], [85, "sparse-oblique-projections-with-oblique-decision-trees"]], "Decision-tree splitters": [[10, "decision-tree-splitters"], [33, "decision-tree-splitters"], [85, "decision-tree-splitters"]], "Analyze a multi-view dataset with a multi-view random forest": [[12, "analyze-a-multi-view-dataset-with-a-multi-view-random-forest"]], "Fit Random Forest and Multi-view Random Forest": [[12, "fit-random-forest-and-multi-view-random-forest"]], "Visualize scores and compare performance": [[12, "visualize-scores-and-compare-performance"]], "ExtendedIsolationForest example": [[15, "extendedisolationforest-example"]], "Data generation": [[15, "data-generation"]], "Training of the model": [[15, "training-of-the-model"]], "Plot discrete decision boundary": [[15, "plot-discrete-decision-boundary"]], "Plot path length decision boundary": [[15, "plot-path-length-decision-boundary"]], "Visualize the prediction of each tree within the forest": [[15, "visualize-the-prediction-of-each-tree-within-the-forest"]], "Predicting with different quantile interpolation methods": [[18, "predicting-with-different-quantile-interpolation-methods"]], "Generate the data": [[18, "generate-the-data"], [21, "generate-the-data"]], "The interpolation methods": [[18, "the-interpolation-methods"]], "Quantile prediction intervals with Random Forest Regressor": [[19, "quantile-prediction-intervals-with-random-forest-regressor"]], "Quantile Prediction Function": [[19, "quantile-prediction-function"]], "Plot the results": [[19, "plot-the-results"], [20, "plot-the-results"], [21, "plot-the-results"]], "Quantile prediction with Random Forest Regressor class": [[20, "quantile-prediction-with-random-forest-regressor-class"]], "Fit the model to the training samples": [[20, "fit-the-model-to-the-training-samples"]], "Quantile regression vs. standard and oblique regression forest": [[21, "quantile-regression-vs-standard-and-oblique-regression-forest"]], "Generate Quantile Predictions": [[21, "generate-quantile-predictions"]], "Plot the decision surface of decision trees trained on the iris dataset": [[24, "plot-the-decision-surface-of-decision-trees-trained-on-the-iris-dataset"]], "Compare extra oblique forest and oblique random forest predictions on cc18 datasets": [[27, "compare-extra-oblique-forest-and-oblique-random-forest-predictions-on-cc18-datasets"]], "Speed of Extra Oblique Random Forest vs Oblique Random Forest on different dataset sizes": [[28, "speed-of-extra-oblique-random-forest-vs-oblique-random-forest-on-different-dataset-sizes"]], "Plot oblique forest and axis-aligned random forest predictions on sparse parity simulation": [[29, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-sparse-parity-simulation"]], "Compare the decision surfaces of oblique extra-trees with standard oblique trees": [[30, "compare-the-decision-surfaces-of-oblique-extra-trees-with-standard-oblique-trees"]], "Plot oblique forest and axis-aligned random forest predictions on cc18 datasets": [[31, "plot-oblique-forest-and-axis-aligned-random-forest-predictions-on-cc18-datasets"]], "Demonstrate and visualize a multi-view projection matrix for an axis-aligned tree": [[34, "demonstrate-and-visualize-a-multi-view-projection-matrix-for-an-axis-aligned-tree"]], "Initialize the multi-view splitter": [[34, "initialize-the-multi-view-splitter"]], "Sample the projection matrix": [[34, "sample-the-projection-matrix"]], "Plot the projection matrices of an oblique tree for sampling images, or time-series": [[35, "plot-the-projection-matrices-of-an-oblique-tree-for-sampling-images-or-time-series"]], "Initialize patch splitter": [[35, "initialize-patch-splitter"], [36, "initialize-patch-splitter"]], "Generate 1D patches": [[35, "generate-1d-patches"]], "Generate 2D patches": [[35, "generate-2d-patches"]], "Generate 3D patches": [[35, "generate-3d-patches"]], "Discontiguous Patches": [[35, "discontiguous-patches"]], "Plot the sparse projection matrices of an oblique tree": [[36, "plot-the-sparse-projection-matrices-of-an-oblique-tree"]], "Initialize the splitter": [[36, "initialize-the-splitter"]], "Generate projection matrix": [[36, "generate-projection-matrix"]], "sktree.ExtendedIsolationForest": [[38, "sktree-extendedisolationforest"]], "Examples using sktree.ExtendedIsolationForest": [[38, "examples-using-sktree-extendedisolationforest"]], "sktree.ExtraTreesClassifier": [[39, "sktree-extratreesclassifier"]], "sktree.ExtraTreesRegressor": [[40, "sktree-extratreesregressor"]], "sktree.HonestForestClassifier": [[41, "sktree-honestforestclassifier"]], "Examples using sktree.HonestForestClassifier": [[41, "examples-using-sktree-honestforestclassifier"]], "sktree.MultiViewRandomForestClassifier": [[42, "sktree-multiviewrandomforestclassifier"]], "Examples using sktree.MultiViewRandomForestClassifier": [[42, "examples-using-sktree-multiviewrandomforestclassifier"]], "sktree.NearestNeighborsMetaEstimator": [[43, "sktree-nearestneighborsmetaestimator"]], "sktree.ObliqueRandomForestClassifier": [[44, "sktree-obliquerandomforestclassifier"]], "Examples using sktree.ObliqueRandomForestClassifier": [[44, "examples-using-sktree-obliquerandomforestclassifier"]], "sktree.ObliqueRandomForestRegressor": [[45, "sktree-obliquerandomforestregressor"]], "Examples using sktree.ObliqueRandomForestRegressor": [[45, "examples-using-sktree-obliquerandomforestregressor"]], "sktree.PatchObliqueRandomForestClassifier": [[46, "sktree-patchobliquerandomforestclassifier"]], "sktree.PatchObliqueRandomForestRegressor": [[47, "sktree-patchobliquerandomforestregressor"]], "sktree.RandomForestClassifier": [[48, "sktree-randomforestclassifier"]], "Examples using sktree.RandomForestClassifier": [[48, "examples-using-sktree-randomforestclassifier"]], "sktree.RandomForestRegressor": [[49, "sktree-randomforestregressor"]], "sktree.UnsupervisedObliqueRandomForest": [[50, "sktree-unsupervisedobliquerandomforest"]], "sktree.UnsupervisedRandomForest": [[51, "sktree-unsupervisedrandomforest"]], "sktree.datasets.make_gaussian_mixture": [[52, "sktree-datasets-make-gaussian-mixture"]], "sktree.datasets.make_joint_factor_model": [[53, "sktree-datasets-make-joint-factor-model"]], "sktree.datasets.make_quadratic_classification": [[54, "sktree-datasets-make-quadratic-classification"]], "sktree.experimental.conditional_resample": [[55, "sktree-experimental-conditional-resample"]], "sktree.experimental.mutual_info.cmi_gaussian": [[56, "sktree-experimental-mutual-info-cmi-gaussian"]], "sktree.experimental.mutual_info.entropy_gaussian": [[57, "sktree-experimental-mutual-info-entropy-gaussian"]], "sktree.experimental.mutual_info.mi_gaussian": [[58, "sktree-experimental-mutual-info-mi-gaussian"]], "sktree.experimental.mutual_info_ksg": [[59, "sktree-experimental-mutual-info-ksg"]], "sktree.experimental.simulate.simulate_helix": [[60, "sktree-experimental-simulate-simulate-helix"]], "sktree.experimental.simulate.simulate_multivariate_gaussian": [[61, "sktree-experimental-simulate-simulate-multivariate-gaussian"]], "sktree.experimental.simulate.simulate_sphere": [[62, "sktree-experimental-simulate-simulate-sphere"]], "sktree.stats.FeatureImportanceForestClassifier": [[63, "sktree-stats-featureimportanceforestclassifier"]], "Examples using sktree.stats.FeatureImportanceForestClassifier": [[63, "examples-using-sktree-stats-featureimportanceforestclassifier"]], "sktree.stats.FeatureImportanceForestRegressor": [[64, "sktree-stats-featureimportanceforestregressor"]], "sktree.stats.PermutationForestClassifier": [[65, "sktree-stats-permutationforestclassifier"]], "sktree.stats.PermutationForestRegressor": [[66, "sktree-stats-permutationforestregressor"]], "sktree.tree.DecisionTreeClassifier": [[67, "sktree-tree-decisiontreeclassifier"]], "Examples using sktree.tree.DecisionTreeClassifier": [[67, "examples-using-sktree-tree-decisiontreeclassifier"]], "sktree.tree.DecisionTreeRegressor": [[68, "sktree-tree-decisiontreeregressor"]], "sktree.tree.ExtraTreeClassifier": [[69, "sktree-tree-extratreeclassifier"]], "sktree.tree.ExtraTreeRegressor": [[70, "sktree-tree-extratreeregressor"]], "sktree.tree.HonestTreeClassifier": [[71, "sktree-tree-honesttreeclassifier"]], "sktree.tree.MultiViewDecisionTreeClassifier": [[72, "sktree-tree-multiviewdecisiontreeclassifier"]], "Examples using sktree.tree.MultiViewDecisionTreeClassifier": [[72, "examples-using-sktree-tree-multiviewdecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeClassifier": [[73, "sktree-tree-obliquedecisiontreeclassifier"]], "Examples using sktree.tree.ObliqueDecisionTreeClassifier": [[73, "examples-using-sktree-tree-obliquedecisiontreeclassifier"]], "sktree.tree.ObliqueDecisionTreeRegressor": [[74, "sktree-tree-obliquedecisiontreeregressor"]], "sktree.tree.PatchObliqueDecisionTreeClassifier": [[75, "sktree-tree-patchobliquedecisiontreeclassifier"]], "Examples using sktree.tree.PatchObliqueDecisionTreeClassifier": [[75, "examples-using-sktree-tree-patchobliquedecisiontreeclassifier"]], "sktree.tree.PatchObliqueDecisionTreeRegressor": [[76, "sktree-tree-patchobliquedecisiontreeregressor"]], "sktree.tree.UnsupervisedDecisionTree": [[77, "sktree-tree-unsuperviseddecisiontree"]], "sktree.tree.UnsupervisedObliqueDecisionTree": [[78, "sktree-tree-unsupervisedobliquedecisiontree"]], "sktree.tree.compute_forest_similarity_matrix": [[79, "sktree-tree-compute-forest-similarity-matrix"]], "scikit-tree": [[80, "scikit-tree"]], "Contents": [[80, "contents"]], "Getting started:": [[80, null]], "Indices and tables": [[80, "indices-and-tables"]], "Installation": [[81, "installation"]], "Dependencies": [[81, "dependencies"]], "Installing with pip": [[81, "installing-with-pip"]], "Installing from source with Meson": [[81, "installing-from-source-with-meson"]], "Conda (Recommended)": [[81, "conda-recommended"]], "Oblique Random Forests": [[82, "oblique-random-forests"]], "Examples:": [[82, null]], "Feature importance evaluation": [[82, "feature-importance-evaluation"]], "Supervised Decision Trees": [[83, "supervised-decision-trees"]], "Oblique Trees": [[83, "oblique-trees"]], "Differences compared to decision trees": [[83, "differences-compared-to-decision-trees"]], "Mathematical formulation": [[83, "mathematical-formulation"]], "Classification, regression and multi-output problems": [[83, "classification-regression-and-multi-output-problems"]], "Complexity": [[83, "complexity"]], "Tips on practical use": [[83, "tips-on-practical-use"]], "Limitations compared to decision trees": [[83, "limitations-compared-to-decision-trees"]], "References:": [[83, null]], "Honest Trees": [[83, "honest-trees"]], "Unsupervised Decision Trees": [[84, "unsupervised-decision-trees"]], "Unsupervised Criterion": [[84, "unsupervised-criterion"]], "Two-Means": [[84, "two-means"]], "Fast-BIC": [[84, "fast-bic"]], "Evaluating Unsupervised Trees": [[84, "evaluating-unsupervised-trees"]], "Examples using scikit-tree": [[85, "examples-using-scikit-tree"]], "User Guide": [[86, "user-guide"]], "Release History": [[87, "release-history"]], "Version 0.1": [[89, "version-0-1"]], "Changelog": [[89, "changelog"], [90, "changelog"], [91, "changelog"], [92, "changelog"]], "Code and Documentation Contributors": [[89, "code-and-documentation-contributors"], [90, "code-and-documentation-contributors"], [91, "code-and-documentation-contributors"], [92, "code-and-documentation-contributors"]], "Version 0.2": [[90, "version-0-2"]], "Version 0.3": [[91, "version-0-3"]], "Version 0.4": [[92, "version-0-4"]]}, "indexentries": {"module": [[0, "module-sktree"], [0, "module-sktree._lib.sklearn.ensemble"]], "sktree": [[0, "module-sktree"]], "sktree._lib.sklearn.ensemble": [[0, "module-sktree._lib.sklearn.ensemble"]], "extendedisolationforest (class in sktree)": [[38, "sktree.ExtendedIsolationForest"]], "base_estimator_ (sktree.extendedisolationforest property)": [[38, "sktree.ExtendedIsolationForest.base_estimator_"]], "decision_function() (sktree.extendedisolationforest method)": [[38, "sktree.ExtendedIsolationForest.decision_function"]], "estimators_samples_ (sktree.extendedisolationforest property)": [[38, "sktree.ExtendedIsolationForest.estimators_samples_"]], "fit() (sktree.extendedisolationforest method)": [[38, "sktree.ExtendedIsolationForest.fit"]], "fit_predict() (sktree.extendedisolationforest method)": [[38, "sktree.ExtendedIsolationForest.fit_predict"]], "get_metadata_routing() (sktree.extendedisolationforest method)": [[38, "sktree.ExtendedIsolationForest.get_metadata_routing"]], "get_params() (sktree.extendedisolationforest method)": [[38, "sktree.ExtendedIsolationForest.get_params"]], "predict() (sktree.extendedisolationforest method)": [[38, "sktree.ExtendedIsolationForest.predict"]], "score_samples() (sktree.extendedisolationforest method)": [[38, "sktree.ExtendedIsolationForest.score_samples"]], "set_fit_request() (sktree.extendedisolationforest method)": [[38, "sktree.ExtendedIsolationForest.set_fit_request"]], "set_params() (sktree.extendedisolationforest method)": [[38, "sktree.ExtendedIsolationForest.set_params"]], "extratreesclassifier (class in sktree)": [[39, "sktree.ExtraTreesClassifier"]], "apply() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.apply"]], "base_estimator_ (sktree.extratreesclassifier property)": [[39, "sktree.ExtraTreesClassifier.base_estimator_"]], "decision_path() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.decision_path"]], "estimators_samples_ (sktree.extratreesclassifier property)": [[39, "sktree.ExtraTreesClassifier.estimators_samples_"]], "feature_importances_ (sktree.extratreesclassifier property)": [[39, "sktree.ExtraTreesClassifier.feature_importances_"]], "fit() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.fit"]], "get_leaf_node_samples() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.get_metadata_routing"]], "get_params() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.get_params"]], "partial_fit() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.partial_fit"]], "predict() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.predict"]], "predict_log_proba() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.predict_log_proba"]], "predict_proba() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.predict_proba"]], "predict_quantiles() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.predict_quantiles"]], "score() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.score"]], "set_fit_request() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.set_fit_request"]], "set_params() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.set_params"]], "set_partial_fit_request() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.set_partial_fit_request"]], "set_score_request() (sktree.extratreesclassifier method)": [[39, "sktree.ExtraTreesClassifier.set_score_request"]], "extratreesregressor (class in sktree)": [[40, "sktree.ExtraTreesRegressor"]], "apply() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.apply"]], "base_estimator_ (sktree.extratreesregressor property)": [[40, "sktree.ExtraTreesRegressor.base_estimator_"]], "decision_path() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.decision_path"]], "estimators_samples_ (sktree.extratreesregressor property)": [[40, "sktree.ExtraTreesRegressor.estimators_samples_"]], "feature_importances_ (sktree.extratreesregressor property)": [[40, "sktree.ExtraTreesRegressor.feature_importances_"]], "fit() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.fit"]], "get_leaf_node_samples() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.get_metadata_routing"]], "get_params() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.get_params"]], "predict() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.predict"]], "predict_quantiles() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.predict_quantiles"]], "score() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.score"]], "set_fit_request() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.set_fit_request"]], "set_params() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.set_params"]], "set_score_request() (sktree.extratreesregressor method)": [[40, "sktree.ExtraTreesRegressor.set_score_request"]], "honestforestclassifier (class in sktree)": [[41, "sktree.HonestForestClassifier"]], "apply() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.apply"]], "base_estimator_ (sktree.honestforestclassifier property)": [[41, "sktree.HonestForestClassifier.base_estimator_"]], "decision_path() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.decision_path"]], "estimators_samples_ (sktree.honestforestclassifier property)": [[41, "sktree.HonestForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.honestforestclassifier property)": [[41, "sktree.HonestForestClassifier.feature_importances_"]], "fit() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.fit"]], "get_leaf_node_samples() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.get_metadata_routing"]], "get_params() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.get_params"]], "honest_indices_ (sktree.honestforestclassifier property)": [[41, "sktree.HonestForestClassifier.honest_indices_"]], "partial_fit() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.partial_fit"]], "predict() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.predict"]], "predict_log_proba() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.predict_log_proba"]], "predict_proba() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.predict_proba"]], "predict_quantiles() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.predict_quantiles"]], "score() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.score"]], "set_fit_request() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.set_fit_request"]], "set_params() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.set_params"]], "set_partial_fit_request() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.honestforestclassifier method)": [[41, "sktree.HonestForestClassifier.set_score_request"]], "structure_indices_ (sktree.honestforestclassifier property)": [[41, "sktree.HonestForestClassifier.structure_indices_"]], "multiviewrandomforestclassifier (class in sktree)": [[42, "sktree.MultiViewRandomForestClassifier"]], "apply() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.apply"]], "base_estimator_ (sktree.multiviewrandomforestclassifier property)": [[42, "sktree.MultiViewRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.multiviewrandomforestclassifier property)": [[42, "sktree.MultiViewRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.multiviewrandomforestclassifier property)": [[42, "sktree.MultiViewRandomForestClassifier.feature_importances_"]], "fit() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.get_params"]], "partial_fit() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.partial_fit"]], "predict() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.predict"]], "predict_log_proba() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.predict_quantiles"]], "score() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.score"]], "set_fit_request() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.set_fit_request"]], "set_params() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.multiviewrandomforestclassifier method)": [[42, "sktree.MultiViewRandomForestClassifier.set_score_request"]], "nearestneighborsmetaestimator (class in sktree)": [[43, "sktree.NearestNeighborsMetaEstimator"]], "fit() (sktree.nearestneighborsmetaestimator method)": [[43, "sktree.NearestNeighborsMetaEstimator.fit"]], "get_metadata_routing() (sktree.nearestneighborsmetaestimator method)": [[43, "sktree.NearestNeighborsMetaEstimator.get_metadata_routing"]], "get_params() (sktree.nearestneighborsmetaestimator method)": [[43, "sktree.NearestNeighborsMetaEstimator.get_params"]], "kneighbors() (sktree.nearestneighborsmetaestimator method)": [[43, "sktree.NearestNeighborsMetaEstimator.kneighbors"]], "radius_neighbors() (sktree.nearestneighborsmetaestimator method)": [[43, "sktree.NearestNeighborsMetaEstimator.radius_neighbors"]], "set_params() (sktree.nearestneighborsmetaestimator method)": [[43, "sktree.NearestNeighborsMetaEstimator.set_params"]], "obliquerandomforestclassifier (class in sktree)": [[44, "sktree.ObliqueRandomForestClassifier"]], "apply() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.obliquerandomforestclassifier property)": [[44, "sktree.ObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestclassifier property)": [[44, "sktree.ObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestclassifier property)": [[44, "sktree.ObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.obliquerandomforestclassifier method)": [[44, "sktree.ObliqueRandomForestClassifier.set_score_request"]], "obliquerandomforestregressor (class in sktree)": [[45, "sktree.ObliqueRandomForestRegressor"]], "apply() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.obliquerandomforestregressor property)": [[45, "sktree.ObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.obliquerandomforestregressor property)": [[45, "sktree.ObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.obliquerandomforestregressor property)": [[45, "sktree.ObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.get_params"]], "predict() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.obliquerandomforestregressor method)": [[45, "sktree.ObliqueRandomForestRegressor.set_score_request"]], "patchobliquerandomforestclassifier (class in sktree)": [[46, "sktree.PatchObliqueRandomForestClassifier"]], "apply() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.apply"]], "base_estimator_ (sktree.patchobliquerandomforestclassifier property)": [[46, "sktree.PatchObliqueRandomForestClassifier.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestclassifier property)": [[46, "sktree.PatchObliqueRandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestclassifier property)": [[46, "sktree.PatchObliqueRandomForestClassifier.feature_importances_"]], "fit() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.get_params"]], "partial_fit() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.partial_fit"]], "predict() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.predict"]], "predict_log_proba() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.predict_quantiles"]], "score() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.score"]], "set_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.patchobliquerandomforestclassifier method)": [[46, "sktree.PatchObliqueRandomForestClassifier.set_score_request"]], "patchobliquerandomforestregressor (class in sktree)": [[47, "sktree.PatchObliqueRandomForestRegressor"]], "apply() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.apply"]], "base_estimator_ (sktree.patchobliquerandomforestregressor property)": [[47, "sktree.PatchObliqueRandomForestRegressor.base_estimator_"]], "compute_similarity_matrix() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.compute_similarity_matrix"]], "decision_path() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.patchobliquerandomforestregressor property)": [[47, "sktree.PatchObliqueRandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.patchobliquerandomforestregressor property)": [[47, "sktree.PatchObliqueRandomForestRegressor.feature_importances_"]], "fit() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.get_params"]], "predict() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.predict"]], "predict_quantiles() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.predict_quantiles"]], "score() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.score"]], "set_fit_request() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.set_fit_request"]], "set_params() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.set_params"]], "set_score_request() (sktree.patchobliquerandomforestregressor method)": [[47, "sktree.PatchObliqueRandomForestRegressor.set_score_request"]], "randomforestclassifier (class in sktree)": [[48, "sktree.RandomForestClassifier"]], "apply() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.apply"]], "base_estimator_ (sktree.randomforestclassifier property)": [[48, "sktree.RandomForestClassifier.base_estimator_"]], "decision_path() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.decision_path"]], "estimators_samples_ (sktree.randomforestclassifier property)": [[48, "sktree.RandomForestClassifier.estimators_samples_"]], "feature_importances_ (sktree.randomforestclassifier property)": [[48, "sktree.RandomForestClassifier.feature_importances_"]], "fit() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.fit"]], "get_leaf_node_samples() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.get_metadata_routing"]], "get_params() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.get_params"]], "partial_fit() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.partial_fit"]], "predict() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.predict"]], "predict_log_proba() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.predict_log_proba"]], "predict_proba() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.predict_proba"]], "predict_quantiles() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.predict_quantiles"]], "score() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.score"]], "set_fit_request() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.set_fit_request"]], "set_params() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.set_params"]], "set_partial_fit_request() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.set_partial_fit_request"]], "set_score_request() (sktree.randomforestclassifier method)": [[48, "sktree.RandomForestClassifier.set_score_request"]], "randomforestregressor (class in sktree)": [[49, "sktree.RandomForestRegressor"]], "apply() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.apply"]], "base_estimator_ (sktree.randomforestregressor property)": [[49, "sktree.RandomForestRegressor.base_estimator_"]], "decision_path() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.decision_path"]], "estimators_samples_ (sktree.randomforestregressor property)": [[49, "sktree.RandomForestRegressor.estimators_samples_"]], "feature_importances_ (sktree.randomforestregressor property)": [[49, "sktree.RandomForestRegressor.feature_importances_"]], "fit() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.fit"]], "get_leaf_node_samples() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.get_metadata_routing"]], "get_params() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.get_params"]], "predict() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.predict"]], "predict_quantiles() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.predict_quantiles"]], "score() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.score"]], "set_fit_request() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.set_fit_request"]], "set_params() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.set_params"]], "set_score_request() (sktree.randomforestregressor method)": [[49, "sktree.RandomForestRegressor.set_score_request"]], "unsupervisedobliquerandomforest (class in sktree)": [[50, "sktree.UnsupervisedObliqueRandomForest"]], "apply() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedobliquerandomforest property)": [[50, "sktree.UnsupervisedObliqueRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedobliquerandomforest property)": [[50, "sktree.UnsupervisedObliqueRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedobliquerandomforest property)": [[50, "sktree.UnsupervisedObliqueRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.fit"]], "fit_predict() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.get_params"]], "predict() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.set_output"]], "set_params() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.set_params"]], "transform() (sktree.unsupervisedobliquerandomforest method)": [[50, "sktree.UnsupervisedObliqueRandomForest.transform"]], "unsupervisedrandomforest (class in sktree)": [[51, "sktree.UnsupervisedRandomForest"]], "apply() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.apply"]], "base_estimator_ (sktree.unsupervisedrandomforest property)": [[51, "sktree.UnsupervisedRandomForest.base_estimator_"]], "compute_similarity_matrix() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.compute_similarity_matrix"]], "decision_path() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.decision_path"]], "estimators_samples_ (sktree.unsupervisedrandomforest property)": [[51, "sktree.UnsupervisedRandomForest.estimators_samples_"]], "feature_importances_ (sktree.unsupervisedrandomforest property)": [[51, "sktree.UnsupervisedRandomForest.feature_importances_"]], "fit() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.fit"]], "fit_predict() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.fit_predict"]], "fit_transform() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.fit_transform"]], "get_leaf_node_samples() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.get_leaf_node_samples"]], "get_metadata_routing() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.get_metadata_routing"]], "get_params() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.get_params"]], "predict() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.predict"]], "predict_quantiles() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.predict_quantiles"]], "set_fit_request() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.set_fit_request"]], "set_output() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.set_output"]], "set_params() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.set_params"]], "transform() (sktree.unsupervisedrandomforest method)": [[51, "sktree.UnsupervisedRandomForest.transform"]], "make_gaussian_mixture() (in module sktree.datasets)": [[52, "sktree.datasets.make_gaussian_mixture"]], "make_joint_factor_model() (in module sktree.datasets)": [[53, "sktree.datasets.make_joint_factor_model"]], "make_quadratic_classification() (in module sktree.datasets)": [[54, "sktree.datasets.make_quadratic_classification"]], "conditional_resample() (in module sktree.experimental)": [[55, "sktree.experimental.conditional_resample"]], "cmi_gaussian() (in module sktree.experimental.mutual_info)": [[56, "sktree.experimental.mutual_info.cmi_gaussian"]], "entropy_gaussian() (in module sktree.experimental.mutual_info)": [[57, "sktree.experimental.mutual_info.entropy_gaussian"]], "mi_gaussian() (in module sktree.experimental.mutual_info)": [[58, "sktree.experimental.mutual_info.mi_gaussian"]], "mutual_info_ksg() (in module sktree.experimental)": [[59, "sktree.experimental.mutual_info_ksg"]], "simulate_helix() (in module sktree.experimental.simulate)": [[60, "sktree.experimental.simulate.simulate_helix"]], "simulate_multivariate_gaussian() (in module sktree.experimental.simulate)": [[61, "sktree.experimental.simulate.simulate_multivariate_gaussian"]], "simulate_sphere() (in module sktree.experimental.simulate)": [[62, "sktree.experimental.simulate.simulate_sphere"]], "featureimportanceforestclassifier (class in sktree.stats)": [[63, "sktree.stats.FeatureImportanceForestClassifier"]], "statistic() (sktree.stats.featureimportanceforestclassifier method)": [[63, "sktree.stats.FeatureImportanceForestClassifier.statistic"]], "test() (sktree.stats.featureimportanceforestclassifier method)": [[63, "sktree.stats.FeatureImportanceForestClassifier.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestclassifier property)": [[63, "sktree.stats.FeatureImportanceForestClassifier.train_test_samples_"]], "featureimportanceforestregressor (class in sktree.stats)": [[64, "sktree.stats.FeatureImportanceForestRegressor"]], "statistic() (sktree.stats.featureimportanceforestregressor method)": [[64, "sktree.stats.FeatureImportanceForestRegressor.statistic"]], "test() (sktree.stats.featureimportanceforestregressor method)": [[64, "sktree.stats.FeatureImportanceForestRegressor.test"]], "train_test_samples_ (sktree.stats.featureimportanceforestregressor property)": [[64, "sktree.stats.FeatureImportanceForestRegressor.train_test_samples_"]], "permutationforestclassifier (class in sktree.stats)": [[65, "sktree.stats.PermutationForestClassifier"]], "statistic() (sktree.stats.permutationforestclassifier method)": [[65, "sktree.stats.PermutationForestClassifier.statistic"]], "test() (sktree.stats.permutationforestclassifier method)": [[65, "sktree.stats.PermutationForestClassifier.test"]], "train_test_samples_ (sktree.stats.permutationforestclassifier property)": [[65, "sktree.stats.PermutationForestClassifier.train_test_samples_"]], "permutationforestregressor (class in sktree.stats)": [[66, "sktree.stats.PermutationForestRegressor"]], "statistic() (sktree.stats.permutationforestregressor method)": [[66, "sktree.stats.PermutationForestRegressor.statistic"]], "test() (sktree.stats.permutationforestregressor method)": [[66, "sktree.stats.PermutationForestRegressor.test"]], "train_test_samples_ (sktree.stats.permutationforestregressor property)": [[66, "sktree.stats.PermutationForestRegressor.train_test_samples_"]], "decisiontreeclassifier (class in sktree.tree)": [[67, "sktree.tree.DecisionTreeClassifier"]], "apply() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeclassifier property)": [[67, "sktree.tree.DecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeclassifier method)": [[67, "sktree.tree.DecisionTreeClassifier.set_score_request"]], "decisiontreeregressor (class in sktree.tree)": [[68, "sktree.tree.DecisionTreeRegressor"]], "apply() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.decisiontreeregressor property)": [[68, "sktree.tree.DecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.get_params"]], "predict() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.decisiontreeregressor method)": [[68, "sktree.tree.DecisionTreeRegressor.set_score_request"]], "extratreeclassifier (class in sktree.tree)": [[69, "sktree.tree.ExtraTreeClassifier"]], "apply() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.extratreeclassifier property)": [[69, "sktree.tree.ExtraTreeClassifier.feature_importances_"]], "fit() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.fit"]], "get_depth() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.get_params"]], "partial_fit() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.partial_fit"]], "predict() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.predict_quantiles"]], "score() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.score"]], "set_fit_request() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.extratreeclassifier method)": [[69, "sktree.tree.ExtraTreeClassifier.set_score_request"]], "extratreeregressor (class in sktree.tree)": [[70, "sktree.tree.ExtraTreeRegressor"]], "apply() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.apply"]], "cost_complexity_pruning_path() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.extratreeregressor property)": [[70, "sktree.tree.ExtraTreeRegressor.feature_importances_"]], "fit() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.fit"]], "get_depth() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.get_params"]], "predict() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.predict_quantiles"]], "score() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.score"]], "set_fit_request() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.extratreeregressor method)": [[70, "sktree.tree.ExtraTreeRegressor.set_score_request"]], "honesttreeclassifier (class in sktree.tree)": [[71, "sktree.tree.HonestTreeClassifier"]], "apply() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.apply"]], "cost_complexity_pruning_path() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.honesttreeclassifier property)": [[71, "sktree.tree.HonestTreeClassifier.feature_importances_"]], "fit() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.fit"]], "get_depth() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.get_params"]], "partial_fit() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.partial_fit"]], "predict() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.predict"]], "predict_proba() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.predict_quantiles"]], "score() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.score"]], "set_fit_request() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.honesttreeclassifier method)": [[71, "sktree.tree.HonestTreeClassifier.set_score_request"]], "multiviewdecisiontreeclassifier (class in sktree.tree)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier"]], "apply() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.multiviewdecisiontreeclassifier property)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.multiviewdecisiontreeclassifier method)": [[72, "sktree.tree.MultiViewDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeclassifier (class in sktree.tree)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeclassifier property)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeclassifier method)": [[73, "sktree.tree.ObliqueDecisionTreeClassifier.set_score_request"]], "obliquedecisiontreeregressor (class in sktree.tree)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.obliquedecisiontreeregressor property)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.obliquedecisiontreeregressor method)": [[74, "sktree.tree.ObliqueDecisionTreeRegressor.set_score_request"]], "patchobliquedecisiontreeclassifier (class in sktree.tree)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier"]], "apply() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeclassifier property)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.get_params"]], "partial_fit() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.partial_fit"]], "predict() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict"]], "predict_log_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_log_proba"]], "predict_proba() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_proba"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_params"]], "set_partial_fit_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_partial_fit_request"]], "set_predict_proba_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_proba_request"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeclassifier method)": [[75, "sktree.tree.PatchObliqueDecisionTreeClassifier.set_score_request"]], "patchobliquedecisiontreeregressor (class in sktree.tree)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor"]], "apply() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.apply"]], "compute_similarity_matrix() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.decision_path"]], "feature_importances_ (sktree.tree.patchobliquedecisiontreeregressor property)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.feature_importances_"]], "fit() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.fit"]], "get_depth() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_depth"]], "get_leaf_node_samples() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_metadata_routing"]], "get_n_leaves() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_n_leaves"]], "get_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.get_params"]], "predict() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict"]], "predict_quantiles() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.predict_quantiles"]], "score() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.score"]], "set_fit_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_fit_request"]], "set_params() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_params"]], "set_predict_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_predict_request"]], "set_score_request() (sktree.tree.patchobliquedecisiontreeregressor method)": [[76, "sktree.tree.PatchObliqueDecisionTreeRegressor.set_score_request"]], "unsuperviseddecisiontree (class in sktree.tree)": [[77, "sktree.tree.UnsupervisedDecisionTree"]], "apply() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsuperviseddecisiontree property)": [[77, "sktree.tree.UnsupervisedDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.get_params"]], "predict() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.set_output"]], "set_params() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsuperviseddecisiontree method)": [[77, "sktree.tree.UnsupervisedDecisionTree.transform"]], "unsupervisedobliquedecisiontree (class in sktree.tree)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree"]], "apply() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.apply"]], "compute_similarity_matrix() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.compute_similarity_matrix"]], "cost_complexity_pruning_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.cost_complexity_pruning_path"]], "decision_path() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.decision_path"]], "feature_importances_ (sktree.tree.unsupervisedobliquedecisiontree property)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.feature_importances_"]], "fit_predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_predict"]], "fit_transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.fit_transform"]], "get_depth() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.get_depth"]], "get_leaf_node_samples() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.get_leaf_node_samples"]], "get_metadata_routing() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.get_metadata_routing"]], "get_n_leaves() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.get_n_leaves"]], "get_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.get_params"]], "predict() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.predict"]], "predict_quantiles() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.predict_quantiles"]], "set_fit_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.set_fit_request"]], "set_output() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.set_output"]], "set_params() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.set_params"]], "set_predict_request() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.set_predict_request"]], "transform() (sktree.tree.unsupervisedobliquedecisiontree method)": [[78, "sktree.tree.UnsupervisedObliqueDecisionTree.transform"]], "compute_forest_similarity_matrix() (in module sktree.tree)": [[79, "sktree.tree.compute_forest_similarity_matrix"]]}})